"""
Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É WINIX
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –º—ñ–Ω—ñ-–∞–ø–ø–æ–º —Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é
"""

import logging
import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ URL –º—ñ–Ω—ñ-–∞–ø–ø
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://winixbot.com')
API_BASE_URL = os.getenv('API_BASE_URL', 'https://winixbot.com')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class WinixBot:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å Telegram –±–æ—Ç–∞ WINIX"""

    def __init__(self):
        self.bot = bot
        self.session = None

    async def init_session(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î HTTP —Å–µ—Å—ñ—é"""
        self.session = aiohttp.ClientSession()

    async def close_session(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î HTTP —Å–µ—Å—ñ—é"""
        if self.session:
            await self.session.close()

    async def api_request(self, endpoint, method='GET', data=None):
        """–†–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç –¥–æ API –º—ñ–Ω—ñ-–∞–ø–ø"""
        try:
            url = f"{API_BASE_URL}/api/{endpoint}"

            if method == 'GET':
                async with self.session.get(url) as response:
                    return await response.json()
            elif method == 'POST':
                async with self.session.post(url, json=data) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É: {str(e)}")
            return None

    async def sync_user_with_webapp(self, user_id, user_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤–µ–±-–∞–ø–ø–æ–º"""
        sync_data = {
            'telegram_id': str(user_id),
            'username': user_data.get('username'),
            'first_name': user_data.get('first_name'),
            'last_name': user_data.get('last_name')
        }

        return await self.api_request(
            f'telegram/user/{user_id}/sync',
            method='POST',
            data=sync_data
        )

    async def get_user_referrals(self, user_id):
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return await self.api_request(f'telegram/user/{user_id}/referrals')

    async def send_referral_notification(self, referrer_id, referee_id):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
        notification_data = {
            'referrer_id': str(referrer_id),
            'referee_id': str(referee_id),
            'bonus_amount': 50
        }

        return await self.api_request(
            'telegram/referral/notify',
            method='POST',
            data=notification_data
        )


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç
winix_bot = WinixBot()


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥

@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = message.from_user
        user_id = user.id

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä start (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥)
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        referrer_id = args[0] if args and args[0].isdigit() else None

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤–µ–±-–∞–ø–ø–æ–º
        user_data = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }

        sync_result = await winix_bot.sync_user_with_webapp(user_id, user_data)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöÄ –í—ñ–¥–∫—Ä–∏—Ç–∏ WINIX",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )],
            [
                InlineKeyboardButton(
                    text="üë• –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏",
                    callback_data="my_referrals"
                ),
                InlineKeyboardButton(
                    text="üí∞ –ë–∞–ª–∞–Ω—Å",
                    callback_data="my_balance"
                )
            ],
            [InlineKeyboardButton(
                text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞",
                callback_data="help"
            )]
        ])

        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        welcome_message = f"""
üéâ <b>–í—ñ—Ç–∞—î–º–æ –≤ WINIX!</b>

–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

üéÆ <b>WINIX</b> - —Ü–µ –∑–∞—Ö–æ–ø–ª—é—é—á–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–µ –≤–∏ –º–æ–∂–µ—Ç–µ:
‚Ä¢ üé≤ –ë—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
‚Ä¢ üí∞ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–∞ –ø—Ä–∏–º–Ω–æ–∂—É–≤–∞—Ç–∏ WINIX —Ç–æ–∫–µ–Ω–∏
‚Ä¢ üë• –ó–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –∑–∞—Ä–æ–±–ª—è—Ç–∏
‚Ä¢ üèÜ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–µ–π–¥–∂—ñ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

üöÄ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!
        """

        # –Ø–∫—â–æ —î —Ä–µ—Ñ–µ—Ä–µ—Ä, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ
        if referrer_id:
            welcome_message += f"\nüéÅ –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {referrer_id}!"

        await message.answer(welcome_message, reply_markup=keyboard)

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ backend
        if referrer_id:
            # Backend —Å–∞–º –æ–±—Ä–æ–±–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫ —á–µ—Ä–µ–∑ webhook
            pass

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ start_command: {str(e)}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.callback_query(lambda c: c.data == "my_referrals")
async def my_referrals_callback(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" """
    try:
        user_id = callback.from_user.id

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        referrals_data = await winix_bot.get_user_referrals(user_id)

        if referrals_data and referrals_data.get('status') == 'success':
            data = referrals_data['data']

            message = f"""
üë• <b>–í–∞—à—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å—å–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {data.get('total_referrals', 0)}
‚Ä¢ 1-–π —Ä—ñ–≤–µ–Ω—å: {data.get('level1_count', 0)}
‚Ä¢ 2-–π —Ä—ñ–≤–µ–Ω—å: {data.get('level2_count', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ: {data.get('active_referrals', 0)}

üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫:</b> {data.get('total_earnings', 0)} WINIX

üîó <b>–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>
{data.get('referral_link', '')}

üí° –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–∑—è–º–∏ —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ —Ä–∞–∑–æ–º!
            """

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/referrals")
                )],
                [InlineKeyboardButton(
                    text="üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º",
                    switch_inline_query=f"–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ WINIX! {data.get('referral_link', '')}"
                )],
                [InlineKeyboardButton(
                    text="¬´ –ù–∞–∑–∞–¥",
                    callback_data="main_menu"
                )]
            ])
        else:
            message = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –ù–∞–∑–∞–¥",
                    callback_data="main_menu"
                )]
            ])

        await callback.message.edit_text(message, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ my_referrals_callback: {str(e)}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.")


@dp.callback_query(lambda c: c.data == "my_balance")
async def my_balance_callback(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å" """
    try:
        user_id = callback.from_user.id

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        sync_result = await winix_bot.api_request(f'telegram/user/{user_id}/sync', method='POST')

        if sync_result and sync_result.get('status') == 'success':
            data = sync_result['data']

            message = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

üè¶ <b>WINIX —Ç–æ–∫–µ–Ω–∏:</b> {data.get('balance', 0)}
üé´ <b>–ñ–µ—Ç–æ–Ω–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:</b> {data.get('coins', 0)}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –£—á–∞—Å—Ç–µ–π —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö: {data.get('participations_count', 0)}
‚Ä¢ –í–∏–≥—Ä–∞—à—ñ–≤: {data.get('wins_count', 0)}

üéÆ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –º—ñ–Ω—ñ-–∞–ø–ø –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó!
            """

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üéÆ –í—ñ–¥–∫—Ä–∏—Ç–∏ WINIX",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )],
                [InlineKeyboardButton(
                    text="¬´ –ù–∞–∑–∞–¥",
                    callback_data="main_menu"
                )]
            ])
        else:
            message = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –±–∞–ª–∞–Ω—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –ù–∞–∑–∞–¥",
                    callback_data="main_menu"
                )]
            ])

        await callback.message.edit_text(message, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ my_balance_callback: {str(e)}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.")


@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–º–æ–≥–∞" """
    try:
        message = """
‚ÑπÔ∏è <b>–î–æ–ø–æ–º–æ–≥–∞ WINIX</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>
‚Ä¢ <b>–†–æ–∑—ñ–≥—Ä–∞—à—ñ</b> - –±–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ —Ü—ñ–Ω–Ω—ñ –ø—Ä–∏–∑–∏
‚Ä¢ <b>–°—Ç–µ–π–∫—ñ–Ω–≥</b> - –∑–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –ø—Ä–∏–±—É—Ç–æ–∫
‚Ä¢ <b>–†–µ—Ñ–µ—Ä–∞–ª–∏</b> - –∑–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ –±–æ–Ω—É—Å–∏
‚Ä¢ <b>–ó–∞–≤–¥–∞–Ω–Ω—è</b> - –≤–∏–∫–æ–Ω—É–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥

üí∞ <b>–Ø–∫ –∑–∞—Ä–æ–±–ª—è—Ç–∏:</b>
1. –ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
2. –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ (50 WINIX –∑–∞ –∫–æ–∂–Ω–æ–≥–æ)
3. –°—Ç–∞–≤—Ç–µ —Ç–æ–∫–µ–Ω–∏ –≤ —Å—Ç–µ–π–∫—ñ–Ω–≥
4. –í–∏–∫–æ–Ω—É–π—Ç–µ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è

üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:</b>
‚Ä¢ 10% –≤—ñ–¥ –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ 1-–≥–æ —Ä—ñ–≤–Ω—è
‚Ä¢ 5% –≤—ñ–¥ –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ 2-–≥–æ —Ä—ñ–≤–Ω—è
‚Ä¢ –ë–æ–Ω—É—Å 50 WINIX –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

üë• <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b>
üìß Email: support@winix.com
üí¨ Telegram: @winix_support

üöÄ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –º—ñ–Ω—ñ-–∞–ø–ø –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É!
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöÄ –í—ñ–¥–∫—Ä–∏—Ç–∏ WINIX",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )],
            [InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥",
                callback_data="main_menu"
            )]
        ])

        await callback.message.edit_text(message, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ help_callback: {str(e)}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")


@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user = callback.from_user

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –í—ñ–¥–∫—Ä–∏—Ç–∏ WINIX",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )],
        [
            InlineKeyboardButton(
                text="üë• –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏",
                callback_data="my_referrals"
            ),
            InlineKeyboardButton(
                text="üí∞ –ë–∞–ª–∞–Ω—Å",
                callback_data="my_balance"
            )
        ],
        [InlineKeyboardButton(
            text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞",
            callback_data="help"
        )]
    ])

    message = f"""
üéâ <b>WINIX - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>

–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:
    """

    await callback.message.edit_text(message, reply_markup=keyboard)
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Å—ñ—é
        await winix_bot.init_session()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        webhook_url = os.getenv('WEBHOOK_URL')
        if webhook_url:
            await bot.set_webhook(
                url=f"{webhook_url}/telegram/webhook",
                allowed_updates=["message", "callback_query"]
            )
            logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling —è–∫—â–æ webhook –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π
        if not webhook_url:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling...")
            await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {str(e)}")

    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—é
        await winix_bot.close_session()


if __name__ == "__main__":
    asyncio.run(main())