import os
from supabase import create_client, Client
from dotenv import load_dotenv
import logging
import json
import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

# –î–∞–Ω—ñ –∑ .env
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not SUPABASE_URL or not SUPABASE_KEY:
    logger.error("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SUPABASE_URL –∞–±–æ SUPABASE_ANON_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase: {str(e)}", exc_info=True)
    supabase = None


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Supabase
def retry_supabase(func, max_retries=3, retry_delay=1):
    """
    –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ä–æ–±–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó Supabase –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö

    Args:
        func: –§—É–Ω–∫—Ü—ñ—è, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        retry_delay: –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏ (—Å–µ–∫—É–Ω–¥–∏)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    retries = 0
    last_error = None

    while retries < max_retries:
        try:
            return func()
        except Exception as e:
            last_error = e
            retries += 1
            logger.warning(f"–°–ø—Ä–æ–±–∞ {retries}/{max_retries} –Ω–µ –≤–¥–∞–ª–∞—Å—è: {str(e)}")

            # –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—å
            if retries >= max_retries:
                break

            # –Ü–Ω–∞–∫—à–µ —á–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
            time.sleep(retry_delay)

    # –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è, –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É
    logger.error(f"–£—Å—ñ {max_retries} —Å–ø—Ä–æ–± –Ω–µ –≤–¥–∞–ª–∏—Å—è. –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_error)}")
    return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ telegram_id
def get_user(telegram_id: str):
    """
    –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Supabase –∑–∞ –π–æ–≥–æ Telegram ID

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫, —è–∫—â–æ —Ü–µ –Ω–µ —Ä—è–¥–æ–∫
        telegram_id = str(telegram_id)

        logger.info(f"get_user: –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {telegram_id}")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def fetch_user():
            # –í–∏–≤–æ–¥–∏–º–æ —Ç–∏–ø –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"fetch_user: –¢–∏–ø telegram_id: {type(telegram_id)}, –ó–Ω–∞—á–µ–Ω–Ω—è: {telegram_id}")

            # –Ø–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ä—è–¥–æ–∫ —â–µ —Ä–∞–∑ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
            telegram_id_str = str(telegram_id)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
            try:
                res = supabase.table("winix").select("*").eq("telegram_id", telegram_id_str).execute()
                logger.info(f"fetch_user: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É: {res}")

                if not res.data:
                    logger.warning(f"get_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    return None

                logger.info(f"get_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {telegram_id} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ")
                return res.data[0] if res.data else None
            except Exception as e:
                logger.error(f"fetch_user: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Supabase: {str(e)}")
                return None

        return retry_supabase(fetch_user)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}", exc_info=True)
        return None


# –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def create_user(telegram_id: str, username: str, referrer_id: str = None):
    """
    –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        username: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω—ñ–∫–Ω–µ–π–º)
        referrer_id: ID —Ç–æ–≥–æ, —Ö—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)

    Returns:
        –î–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
        existing_user = get_user(telegram_id)
        if existing_user:
            logger.info(f"create_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ")
            return existing_user

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
        data = {
            "telegram_id": telegram_id,
            "username": username,
            "balance": 0,  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å WINIX
            "coins": 3,  # –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
            "referrer_id": referrer_id,
            "page1_completed": False,
            "newbie_bonus_claimed": False,
            "participations_count": 0,
            "badge_winner": False,
            "badge_beginner": False,
            "badge_rich": False,
            "wins_count": 0  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–≥—Ä–∞—à—ñ–≤
        }

        logger.info(f"create_user: –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id} (username: {username})")
        logger.debug(f"create_user: –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {json.dumps(data)}")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def insert_user():
            res = supabase.table("winix").insert(data).execute()
            logger.info(f"create_user: –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id}")
            return res.data[0] if res.data else None

        result = retry_supabase(insert_user)

        if result:
            logger.info(f"create_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        else:
            logger.error(f"create_user: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}, –º–æ–∂–ª–∏–≤–∞ –ø–æ–º–∏–ª–∫–∞ –≤ Supabase")

        return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}", exc_info=True)
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
def update_balance(telegram_id: str, amount: float):
    """
    –û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É (–¥–æ–¥–∞—î –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ)

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        amount: –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é –¥–ª—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è–º)

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        current_balance = float(user.get("balance", 0))
        new_balance = current_balance + amount

        logger.info(
            f"update_balance: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {telegram_id}: {current_balance} -> {new_balance} (–∑–º—ñ–Ω–∞: {amount})")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def update_user_balance():
            res = supabase.table("winix").update({"balance": new_balance}).eq("telegram_id", telegram_id).execute()
            return res.data[0] if res.data else None

        result = retry_supabase(update_user_balance)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è
        if new_balance >= 50000 and not user.get("badge_rich", False):
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")
            supabase.table("winix").update({"badge_rich": True}).eq("telegram_id", telegram_id).execute()

        return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {telegram_id}: {str(e)}", exc_info=True)
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
def update_coins(telegram_id: str, amount: int):
    """
    –û–Ω–æ–≤–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–æ–¥–∞—î –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó)

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        amount: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é)

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        current_coins = int(user.get("coins", 0))
        new_coins = current_coins + amount
        if new_coins < 0:
            new_coins = 0  # –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤—ñ–¥'—î–º–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é

        logger.info(f"update_coins: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ {telegram_id}: {current_coins} -> {new_coins} (–∑–º—ñ–Ω–∞: {amount})")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def update_user_coins():
            res = supabase.table("winix").update({"coins": new_coins}).eq("telegram_id", telegram_id).execute()
            return res.data[0] if res.data else None

        return retry_supabase(update_user_coins)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ {telegram_id}: {str(e)}", exc_info=True)
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user(telegram_id: str, data: dict):
    """
    –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º–∏ –ø–æ–ª—è–º–∏

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        data: –°–ª–æ–≤–Ω–∏–∫ –∑ –ø–æ–ª—è–º–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        logger.info(f"update_user: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –∑ –ø–æ–ª—è–º–∏: {list(data.keys())}")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def update_user_data():
            res = supabase.table("winix").update(data).eq("telegram_id", telegram_id).execute()
            return res.data[0] if res.data else None

        return retry_supabase(update_user_data)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}", exc_info=True)
        return None


# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
def check_and_update_badges(telegram_id: str):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –æ–Ω–æ–≤–ª—é—î –±–µ–π–¥–∂—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫—Ä–∏—Ç–µ—Ä—ñ—è–º

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        user = get_user(telegram_id)
        if not user:
            logger.warning(f"check_and_update_badges: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        updates = {}

        # –ë–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è - –∑–∞ 5 —É—á–∞—Å—Ç–µ–π –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
        if not user.get("badge_beginner") and user.get("participations_count", 0) >= 5:
            updates["badge_beginner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è")

        # –ë–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è - –∑–∞ 50,000 WINIX
        if not user.get("badge_rich") and float(user.get("balance", 0)) >= 50000:
            updates["badge_rich"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")

        # –ë–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è - —è–∫—â–æ —î –≤–∏–≥—Ä–∞—à—ñ
        if not user.get("badge_winner") and user.get("wins_count", 0) > 0:
            updates["badge_winner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è")

        # –Ø–∫—â–æ —î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö
        if updates:
            logger.info(f"check_and_update_badges: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {updates}")
            return update_user(telegram_id, updates)

        return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–π–¥–∂—ñ–≤ {telegram_id}: {str(e)}", exc_info=True)
        return None


# –î–æ–¥–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
def add_participation(telegram_id: str, raffle_id: str, token_amount: int = 1):
    """
    –î–æ–¥–∞—î –∑–∞–ø–∏—Å –ø—Ä–æ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        raffle_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        token_amount: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1)

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤
        current_coins = int(user.get("coins", 0))
        if current_coins < token_amount:
            logger.error(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ {telegram_id} (–Ω–∞—è–≤–Ω–æ {current_coins}, –ø–æ—Ç—Ä—ñ–±–Ω–æ {token_amount})")
            return None

        # –ó–Ω—ñ–º–∞—î–º–æ –∂–µ—Ç–æ–Ω–∏
        new_coins = current_coins - token_amount

        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–µ–π
        current_participations = int(user.get("participations_count", 0))
        new_participations = current_participations + 1

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        updates = {
            "coins": new_coins,
            "participations_count": new_participations
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è
        if new_participations >= 5 and not user.get("badge_beginner", False):
            updates["badge_beginner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è –∑–∞ 5 —É—á–∞—Å—Ç–µ–π")

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        logger.info(f"add_participation: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ {raffle_id}")
        res_user = update_user(telegram_id, updates)

        # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ (—è–∫—â–æ —î —Ç–∞–±–ª–∏—Ü—è)
        res_participation = None
        try:
            participation_data = {
                "telegram_id": telegram_id,
                "raffle_id": raffle_id,
                "token_amount": token_amount
            }

            logger.info(
                f"add_participation: –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ {raffle_id}")

            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
            def insert_participation():
                insert_res = supabase.table("raffleParticipations").insert(participation_data).execute()
                return insert_res.data[0] if insert_res.data else None

            res_participation = retry_supabase(insert_participation)

            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∑—è–≤ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ {raffle_id} –∑ {token_amount} –∂–µ—Ç–æ–Ω–∞–º–∏")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ —É—á–∞—Å—Ç—å: {str(e)}", exc_info=True)

        return {
            "user": res_user,
            "participation": res_participation
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–∞—Å—Ç—ñ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –¥–ª—è {telegram_id}: {str(e)}", exc_info=True)
        return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_raffle_history(telegram_id: str, limit: int = 10):
    """
    –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —É—á–∞—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)

    Returns:
        –°–ø–∏—Å–æ–∫ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∞–±–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return []

        logger.info(f"get_user_raffle_history: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è {telegram_id}")

        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó RPC, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
        try:
            def get_history_rpc():
                rpc_res = supabase.rpc('get_user_raffle_history',
                                       {'user_id': telegram_id, 'history_limit': limit}).execute()
                return rpc_res.data or []

            history = retry_supabase(get_history_rpc)
            if history:
                logger.info(f"get_user_raffle_history: –û—Ç—Ä–∏–º–∞–Ω–æ {len(history)} –∑–∞–ø–∏—Å—ñ–≤ —á–µ—Ä–µ–∑ RPC")
                return history
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É RPC get_user_raffle_history: {str(e)}", exc_info=True)

        # –Ø–∫—â–æ RPC –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
        try:
            def get_history_direct():
                direct_res = supabase.table("raffleParticipations").select("*").eq("telegram_id", telegram_id).order(
                    "participated_at", desc=True).limit(limit).execute()
                return direct_res.data or []

            history = retry_supabase(get_history_direct)
            logger.info(f"get_user_raffle_history: –û—Ç—Ä–∏–º–∞–Ω–æ {len(history)} –∑–∞–ø–∏—Å—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç")
            return history
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ RaffleParticipations: {str(e)}", exc_info=True)
            return []
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ {telegram_id}: {str(e)}", exc_info=True)
        return []


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase
def test_supabase_connection():
    """
    –¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    """
    try:
        if not SUPABASE_URL or not SUPABASE_KEY:
            return {
                "success": False,
                "message": "–í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SUPABASE_URL –∞–±–æ SUPABASE_ANON_KEY",
                "details": {
                    "SUPABASE_URL": bool(SUPABASE_URL),
                    "SUPABASE_KEY": bool(SUPABASE_KEY)
                }
            }

        if not supabase:
            return {
                "success": False,
                "message": "–ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ",
                "details": None
            }

        # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç
        try:
            start_time = time.time()
            res = supabase.table("winix").select("count").limit(1).execute()
            end_time = time.time()
            response_time = end_time - start_time

            return {
                "success": True,
                "message": "–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase —É—Å–ø—ñ—à–Ω–µ",
                "details": {
                    "response_time_ms": round(response_time * 1000, 2),
                    "tables_available": ["winix", "raffleParticipations", "transactions"]
                }
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É: {str(e)}",
                "details": {
                    "error_type": type(e).__name__,
                    "error_details": str(e)
                }
            }
    except Exception as e:
        return {
            "success": False,
            "message": f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}",
            "details": None
        }


# –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def test_create_user(telegram_id: str, username: str):
    """
    –¢–µ—Å—Ç—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: –¢–µ—Å—Ç–æ–≤–∏–π ID Telegram
        username: –¢–µ—Å—Ç–æ–≤–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    """
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        connection_test = test_supabase_connection()
        if not connection_test["success"]:
            return {
                "success": False,
                "message": "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ç–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –ø—Ä–æ–±–ª–µ–º–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase",
                "details": connection_test
            }

        start_time = time.time()

        # –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        result = create_user(telegram_id, username)

        end_time = time.time()
        response_time = end_time - start_time

        if result:
            return {
                "success": True,
                "message": f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ",
                "details": {
                    "user": result,
                    "response_time_ms": round(response_time * 1000, 2)
                }
            }
        else:
            return {
                "success": False,
                "message": f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}",
                "details": {
                    "response_time_ms": round(response_time * 1000, 2)
                }
            }
    except Exception as e:
        return {
            "success": False,
            "message": f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}",
            "details": {
                "error_type": type(e).__name__,
                "error_details": str(e)
            }
        }


# –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_settings(telegram_id: str):
    """
    –û—Ç—Ä–∏–º—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        # –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        settings = {
            "username": user.get("username", "WINIX User"),
            "avatar_id": user.get("avatar_id"),
            "avatar_url": user.get("avatar_url"),
            "language": user.get("language", "uk"),
            "notifications_enabled": user.get("notifications_enabled", True),
            "password_hash": user.get("password_hash")
        }

        return settings
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
def get_daily_bonus_status(telegram_id: str):
    """
    –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        from datetime import datetime

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —â–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
        daily_bonuses = user.get("daily_bonuses", {})

        # –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ–Ω—É—Å–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
        if not daily_bonuses:
            daily_bonuses = {
                "last_claimed_date": None,
                "claimed_days": [],
                "current_day": 1
            }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ
        today = datetime.now().strftime("%Y-%m-%d")
        last_date = daily_bonuses.get("last_claimed_date")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —É —Ü–∏–∫–ª—ñ (1-7)
        current_day = daily_bonuses.get("current_day", 1)
        claimed_days = daily_bonuses.get("claimed_days", [])

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—É–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–Ω—è
        reward_amount = current_day * 10  # –î–µ–Ω—å 1 = 10, –î–µ–Ω—å 2 = 20, —ñ —Ç.–¥.

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å
        can_claim = today != last_date

        return {
            "currentDay": current_day,
            "claimedDays": claimed_days,
            "canClaim": can_claim,
            "rewardAmount": reward_amount
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –¥–ª—è {telegram_id}: {str(e)}")
        return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å
def claim_daily_bonus(telegram_id: str, day: int):
    """
    –ù–∞—Ä–∞—Ö–æ–≤—É—î —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        day: –î–µ–Ω—å —Ü–∏–∫–ª—É (1-7), —è–∫–∏–π –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        from datetime import datetime

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —â–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
        daily_bonuses = user.get("daily_bonuses", {})

        # –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ–Ω—É—Å–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
        if not daily_bonuses:
            daily_bonuses = {
                "last_claimed_date": None,
                "claimed_days": [],
                "current_day": 1
            }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ
        today = datetime.now().strftime("%Y-%m-%d")
        last_date = daily_bonuses.get("last_claimed_date")

        # –Ø–∫—â–æ –±–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ
        if last_date == today:
            return {
                "status": "already_claimed",
                "message": "–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ"
            }

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —É —Ü–∏–∫–ª—ñ (1-7)
        current_day = daily_bonuses.get("current_day", 1)
        claimed_days = daily_bonuses.get("claimed_days", [])

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –¥–µ–Ω—å —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –ø–æ—Ç–æ—á–Ω–∏–º
        if day != current_day:
            return {
                "status": "error",
                "message": f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–µ–Ω—å! –û—á—ñ–∫—É–≤–∞–≤—Å—è –¥–µ–Ω—å {current_day}, –æ—Ç—Ä–∏–º–∞–Ω–æ {day}"
            }

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—É–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–Ω—è
        reward_amount = current_day * 10  # –î–µ–Ω—å 1 = 10, –î–µ–Ω—å 2 = 20, —ñ —Ç.–¥.

        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
        current_balance = float(user.get("balance", 0))
        new_balance = current_balance + reward_amount

        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ–Ω—É—Å–∏
        claimed_days.append(current_day)

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å (—Ü–∏–∫–ª—ñ—á–Ω–æ –≤—ñ–¥ 1 –¥–æ 7)
        next_day = current_day + 1
        if next_day > 7:
            next_day = 1

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ
        updated_bonuses = {
            "last_claimed_date": today,
            "claimed_days": claimed_days,
            "current_day": next_day
        }

        update_user(telegram_id, {
            "balance": new_balance,
            "daily_bonuses": updated_bonuses
        })

        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = {
            "telegram_id": telegram_id,
            "type": "reward",
            "amount": reward_amount,
            "description": f"–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å (–î–µ–Ω—å {current_day})",
            "status": "completed"
        }

        if supabase:
            supabase.table("transactions").insert(transaction).execute()

        return {
            "status": "success",
            "message": f"–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ: +{reward_amount} WINIX",
            "reward": reward_amount,
            "newBalance": new_balance
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –¥–ª—è {telegram_id}: {str(e)}")
        return None


# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É
def verify_social_subscription(telegram_id: str, platform: str):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (twitter, telegram, youtube, discord, instagram)

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        social_tasks = user.get("social_tasks", {})

        # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
        if social_tasks.get(platform, False):
            return {
                "status": "already_completed",
                "message": "–¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"
            }

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
        reward_amounts = {
            "twitter": 50,
            "telegram": 80,
            "youtube": 50,
            "discord": 60,
            "instagram": 70
        }

        reward_amount = reward_amounts.get(platform, 50)

        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
        current_balance = float(user.get("balance", 0))
        new_balance = current_balance + reward_amount

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
        if not social_tasks:
            social_tasks = {}
        social_tasks[platform] = True

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ
        update_user(telegram_id, {
            "balance": new_balance,
            "social_tasks": social_tasks
        })

        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = {
            "telegram_id": telegram_id,
            "type": "reward",
            "amount": reward_amount,
            "description": f"–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ {platform}",
            "status": "completed"
        }

        if supabase:
            supabase.table("transactions").insert(transaction).execute()

        return {
            "status": "success",
            "message": f"–ü—ñ–¥–ø–∏—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ {reward_amount} WINIX",
            "reward": reward_amount,
            "newBalance": new_balance
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {str(e)}")
        return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
def get_referral_tasks_status(telegram_id: str):
    """
    –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        referral_count = 0
        if supabase:
            try:
                referrals_res = supabase.table("winix").select("count").eq("referrer_id", telegram_id).execute()
                referral_count = referrals_res.count if hasattr(referrals_res, 'count') else 0
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {str(e)}")

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        referral_tasks = user.get("referral_tasks", {})

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ —ó—Ö —Ü—ñ–ª—ñ
        tasks = [
            {"id": "invite-friends", "target": 5, "reward": 300},
            {"id": "invite-friends-10", "target": 10, "reward": 700},
            {"id": "invite-friends-25", "target": 25, "reward": 1500},
            {"id": "invite-friends-100", "target": 100, "reward": 5000}
        ]

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ
        completed_tasks = []

        for task in tasks:
            task_id = task["id"]
            target = task["target"]

            # –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–µ, —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ >= —Ü—ñ–ª—å–æ–≤–æ—ó –∞–±–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ = True
            if referral_count >= target or referral_tasks.get(task_id, False):
                completed_tasks.append(task_id)

        return {
            "referralCount": referral_count,
            "completedTasks": completed_tasks,
            "tasks": tasks
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {telegram_id}: {str(e)}")
        return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
def claim_referral_reward(telegram_id: str, task_id: str, reward_amount: float):
    """
    –ù–∞—Ä–∞—Ö–æ–≤—É—î –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        task_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è
        reward_amount: –°—É–º–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏

    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        referral_tasks = user.get("referral_tasks", {})

        # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
        if referral_tasks.get(task_id, False):
            return {
                "status": "already_claimed",
                "message": "–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è"
            }

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        referral_count = 0
        if supabase:
            try:
                referrals_res = supabase.table("winix").select("count").eq("referrer_id", telegram_id).execute()
                referral_count = referrals_res.count if hasattr(referrals_res, 'count') else 0
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {str(e)}")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        target_map = {
            "invite-friends": 5,
            "invite-friends-10": 10,
            "invite-friends-25": 25,
            "invite-friends-100": 100
        }

        target = target_map.get(task_id, 0)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        if referral_count < target:
            return {
                "status": "not_completed",
                "message": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è. –ü–æ—Ç—Ä—ñ–±–Ω–æ {target}, –Ω–∞—è–≤–Ω–æ {referral_count}"
            }

        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
        current_balance = float(user.get("balance", 0))
        new_balance = current_balance + reward_amount

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
        if not referral_tasks:
            referral_tasks = {}
        referral_tasks[task_id] = True

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ
        update_user(telegram_id, {
            "balance": new_balance,
            "referral_tasks": referral_tasks
        })

        # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        transaction = {
            "telegram_id": telegram_id,
            "type": "reward",
            "amount": reward_amount,
            "description": f"–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {task_id}",
            "status": "completed"
        }

        if supabase:
            supabase.table("transactions").insert(transaction).execute()

        return {
            "status": "success",
            "message": f"–í–∏–Ω–∞–≥–æ—Ä–æ–¥—É –æ—Ç—Ä–∏–º–∞–Ω–æ: {reward_amount} WINIX",
            "reward": reward_amount,
            "newBalance": new_balance
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è {telegram_id}: {str(e)}")
        return None


# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
def is_valid_referral_code(code: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ–¥ —î –≤–∞–ª—ñ–¥–Ω–∏–º ID Telegram

    Args:
        code: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ (Telegram ID)

    Returns:
        True, —è–∫—â–æ –∫–æ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π, —ñ–Ω–∞–∫—à–µ False
    """
    try:
        return len(code) > 5
    except:
        return False


# –Ø–∫—â–æ —Ü–µ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É, –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ç–µ—Å—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase...")

    connection_result = test_supabase_connection()
    print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –∑'—î–¥–Ω–∞–Ω–Ω—è: {connection_result['success']}")
    print(f"‚úì –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {connection_result['message']}")

    if connection_result['success']:
        test_id = "7066583465"  # –¢–µ—Å—Ç–æ–≤–∏–π ID
        print(f"\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {test_id}...")
        creation_result = test_create_user(test_id, "test_user")
        print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç: {creation_result['success']}")
        print(f"‚úì –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {creation_result['message']}")