import os
from supabase import create_client, Client
from dotenv import load_dotenv
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

# –î–∞–Ω—ñ –∑ .env
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not SUPABASE_URL or not SUPABASE_KEY:
    logger.warning("‚ö†Ô∏è –£–í–ê–ì–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SUPABASE_URL –∞–±–æ SUPABASE_ANON_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase: {str(e)}")
    supabase = None


# –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ telegram_id
def get_user(telegram_id: str):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        res = supabase.table("Winix").select("*").eq("telegram_id", telegram_id).execute()
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return None


# –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def create_user(telegram_id: str, username: str, referrer_id: str = None):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
        existing_user = get_user(telegram_id)
        if existing_user:
            return existing_user

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
        data = {
            "telegram_id": telegram_id,
            "username": username,
            "balance": 0,  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å WINIX
            "coins": 3,  # –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
            "referrer_id": referrer_id,
            "page1_completed": False,
            "newbie_bonus_claimed": False,
            "participations_count": 0,
            "badge_winner": False,
            "badge_beginner": False,
            "badge_rich": False,
            "wins_count": 0  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–≥—Ä–∞—à—ñ–≤
        }

        res = supabase.table("Winix").insert(data).execute()
        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id}")
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
def update_balance(telegram_id: str, amount: float):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        current_balance = float(user.get("balance", 0))
        new_balance = current_balance + amount

        res = supabase.table("Winix").update({"balance": new_balance}).eq("telegram_id", telegram_id).execute()
        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: +{amount}, –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è
        if new_balance >= 50000 and not user.get("badge_rich", False):
            supabase.table("Winix").update({"badge_rich": True}).eq("telegram_id", telegram_id).execute()
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")

        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {telegram_id}: {str(e)}")
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
def update_coins(telegram_id: str, amount: int):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        current_coins = int(user.get("coins", 0))
        new_coins = current_coins + amount
        if new_coins < 0:
            new_coins = 0  # –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤—ñ–¥'—î–º–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é

        res = supabase.table("Winix").update({"coins": new_coins}).eq("telegram_id", telegram_id).execute()
        logger.info(
            f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∂–µ—Ç–æ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {'+' if amount >= 0 else ''}{amount}, –Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_coins}")
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ {telegram_id}: {str(e)}")
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user(telegram_id: str, data: dict):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        res = supabase.table("Winix").update(data).eq("telegram_id", telegram_id).execute()
        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return None


# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
def check_and_update_badges(telegram_id: str):
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        updates = {}

        # –ë–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è - –∑–∞ 5 —É—á–∞—Å—Ç–µ–π –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
        if not user.get("badge_beginner") and user.get("participations_count", 0) >= 5:
            updates["badge_beginner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è")

        # –ë–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è - –∑–∞ 50,000 WINIX
        if not user.get("badge_rich") and float(user.get("balance", 0)) >= 50000:
            updates["badge_rich"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")

        # –ë–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è - —è–∫—â–æ —î –≤–∏–≥—Ä–∞—à—ñ
        if not user.get("badge_winner") and user.get("wins_count", 0) > 0:
            updates["badge_winner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è")

        # –Ø–∫—â–æ —î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö
        if updates:
            return update_user(telegram_id, updates)

        return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–π–¥–∂—ñ–≤ {telegram_id}: {str(e)}")
        return None


# –î–æ–¥–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
def add_participation(telegram_id: str, raffle_id: str, token_amount: int = 1):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤
        current_coins = int(user.get("coins", 0))
        if current_coins < token_amount:
            logger.error(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ {telegram_id} (–Ω–∞—è–≤–Ω–æ {current_coins}, –ø–æ—Ç—Ä—ñ–±–Ω–æ {token_amount})")
            return None

        # –ó–Ω—ñ–º–∞—î–º–æ –∂–µ—Ç–æ–Ω–∏
        new_coins = current_coins - token_amount

        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–µ–π
        current_participations = int(user.get("participations_count", 0))
        new_participations = current_participations + 1

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        updates = {
            "coins": new_coins,
            "participations_count": new_participations
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è
        if new_participations >= 5 and not user.get("badge_beginner", False):
            updates["badge_beginner"] = True

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        res_user = supabase.table("Winix").update(updates).eq("telegram_id", telegram_id).execute()

        # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ (—è–∫—â–æ —î —Ç–∞–±–ª–∏—Ü—è)
        try:
            participation_data = {
                "telegram_id": telegram_id,
                "raffle_id": raffle_id,
                "token_amount": token_amount
            }

            res_participation = supabase.table("RaffleParticipations").insert(participation_data).execute()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∑—è–≤ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ {raffle_id} –∑ {token_amount} –∂–µ—Ç–æ–Ω–∞–º–∏")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ —É—á–∞—Å—Ç—å: {str(e)}")
            res_participation = None

        return {
            "user": res_user.data[0] if res_user.data else None,
            "participation": res_participation.data[0] if res_participation and hasattr(res_participation,
                                                                                        'data') else None
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–∞—Å—Ç—ñ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –¥–ª—è {telegram_id}: {str(e)}")
        return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_raffle_history(telegram_id: str, limit: int = 10):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return []

        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó RPC, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
        try:
            res = supabase.rpc('get_user_raffle_history', {'user_id': telegram_id, 'history_limit': limit}).execute()
            if res.data:
                return res.data
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É RPC get_user_raffle_history: {str(e)}")

        # –Ø–∫—â–æ RPC –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
        try:
            res = supabase.table("RaffleParticipations").select("*").eq("telegram_id", telegram_id).order(
                "participated_at", desc=True).limit(limit).execute()
            return res.data if res.data else []
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ RaffleParticipations: {str(e)}")
            return []
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ {telegram_id}: {str(e)}")
        return []

    # –î–æ–¥–∞–π—Ç–µ —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É supabase_client.py

    def get_user_settings(telegram_id: str):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        try:
            user = get_user(telegram_id)
            if not user:
                return None

            # –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            settings = {
                "username": user.get("username", "WINIX User"),
                "avatar_id": user.get("avatar_id"),
                "avatar_url": user.get("avatar_url"),
                "language": user.get("language", "uk"),
                "notifications_enabled": user.get("notifications_enabled", True),
                "password_hash": user.get("password_hash")
            }

            return settings
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
            return None

    def get_daily_bonus_status(telegram_id: str):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
        """
        try:
            user = get_user(telegram_id)
            if not user:
                return None

            from datetime import datetime

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —â–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
            daily_bonuses = user.get("daily_bonuses", {})

            # –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ–Ω—É—Å–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
            if not daily_bonuses:
                daily_bonuses = {
                    "last_claimed_date": None,
                    "claimed_days": [],
                    "current_day": 1
                }

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ
            today = datetime.now().strftime("%Y-%m-%d")
            last_date = daily_bonuses.get("last_claimed_date")

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —É —Ü–∏–∫–ª—ñ (1-7)
            current_day = daily_bonuses.get("current_day", 1)
            claimed_days = daily_bonuses.get("claimed_days", [])

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—É–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–Ω—è
            reward_amount = current_day * 10  # –î–µ–Ω—å 1 = 10, –î–µ–Ω—å 2 = 20, —ñ —Ç.–¥.

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å
            can_claim = today != last_date

            return {
                "currentDay": current_day,
                "claimedDays": claimed_days,
                "canClaim": can_claim,
                "rewardAmount": reward_amount
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –¥–ª—è {telegram_id}: {str(e)}")
            return None

    def claim_daily_bonus(telegram_id: str, day: int):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å
        """
        try:
            user = get_user(telegram_id)
            if not user:
                return None

            from datetime import datetime

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —â–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
            daily_bonuses = user.get("daily_bonuses", {})

            # –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ–Ω—É—Å–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
            if not daily_bonuses:
                daily_bonuses = {
                    "last_claimed_date": None,
                    "claimed_days": [],
                    "current_day": 1
                }

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ
            today = datetime.now().strftime("%Y-%m-%d")
            last_date = daily_bonuses.get("last_claimed_date")

            # –Ø–∫—â–æ –±–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ
            if last_date == today:
                return {
                    "status": "already_claimed",
                    "message": "–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ"
                }

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —É —Ü–∏–∫–ª—ñ (1-7)
            current_day = daily_bonuses.get("current_day", 1)
            claimed_days = daily_bonuses.get("claimed_days", [])

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –¥–µ–Ω—å —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –ø–æ—Ç–æ—á–Ω–∏–º
            if day != current_day:
                return {
                    "status": "error",
                    "message": f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–µ–Ω—å! –û—á—ñ–∫—É–≤–∞–≤—Å—è –¥–µ–Ω—å {current_day}, –æ—Ç—Ä–∏–º–∞–Ω–æ {day}"
                }

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—É–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–Ω—è
            reward_amount = current_day * 10  # –î–µ–Ω—å 1 = 10, –î–µ–Ω—å 2 = 20, —ñ —Ç.–¥.

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            current_balance = float(user.get("balance", 0))
            new_balance = current_balance + reward_amount

            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ–Ω—É—Å–∏
            claimed_days.append(current_day)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å (—Ü–∏–∫–ª—ñ—á–Ω–æ –≤—ñ–¥ 1 –¥–æ 7)
            next_day = current_day + 1
            if next_day > 7:
                next_day = 1

            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ
            updated_bonuses = {
                "last_claimed_date": today,
                "claimed_days": claimed_days,
                "current_day": next_day
            }

            update_user(telegram_id, {
                "balance": new_balance,
                "daily_bonuses": updated_bonuses
            })

            # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            transaction = {
                "telegram_id": telegram_id,
                "type": "reward",
                "amount": reward_amount,
                "description": f"–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å (–î–µ–Ω—å {current_day})",
                "status": "completed"
            }

            if supabase:
                supabase.table("Transactions").insert(transaction).execute()

            return {
                "status": "success",
                "message": f"–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ: +{reward_amount} WINIX",
                "reward": reward_amount,
                "newBalance": new_balance
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –¥–ª—è {telegram_id}: {str(e)}")
            return None

    def verify_social_subscription(telegram_id: str, platform: str):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É
        """
        try:
            user = get_user(telegram_id)
            if not user:
                return None

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            social_tasks = user.get("social_tasks", {})

            # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
            if social_tasks.get(platform, False):
                return {
                    "status": "already_completed",
                    "message": "–¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"
                }

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
            reward_amounts = {
                "twitter": 50,
                "telegram": 80,
                "youtube": 50,
                "discord": 60,
                "instagram": 70
            }

            reward_amount = reward_amounts.get(platform, 50)

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            current_balance = float(user.get("balance", 0))
            new_balance = current_balance + reward_amount

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
            if not social_tasks:
                social_tasks = {}
            social_tasks[platform] = True

            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ
            update_user(telegram_id, {
                "balance": new_balance,
                "social_tasks": social_tasks
            })

            # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            transaction = {
                "telegram_id": telegram_id,
                "type": "reward",
                "amount": reward_amount,
                "description": f"–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ {platform}",
                "status": "completed"
            }

            if supabase:
                supabase.table("Transactions").insert(transaction).execute()

            return {
                "status": "success",
                "message": f"–ü—ñ–¥–ø–∏—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ {reward_amount} WINIX",
                "reward": reward_amount,
                "newBalance": new_balance
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {str(e)}")
            return None

    def get_referral_tasks_status(telegram_id: str):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        """
        try:
            user = get_user(telegram_id)
            if not user:
                return None

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            referral_count = 0
            if supabase:
                try:
                    referrals_res = supabase.table("Winix").select("count").eq("referrer_id", telegram_id).execute()
                    referral_count = referrals_res.count if hasattr(referrals_res, 'count') else 0
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {str(e)}")

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            referral_tasks = user.get("referral_tasks", {})

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ —ó—Ö —Ü—ñ–ª—ñ
            tasks = [
                {"id": "invite-friends", "target": 5, "reward": 300},
                {"id": "invite-friends-10", "target": 10, "reward": 700},
                {"id": "invite-friends-25", "target": 25, "reward": 1500},
                {"id": "invite-friends-100", "target": 100, "reward": 5000}
            ]

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ
            completed_tasks = []

            for task in tasks:
                task_id = task["id"]
                target = task["target"]

                # –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–µ, —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ >= —Ü—ñ–ª—å–æ–≤–æ—ó –∞–±–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ = True
                if referral_count >= target or referral_tasks.get(task_id, False):
                    completed_tasks.append(task_id)

            return {
                "referralCount": referral_count,
                "completedTasks": completed_tasks,
                "tasks": tasks
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {telegram_id}: {str(e)}")
            return None

    def claim_referral_reward(telegram_id: str, task_id: str, reward_amount: float):
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        """
        try:
            user = get_user(telegram_id)
            if not user:
                return None

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            referral_tasks = user.get("referral_tasks", {})

            # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
            if referral_tasks.get(task_id, False):
                return {
                    "status": "already_claimed",
                    "message": "–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è"
                }

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            referral_count = 0
            if supabase:
                try:
                    referrals_res = supabase.table("Winix").select("count").eq("referrer_id", telegram_id).execute()
                    referral_count = referrals_res.count if hasattr(referrals_res, 'count') else 0
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {str(e)}")

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            target_map = {
                "invite-friends": 5,
                "invite-friends-10": 10,
                "invite-friends-25": 25,
                "invite-friends-100": 100
            }

            target = target_map.get(task_id, 0)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            if referral_count < target:
                return {
                    "status": "not_completed",
                    "message": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è. –ü–æ—Ç—Ä—ñ–±–Ω–æ {target}, –Ω–∞—è–≤–Ω–æ {referral_count}"
                }

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            current_balance = float(user.get("balance", 0))
            new_balance = current_balance + reward_amount

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
            if not referral_tasks:
                referral_tasks = {}
            referral_tasks[task_id] = True

            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ
            update_user(telegram_id, {
                "balance": new_balance,
                "referral_tasks": referral_tasks
            })

            # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            transaction = {
                "telegram_id": telegram_id,
                "type": "reward",
                "amount": reward_amount,
                "description": f"–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {task_id}",
                "status": "completed"
            }

            if supabase:
                supabase.table("Transactions").insert(transaction).execute()

            return {
                "status": "success",
                "message": f"–í–∏–Ω–∞–≥–æ—Ä–æ–¥—É –æ—Ç—Ä–∏–º–∞–Ω–æ: {reward_amount} WINIX",
                "reward": reward_amount,
                "newBalance": new_balance
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è {telegram_id}: {str(e)}")
            return None

    def add_referral(telegram_id: str, referral_code: str):
        """
        –î–æ–¥–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        """
        try:
            user = get_user(telegram_id)
            if not user:
                return None

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π
            # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            if not is_valid_referral_code(referral_code):
                return {
                    "status": "error",
                    "message": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥"
                }

            # –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä—ñ—ó —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è referrer_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–¥–æ–º referral_code

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            referral_count = 0
            if supabase:
                try:
                    referrals_res = supabase.table("Winix").select("count").eq("referrer_id", telegram_id).execute()
                    referral_count = referrals_res.count if hasattr(referrals_res, 'count') else 0
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {str(e)}")

            # –°–∏–º—É–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            new_referrals = referral_count + 1

            return {
                "status": "success",
                "message": f"–î—Ä—É–≥–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ!",
                "referralCount": new_referrals
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è {telegram_id}: {str(e)}")
            return None

    def is_valid_referral_code(code: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–¥ —î –≤–∞–ª—ñ–¥–Ω–∏–º ID Telegram
        # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        try:
            return len(code) > 5
        except:
            return False