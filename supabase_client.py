import os
from supabase import create_client, Client
from dotenv import load_dotenv
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

# –î–∞–Ω—ñ –∑ .env
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not SUPABASE_URL or not SUPABASE_KEY:
    logger.warning("‚ö†Ô∏è –£–í–ê–ì–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SUPABASE_URL –∞–±–æ SUPABASE_ANON_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase: {str(e)}")
    supabase = None


# –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ telegram_id
def get_user(telegram_id: str):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        res = supabase.table("Winix").select("*").eq("telegram_id", telegram_id).execute()
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return None


# –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def create_user(telegram_id: str, username: str, referrer_id: str = None):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
        existing_user = get_user(telegram_id)
        if existing_user:
            return existing_user

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
        data = {
            "telegram_id": telegram_id,
            "username": username,
            "balance": 0,  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å WINIX
            "coins": 3,  # –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
            "referrer_id": referrer_id,
            "page1_completed": False,
            "newbie_bonus_claimed": False,
            "participations_count": 0,
            "badge_winner": False,
            "badge_beginner": False,
            "badge_rich": False,
            "wins_count": 0  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–≥—Ä–∞—à—ñ–≤
        }

        res = supabase.table("Winix").insert(data).execute()
        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id}")
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
def update_balance(telegram_id: str, amount: float):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        current_balance = float(user.get("balance", 0))
        new_balance = current_balance + amount

        res = supabase.table("Winix").update({"balance": new_balance}).eq("telegram_id", telegram_id).execute()
        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: +{amount}, –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è
        if new_balance >= 50000 and not user.get("badge_rich", False):
            supabase.table("Winix").update({"badge_rich": True}).eq("telegram_id", telegram_id).execute()
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")

        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {telegram_id}: {str(e)}")
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
def update_coins(telegram_id: str, amount: int):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        current_coins = int(user.get("coins", 0))
        new_coins = current_coins + amount
        if new_coins < 0:
            new_coins = 0  # –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤—ñ–¥'—î–º–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é

        res = supabase.table("Winix").update({"coins": new_coins}).eq("telegram_id", telegram_id).execute()
        logger.info(
            f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∂–µ—Ç–æ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {'+' if amount >= 0 else ''}{amount}, –Ω–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_coins}")
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ {telegram_id}: {str(e)}")
        return None


# –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user(telegram_id: str, data: dict):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        res = supabase.table("Winix").update(data).eq("telegram_id", telegram_id).execute()
        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
        return res.data[0] if res.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return None


# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
def check_and_update_badges(telegram_id: str):
    try:
        user = get_user(telegram_id)
        if not user:
            return None

        updates = {}

        # –ë–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è - –∑–∞ 5 —É—á–∞—Å—Ç–µ–π –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
        if not user.get("badge_beginner") and user.get("participations_count", 0) >= 5:
            updates["badge_beginner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è")

        # –ë–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è - –∑–∞ 50,000 WINIX
        if not user.get("badge_rich") and float(user.get("balance", 0)) >= 50000:
            updates["badge_rich"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")

        # –ë–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è - —è–∫—â–æ —î –≤–∏–≥—Ä–∞—à—ñ
        if not user.get("badge_winner") and user.get("wins_count", 0) > 0:
            updates["badge_winner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è")

        # –Ø–∫—â–æ —î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö
        if updates:
            return update_user(telegram_id, updates)

        return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–π–¥–∂—ñ–≤ {telegram_id}: {str(e)}")
        return None


# –î–æ–¥–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
def add_participation(telegram_id: str, raffle_id: str, token_amount: int = 1):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤
        current_coins = int(user.get("coins", 0))
        if current_coins < token_amount:
            logger.error(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ {telegram_id} (–Ω–∞—è–≤–Ω–æ {current_coins}, –ø–æ—Ç—Ä—ñ–±–Ω–æ {token_amount})")
            return None

        # –ó–Ω—ñ–º–∞—î–º–æ –∂–µ—Ç–æ–Ω–∏
        new_coins = current_coins - token_amount

        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–µ–π
        current_participations = int(user.get("participations_count", 0))
        new_participations = current_participations + 1

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        updates = {
            "coins": new_coins,
            "participations_count": new_participations
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è
        if new_participations >= 5 and not user.get("badge_beginner", False):
            updates["badge_beginner"] = True

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        res_user = supabase.table("Winix").update(updates).eq("telegram_id", telegram_id).execute()

        # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ (—è–∫—â–æ —î —Ç–∞–±–ª–∏—Ü—è)
        try:
            participation_data = {
                "telegram_id": telegram_id,
                "raffle_id": raffle_id,
                "token_amount": token_amount
            }

            res_participation = supabase.table("RaffleParticipations").insert(participation_data).execute()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∑—è–≤ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ {raffle_id} –∑ {token_amount} –∂–µ—Ç–æ–Ω–∞–º–∏")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ —É—á–∞—Å—Ç—å: {str(e)}")
            res_participation = None

        return {
            "user": res_user.data[0] if res_user.data else None,
            "participation": res_participation.data[0] if res_participation and hasattr(res_participation,
                                                                                        'data') else None
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–∞—Å—Ç—ñ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –¥–ª—è {telegram_id}: {str(e)}")
        return None


# –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_raffle_history(telegram_id: str, limit: int = 10):
    try:
        if not supabase:
            logger.error("‚ùå –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return []

        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó RPC, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
        try:
            res = supabase.rpc('get_user_raffle_history', {'user_id': telegram_id, 'history_limit': limit}).execute()
            if res.data:
                return res.data
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É RPC get_user_raffle_history: {str(e)}")

        # –Ø–∫—â–æ RPC –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
        try:
            res = supabase.table("RaffleParticipations").select("*").eq("telegram_id", telegram_id).order(
                "participated_at", desc=True).limit(limit).execute()
            return res.data if res.data else []
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ RaffleParticipations: {str(e)}")
            return []
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ {telegram_id}: {str(e)}")
        return []