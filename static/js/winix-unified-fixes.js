/**
 * WINIX UNIFIED FIXES - –°–µ—Ä–≤–µ—Ä–Ω–∞ –≤–µ—Ä—Å—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 *
 * –¶—è –≤–µ—Ä—Å—ñ—è —Å–∫—Ä–∏–ø—Ç—É –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º Flask —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î
 * –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –£—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ API.
 */

(function() {
    console.log("üöÄ WINIX UNIFIED FIXES (–°–µ—Ä–≤–µ—Ä–Ω–∞ –≤–µ—Ä—Å—ñ—è): –ó–∞–ø—É—Å–∫ –æ–±'—î–¥–Ω–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏...");

    // ====== –ë–ê–ó–û–í–Ü –ó–ú–Ü–ù–ù–Ü ======

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º
    let isProcessingRaffle = false;

    // ====== –ë–ê–ó–û–í–Ü –£–¢–ò–õ–Ü–¢–ò ======

    /**
     * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
     */
    function getCurrentLanguage() {
        // –°–ø—Ä–æ–±–∞ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ HTML/BODY –µ–ª–µ–º–µ–Ω—Ç–∏
        const htmlEl = document.documentElement;
        const bodyEl = document.body;

        if (htmlEl.lang) {
            return htmlEl.lang;
        } else if (bodyEl.className.includes('lang-')) {
            const langMatch = bodyEl.className.match(/lang-([a-z]{2})/);
            if (langMatch) return langMatch[1];
        }

        // –°–ø—Ä–æ–±–∞ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL
        if (window.location.href.includes('/ru/')) {
            return 'ru';
        } else if (window.location.href.includes('/en/')) {
            return 'en';
        }

        // –°–ø—Ä–æ–±–∞ 3: –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        const pageText = document.body.textContent.toLowerCase();
        let ruCount = 0;
        let enCount = 0;

        const ruWords = ['–ø–æ–ª—É—á–∏—Ç—å', '–±–æ–Ω—É—Å', '–Ω–æ–≤–∏—á–∫–∞–º', '—Ä–æ–∑—ã–≥—Ä—ã—à', '—É—á–∞—Å—Ç–∏–µ'];
        const enWords = ['receive', 'bonus', 'newbie', 'raffle', 'participate'];

        ruWords.forEach(word => {
            if (pageText.includes(word)) ruCount++;
        });

        enWords.forEach(word => {
            if (pageText.includes(word)) enCount++;
        });

        if (ruCount > enCount) {
            return 'ru';
        } else if (enCount > ruCount) {
            return 'en';
        }

        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        return 'uk';
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
     */
    function getLocalizedText(uk, ru, en) {
        const lang = getCurrentLanguage();

        if (lang === 'ru') return ru;
        if (lang === 'en') return en;
        return uk; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
     */
    function showToast(message, duration = 3000) {
        console.log(`TOAST: ${message}`);

        // –°–ø—Ä–æ–±–∞ 1: –ß–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        if (window.showToast) {
            window.showToast(message, duration);
            return;
        }

        // –°–ø—Ä–æ–±–∞ 2: –ß–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é showNotification
        if (window.showNotification) {
            window.showNotification(message, 'info', duration);
            return;
        }

        // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Å—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç toast –≤—Ä—É—á–Ω—É
        let toast = document.getElementById('toast-message');
        if (!toast) {
            toast = document.createElement('div');
            toast.id = 'toast-message';
            toast.className = 'toast-message';

            // –ë–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è toast-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ
            if (!document.querySelector('style#dynamic-toast-styles')) {
                const style = document.createElement('style');
                style.id = 'dynamic-toast-styles';
                style.textContent = `
                    .toast-message {
                        position: fixed;
                        top: 20px;
                        left: 50%;
                        transform: translateX(-50%);
                        background: linear-gradient(135deg, #1A1A2E, #0F3460);
                        color: #ffffff;
                        padding: 0.75rem 1.5rem;
                        border-radius: 12px;
                        z-index: 1000;
                        box-shadow: 0 4px 15px rgba(0,0,0,0.5);
                        border: 1px solid rgba(78, 181, 247, 0.2);
                        opacity: 0;
                        transition: all 0.3s ease;
                        font-size: 0.9375rem;
                        display: flex;
                        align-items: center;
                        max-width: 350px;
                        width: 90%;
                    }
                    
                    .toast-message.show {
                        opacity: 1;
                        transform: translate(-50%, 10px);
                    }
                `;
                document.head.appendChild(style);
            }

            document.body.appendChild(toast);
        }

        toast.textContent = message;
        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
        }, duration);
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
     * @param {string} url URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞
     * @param {string} method HTTP-–º–µ—Ç–æ–¥ (GET, POST, etc.)
     * @param {Object} body –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É (–¥–ª—è POST/PUT)
     * @param {Function} callback –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    function apiRequest(url, method = 'GET', body = null, callback = null) {
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.classList.add('show');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = {
            'Content-Type': 'application/json'
        };

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        const options = {
            method: method,
            headers: headers,
            credentials: 'same-origin'
        };

        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
        if (body && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
            options.body = JSON.stringify(body);
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        fetch(url, options)
            .then(response => {
                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (spinner) spinner.classList.remove('show');

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —è–∫—â–æ –≤—ñ–Ω —î
                if (callback && typeof callback === 'function') {
                    callback(null, data);
                }
            })
            .catch(error => {
                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
                if (spinner) spinner.classList.remove('show');

                console.error('API request error:', error);

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –∑ –ø–æ–º–∏–ª–∫–æ—é
                if (callback && typeof callback === 'function') {
                    callback(error, null);
                }
            });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Function} callback –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    function getUserData(callback) {
        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = document.getElementById('user-id')?.textContent || '12345678';

        // –ó–∞–ø–∏—Ç –¥–æ API
        apiRequest(`/api/user/${userId}`, 'GET', null, (error, data) => {
            if (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
                if (callback) callback(error, null);
                return;
            }

            if (data && data.status === 'success' && data.data) {
                if (callback) callback(null, data.data);
            } else {
                if (callback) callback(new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'), null);
            }
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Function} callback –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    function getRaffles(callback) {
        apiRequest('/api/raffles', 'GET', null, (error, data) => {
            if (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
                if (callback) callback(error, null);
                return;
            }

            if (data && data.status === 'success' && data.data) {
                if (callback) callback(null, data.data);
            } else {
                if (callback) callback(new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'), null);
            }
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Function} callback –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    function getRaffleHistory(callback) {
        const userId = document.getElementById('user-id')?.textContent || '12345678';

        apiRequest(`/api/user/${userId}/raffle-history`, 'GET', null, (error, data) => {
            if (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
                if (callback) callback(error, null);
                return;
            }

            if (data && data.status === 'success' && data.data) {
                if (callback) callback(null, data.data);
            } else {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
                if (callback) callback(null, []);
            }
        });
    }

    /**
     * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —á–µ—Ä–µ–∑ API
     * @param {string} raffleId ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleType –¢–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É ('main', 'daily', etc.)
     * @param {number} tokenAmount –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
     * @param {Function} callback –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    function participateInRaffleAPI(raffleId, raffleType, tokenAmount, callback) {
        const userId = document.getElementById('user-id')?.textContent || '12345678';

        const requestBody = {
            userId: userId,
            raffleId: raffleId,
            raffleType: raffleType,
            tokenAmount: tokenAmount
        };

        apiRequest('/api/participate', 'POST', requestBody, (error, data) => {
            if (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:', error);
                if (callback) callback(error, null);
                return;
            }

            if (data && data.status === 'success') {
                if (callback) callback(null, data);
            } else {
                if (callback) callback(new Error(data?.message || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ'), null);
            }
        });
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function updateRaffleEndDates() {
        // –û—Ç—Ä–∏–º–∞—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        getRaffles((error, raffles) => {
            if (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
                return;
            }

            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            const mainEndElement = document.getElementById('main-end-time');
            const dailyEndElement = document.getElementById('daily-end-time');

            // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –ø—Ä–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            if (raffles.mainRaffle && mainEndElement) {
                mainEndElement.textContent = raffles.mainRaffle.endDate;
            }

            // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –ø—Ä–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            if (raffles.dailyRaffle && dailyEndElement) {
                dailyEndElement.textContent = raffles.dailyRaffle.endDate;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
            if (raffles.mainRaffle) {
                updateProgressBar(raffles.mainRaffle);
            }
        });
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    function updateProgressBar(raffleData) {
        const progressBar = document.querySelector('.progress');
        if (!progressBar) return;

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑ –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        const progressPercent = raffleData.progressPercent || 29;

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        progressBar.style.width = `${progressPercent}%`;

        console.log(`–ü—Ä–æ–≥—Ä–µ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ ${progressPercent}%`);
        return progressPercent;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
     */
    function updateRaffleParticipantsCount() {
        getRaffles((error, raffles) => {
            if (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤:', error);
                return;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            const mainCount = raffles.mainRaffle?.participants || 1;
            const mainCountElements = document.querySelectorAll('.participants-count');
            mainCountElements.forEach(el => {
                if (el) el.textContent = mainCount.toString();
            });

            const mainModalParticipants = document.getElementById('main-participants');
            if (mainModalParticipants) mainModalParticipants.textContent = mainCount.toString();

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            const dailyCount = raffles.dailyRaffle?.participants || 1;
            const dailyModalParticipants = document.getElementById('daily-participants');
            if (dailyModalParticipants) {
                dailyModalParticipants.textContent = dailyCount.toString();
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
            if (raffles.mainRaffle) {
                updateProgressBar(raffles.mainRaffle);
            }
        });
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —á–µ—Ä–µ–∑ UI
     */
    function participateInRaffle(raffleId, raffleType, inputId) {
        if (isProcessingRaffle) {
            console.log("üö´ –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—é");
            showToast(getLocalizedText(
                '–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...',
                '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
                'Please wait, your request is being processed...'
            ));
            return;
        }

        isProcessingRaffle = true;
        console.log(`üéÆ –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId} —Ç–∏–ø—É ${raffleType}`);

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
            const tokenAmount = parseInt(document.getElementById(inputId)?.value || '1') || 1;

            // –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º
            const allButtons = document.querySelectorAll('.join-button, .mini-raffle-button');
            allButtons.forEach(btn => btn.disabled = true);

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            participateInRaffleAPI(raffleId, raffleType, tokenAmount, (error, result) => {
                if (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:', error);
                    showToast(getLocalizedText(
                        '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                        'An error occurred while participating in the raffle. Please try again.'
                    ), 3000);
                } else {
                    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                    const modalId = raffleType === 'daily' ? 'daily-raffle-modal' : 'main-raffle-modal';
                    const modal = document.getElementById(modalId);
                    if (modal) modal.classList.remove('open');

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ç–∞ —É—á–∞—Å–Ω–∏–∫—ñ–≤
                    updateUIAfterParticipation(result.data);

                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    showToast(getLocalizedText(
                        '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                        '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
                        'You have successfully participated in the raffle'
                    ), 3000);
                }

                // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                allButtons.forEach(btn => btn.disabled = false);
                isProcessingRaffle = false;
            });
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:', error);
            showToast(getLocalizedText(
                '–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.',
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
                'A critical error has occurred. Try reloading the page.'
            ), 3000);
            isProcessingRaffle = false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     */
    function updateUIAfterParticipation(data) {
        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
        if (data.newCoinsBalance !== undefined) {
            const coinsElements = document.querySelectorAll('#user-coins, .coins-amount, .coins-value');
            coinsElements.forEach(element => {
                if (element) element.textContent = data.newCoinsBalance;
            });
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
        if (data.raffleType === 'main' && data.participantsCount) {
            const mainCountElements = document.querySelectorAll('.participants-count');
            mainCountElements.forEach(el => {
                if (el) el.textContent = data.participantsCount.toString();
            });

            const mainModalParticipants = document.getElementById('main-participants');
            if (mainModalParticipants) {
                mainModalParticipants.textContent = data.participantsCount.toString();
            }
        } else if (data.raffleType === 'daily' && data.participantsCount) {
            const dailyModalParticipants = document.getElementById('daily-participants');
            if (dailyModalParticipants) {
                dailyModalParticipants.textContent = data.participantsCount.toString();
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç—ñ, —è–∫—â–æ –≤–æ–Ω–∞ —î
        if (data.participationsCount !== undefined) {
            const participationsElement = document.querySelector('.stat-card:nth-child(1) .stat-value');
            if (participationsElement) {
                participationsElement.textContent = data.participationsCount.toString();
            }
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (data.bonusAmount && data.bonusAmount > 0) {
            setTimeout(() => {
                showToast(getLocalizedText(
                    `–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ${data.bonusAmount} WINIX!`,
                    `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${data.bonusAmount} WINIX!`,
                    `Congratulations! You received ${data.bonusAmount} WINIX!`
                ), 3000);
            }, 3000);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    function overrideOpenRaffleDetails() {
        console.log("–ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É");

        window.openRaffleDetails = function(raffleId, raffleType) {
            console.log(`–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${raffleId}, —Ç–∏–ø: ${raffleType}`);

            // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É
            getUserData((error, userData) => {
                if (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
                    showToast(getLocalizedText(
                        '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                        'Error getting data. Please try again.'
                    ), 3000);
                    return;
                }

                const coinsBalance = userData.coins || 0;

                if (coinsBalance < 1) {
                    showToast(getLocalizedText(
                        '–î–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —â–æ–Ω–∞–π–º–µ–Ω—à–µ 1 –∂–µ—Ç–æ–Ω',
                        '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º 1 –∂–µ—Ç–æ–Ω',
                        'You need at least 1 coin to participate in the raffle'
                    ), 3000);
                    return;
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
                getRaffles((err, raffles) => {
                    if (err) {
                        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', err);
                        showToast(getLocalizedText(
                            '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                            '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                            'Error getting raffle data. Please try again.'
                        ), 3000);
                        return;
                    }

                    // –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
                    const raffleData = raffleType === 'daily' ? raffles.dailyRaffle : raffles.mainRaffle;

                    if (!raffleData) {
                        console.error(`–†–æ–∑—ñ–≥—Ä–∞—à —Ç–∏–ø—É ${raffleType} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                        return;
                    }

                    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                    const modalId = raffleType === 'daily' ? 'daily-raffle-modal' : 'main-raffle-modal';
                    const modal = document.getElementById(modalId);
                    if (!modal) {
                        console.error(`–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ id ${modalId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                        return;
                    }

                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
                    const inputId = raffleType === 'daily' ? 'daily-token-amount' : 'main-token-amount';
                    const input = document.getElementById(inputId);
                    if (input) input.value = '1';

                    const btnId = raffleType === 'daily' ? 'daily-join-btn' : 'main-join-btn';
                    const joinBtn = document.getElementById(btnId);
                    if (joinBtn) {
                        joinBtn.setAttribute('data-raffle-id', raffleId);
                        joinBtn.setAttribute('data-raffle-type', raffleType);
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
                    if (raffleType === 'daily') {
                        const titleElement = document.getElementById('daily-modal-title');
                        if (titleElement) titleElement.textContent = raffleData.title || getLocalizedText('–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à', 'Daily Giveaway');

                        const prizeElement = document.getElementById('daily-prize-value');
                        if (prizeElement) prizeElement.textContent = raffleData.prize || '30,000 WINIX (15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤)';

                        const participantsElement = document.getElementById('daily-participants');
                        if (participantsElement) participantsElement.textContent = raffleData.participants?.toString() || '1';

                        const endDateElement = document.getElementById('daily-end-time');
                        if (endDateElement) endDateElement.textContent = raffleData.endDate || '';
                    } else {
                        const titleElement = document.getElementById('main-modal-title');
                        if (titleElement) titleElement.textContent = raffleData.title || getLocalizedText('–ì—Ä–∞–Ω–¥ –†–æ–∑—ñ–≥—Ä–∞—à', '–ì—Ä–∞–Ω–¥ –†–æ–∑—ã–≥—Ä—ã—à', 'Grand Giveaway');

                        const prizeElement = document.getElementById('main-prize-value');
                        if (prizeElement) prizeElement.textContent = raffleData.prize || '250 USDT + 130,000 WINIX (10 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤)';

                        const participantsElement = document.getElementById('main-participants');
                        if (participantsElement) participantsElement.textContent = raffleData.participants?.toString() || '1';

                        const endDateElement = document.getElementById('main-end-time');
                        if (endDateElement) endDateElement.textContent = raffleData.endDate || '';
                    }

                    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                    modal.classList.add('open');
                });
            });
        };
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     */
    function claimNewbieBonus() {
        const userId = document.getElementById('user-id')?.textContent || '12345678';

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.classList.add('show');

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
        apiRequest(`/api/user/${userId}/claim-newbie-bonus`, 'POST', {}, (error, result) => {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (spinner) spinner.classList.remove('show');

            if (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞:', error);
                showToast(getLocalizedText(
                    '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                    '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    'Error receiving bonus. Please try again.'
                ), 3000);
                return;
            }

            if (result.status === 'already_claimed') {
                // –ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ
                showToast(getLocalizedText(
                    '–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!',
                    '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!',
                    'You have already received the newbie bonus!'
                ), 3000);

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å—É
                const newbieButtons = document.querySelectorAll('.mini-raffle-button[data-raffle-id="newbie"]');
                newbieButtons.forEach(button => {
                    button.textContent = getLocalizedText('–û—Ç—Ä–∏–º–∞–Ω–æ', '–ü–æ–ª—É—á–µ–Ω–æ', 'Received');
                    button.disabled = true;
                    button.style.opacity = '0.6';
                    button.style.cursor = 'default';
                });

                markNewbieBonus();
            } else if (result.status === 'success') {
                // –ë–æ–Ω—É—Å —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ
                showToast(getLocalizedText(
                    `–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ${result.data.amount} WINIX —è–∫ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!`,
                    `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${result.data.amount} WINIX –∫–∞–∫ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!`,
                    `Congratulations! You received ${result.data.amount} WINIX as a newbie bonus!`
                ), 3000);

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å WINIX
                const tokenElements = document.querySelectorAll('#user-tokens, #main-balance, .balance-amount, #current-balance, .balance-value');
                tokenElements.forEach(element => {
                    if (element) {
                        if (element.id === 'main-balance' && element.innerHTML && element.innerHTML.includes('main-balance-icon')) {
                            element.innerHTML = `${result.data.newBalance.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" width="100" height="100" alt="WINIX"></span>`;
                        } else {
                            element.textContent = result.data.newBalance.toFixed(2);
                        }
                    }
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å—É
                const newbieButtons = document.querySelectorAll('.mini-raffle-button[data-raffle-id="newbie"]');
                newbieButtons.forEach(button => {
                    button.textContent = getLocalizedText('–û—Ç—Ä–∏–º–∞–Ω–æ', '–ü–æ–ª—É—á–µ–Ω–æ', 'Received');
                    button.disabled = true;
                    button.style.opacity = '0.6';
                    button.style.cursor = 'default';
                });

                // –î–æ–¥–∞—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ–Ω—É—Å—É
                setTimeout(() => {
                    markNewbieBonus();
                }, 300);
            } else {
                // –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞
                showToast(getLocalizedText(
                    '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    'Failed to receive bonus. Please try again.'
                ), 3000);
            }
        });
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —ñ –º–∞—Ä–∫—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     */
    function markNewbieBonus() {
        console.log("–ü–æ—à—É–∫ –±–ª–æ–∫—É –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É");

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É
        const watermarkText = getLocalizedText('–û–¢–†–ò–ú–ê–ù–û', '–ü–û–õ–£–ß–ï–ù–û', 'RECEIVED');

        // –®—É–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –±–æ–Ω—É—Å–æ–º –Ω–æ–≤–∞—á–∫–∞
        let foundContainer = false;

        // 1. –®—É–∫–∞—î–º–æ –∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–º data-raffle-id
        const newbieButtons = document.querySelectorAll('.mini-raffle-button[data-raffle-id="newbie"]');
        newbieButtons.forEach(button => {
            const container = button.closest('.mini-raffle');
            if (container) {
                addWatermarkToContainer(container, watermarkText);
                foundContainer = true;
            }
        });

        // 2. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —à—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        if (!foundContainer) {
            const allContainers = document.querySelectorAll('.mini-raffle');
            allContainers.forEach(container => {
                const text = container.textContent.toLowerCase();

                if (text.includes('–±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞–º') ||
                    text.includes('–±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞–º') ||
                    text.includes('newbie bonus') ||
                    (text.includes('–±–æ–Ω—É—Å') && text.includes('150 winix')) ||
                    (text.includes('bonus') && text.includes('150 winix'))) {

                    addWatermarkToContainer(container, watermarkText);
                    foundContainer = true;
                }
            });
        }

        console.log(foundContainer ? "–ó–Ω–∞–π–¥–µ–Ω–æ —ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ –±–ª–æ–∫ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞" : "–ë–ª–æ–∫ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    function addWatermarkToContainer(container, text) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
        if (container.querySelector('.danger-watermark')) {
            return;
        }

        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container.classList.add('has-watermark');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É
        const watermark = document.createElement('div');
        watermark.className = 'danger-watermark';
        watermark.style.position = 'absolute';
        watermark.style.top = '0';
        watermark.style.left = '0';
        watermark.style.right = '0';
        watermark.style.bottom = '0';
        watermark.style.display = 'flex';
        watermark.style.justifyContent = 'center';
        watermark.style.alignItems = 'center';
        watermark.style.pointerEvents = 'none';
        watermark.style.overflow = 'hidden';

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–º–Ω–∏–π –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
        const overlay = document.createElement('div');
        overlay.className = 'danger-watermark-overlay';
        overlay.style.position = 'absolute';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.width = '100%';
        overlay.style.height = '100%';
        overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É —Å—Ç—Ä—ñ—á–∫—É
        const textElement = document.createElement('div');
        textElement.className = 'danger-watermark-text';
        textElement.textContent = text;
        textElement.style.position = 'absolute';
        textElement.style.width = '250%';
        textElement.style.textAlign = 'center';
        textElement.style.transform = 'rotate(-35deg)';
        textElement.style.fontSize = '24px';
        textElement.style.fontWeight = '900';
        textElement.style.letterSpacing = '2px';
        textElement.style.color = 'black';
        textElement.style.background = 'repeating-linear-gradient(45deg, rgba(255, 205, 0, 0.8), rgba(255, 205, 0, 0.8) 10px, rgba(0, 0, 0, 0.8) 10px, rgba(0, 0, 0, 0.8) 20px)';
        textElement.style.padding = '10px 0';
        textElement.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.7)';
        textElement.style.textShadow = '-1px -1px 0 white, 1px -1px 0 white, -1px 1px 0 white, 1px 1px 0 white';
        textElement.style.whiteSpace = 'nowrap';

        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
        watermark.appendChild(overlay);
        watermark.appendChild(textElement);

        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—å position –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if (getComputedStyle(container).position === 'static') {
            container.style.position = 'relative';
        }

        container.appendChild(watermark);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É —ñ –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ —ó—ó
        const button = container.querySelector('.mini-raffle-button');
        if (button) {
            // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç
            button.textContent = getLocalizedText('–û—Ç—Ä–∏–º–∞–Ω–æ', '–ü–æ–ª—É—á–µ–Ω–æ', 'Received');

            // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
            button.disabled = true;
            button.style.opacity = '0.6';
            button.style.cursor = 'default';
            button.style.backgroundColor = 'rgba(100, 100, 100, 0.3)';
            button.style.backgroundImage = 'none';

            // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫, —è–∫–∏–π –ø–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            newButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                showToast(getLocalizedText(
                    '–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!',
                    '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!',
                    'You have already received the newbie bonus!'
                ), 2000);

                return false;
            });
        }
    }

    /**
     * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –≤—Å—ñ—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
     */
    function fixCloseButtons() {
        console.log("–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –≤—Å—ñ—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω");

        // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
        const modals = document.querySelectorAll('.raffle-modal, .daily-raffle-modal');

        modals.forEach(modal => {
            console.log("–û–±—Ä–æ–±–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:", modal.id || modal.className);

            // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è (√ó)
            const closeButton = modal.querySelector('.modal-close');
            if (closeButton) {
                console.log("–í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è √ó");

                // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newCloseButton = closeButton.cloneNode(true);
                closeButton.parentNode.replaceChild(newCloseButton, closeButton);

                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
                newCloseButton.addEventListener('click', function() {
                    console.log("–ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ –∑–∞–∫—Ä–∏—Ç—Ç—è, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ");
                    modal.classList.remove('open');
                });
            }

            // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä–∏—Ç–∏" –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –ø–æ ID
            const closeActionButtons = modal.querySelectorAll('.join-button');
            closeActionButtons.forEach(button => {
                if (button.id && button.id.includes('close') ||
                    button.textContent.includes('–ó–∞–∫—Ä–∏—Ç–∏') ||
                    button.textContent.includes('–∑–∞–∫—Ä–∏—Ç–∏') ||
                    button.textContent.includes('–ó–ê–ö–†–ò–¢–ò') ||
                    button.textContent.includes('Close')) {

                    console.log("–í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É '–ó–∞–∫—Ä–∏—Ç–∏':", button.textContent);

                    // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                    const newButton = button.cloneNode(true);
                    button.parentNode.replaceChild(newButton, button);

                    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
                    newButton.addEventListener('click', function() {
                        console.log("–ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ '–ó–∞–∫—Ä–∏—Ç–∏', –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ");
                        modal.classList.remove('open');
                    });
                }
            });
        });

        console.log("–ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ");
    }

    /**
     * –ü–æ–∫—Ä–∞—â–µ–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function enhanceRaffleHistory() {
        console.log("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        const historyContainer = document.getElementById('history-container');
        if (!historyContainer) return;

        // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        getRaffleHistory((error, history) => {
            if (error) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);
                return;
            }

            // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            historyContainer.innerHTML = '';

            // –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è, –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (!history || history.length === 0) {
                historyContainer.innerHTML = '<div class="empty-history">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö</div>';
                return;
            }

            // –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Å —ñ—Å—Ç–æ—Ä—ñ—ó
            history.forEach((item, index) => {
                const historyCard = document.createElement('div');
                historyCard.className = 'history-card';
                historyCard.innerHTML = `
                    <div class="history-date">${item.date}</div>
                    <div class="history-prize">${item.prize}</div>
                    <div class="history-winners">${item.result}</div>
                    <div class="history-status ${item.status}">${item.status === 'won' ? '–í–∏–≥—Ä–∞–Ω–æ' : '–£—á–∞—Å—Ç—å'}</div>
                    <div class="view-details-hint">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</div>
                `;

                // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
                historyCard.style.cursor = 'pointer';
                historyCard.addEventListener('click', () => {
                    console.log(`–ö–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á—Ü—ñ —ñ—Å—Ç–æ—Ä—ñ—ó #${index + 1}`, history[index]);
                    createRaffleDetailsModal(history[index]);
                });

                // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                historyContainer.appendChild(historyCard);
            });
        });
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º-–≤–µ—Ä—Å—ñ—ó –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    function createRaffleDetailsModal(raffleData) {
        console.log("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º-–≤–µ—Ä—Å—ñ—ó –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É", raffleData);

        // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, —è–∫—â–æ –≤–æ–Ω–æ —î
        let existingModal = document.getElementById('raffle-history-modal');
        if (existingModal) {
            existingModal.remove();
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.id = 'raffle-history-modal';
        modal.className = 'raffle-modal';

        // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">–î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h2>
                    <span class="modal-close">√ó</span>
                </div>
                
                <div class="prize-details">
                    <div class="detail-item">
                        <div class="detail-label">–î–∞—Ç–∞:</div>
                        <div class="detail-value">${raffleData.date}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–ü—Ä–∏–∑:</div>
                        <div class="detail-value">${raffleData.prize}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–°—Ç–∞—Ç—É—Å:</div>
                        <div class="detail-value ${raffleData.status}">${raffleData.result}</div>
                    </div>
                </div>
                
                <div class="participation-info">
                    <h3>–ü–µ—Ä–µ–º–æ–∂—Ü—ñ</h3>
                    <div style="margin-top: 16px; max-height: 280px; overflow-y: auto; padding-right: 8px;">
                        ${generateWinnersListHTML(raffleData.winners)}
                    </div>
                </div>
                
                <button class="join-button" id="close-history-btn">–ó–ê–ö–†–ò–¢–ò</button>
            </div>
        `;

        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        document.body.appendChild(modal);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        const closeButton = modal.querySelector('.modal-close');
        if (closeButton) {
            closeButton.addEventListener('click', function() {
                modal.classList.remove('open');
                setTimeout(() => modal.remove(), 300);
            });
        }

        const closeActionButton = modal.querySelector('#close-history-btn');
        if (closeActionButton) {
            closeActionButton.addEventListener('click', function() {
                modal.classList.remove('open');
                setTimeout(() => modal.remove(), 300);
            });
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        requestAnimationFrame(() => {
            modal.classList.add('open');
        });

        return modal;
    }

    /**
     * –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è HTML –¥–ª—è —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
     */
    function generateWinnersListHTML(winners) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–µ—Ä–µ–º–æ–∂—Ü—ñ
        if (!winners || winners.length === 0) {
            return '<div class="no-winners">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—è</div>';
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        return winners.map(winner => {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –º—ñ—Å—Ü—è (top-1, top-2, top-3)
            const placeClass = winner.place <= 3 ? `top-${winner.place}` : '';
            const bgColor = winner.place === 1 ? 'linear-gradient(145deg, #FFD700, #FFA500)' :
                            winner.place === 2 ? 'linear-gradient(145deg, #C0C0C0, #A9A9A9)' :
                            winner.place === 3 ? 'linear-gradient(145deg, #CD7F32, #A0522D)' :
                            'rgba(0, 0, 0, 0.3)';
            const boxShadow = winner.place <= 3 ?
                            `box-shadow: 0 0 8px ${winner.place === 1 ? 'rgba(255, 215, 0, 0.5)' : 
                                          winner.place === 2 ? 'rgba(192, 192, 192, 0.5)' : 
                                          'rgba(205, 127, 50, 0.5)'};` : '';

            // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
            return `
                <div style="display: flex; align-items: center; background: ${winner.isCurrentUser ? 'linear-gradient(145deg, rgba(30, 113, 161, 0.5), rgba(0, 201, 167, 0.3))' : 'rgba(30, 39, 70, 0.5)'};
                           border-radius: 8px; padding: 10px; margin-bottom: 8px; ${winner.isCurrentUser ? 'border: 1px solid rgba(0, 201, 167, 0.5);' : ''}">
                    <div style="width: 36px; height: 36px; min-width: 36px; background: ${bgColor};
                             border-radius: 50%; display: flex; justify-content: center; align-items: center; margin-right: 12px;
                             ${boxShadow}">
                        <span style="font-weight: bold; color: white; text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);">${winner.place}</span>
                    </div>
                    <div style="flex: 1;">
                        <div style="font-weight: bold; color: ${winner.isCurrentUser ? '#FFD700' : 'white'};
                                   ${winner.isCurrentUser ? 'text-shadow: 0 0 3px rgba(255, 215, 0, 0.5);' : ''}">
                            ${winner.username}
                        </div>
                        <div style="font-size: 0.8rem; color: rgba(255, 255, 255, 0.7);">
                            ID: ${winner.userId}
                        </div>
                    </div>
                    <div style="background: linear-gradient(90deg, #FFD700, #00C9A7); padding: 5px 10px; border-radius: 20px; 
                               font-weight: bold; color: #1A1A2E; font-size: 0.875rem; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);">
                        ${winner.prize}
                    </div>
                </div>
            `;
        }).join('');
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function setupRaffleButtons() {
        console.log("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

        // –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        const joinButtons = document.querySelectorAll('.join-button[data-raffle-id]');
        joinButtons.forEach(button => {
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            newButton.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type') || 'main';
                openRaffleDetails(raffleId, raffleType);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        const miniButtons = document.querySelectorAll('.mini-raffle-button[data-raffle-id]');
        miniButtons.forEach(button => {
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            newButton.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type') || 'daily';

                if (raffleId === 'newbie') {
                    claimNewbieBonus();
                } else {
                    openRaffleDetails(raffleId, raffleType);
                }
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–Ω–∞—Ö
        const modalMainJoinBtn = document.getElementById('main-join-btn');
        if (modalMainJoinBtn) {
            const newMainJoinBtn = modalMainJoinBtn.cloneNode(true);
            modalMainJoinBtn.parentNode.replaceChild(newMainJoinBtn, modalMainJoinBtn);

            newMainJoinBtn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type');
                participateInRaffle(raffleId, raffleType, 'main-token-amount');
            });
        }

        const modalDailyJoinBtn = document.getElementById('daily-join-btn');
        if (modalDailyJoinBtn) {
            const newDailyJoinBtn = modalDailyJoinBtn.cloneNode(true);
            modalDailyJoinBtn.parentNode.replaceChild(newDailyJoinBtn, modalDailyJoinBtn);

            newDailyJoinBtn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type');
                participateInRaffle(raffleId, raffleType, 'daily-token-amount');
            });
        }

        console.log("–í—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
    }

    /**
     * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
     */
    function initSystem() {
        console.log("üöÄ –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX");

        try {
            // 1. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
            fixCloseButtons();

            // 2. –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            updateRaffleParticipantsCount();

            // 3. –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            updateRaffleEndDates();

            // 4. –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            overrideOpenRaffleDetails();

            // 5. –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            setupRaffleButtons();

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –±–µ–π–¥–∂—ñ
            markCompletedBadges();

            // –ó–∞–º—ñ–Ω—é—î–º–æ –µ–º–æ–¥–∂—ñ –±–µ–π–¥–∂—ñ–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            replaceBadgeEmojisWithImages();

            // 6. –ü–æ–∑–Ω–∞—á–∞—î–º–æ –±–ª–æ–∫–∏ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞, —è–∫—â–æ –≤–æ–Ω–∏ —î
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
            getUserData((error, userData) => {
                if (!error && userData && userData.newbie_bonus_claimed) {
                    markNewbieBonus();
                }
            });

            // 7. –ü–æ–∫—Ä–∞—â—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ —î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            const tabButton = document.querySelector('.tab-button[data-tab="past"]');
            if (tabButton || document.getElementById('history-container')) {
                enhanceRaffleHistory();

                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ú–∏–Ω—É–ª—ñ"
                if (tabButton) {
                    tabButton.addEventListener('click', function() {
                        setTimeout(enhanceRaffleHistory, 300);
                    });
                }
            }

            // 8. –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–∫—Å–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–∏—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó
            const dailyModal = document.getElementById('daily-raffle-modal');
            if (dailyModal) {
                const dailyCloseBtn = dailyModal.querySelector('.modal-close');
                if (dailyCloseBtn) {
                    dailyCloseBtn.addEventListener('click', function() {
                        dailyModal.classList.remove('open');
                    });
                }

                const dailyCloseActionBtn = dailyModal.querySelector('#daily-close-btn, button:contains ("–ó–∞–∫—Ä–∏—Ç–∏")');
                if (dailyCloseActionBtn) {
                    dailyCloseActionBtn.addEventListener('click', function() {
                        dailyModal.classList.remove('open');
                    });
                }
            }

            // 9. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥—Ü—ñ "–ú–∏–Ω—É–ª—ñ", –æ–Ω–æ–≤–∏–º–æ —ó—ó –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (document.querySelector('.tab-button[data-tab="past"].active') ||
                document.getElementById('past-raffles')?.classList.contains('active')) {
                setTimeout(enhanceRaffleHistory, 500);
            }

            // 10. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            setInterval(() => {
                updateRaffleEndDates(); // –¶–µ —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
            }, 60000); // 60000 –º—Å = 1 —Ö–≤–∏–ª–∏–Ω–∞

            console.log("‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—É —Å–∏—Å—Ç–µ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
            setTimeout(() => {
                showToast(getLocalizedText(
                    '–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX —É—Å–ø—ñ—à–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∞',
                    '–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π WINIX —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞',
                    'WINIX raffle system has been successfully enhanced'
                ), 3000);
            }, 2000);

            return true;
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:", error);
            return false;
        }
    }

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑–∑–æ–≤–Ω—ñ
    window.winixUnifiedFixes = {
        participateInRaffle,
        createRaffleDetailsModal,
        claimNewbieBonus,
        enhanceRaffleHistory,
        getUserData,
        getRaffles,
        getRaffleHistory
    };

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSystem);
    } else {
        // –Ø–∫—â–æ DOM –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
        setTimeout(initSystem, 100);
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó
    setTimeout(initSystem, 1500);

    /**
 * –ó–∞–º—ñ–Ω–∞ –µ–º–æ–¥–∂—ñ –±–µ–π–¥–∂—ñ–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
function replaceBadgeEmojisWithImages() {
    console.log("–ó–∞–º—ñ–Ω–∞ –µ–º–æ–¥–∂—ñ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤");

    const badgeImages = [
        {
            selector: '.badge-item:nth-child(1) .badge-icon', // –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å
            imagePath: 'assets/badge-winner.png',
            altText: '–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å'
        },
        {
            selector: '.badge-item:nth-child(2) .badge-icon', // –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å
            imagePath: 'assets/badge-beginner.png',
            altText: '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å'
        },
        {
            selector: '.badge-item:nth-child(3) .badge-icon', // –ë–∞–≥–∞—Ç—ñ–π
            imagePath: 'assets/badge-rich.png',
            altText: '–ë–∞–≥–∞—Ç—ñ–π'
        }
    ];

    badgeImages.forEach(badge => {
        const badgeIcon = document.querySelector(badge.selector);
        if (!badgeIcon) return;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if (badgeIcon.querySelector('img')) return;

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª–∞—Å locked, —è–∫—â–æ –≤—ñ–Ω —î
        const isLocked = badgeIcon.classList.contains('locked');

        // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ñ–¥ –µ–º–æ–¥–∂—ñ
        const originalContent = badgeIcon.innerHTML;
        badgeIcon.innerHTML = '';

        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const img = document.createElement('img');
        img.src = badge.imagePath;
        img.alt = badge.altText;
        img.className = 'badge-image';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'contain';

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        img.onerror = function() {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${badge.imagePath}`);
            badgeIcon.innerHTML = originalContent;
        };

        // –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        badgeIcon.appendChild(img);

        // –Ø–∫—â–æ –±–µ–π–¥–∂ –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π, –¥–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–∞–º–∫–∞
        if (isLocked) {
            const lockIcon = document.createElement('div');
            lockIcon.className = 'lock-icon';
            lockIcon.textContent = 'üîí';
            lockIcon.style.position = 'absolute';
            lockIcon.style.bottom = '-0.25rem';
            lockIcon.style.right = '-0.25rem';
            lockIcon.style.fontSize = '1rem';
            lockIcon.style.zIndex = '3';
            badgeIcon.appendChild(lockIcon);
        }
    });
}

/**
 * –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –±–µ–π–¥–∂—ñ–≤
 */
function markCompletedBadges() {
    console.log("–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –±–µ–π–¥–∂—ñ–≤");

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –±–µ–π–¥–∂—ñ–≤
    getUserData((error, userData) => {
        if (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–µ–π–¥–∂—ñ–≤:', error);
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫—ñ –±–µ–π–¥–∂—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞–≤
        const badges = [
            {
                selector: '.badge-item:nth-child(1)',
                id: 'winner',
                isCompleted: userData.badges?.winner_completed || false
            },
            {
                selector: '.badge-item:nth-child(2)',
                id: 'beginner',
                isCompleted: userData.badges?.beginner_completed || userData.participationsCount >= 5 || false
            },
            {
                selector: '.badge-item:nth-child(3)',
                id: 'rich',
                isCompleted: userData.badges?.rich_completed || userData.balance >= 50000 || false
            }
        ];

        badges.forEach(badge => {
            const badgeElement = document.querySelector(badge.selector);
            if (!badgeElement) return;

            if (badge.isCompleted) {
                // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
                badgeElement.classList.add('badge-completed');

                // –î–æ–¥–∞—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
                if (!badgeElement.querySelector('.badge-watermark')) {
                    addWatermarkToBadge(badgeElement);
                }
            }
        });

        // –ü—ñ—Å–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è, –∑–∞–º—ñ–Ω—é—î–º–æ –µ–º–æ–¥–∂—ñ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        replaceBadgeEmojisWithImages();
    });
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É –¥–æ –±–µ–π–¥–∂–∞
 */
function addWatermarkToBadge(badgeElement) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
    if (badgeElement.querySelector('.badge-watermark')) {
        return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
    const watermark = document.createElement('div');
    watermark.className = 'badge-watermark';
    watermark.style.position = 'absolute';
    watermark.style.top = '0';
    watermark.style.left = '0';
    watermark.style.right = '0';
    watermark.style.bottom = '0';
    watermark.style.zIndex = '5';
    watermark.style.pointerEvents = 'none';
    watermark.style.display = 'flex';
    watermark.style.justifyContent = 'center';
    watermark.style.alignItems = 'center';
    watermark.style.overflow = 'hidden';

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É
    const watermarkText = getLocalizedText('–û–¢–†–ò–ú–ê–ù–û', '–ü–û–õ–£–ß–ï–ù–û', 'RECEIVED');

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç—É
    const textElement = document.createElement('div');
    textElement.className = 'badge-watermark-text';
    textElement.textContent = watermarkText;
    textElement.style.position = 'absolute';
    textElement.style.width = '200%';
    textElement.style.textAlign = 'center';
    textElement.style.transform = 'rotate(-35deg)';
    textElement.style.fontFamily = 'Impact, sans-serif';
    textElement.style.fontSize = '14px';
    textElement.style.fontWeight = '900';
    textElement.style.letterSpacing = '1px';
    textElement.style.color = 'black';
    textElement.style.background = 'repeating-linear-gradient(45deg, rgba(255, 205, 0, 0.8), rgba(255, 205, 0, 0.8) 10px, rgba(0, 0, 0, 0.8) 10px, rgba(0, 0, 0, 0.8) 20px)';
    textElement.style.padding = '2px 20px';
    textElement.style.boxShadow = '0 0 5px rgba(0, 0, 0, 0.5)';
    textElement.style.textShadow = '0px 0px 2px white';
    textElement.style.whiteSpace = 'nowrap';

    // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
    watermark.appendChild(textElement);

    // –Ø–∫—â–æ badge-element –Ω–µ –º–∞—î position: relative, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
    if (getComputedStyle(badgeElement).position === 'static') {
        badgeElement.style.position = 'relative';
    }

    badgeElement.appendChild(watermark);
}
})();
