/**
 * WINIX UNIFIED FIXES - –û–±'—î–¥–Ω–∞–Ω–∏–π —Ñ–∞–π–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å —É—Å—ñ—Ö —Å–∏—Å—Ç–µ–º WINIX
 *
 * –¶–µ–π —Ñ–∞–π–ª –ø–æ—î–¥–Ω—É—î –≤—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, –±–µ–π–¥–∂—ñ–≤ —Ç–∞ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω WINIX
 * –≤ —î–¥–∏–Ω—É, —Ü—ñ–ª—ñ—Å–Ω—É —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ —ñ –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É.
 *
 * –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –û–°–¢–ê–ù–ù–Ü–ú —É –∫—ñ–Ω—Ü—ñ HTML-—Ñ–∞–π–ª—É, –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤.
 */

(function() {
    console.log("üöÄ WINIX UNIFIED FIXES: –ó–∞–ø—É—Å–∫ –æ–±'—î–¥–Ω–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å...");

    // ====== –ë–ê–ó–û–í–Ü –£–¢–ò–õ–Ü–¢–ò ======

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º
    let isProcessingRaffle = false;

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ localStorage
     */
    function safeGetItem(key, defaultValue) {
        try {
            const value = localStorage.getItem(key);
            return value !== null ? value : defaultValue;
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ${key} –∑ localStorage:`, e);
            return defaultValue;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage
     */
    function safeSetItem(key, value) {
        try {
            localStorage.setItem(key, value);
            return true;
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${key} –≤ localStorage:`, e);
            return false;
        }
    }

    /**
     * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
     */
    function getCurrentLanguage() {
        // –°–ø—Ä–æ–±–∞ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤–∏ –≤ localStorage
        let lang = safeGetItem('userLanguage', null) || safeGetItem('winix_language', null);

        // –°–ø—Ä–æ–±–∞ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ HTML/BODY –µ–ª–µ–º–µ–Ω—Ç–∏
        if (!lang) {
            const htmlEl = document.documentElement;
            const bodyEl = document.body;

            if (htmlEl.lang) {
                lang = htmlEl.lang;
            } else if (bodyEl.className.includes('lang-')) {
                const langMatch = bodyEl.className.match(/lang-([a-z]{2})/);
                if (langMatch) lang = langMatch[1];
            }
        }

        // –°–ø—Ä–æ–±–∞ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL
        if (!lang && window.location.href.includes('/ru/')) {
            lang = 'ru';
        } else if (!lang && window.location.href.includes('/en/')) {
            lang = 'en';
        }

        // –°–ø—Ä–æ–±–∞ 4: –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        if (!lang) {
            const pageText = document.body.textContent.toLowerCase();
            let ruCount = 0;
            let enCount = 0;

            const ruWords = ['–ø–æ–ª—É—á–∏—Ç—å', '–±–æ–Ω—É—Å', '–Ω–æ–≤–∏—á–∫–∞–º', '—Ä–æ–∑—ã–≥—Ä—ã—à', '—É—á–∞—Å—Ç–∏–µ'];
            const enWords = ['receive', 'bonus', 'newbie', 'raffle', 'participate'];

            ruWords.forEach(word => {
                if (pageText.includes(word)) ruCount++;
            });

            enWords.forEach(word => {
                if (pageText.includes(word)) enCount++;
            });

            if (ruCount > enCount) {
                lang = 'ru';
            } else if (enCount > ruCount) {
                lang = 'en';
            }
        }

        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        return lang || 'uk';
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
     */
    function getLocalizedText(uk, ru, en) {
        const lang = getCurrentLanguage();

        if (lang === 'ru') return ru;
        if (lang === 'en') return en;
        return uk; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
     */
    function getCoinsBalance() {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixCore API
        if (window.WinixCore && window.WinixCore.Balance) {
            return window.WinixCore.Balance.getCoins();
        }

        // –ü–æ—Ç—ñ–º —á–µ—Ä–µ–∑ —ñ–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ —Å–∏—Å—Ç–µ–º–∏
        if (window.balanceSystem && window.balanceSystem.getCoins) {
            return window.balanceSystem.getCoins();
        }

        // –ù–∞—Ä–µ—à—Ç—ñ, –Ω–∞–ø—Ä—è–º—É –∑ localStorage
        return parseInt(safeGetItem('userCoins', '0')) || parseInt(safeGetItem('winix_coins', '0')) || 0;
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
     */
    function updateCoinsBalance(newBalance) {
        console.log(`–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤: ${newBalance}`);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ä—ñ–∑–Ω–∏—Ö –∫–ª—é—á–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        safeSetItem('userCoins', newBalance.toString());
        safeSetItem('winix_coins', newBalance.toString());

        // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (window.WinixCore && window.WinixCore.Balance) {
            window.WinixCore.Balance.setCoins(newBalance);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        const coinsElements = document.querySelectorAll('#user-coins, .coins-amount, .coins-value');
        coinsElements.forEach(element => {
            if (element) element.textContent = newBalance.toString();
        });

        return true;
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ç–æ–∫–µ–Ω—ñ–≤ WINIX
     */
    function getTokensBalance() {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixCore API
        if (window.WinixCore && window.WinixCore.Balance) {
            return window.WinixCore.Balance.getTokens();
        }

        // –ü–æ—Ç—ñ–º —á–µ—Ä–µ–∑ —ñ–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ —Å–∏—Å—Ç–µ–º–∏
        if (window.balanceSystem && window.balanceSystem.getTokens) {
            return window.balanceSystem.getTokens();
        }

        // –ù–∞—Ä–µ—à—Ç—ñ, –Ω–∞–ø—Ä—è–º—É –∑ localStorage
        return parseFloat(safeGetItem('userTokens', '0')) || parseFloat(safeGetItem('winix_balance', '0')) || 0;
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ç–æ–∫–µ–Ω—ñ–≤ WINIX
     */
    function updateTokensBalance(newBalance) {
        console.log(`–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É WINIX: ${newBalance}`);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ä—ñ–∑–Ω–∏—Ö –∫–ª—é—á–∞—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        safeSetItem('userTokens', newBalance.toString());
        safeSetItem('winix_balance', newBalance.toString());

        // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (window.WinixCore && window.WinixCore.Balance) {
            window.WinixCore.Balance.setTokens(newBalance);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        const tokenElements = document.querySelectorAll('#user-tokens, #main-balance, .balance-amount, #current-balance, .balance-value');
        tokenElements.forEach(element => {
            if (element) {
                if (element.id === 'main-balance' && element.innerHTML && element.innerHTML.includes('main-balance-icon')) {
                    element.innerHTML = `${newBalance.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" width="100" height="100" alt="WINIX"></span>`;
                } else {
                    element.textContent = newBalance.toFixed(2);
                }
            }
        });

        return true;
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ WINIX –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é
     */
    function addTokens(amount, description) {
        console.log(`–°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ ${amount} WINIX –∑–∞ ${description}`);

        try {
            const currentBalance = getTokensBalance();
            const newBalance = currentBalance + amount;

            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            updateTokensBalance(newBalance);

            // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            try {
                const transactions = JSON.parse(safeGetItem('transactions', '[]'));
                transactions.unshift({
                    id: Date.now().toString(36) + Math.random().toString(36).substring(2, 9),
                    type: 'receive',
                    amount: amount,
                    description: description,
                    timestamp: Date.now(),
                    status: 'completed'
                });
                safeSetItem('transactions', JSON.stringify(transactions));
                safeSetItem('winix_transactions', JSON.stringify(transactions));
            } catch (e) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:", e);
            }

            return true;
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤:", e);
            return false;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
     */
    function showToast(message, duration = 3000) {
        console.log(`TOAST: ${message}`);

        // –°–ø—Ä–æ–±–∞ 1: –ß–µ—Ä–µ–∑ WinixCore
        if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.showNotification) {
            window.WinixCore.UI.showNotification(message);
            return;
        }

        // –°–ø—Ä–æ–±–∞ 2: –ß–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        if (window.showToast) {
            window.showToast(message, duration);
            return;
        }

        // –°–ø—Ä–æ–±–∞ 3: –ß–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é showNotification
        if (window.showNotification) {
            window.showNotification(message, 'info', duration);
            return;
        }

        // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Å—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç toast –≤—Ä—É—á–Ω—É
        let toast = document.getElementById('toast-message');
        if (!toast) {
            toast = document.createElement('div');
            toast.id = 'toast-message';
            toast.className = 'toast-message';

            // –ë–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è toast-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ
            if (!document.querySelector('style#dynamic-toast-styles')) {
                const style = document.createElement('style');
                style.id = 'dynamic-toast-styles';
                style.textContent = `
                    .toast-message {
                        position: fixed;
                        top: 20px;
                        left: 50%;
                        transform: translateX(-50%);
                        background: linear-gradient(135deg, #1A1A2E, #0F3460);
                        color: #ffffff;
                        padding: 0.75rem 1.5rem;
                        border-radius: 12px;
                        z-index: 1000;
                        box-shadow: 0 4px 15px rgba(0,0,0,0.5);
                        border: 1px solid rgba(78, 181, 247, 0.2);
                        opacity: 0;
                        transition: all 0.3s ease;
                        font-size: 0.9375rem;
                        display: flex;
                        align-items: center;
                        max-width: 350px;
                        width: 90%;
                    }
                    
                    .toast-message.show {
                        opacity: 1;
                        transform: translate(-50%, 10px);
                    }
                `;
                document.head.appendChild(style);
            }

            document.body.appendChild(toast);
        }

        toast.textContent = message;
        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
        }, duration);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
     */
    function getRaffleData() {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ WinixCore API
        if (window.WinixCore && window.WinixCore.Storage) {
            const data = window.WinixCore.Storage.getItem('winix_raffles_data');
            if (data) return data;
        }

        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ localStorage
        const storageData = safeGetItem('winix_raffles_data', null);
        return storageData ? JSON.parse(storageData) : {
            mainRaffleParticipants: parseInt(safeGetItem('mainRaffleParticipants', '0')),
            dailyRaffleParticipants: parseInt(safeGetItem('dailyRaffleParticipants', '0')),
            participations: JSON.parse(safeGetItem('currentParticipations', '[]'))
        };
    }

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
     */
    function saveRaffleData(data) {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —á–µ—Ä–µ–∑ WinixCore API
        if (window.WinixCore && window.WinixCore.Storage) {
            window.WinixCore.Storage.setItem('winix_raffles_data', data);
        }

        // –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        safeSetItem('winix_raffles_data', JSON.stringify(data));

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ –æ–∫—Ä–µ–º—ñ –∫–ª—é—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        if (data.mainRaffleParticipants !== undefined) {
            safeSetItem('mainRaffleParticipants', data.mainRaffleParticipants.toString());
        }
        if (data.dailyRaffleParticipants !== undefined) {
            safeSetItem('dailyRaffleParticipants', data.dailyRaffleParticipants.toString());
        }
        if (data.participations !== undefined) {
            safeSetItem('currentParticipations', JSON.stringify(data.participations));
        }
    }

    // ====== –ü–†–ï–ú–Ü–ê–õ–¨–ù–Ü –°–¢–ò–õ–Ü –Ü –ú–û–î–ê–õ–¨–ù–Ü –í–Ü–ö–ù–ê ======


    /**
     * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –≤—Å—ñ—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
     */
    function fixCloseButtons() {
    console.log("–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –≤—Å—ñ—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω");

    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
    const modals = document.querySelectorAll('.raffle-modal, .daily-raffle-modal');

    modals.forEach(modal => {
        console.log("–û–±—Ä–æ–±–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:", modal.id || modal.className);

        // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è (√ó)
        const closeButton = modal.querySelector('.modal-close');
        if (closeButton) {
            console.log("–í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è √ó");

            // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            const newCloseButton = closeButton.cloneNode(true);
            closeButton.parentNode.replaceChild(newCloseButton, closeButton);

            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
            newCloseButton.addEventListener('click', function() {
                console.log("–ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ –∑–∞–∫—Ä–∏—Ç—Ç—è, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ");
                modal.classList.remove('open');
            });
        }

        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä–∏—Ç–∏" –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –ø–æ ID
        const closeActionButtons = modal.querySelectorAll('.join-button');
        closeActionButtons.forEach(button => {
            if (button.id && button.id.includes('close') ||
                button.textContent.includes('–ó–∞–∫—Ä–∏—Ç–∏') ||
                button.textContent.includes('–∑–∞–∫—Ä–∏—Ç–∏') ||
                button.textContent.includes('–ó–ê–ö–†–ò–¢–ò') ||
                button.textContent.includes('Close')) {

                console.log("–í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É '–ó–∞–∫—Ä–∏—Ç–∏':", button.textContent);

                // –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);

                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
                newButton.addEventListener('click', function() {
                    console.log("–ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ '–ó–∞–∫—Ä–∏—Ç–∏', –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ");
                    modal.classList.remove('open');
                });
            }
        });
    });

    console.log("–ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ");
}

    // ====== –°–ò–°–¢–ï–ú–ê –†–û–ó–Ü–ì–†–ê–®–Ü–í ======

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function updateRaffleEndDates() {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É (3 –¥–Ω—ñ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏)
        const mainEndDate = new Date();
        mainEndDate.setDate(mainEndDate.getDate() + 3);
        mainEndDate.setHours(15, 0, 0, 0);

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É (–∑–∞–≤—Ç—Ä–∞ –æ 12:00)
        const dailyEndDate = new Date();
        dailyEndDate.setDate(dailyEndDate.getDate() + 1);
        dailyEndDate.setHours(12, 0, 0, 0);

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const months = ['—Å—ñ—á–Ω—è', '–ª—é—Ç–æ–≥–æ', '–±–µ—Ä–µ–∑–Ω—è', '–∫–≤—ñ—Ç–Ω—è', '—Ç—Ä–∞–≤–Ω—è', '—á–µ—Ä–≤–Ω—è',
                       '–ª–∏–ø–Ω—è', '—Å–µ—Ä–ø–Ω—è', '–≤–µ—Ä–µ—Å–Ω—è', '–∂–æ–≤—Ç–Ω—è', '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–≥—Ä—É–¥–Ω—è'];

        const mainFormattedDate = `${mainEndDate.getDate()} ${months[mainEndDate.getMonth()]} ${mainEndDate.getFullYear()}, ${mainEndDate.getHours()}:00`;
        const dailyFormattedDate = `${dailyEndDate.getDate()} ${months[dailyEndDate.getMonth()]} ${dailyEndDate.getFullYear()}, ${dailyEndDate.getHours()}:00`;

        // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ DOM
        const mainEndElement = document.getElementById('main-end-time');
        if (mainEndElement) mainEndElement.textContent = mainFormattedDate;

        const dailyEndElement = document.getElementById('daily-end-time');
        if (dailyEndElement) dailyEndElement.textContent = dailyFormattedDate;

        return { mainEndDate, dailyEndDate, mainFormattedDate, dailyFormattedDate };
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
     */
    function updateRaffleParticipantsCount() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    const raffleData = getRaffleData();

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ
    let mainCount = raffleData.mainRaffleParticipants || 0;
    let dailyCount = raffleData.dailyRaffleParticipants || 0;

    if (mainCount === 0) {
        mainCount = 1;
        raffleData.mainRaffleParticipants = 1;
        saveRaffleData(raffleData);
    }

    if (dailyCount === 0) {
        dailyCount = 1;
        raffleData.dailyRaffleParticipants = 1;
        saveRaffleData(raffleData);
    }

    console.log(`–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤: –≥–æ–ª–æ–≤–Ω–∏–π=${mainCount}, —â–æ–¥–µ–Ω–Ω–∏–π=${dailyCount}`);

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Ç–∞ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
    const mainCountElements = document.querySelectorAll('.participants-count');
    mainCountElements.forEach(el => {
        if (el) el.textContent = mainCount.toString();
    });

    const mainModalParticipants = document.getElementById('main-participants');
    if (mainModalParticipants) mainModalParticipants.textContent = mainCount.toString();

    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    const dailyModalParticipants = document.getElementById('daily-participants');
    if (dailyModalParticipants) {
        dailyModalParticipants.textContent = dailyCount.toString();
        console.log(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${dailyCount} —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É`);
    }

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É, –∞ –Ω–µ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É –∑ —Ñ—É–Ω–∫—Ü—ñ—ó updateRaffleEndDates
    const endDates = updateRaffleEndDates();
    if (endDates && endDates.mainEndDate) {
        updateProgressBar(endDates.mainEndDate);
    } else {
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
        const currentProgress = parseInt(safeGetItem('mainRaffleProgress', '29'));
        const progressBar = document.querySelector('.progress');
        if (progressBar) {
            progressBar.style.width = `${currentProgress}%`;
        }
    }
}

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    function updateProgressBar(endDate) {
    const progressBar = document.querySelector('.progress');
    if (!progressBar) return;

    // –î–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—É –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è
    const now = new Date();

    // –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É = –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –º—ñ–Ω—É—Å 5 –¥–Ω—ñ–≤ (–∑–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É)
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 5);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ endDate —î –¥–∞—Ç–æ—é, —è–∫—â–æ –Ω—ñ - –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ
    let endDateTime = endDate;
    if (!(endDate instanceof Date)) {
        // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ –¥–∞—Ç—É, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ó—ó –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
        try {
            const endDateStr = document.getElementById('main-end-time')?.textContent;
            if (endDateStr) {
                // –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –∑ —Ñ–æ—Ä–º–∞—Ç—É "27 –±–µ—Ä–µ–∑–Ω—è 2025, 15:00"
                const parts = endDateStr.split(', ');
                const dateParts = parts[0].split(' ');
                const timeParts = parts[1].split(':');

                const months = {
                    '—Å—ñ—á–Ω—è': 0, '–ª—é—Ç–æ–≥–æ': 1, '–±–µ—Ä–µ–∑–Ω—è': 2, '–∫–≤—ñ—Ç–Ω—è': 3,
                    '—Ç—Ä–∞–≤–Ω—è': 4, '—á–µ—Ä–≤–Ω—è': 5, '–ª–∏–ø–Ω—è': 6, '—Å–µ—Ä–ø–Ω—è': 7,
                    '–≤–µ—Ä–µ—Å–Ω—è': 8, '–∂–æ–≤—Ç–Ω—è': 9, '–ª–∏—Å—Ç–æ–ø–∞–¥–∞': 10, '–≥—Ä—É–¥–Ω—è': 11
                };

                const day = parseInt(dateParts[0]);
                const month = months[dateParts[1]];
                const year = parseInt(dateParts[2]);
                const hour = parseInt(timeParts[0]);
                const minute = parseInt(timeParts[1]);

                endDateTime = new Date(year, month, day, hour, minute);
            } else {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞—Ç–∏ –≤ DOM, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ +3 –¥–Ω—ñ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó
                endDateTime = new Date();
                endDateTime.setDate(endDateTime.getDate() + 3);
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É:', e);
            endDateTime = new Date();
            endDateTime.setDate(endDateTime.getDate() + 3);
        }
    }

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É —ñ —Å–∫—ñ–ª—å–∫–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–æ
    const totalDuration = endDateTime - startDate;
    const elapsed = now - startDate;

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
    let progressPercent = Math.round((elapsed / totalDuration) * 100);

    // –û–±–º–µ–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –º—ñ–∂ 0% —ñ 100%
    progressPercent = Math.max(0, Math.min(100, progressPercent));

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
    progressBar.style.width = `${progressPercent}%`;

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ localStorage –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
    safeSetItem('mainRaffleProgress', progressPercent.toString());

    console.log(`–ü—Ä–æ–≥—Ä–µ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ ${progressPercent}% (–∑–∞–ª–∏—à–∏–ª–æ—Å—å ${Math.round((totalDuration - elapsed) / (1000 * 60 * 60 * 24))} –¥–Ω—ñ–≤)`);

    return progressPercent;
}

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     */
    function participateInRaffle(raffleId, raffleType, inputId) {
        if (isProcessingRaffle) {
            console.log("üö´ –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—é");
            showToast(getLocalizedText(
                '–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...',
                '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
                'Please wait, your request is being processed...'
            ));
            return;
        }

        isProcessingRaffle = true;
        console.log(`üéÆ –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId} —Ç–∏–ø—É ${raffleType}`);

        try {
            // 1. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            const coinsBalance = getCoinsBalance();
            const tokenAmount = parseInt(document.getElementById(inputId)?.value || '1') || 1;

            console.log(`–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${coinsBalance} –∂–µ—Ç–æ–Ω—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ: ${tokenAmount}`);

            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤
            if (coinsBalance < tokenAmount) {
                showToast(getLocalizedText(
                    '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                    '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
                    'Not enough coins to participate in the raffle'
                ), 3000);
                isProcessingRaffle = false;
                return;
            }

            // 3. –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const spinner = document.getElementById('loading-spinner');
            if (spinner) spinner.classList.add('show');

            // 4. –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º
            const allButtons = document.querySelectorAll('.join-button, .mini-raffle-button');
            allButtons.forEach(btn => btn.disabled = true);

            // 5. –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –≤ localStorage
            setTimeout(() => {
                try {
                    // –ó–º–µ–Ω—à—É—î–º–æ –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
                    const newCoinsBalance = coinsBalance - tokenAmount;
                    updateCoinsBalance(newCoinsBalance);

                    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                    let raffleData = getRaffleData();

                    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —É—á–∞—Å—Ç—å
                    const participation = {
                        userId: safeGetItem('userId', 'anonymous'),
                        raffleId: raffleId,
                        raffleType: raffleType,
                        tokenAmount: tokenAmount,
                        timestamp: new Date().toISOString()
                    };

                    if (!raffleData.participations) {
                        raffleData.participations = [];
                    }
                    raffleData.participations.push(participation);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                    if (raffleType === 'main') {
                        raffleData.mainRaffleParticipants = (raffleData.mainRaffleParticipants || 0) + 1;
                    } else if (raffleType === 'daily') {
                        raffleData.dailyRaffleParticipants = (raffleData.dailyRaffleParticipants || 0) + 1;
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
                    saveRaffleData(raffleData);
                    updateRaffleParticipantsCount();

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä—à–∞ —É—á–∞—Å—Ç—å
                    const isFirstRaffle = safeGetItem('first_raffle_participated', 'false') !== 'true';
                    if (isFirstRaffle) {
                        // –î–æ–¥–∞—î–º–æ –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—à—É —É—á–∞—Å—Ç—å
                        addTokens(150, getLocalizedText(
                            '–ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—à—É —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                            '–ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
                            'Bonus for first raffle participation'
                        ));
                        safeSetItem('first_raffle_participated', 'true');

                        // –ü–æ–∫–∞–∂–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
                        setTimeout(() => {
                            showToast(getLocalizedText(
                                '–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 150 WINIX –∑–∞ –ø–µ—Ä—à—É —É—á–∞—Å—Ç—å!',
                                '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 150 WINIX –∑–∞ –ø–µ—Ä–≤–æ–µ —É—á–∞—Å—Ç–∏–µ!',
                                'Congratulations! You received 150 WINIX for your first participation!'
                            ), 3000);
                        }, 3000);
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç—ñ
                    updateParticipationStatistics(tokenAmount);

                    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                    const modalId = raffleType === 'daily' ? 'daily-raffle-modal' : 'main-raffle-modal';
                    const modal = document.getElementById(modalId);
                    if (modal) modal.classList.remove('open');

                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    showToast(getLocalizedText(
                        '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                        '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
                        'You have successfully participated in the raffle'
                    ), 3000);

                    console.log("‚úÖ –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞");

                } catch (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —É—á–∞—Å—Ç—ñ:', error);
                    showToast(getLocalizedText(
                        '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                        'An error occurred, please try again'
                    ), 3000);
                } finally {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                    if (spinner) spinner.classList.remove('show');

                    allButtons.forEach(btn => btn.disabled = false);
                    isProcessingRaffle = false;
                }
            }, 1000); // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX

        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:', error);
            showToast(getLocalizedText(
                '–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞',
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
                'A critical error has occurred'
            ), 3000);
            isProcessingRaffle = false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
     */
    function updateParticipationStatistics(tokenAmount) {
        console.log("–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç—ñ");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            let statistics = JSON.parse(safeGetItem('userStatistics', '{}'));

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            if (!statistics.participationsCount) statistics.participationsCount = 0;
            if (!statistics.winsCount) statistics.winsCount = 0;
            if (!statistics.totalWinnings) statistics.totalWinnings = 0;
            if (!statistics.referralsCount) statistics.referralsCount = 0;

            // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç—ñ
            statistics.participationsCount++;

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const participationsElement = document.querySelector('.stat-card:nth-child(1) .stat-value');
            if (participationsElement) {
                participationsElement.textContent = statistics.participationsCount.toString();
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            safeSetItem('userStatistics', JSON.stringify(statistics));
            console.log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${statistics.participationsCount} —É—á–∞—Å—Ç–µ–π`);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –±–µ–π–¥–∂–∞ "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å"
            if (statistics.participationsCount >= 5 && safeGetItem('badge_beginner_claimed', 'false') !== 'true') {
                console.log("–£–º–æ–≤–∞ –¥–ª—è –±–µ–π–¥–∂–∞ '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å' –≤–∏–∫–æ–Ω–∞–Ω–∞");

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂ —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
                setTimeout(() => {
                    giveRewardForBadge('beginner', 1000);
                }, 1500);
            }

            return true;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç—ñ:', error);
            return false;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    function generateRealWinners(isUsdtRaffle, isWinixRaffle, winnersCount, status) {
        const winners = [];
        const isWinner = status === 'won' || status === '–≤–∏–≥—Ä–∞–Ω–æ';

        // –†–µ–∞–ª—å–Ω—ñ Telegram –Ω—ñ–∫–Ω–µ–π–º–∏ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        const usernames = [
            'workerscrypto', 'crypto_king', 'winix_whale', 'blockchain_bro',
            'token_trader', 'web3_wizard', 'defi_master', 'satoshi_fanboy',
            'crypto_queen', 'btc_billionaire', 'eth_enthusiast', 'nft_collector',
            'dao_developer', 'crypto_guru', 'meta_explorer', 'staking_pro',
            'yield_farmer', 'altcoin_analyst', 'cryptopunks_fan', 'hodl_hero',
            'moon_hunter', 'doge_believer', 'ledger_lover', 'hash_hunter',
            'wallet_warrior', 'crypto_chad', 'coin_crusader', 'block_builder'
        ];

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        const shuffledUsernames = [...usernames].sort(() => 0.5 - Math.random()).slice(0, winnersCount);

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        for (let i = 0; i < winnersCount; i++) {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏–∑ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Ä–æ–∑—ñ–≥—Ä–∞—à—É —ñ –º—ñ—Å—Ü—è
            let prize = '';

            if (isUsdtRaffle) {
                // –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤ –¥–ª—è USDT —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                if (winnersCount === 10) {
                    // 250 USDT –Ω–∞ 10 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
                    if (i === 0) prize = '125 USDT + 10000 WINIX';
                    else if (i === 1) prize = '75 USDT + 8000 WINIX';
                    else if (i === 2) prize = '50 USDT + 5000 WINIX';
                    else prize = '15000 WINIX';
                } else if (winnersCount === 5) {
                    // 100 USDT –Ω–∞ 5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
                    if (i === 0) prize = '40 USDT + 10000 WINIX';
                    else if (i === 1) prize = '20 USDT + 8000 WINIX';
                    else if (i === 2) prize = '15 USDT + 5000 WINIX';
                    else prize = '12.5 USDT + 4000 WINIX';
                } else {
                    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                    if (i === 0) prize = '20 USDT + 5000 WINIX';
                    else if (i === 1) prize = '10 USDT + 3000 WINIX';
                    else prize = '5 USDT + 2000 WINIX';
                }
            } else if (isWinixRaffle) {
                // –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤ –¥–ª—è WINIX —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                if (winnersCount === 15) {
                    // 30,000 WINIX –Ω–∞ 15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
                    prize = '2,000 WINIX';
                } else if (winnersCount === 5) {
                    // 20,000 WINIX –Ω–∞ 5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
                    if (i === 0) prize = '6,000 WINIX';
                    else if (i === 1) prize = '5,000 WINIX';
                    else if (i === 2) prize = '4,000 WINIX';
                    else prize = '2,500 WINIX';
                } else {
                    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                    if (i === 0) prize = '10,000 WINIX';
                    else if (i === 1) prize = '8,000 WINIX';
                    else if (i === 2) prize = '5,000 WINIX';
                    else prize = '2,000 WINIX';
                }
            } else {
                // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                if (i === 0) prize = '1-–µ –º—ñ—Å—Ü–µ';
                else if (i === 1) prize = '2-–µ –º—ñ—Å—Ü–µ';
                else if (i === 2) prize = '3-—î –º—ñ—Å—Ü–µ';
                else prize = '–ü—Ä–∏–∑';
            }

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–≤–∞–∂–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 3-–º –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º, —è–∫—â–æ –≤—ñ–Ω –≤–∏–≥—Ä–∞–≤
            const isCurrentUser = isWinner && i === 2;

            // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
            winners.push({
                place: i + 1,
                username: isCurrentUser ? '–í–∏' : shuffledUsernames[i],
                telegramUsername: isCurrentUser ? '–í–∏' : '@' + shuffledUsernames[i],
                userId: isCurrentUser ? safeGetItem('userId', '12345678') : '1000' + Math.floor(Math.random() * 10000000),
                prize: prize,
                isCurrentUser: isCurrentUser
            });
        }

        return winners;
    }

    /**
     * –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è HTML –¥–ª—è —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
     */
    function generateWinnersListHTML(winners) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–µ—Ä–µ–º–æ–∂—Ü—ñ
        if (!winners || winners.length === 0) {
            return '<div class="no-winners">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—è</div>';
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        return winners.map(winner => {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –º—ñ—Å—Ü—è (top-1, top-2, top-3)
            const placeClass = winner.place <= 3 ? `top-${winner.place}` : '';

            // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
            return `
                <div class="winner-item ${winner.isCurrentUser ? 'current-user' : ''}">
                    <div class="winner-place ${placeClass}">
                        <span class="place-number">${winner.place}</span>
                    </div>
                    <div class="winner-info">
                        <div class="winner-name">${winner.username}</div>
                        ${winner.isCurrentUser ? '' : `<div class="winner-telegram">${winner.telegramUsername}</div>`}
                    </div>
                    <div class="winner-prize">${winner.prize}</div>
                </div>
            `;
        }).join('');
    }

    /**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –¥–µ—Ç–∞–ª—è–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
 */
/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º-–≤–µ—Ä—Å—ñ—ó –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
 */
function createRaffleDetailsModal(raffleData) {
    console.log("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º-–≤–µ—Ä—Å—ñ—ó –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É", raffleData);

    // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, —è–∫—â–æ –≤–æ–Ω–æ —î
    let existingModal = document.getElementById('raffle-history-modal');
    if (existingModal) {
        existingModal.remove();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    raffleData = raffleData || {};

    const date = raffleData.date || '20.03.2025';
    const prize = raffleData.prize || '50 USDT ‚Ä¢ 10 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤';
    const result = raffleData.result || '–í–∏ –±—É–ª–∏ —Å–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤!';
    const status = raffleData.status || 'won';

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    const isUsdtRaffle = prize.includes('USDT');
    const isWinixRaffle = prize.includes('WINIX');

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –∑ —Ç–µ–∫—Å—Ç—É
    let winnersCount = 10; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if (prize.includes('10 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤')) {
        winnersCount = 10;
    } else if (prize.includes('15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤')) {
        winnersCount = 15;
    } else if (prize.includes('5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤')) {
        winnersCount = 5;
    } else {
        // –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü–∏—Ñ—Ä—É –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤"
        const match = prize.match(/(\d+)\s+–ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤/);
        if (match && match[1]) {
            winnersCount = parseInt(match[1]);
        }
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'raffle-history-modal';
    modal.className = 'raffle-modal';

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø—Ä–∏–∑–∏
    let prizes = [];
    let totalPrize = 0;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –ø—Ä–∏–∑—ñ–≤
    if (isUsdtRaffle) {
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É USDT
        const usdtMatch = prize.match(/(\d+)\s*USDT/);
        if (usdtMatch && usdtMatch[1]) {
            totalPrize = parseInt(usdtMatch[1]);
        } else {
            totalPrize = 50; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }

        // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ USDT –∑–∞ –º—ñ—Å—Ü—è–º–∏
        if (winnersCount === 10) {
            prizes = [
                "10 USDT", "8 USDT", "7 USDT", "5 USDT", "5 USDT",
                "4 USDT", "3 USDT", "3 USDT", "3 USDT", "2 USDT"
            ];
        } else if (winnersCount === 5) {
            prizes = ["20 USDT", "12 USDT", "8 USDT", "6 USDT", "4 USDT"];
        } else {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª
            prizes.push(`${Math.round(totalPrize * 0.25)} USDT`); // 1 –º—ñ—Å—Ü–µ: 25%
            prizes.push(`${Math.round(totalPrize * 0.20)} USDT`); // 2 –º—ñ—Å—Ü–µ: 20%
            prizes.push(`${Math.round(totalPrize * 0.15)} USDT`); // 3 –º—ñ—Å—Ü–µ: 15%

            // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Ä–µ—à—Ç—É 40% –Ω–∞ —ñ–Ω—à–∏—Ö –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
            const remainingPrize = totalPrize - Math.round(totalPrize * 0.6);
            const prizePerPerson = Math.round(remainingPrize / (winnersCount - 3));

            for (let i = 3; i < winnersCount; i++) {
                prizes.push(`${prizePerPerson} USDT`);
            }
        }
    } else if (isWinixRaffle) {
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É WINIX
        const winixMatch = prize.match(/(\d+(?:,\d+)*)\s*(?:k\s*)?WINIX/);
        if (winixMatch && winixMatch[1]) {
            let winixAmount = winixMatch[1].replace(/,/g, '');
            if (prize.includes('k WINIX')) {
                totalPrize = parseInt(winixAmount) * 1000;
            } else {
                totalPrize = parseInt(winixAmount);
            }
        } else {
            totalPrize = 20000; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }

        // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ WINIX –∑–∞ –º—ñ—Å—Ü—è–º–∏
        if (winnersCount === 15) {
            // –î–ª—è 30,000 WINIX —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ
            const prizePerPerson = Math.round(totalPrize / winnersCount);
            for (let i = 0; i < winnersCount; i++) {
                prizes.push(`${prizePerPerson.toLocaleString()} WINIX`);
            }
        } else if (winnersCount === 5) {
            // –î–ª—è 20,000 WINIX
            prizes = [
                "6,000 WINIX", "5,000 WINIX", "4,000 WINIX",
                "3,000 WINIX", "2,000 WINIX"
            ];
        } else {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª
            prizes.push(`${Math.round(totalPrize * 0.25).toLocaleString()} WINIX`); // 1 –º—ñ—Å—Ü–µ: 25%
            prizes.push(`${Math.round(totalPrize * 0.20).toLocaleString()} WINIX`); // 2 –º—ñ—Å—Ü–µ: 20%
            prizes.push(`${Math.round(totalPrize * 0.15).toLocaleString()} WINIX`); // 3 –º—ñ—Å—Ü–µ: 15%

            // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Ä–µ—à—Ç—É 40% –Ω–∞ —ñ–Ω—à–∏—Ö –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
            const remainingPrize = totalPrize - Math.round(totalPrize * 0.6);
            const prizePerPerson = Math.round(remainingPrize / (winnersCount - 3));

            for (let i = 3; i < winnersCount; i++) {
                prizes.push(`${prizePerPerson.toLocaleString()} WINIX`);
            }
        }
    }

    // –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —É –ø—Ä–µ–º—ñ—É–º-—Å—Ç–∏–ª—ñ
    let winnersHTML = '';

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º)
    let userPosition = status === 'won' ? Math.floor(Math.random() * 3) : -1; // –Ø–∫—â–æ –ø–µ—Ä–µ–º—ñ–≥, —Å—Ç–∞–≤–∏–º–æ –≤ —Ç–æ–ø-3

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    for (let i = 0; i < winnersCount; i++) {
        const isCurrentUser = i === userPosition;
        const userId = isCurrentUser ? '12345678' : `${Math.floor(10000000 + Math.random() * 90000000)}`;
        const userName = isCurrentUser ? '–í–∏' : `–£—á–∞—Å–Ω–∏–∫ #${userId.substring(0, 5)}`;
        const prize = prizes[i] || (isUsdtRaffle ? "1 USDT" : "1,000 WINIX"); // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç

        winnersHTML += `
            <div style="display: flex; align-items: center; background: ${isCurrentUser ? 'linear-gradient(145deg, rgba(30, 113, 161, 0.5), rgba(0, 201, 167, 0.3))' : 'rgba(30, 39, 70, 0.5)'};
                       border-radius: 8px; padding: 10px; margin-bottom: 8px; ${isCurrentUser ? 'border: 1px solid rgba(0, 201, 167, 0.5);' : ''}">
                <div style="width: 36px; height: 36px; min-width: 36px; background: ${i < 3 ? 
                          (i === 0 ? 'linear-gradient(145deg, #FFD700, #FFA500)' : 
                           i === 1 ? 'linear-gradient(145deg, #C0C0C0, #A9A9A9)' : 
                           'linear-gradient(145deg, #CD7F32, #A0522D)') : 
                          'rgba(0, 0, 0, 0.3)'};
                         border-radius: 50%; display: flex; justify-content: center; align-items: center; margin-right: 12px;
                         ${i < 3 ? `box-shadow: 0 0 8px ${i === 0 ? 'rgba(255, 215, 0, 0.5)' : i === 1 ? 'rgba(192, 192, 192, 0.5)' : 'rgba(205, 127, 50, 0.5)'};` : ''}">
                    <span style="font-weight: bold; color: white; text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);">${i + 1}</span>
                </div>
                <div style="flex: 1;">
                    <div style="font-weight: bold; color: ${isCurrentUser ? '#FFD700' : 'white'};
                               ${isCurrentUser ? 'text-shadow: 0 0 3px rgba(255, 215, 0, 0.5);' : ''}">
                        ${userName}
                    </div>
                    <div style="font-size: 0.8rem; color: rgba(255, 255, 255, 0.7);">
                        ID: ${userId}
                    </div>
                </div>
                <div style="background: linear-gradient(90deg, #FFD700, #00C9A7); padding: 5px 10px; border-radius: 20px; 
                           font-weight: bold; color: #1A1A2E; font-size: 0.875rem; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);">
                    ${prize}
                </div>
            </div>
        `;
    }

    // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É, —è–∫—â–æ –±–∞–≥–∞—Ç–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    const scrollStyle = winnersCount > 6 ? 'max-height: 280px; overflow-y: auto; padding-right: 8px;' : '';

    // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">–î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h2>
                <span class="modal-close">√ó</span>
            </div>
            
            <div class="prize-details">
                <div class="detail-item">
                    <div class="detail-label">–î–∞—Ç–∞:</div>
                    <div class="detail-value">${date}</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">–ü—Ä–∏–∑:</div>
                    <div class="detail-value">${prize}</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">–°—Ç–∞—Ç—É—Å:</div>
                    <div class="detail-value ${status}">${result}</div>
                </div>
            </div>
            
            <div class="participation-info">
                <h3>–ü–µ—Ä–µ–º–æ–∂—Ü—ñ</h3>
                <div style="margin-top: 16px; ${scrollStyle}">
                    ${winnersHTML}
                </div>
            </div>
            
            <button class="join-button" id="close-history-btn">–ó–ê–ö–†–ò–¢–ò</button>
        </div>
    `;

    // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    document.body.appendChild(modal);

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    const closeButton = modal.querySelector('.modal-close');
    if (closeButton) {
        closeButton.addEventListener('click', function() {
            modal.classList.remove('open');
            setTimeout(() => modal.remove(), 300);
        });
    }

    const closeActionButton = modal.querySelector('#close-history-btn');
    if (closeActionButton) {
        closeActionButton.addEventListener('click', function() {
            modal.classList.remove('open');
            setTimeout(() => modal.remove(), 300);
        });
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    requestAnimationFrame(() => {
        modal.classList.add('open');
    });

    return modal;
}

    /**
     * –ü–æ–∫—Ä–∞—â–µ–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function enhanceRaffleHistory() {
        console.log("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —ñ—Å—Ç–æ—Ä—ñ—è –≤ localStorage
        let history = JSON.parse(safeGetItem('raffleHistory', '[]'));

        // –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ
        if (history.length === 0) {
            history = [
                {
                    date: '20.03.2025',
                    prize: '250 USDT + 130k WINIX ‚Ä¢ 10 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤',
                    result: '–í–∏ –±—É–ª–∏ —Å–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤!',
                    status: 'won',
                    winners: generateRealWinners(true, true, 10, 'won')
                },
                {
                    date: '15.03.2025',
                    prize: '30,000 WINIX ‚Ä¢ 15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤',
                    result: '–í–∏ –±—É–ª–∏ —É—á–∞—Å–Ω–∏–∫–æ–º',
                    status: 'participated',
                    winners: generateRealWinners(false, true, 15, 'participated')
                },
                {
                    date: '01.03.2025',
                    prize: '100 USDT + 50k WINIX ‚Ä¢ 5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤',
                    result: '–í–∏ –±—É–ª–∏ —É—á–∞—Å–Ω–∏–∫–æ–º',
                    status: 'participated',
                    winners: generateRealWinners(true, true, 5, 'participated')
                }
            ];

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ
            safeSetItem('raffleHistory', JSON.stringify(history));
        }

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        const historyContainer = document.getElementById('history-container');
        if (!historyContainer) return;

        // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        historyContainer.innerHTML = '';

        // –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Å —ñ—Å—Ç–æ—Ä—ñ—ó
        history.forEach((item, index) => {
            const historyCard = document.createElement('div');
            historyCard.className = 'history-card';
            historyCard.innerHTML = `
                <div class="history-date">${item.date}</div>
                <div class="history-prize">${item.prize}</div>
                <div class="history-winners">${item.result}</div>
                <div class="history-status ${item.status}">${item.status === 'won' ? '–í–∏–≥—Ä–∞–Ω–æ' : '–£—á–∞—Å—Ç—å'}</div>
                <div class="view-details-hint">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</div>
            `;

            // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
            historyCard.style.cursor = 'pointer';
            historyCard.addEventListener('click', () => {
                console.log(`–ö–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á—Ü—ñ —ñ—Å—Ç–æ—Ä—ñ—ó #${index + 1}`, history[index]);
                createRaffleDetailsModal(history[index]);
            });

            // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            historyContainer.appendChild(historyCard);
        });

        console.log("–Ü—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–æ");
    }

    /**
     * –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    function overrideOpenRaffleDetails() {
        console.log("–ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É");

        window.openRaffleDetails = function(raffleId, raffleType) {
            console.log(`–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${raffleId}, —Ç–∏–ø: ${raffleType}`);

            const coinsBalance = getCoinsBalance();

            if (coinsBalance < 1) {
                showToast(getLocalizedText(
                    '–î–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —â–æ–Ω–∞–π–º–µ–Ω—à–µ 1 –∂–µ—Ç–æ–Ω',
                    '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º 1 –∂–µ—Ç–æ–Ω',
                    'You need at least 1 coin to participate in the raffle'
                ), 3000);
                return;
            }

            const modalId = raffleType === 'daily' ? 'daily-raffle-modal' : 'main-raffle-modal';
            const modal = document.getElementById(modalId);
            if (!modal) {
                console.error(`–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ id ${modalId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                return;
            }

            const inputId = raffleType === 'daily' ? 'daily-token-amount' : 'main-token-amount';
            const input = document.getElementById(inputId);
            if (input) input.value = '1';

            const btnId = raffleType === 'daily' ? 'daily-join-btn' : 'main-join-btn';
            const joinBtn = document.getElementById(btnId);
            if (joinBtn) {
                joinBtn.setAttribute('data-raffle-id', raffleId);
                joinBtn.setAttribute('data-raffle-type', raffleType);
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            const raffleData = getRaffleData();
            const mainCount = raffleData.mainRaffleParticipants || 0;
            const dailyCount = raffleData.dailyRaffleParticipants || 0;

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            if (raffleType === 'daily') {
                const titleElement = document.getElementById('daily-modal-title');
                if (titleElement) titleElement.textContent = getLocalizedText('–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à', 'Daily Giveaway');

                const prizeElement = document.getElementById('daily-prize-value');
                if (prizeElement) prizeElement.textContent = '30,000 WINIX (15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤)';

                const participantsElement = document.getElementById('daily-participants');
                if (participantsElement) participantsElement.textContent = dailyCount.toString();
            } else {
                const titleElement = document.getElementById('main-modal-title');
                if (titleElement) titleElement.textContent = getLocalizedText('–ì—Ä–∞–Ω–¥ –†–æ–∑—ñ–≥—Ä–∞—à', '–ì—Ä–∞–Ω–¥ –†–æ–∑—ã–≥—Ä—ã—à', 'Grand Giveaway');

                const prizeElement = document.getElementById('main-prize-value');
                if (prizeElement) prizeElement.textContent = '250 USDT + 130,000 WINIX (10 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤)';

                const participantsElement = document.getElementById('main-participants');
                if (participantsElement) participantsElement.textContent = mainCount.toString();
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            updateRaffleEndDates();

            // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            modal.classList.add('open');
        };
    }

    // ====== –°–ò–°–¢–ï–ú–ê –ë–ï–ô–î–ñ–Ü–í ======

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞—á—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂
     */
    function giveRewardForBadge(badgeType, rewardAmount) {
        console.log(`–ó–∞–ø—É—Å–∫ –≤–∏–¥–∞—á—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂ ${badgeType}: ${rewardAmount} WINIX`);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–µ–π–¥–∂ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ
        const storageKey = `badge_${badgeType}_claimed`;
        if (safeGetItem(storageKey, 'false') === 'true') {
            console.log(`–ë–µ–π–¥–∂ ${badgeType} –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–∞–Ω—ñ—à–µ`);
            return false;
        }

        // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ WINIX
        const success = addTokens(rewardAmount, getLocalizedText(
            `–ù–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –±–µ–π–¥–∂ "${getBadgeName(badgeType)}"`,
            `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–µ–π–¥–∂ "${getBadgeName(badgeType)}"`,
            `Reward for "${getBadgeName(badgeType)}" badge`
        ));

        // –Ø–∫—â–æ –Ω–∞–≥–æ—Ä–æ–¥—É –≤–∏–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        if (success) {
            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –±–µ–π–¥–∂ —è–∫ –æ—Ç—Ä–∏–º–∞–Ω–∏–π
            safeSetItem(storageKey, 'true');

            // –í—ñ–∑—É–∞–ª—å–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –±–µ–π–¥–∂
            const badgeElement = document.querySelector(`.badge-item:nth-child(${getBadgeIndex(badgeType)})`);
            if (badgeElement) {
                badgeElement.classList.add('badge-completed');
                addWatermarkToBadge(badgeElement);
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏
            showToast(getLocalizedText(
                `–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ${rewardAmount} WINIX –∑–∞ –±–µ–π–¥–∂ "${getBadgeName(badgeType)}"!`,
                `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${rewardAmount} WINIX –∑–∞ –±–µ–π–¥–∂ "${getBadgeName(badgeType)}"!`,
                `Congratulations! You received ${rewardAmount} WINIX for the "${getBadgeName(badgeType)}" badge!`
            ));

            console.log(`‚úÖ –ë–µ–π–¥–∂ "${badgeType}" —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –Ω–∞–≥–æ—Ä–æ–¥–æ—é ${rewardAmount} WINIX`);
            return true;
        }

        console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ –±–µ–π–¥–∂ ${badgeType}`);
        return false;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –µ–ª–µ–º–µ–Ω—Ç–∞ –±–µ–π–¥–∂–∞
     */
    function getBadgeIndex(badgeType) {
        switch (badgeType) {
            case 'winner': return 1;
            case 'beginner': return 2;
            case 'rich': return 3;
            default: return 1;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –±–µ–π–¥–∂–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    function getBadgeName(badgeType) {
        const lang = getCurrentLanguage();

        switch (badgeType) {
            case 'winner':
                return lang === 'ru' ? '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å' : (lang === 'en' ? 'Winner' : '–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å');
            case 'beginner':
                return lang === 'ru' ? '–ù–æ–≤–∏—á–æ–∫' : (lang === 'en' ? 'Beginner' : '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å');
            case 'rich':
                return lang === 'ru' ? '–ë–æ–≥–∞—á' : (lang === 'en' ? 'Rich' : '–ë–∞–≥–∞—Ç—ñ–π');
            default:
                return badgeType;
        }
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–æ –±–µ–π–¥–∂–∞
     */
    function addWatermarkToBadge(badgeElement) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
        if (badgeElement.querySelector('.badge-watermark')) {
            return;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
        const watermark = document.createElement('div');
        watermark.className = 'badge-watermark';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É
        const watermarkText = getLocalizedText('–û–¢–†–ò–ú–ê–ù–û', '–ü–û–õ–£–ß–ï–ù–û', 'RECEIVED');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç—É
        const textElement = document.createElement('div');
        textElement.className = 'badge-watermark-text';
        textElement.textContent = watermarkText;

        // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
        watermark.appendChild(textElement);
        badgeElement.style.position = 'relative';
        badgeElement.appendChild(watermark);
    }

    /**
     * –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –±–µ–π–¥–∂—ñ–≤
     */
    function markCompletedBadges() {
        console.log("–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –±–µ–π–¥–∂—ñ–≤");

        const badges = [
            {selector: '.badge-item:nth-child(1)', storageKey: 'badge_winner_claimed'},
            {selector: '.badge-item:nth-child(2)', storageKey: 'badge_beginner_claimed'},
            {selector: '.badge-item:nth-child(3)', storageKey: 'badge_rich_claimed'}
        ];

        badges.forEach(badge => {
            if (safeGetItem(badge.storageKey, 'false') === 'true') {
                const badgeElement = document.querySelector(badge.selector);
                if (!badgeElement) return;

                // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
                badgeElement.classList.add('badge-completed');

                // –î–æ–¥–∞—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
                if (!badgeElement.querySelector('.badge-watermark')) {
                    addWatermarkToBadge(badgeElement);
                }
            }
        });
    }

    /**
     * –ó–∞–º—ñ–Ω–∞ –µ–º–æ–¥–∂—ñ –±–µ–π–¥–∂—ñ–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    function replaceBadgeEmojisWithImages() {
        console.log("–ó–∞–º—ñ–Ω–∞ –µ–º–æ–¥–∂—ñ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤");

        const badgeImages = [
            {
                selector: '.badge-item:nth-child(1) .badge-icon', // –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å
                imagePath: 'assets/badge-winner.png',
                altText: getBadgeName('winner')
            },
            {
                selector: '.badge-item:nth-child(2) .badge-icon', // –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å
                imagePath: 'assets/badge-beginner.png',
                altText: getBadgeName('beginner')
            },
            {
                selector: '.badge-item:nth-child(3) .badge-icon', // –ë–∞–≥–∞—Ç—ñ–π
                imagePath: 'assets/badge-rich.png',
                altText: getBadgeName('rich')
            }
        ];

        badgeImages.forEach(badge => {
            const badgeIcon = document.querySelector(badge.selector);
            if (!badgeIcon) return;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (badgeIcon.querySelector('img')) return;

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª–∞—Å locked, —è–∫—â–æ –≤—ñ–Ω —î
            const isLocked = badgeIcon.classList.contains('locked');

            // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ñ–¥ –µ–º–æ–¥–∂—ñ
            const originalContent = badgeIcon.innerHTML;
            badgeIcon.innerHTML = '';

            // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            const img = document.createElement('img');
            img.src = badge.imagePath;
            img.alt = badge.altText;
            img.className = 'badge-image';

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            img.onerror = function() {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${badge.imagePath}`);
                badgeIcon.innerHTML = originalContent;
            };

            // –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            badgeIcon.appendChild(img);

            // –Ø–∫—â–æ –±–µ–π–¥–∂ –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π, –¥–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–∞–º–∫–∞
            if (isLocked) {
                const lockIcon = document.createElement('div');
                lockIcon.className = 'lock-icon';
                lockIcon.textContent = 'üîí';
                badgeIcon.appendChild(lockIcon);
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å—ñ—Ö –±–µ–π–¥–∂—ñ–≤ —ñ –≤–∏–¥–∞—á–∞ –Ω–∞–≥–æ—Ä–æ–¥ –∑–∞ –Ω–∏—Ö, —è–∫—â–æ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ
     */
    function checkAllBadges() {
        console.log("üèÜ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –¥–ª—è –≤—Å—ñ—Ö –±–µ–π–¥–∂—ñ–≤...");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const statistics = JSON.parse(safeGetItem('userStatistics', '{}'));
            const participationsCount = statistics.participationsCount || 0;
            const winsCount = statistics.winsCount || 0;
            const currentBalance = getTokensBalance();

            console.log("–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", {
                participationsCount,
                winsCount,
                currentBalance
            });

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–π–¥–∂ "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å" (—É–º–æ–≤–∞: 5 —É—á–∞—Å—Ç–µ–π)
            if (participationsCount >= 5 && safeGetItem('badge_beginner_claimed', 'false') !== 'true') {
                console.log("–£–º–æ–≤–∞ –¥–ª—è –±–µ–π–¥–∂–∞ '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å' –≤–∏–∫–æ–Ω–∞–Ω–∞");
                giveRewardForBadge('beginner', 1000);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–π–¥–∂ "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å" (—É–º–æ–≤–∞: —Ö–æ—á–∞ –± 1 –ø–µ—Ä–µ–º–æ–≥–∞)
            if (winsCount > 0 && safeGetItem('badge_winner_claimed', 'false') !== 'true') {
                console.log("–£–º–æ–≤–∞ –¥–ª—è –±–µ–π–¥–∂–∞ '–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å' –≤–∏–∫–æ–Ω–∞–Ω–∞");
                giveRewardForBadge('winner', 2500);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–π–¥–∂ "–ë–∞–≥–∞—Ç—ñ–π" (—É–º–æ–≤–∞: –±–∞–ª–∞–Ω—Å 50,000 WINIX)
            if (currentBalance >= 50000 && safeGetItem('badge_rich_claimed', 'false') !== 'true') {
                console.log("–£–º–æ–≤–∞ –¥–ª—è –±–µ–π–¥–∂–∞ '–ë–∞–≥–∞—Ç—ñ–π' –≤–∏–∫–æ–Ω–∞–Ω–∞");
                giveRewardForBadge('rich', 5000);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –±–µ–π–¥–∂—ñ–≤
            markCompletedBadges();
            replaceBadgeEmojisWithImages();
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –±–µ–π–¥–∂—ñ–≤:", error);
        }
    }

    // ====== –§–£–ù–ö–¶–Ü–Ø –ë–û–ù–£–°–£ –ù–û–í–ê–ß–ö–ê ======

    /**
     * –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     */
    function claimNewbieBonus() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å
        if (safeGetItem('newbie_bonus_claimed', 'false') === 'true') {
            showToast(getLocalizedText(
                '–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!',
                '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!',
                'You have already received the newbie bonus!'
            ), 3000);
            return;
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.classList.add('show');

        // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
        setTimeout(() => {
            try {
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                if (safeGetItem('newbie_bonus_claimed', 'false') === 'true') {
                    showToast(getLocalizedText(
                        '–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!',
                        '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!',
                        'You have already received the newbie bonus!'
                    ), 3000);
                    if (spinner) spinner.classList.remove('show');
                    return;
                }

                // –°—É–º–∞ –±–æ–Ω—É—Å—É
                const bonusAmount = 150;

                // –î–æ–¥–∞—î–º–æ –±–æ–Ω—É—Å
                addTokens(bonusAmount, getLocalizedText(
                    '–ë–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞',
                    '–ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞',
                    'Newbie bonus'
                ));

                // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ—Ç—Ä–∏–º–∞–Ω–∏–π
                safeSetItem('newbie_bonus_claimed', 'true');

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                showToast(getLocalizedText(
                    `–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ${bonusAmount} WINIX —è–∫ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!`,
                    `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${bonusAmount} WINIX –∫–∞–∫ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!`,
                    `Congratulations! You received ${bonusAmount} WINIX as a newbie bonus!`
                ), 3000);

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
                const newbieButtons = document.querySelectorAll('.mini-raffle-button[data-raffle-id="newbie"]');
                newbieButtons.forEach(button => {
                    button.textContent = getLocalizedText('–û—Ç—Ä–∏–º–∞–Ω–æ', '–ü–æ–ª—É—á–µ–Ω–æ', 'Received');
                    button.disabled = true;
                    button.style.opacity = '0.6';
                    button.style.cursor = 'default';
                });

                // –î–æ–¥–∞—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
                setTimeout(() => {
                    markNewbieBonus();
                }, 300);

            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞:', error);
                showToast(getLocalizedText(
                    '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–æ–Ω—É—Å—É',
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞',
                    'An error occurred while receiving the bonus'
                ), 3000);
            } finally {
                // –•–æ–≤–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (spinner) spinner.classList.remove('show');
            }
        }, 1000);
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —ñ –º–∞—Ä–∫—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     */
    function markNewbieBonus() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ
        if (safeGetItem('newbie_bonus_claimed', 'false') !== 'true') {
            return;
        }

        console.log("–ü–æ—à—É–∫ –±–ª–æ–∫—É –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É");

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É
        const watermarkText = getLocalizedText('–û–¢–†–ò–ú–ê–ù–û', '–ü–û–õ–£–ß–ï–ù–û', 'RECEIVED');

        // –®—É–∫–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –±–æ–Ω—É—Å–æ–º –Ω–æ–≤–∞—á–∫–∞
        let foundContainer = false;

        // 1. –®—É–∫–∞—î–º–æ –∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–º data-raffle-id
        const newbieButtons = document.querySelectorAll('.mini-raffle-button[data-raffle-id="newbie"]');
        newbieButtons.forEach(button => {
            const container = button.closest('.mini-raffle');
            if (container) {
                addWatermarkToContainer(container, watermarkText);
                foundContainer = true;
            }
        });

        // 2. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —à—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        if (!foundContainer) {
            const allContainers = document.querySelectorAll('.mini-raffle');
            allContainers.forEach(container => {
                const text = container.textContent.toLowerCase();

                if (text.includes('–±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞–º') ||
                    text.includes('–±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞–º') ||
                    text.includes('newbie bonus') ||
                    (text.includes('–±–æ–Ω—É—Å') && text.includes('150 winix')) ||
                    (text.includes('bonus') && text.includes('150 winix'))) {

                    addWatermarkToContainer(container, watermarkText);
                    foundContainer = true;
                }
            });
        }

        console.log(foundContainer ? "–ó–Ω–∞–π–¥–µ–Ω–æ —ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ –±–ª–æ–∫ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞" : "–ë–ª–æ–∫ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    function addWatermarkToContainer(container, text) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫
        if (container.querySelector('.danger-watermark')) {
            return;
        }

        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container.classList.add('has-watermark');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫—É
        const watermark = document.createElement('div');
        watermark.className = 'danger-watermark';
        watermark.style.position = 'absolute';
        watermark.style.top = '0';
        watermark.style.left = '0';
        watermark.style.right = '0';
        watermark.style.bottom = '0';
        watermark.style.display = 'flex';
        watermark.style.justifyContent = 'center';
        watermark.style.alignItems = 'center';
        watermark.style.pointerEvents = 'none';
        watermark.style.overflow = 'hidden';

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–º–Ω–∏–π –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
        const overlay = document.createElement('div');
        overlay.className = 'danger-watermark-overlay';
        overlay.style.position = 'absolute';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.width = '100%';
        overlay.style.height = '100%';
        overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.3)';

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É —Å—Ç—Ä—ñ—á–∫—É
        const textElement = document.createElement('div');
        textElement.className = 'danger-watermark-text';
        textElement.textContent = text;
        textElement.style.position = 'absolute';
        textElement.style.width = '250%';
        textElement.style.textAlign = 'center';
        textElement.style.transform = 'rotate(-35deg)';
        textElement.style.fontSize = '24px';
        textElement.style.fontWeight = '900';
        textElement.style.letterSpacing = '2px';
        textElement.style.color = 'black';
        textElement.style.background = 'repeating-linear-gradient(45deg, rgba(255, 205, 0, 0.8), rgba(255, 205, 0, 0.8) 10px, rgba(0, 0, 0, 0.8) 10px, rgba(0, 0, 0, 0.8) 20px)';
        textElement.style.padding = '10px 0';
        textElement.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.7)';
        textElement.style.textShadow = '-1px -1px 0 white, 1px -1px 0 white, -1px 1px 0 white, 1px 1px 0 white';
        textElement.style.whiteSpace = 'nowrap';

        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
        watermark.appendChild(overlay);
        watermark.appendChild(textElement);

        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—å position –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if (getComputedStyle(container).position === 'static') {
            container.style.position = 'relative';
        }

        container.appendChild(watermark);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É —ñ –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ —ó—ó
        const button = container.querySelector('.mini-raffle-button');
        if (button) {
            // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç
            button.textContent = getLocalizedText('–û—Ç—Ä–∏–º–∞–Ω–æ', '–ü–æ–ª—É—á–µ–Ω–æ', 'Received');

            // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
            button.disabled = true;
            button.style.opacity = '0.6';
            button.style.cursor = 'default';
            button.style.backgroundColor = 'rgba(100, 100, 100, 0.3)';
            button.style.backgroundImage = 'none';

            // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫, —è–∫–∏–π –ø–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            newButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                showToast(getLocalizedText(
                    '–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!',
                    '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!',
                    'You have already received the newbie bonus!'
                ), 2000);

                return false;
            });
        }
    }

    // ====== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ö–ù–û–ü–û–ö –†–û–ó–Ü–ì–†–ê–®–Ü–í ======

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function setupRaffleButtons() {
        console.log("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

        // –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        const joinButtons = document.querySelectorAll('.join-button[data-raffle-id]');
        joinButtons.forEach(button => {
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            newButton.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type') || 'main';
                openRaffleDetails(raffleId, raffleType);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        const miniButtons = document.querySelectorAll('.mini-raffle-button[data-raffle-id]');
        miniButtons.forEach(button => {
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            newButton.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type') || 'daily';

                if (raffleId === 'newbie') {
                    claimNewbieBonus();
                } else {
                    openRaffleDetails(raffleId, raffleType);
                }
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–Ω–∞—Ö
        const modalMainJoinBtn = document.getElementById('main-join-btn');
        if (modalMainJoinBtn) {
            const newMainJoinBtn = modalMainJoinBtn.cloneNode(true);
            modalMainJoinBtn.parentNode.replaceChild(newMainJoinBtn, modalMainJoinBtn);

            newMainJoinBtn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type');
                participateInRaffle(raffleId, raffleType, 'main-token-amount');
            });
        }

        const modalDailyJoinBtn = document.getElementById('daily-join-btn');
        if (modalDailyJoinBtn) {
            const newDailyJoinBtn = modalDailyJoinBtn.cloneNode(true);
            modalDailyJoinBtn.parentNode.replaceChild(newDailyJoinBtn, modalDailyJoinBtn);

            newDailyJoinBtn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                const raffleType = this.getAttribute('data-raffle-type');
                participateInRaffle(raffleId, raffleType, 'daily-token-amount');
            });
        }

        console.log("–í—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
    }

    // ====== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò –í–ò–ü–†–ê–í–õ–ï–ù–¨ ======

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤ —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
     */
    function syncLocalStorageKeys() {
        console.log("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤ —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ");

        // –ú–∞–ø–∞ –∫–ª—é—á—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏
        const keyMap = {
            // –ë–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
            'userCoins': 'winix_coins',

            // –ë–∞–ª–∞–Ω—Å WINIX
            'userTokens': 'winix_balance',

            // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            'transactions': 'winix_transactions',

            // –£—á–∞—Å—Ç—å –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            'currentParticipations': 'winix_participations',

            // –Ü–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            'userLanguage': 'winix_language'
        };

        // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –ø–∞—Ä–∞—Ö –∫–ª—é—á—ñ–≤
        for (const [key1, key2] of Object.entries(keyMap)) {
            try {
                const value1 = safeGetItem(key1, null);
                const value2 = safeGetItem(key2, null);

                // –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –∫–ª—é—á—ñ –º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è, –∞–ª–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è
                if (value1 !== null && value2 !== null && value1 !== value2) {
                    // –î–ª—è —á–∏—Å–µ–ª –≤–∏–±–∏—Ä–∞—î–º–æ –±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                    if (!isNaN(parseFloat(value1)) && !isNaN(parseFloat(value2))) {
                        const num1 = parseFloat(value1);
                        const num2 = parseFloat(value2);
                        const maxValue = Math.max(num1, num2).toString();

                        safeSetItem(key1, maxValue);
                        safeSetItem(key2, maxValue);
                        console.log(`–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è ${key1}/${key2}: ${maxValue}`);
                    }
                    // –î–ª—è JSON-–¥–∞–Ω–∏—Ö –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
                    else if ((key1 === 'transactions' || key2 === 'transactions') &&
                            (value1.startsWith('[') || value2.startsWith('['))) {
                        try {
                            // –ü–∞—Ä—Å–∏–º–æ –æ–±–∏–¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è
                            const data1 = JSON.parse(value1);
                            const data2 = JSON.parse(value2);

                            // –í–∏–±–∏—Ä–∞—î–º–æ —Ç–æ–π –º–∞—Å–∏–≤, —è–∫–∏–π –º–∞—î –±—ñ–ª—å—à–µ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                            if (Array.isArray(data1) && Array.isArray(data2)) {
                                const result = data1.length >= data2.length ? data1 : data2;
                                const jsonResult = JSON.stringify(result);

                                safeSetItem(key1, jsonResult);
                                safeSetItem(key2, jsonResult);
                                console.log(`–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ JSON-–¥–∞–Ω—ñ –¥–ª—è ${key1}/${key2}`);
                            }
                        } catch (e) {
                            console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó JSON-–¥–∞–Ω–∏—Ö –¥–ª—è ${key1}/${key2}:`, e);
                        }
                    }
                    // –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö –ø—Ä–æ—Å—Ç–æ –∫–æ–ø—ñ—é—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –∫–ª—é—á–∞
                    else {
                        safeSetItem(key2, value1);
                        console.log(`–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ ${key1} –≤ ${key2}: ${value1}`);
                    }
                }
                // –Ø–∫—â–æ –æ–¥–∏–Ω –∑ –∫–ª—é—á—ñ–≤ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è, –∞ —ñ–Ω—à–∏–π - –Ω—ñ
                else if (value1 !== null && value2 === null) {
                    safeSetItem(key2, value1);
                    console.log(`–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ ${key1} –≤ ${key2}: ${value1}`);
                }
                else if (value1 === null && value2 !== null) {
                    safeSetItem(key1, value2);
                    console.log(`–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ ${key2} –≤ ${key1}: ${value2}`);
                }
            } catch (e) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤ ${key1}/${key2}:`, e);
            }
        }

        console.log("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫–ª—é—á—ñ–≤ —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    /**
     * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
     */
    function initSystem() {
        console.log("üöÄ –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å WINIX");

        try {
            // 1. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫–ª—é—á—ñ –≤ localStorage
            syncLocalStorageKeys();


            // 3. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
            fixCloseButtons();


            // 5. –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            updateRaffleParticipantsCount();

            // 6. –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            updateRaffleEndDates();

            // 7. –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            overrideOpenRaffleDetails();

            // 8. –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            setupRaffleButtons();

            // 9. –ü–æ–∑–Ω–∞—á–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –±–µ–π–¥–∂—ñ
            markCompletedBadges();

            // 10. –ó–∞–º—ñ–Ω—é—î–º–æ –µ–º–æ–¥–∂—ñ –±–µ–π–¥–∂—ñ–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            replaceBadgeEmojisWithImages();

            // 11. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –≤–∏–¥–∞—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂—ñ
            checkAllBadges();

            // 12. –ü–æ–∑–Ω–∞—á–∞—î–º–æ –±–ª–æ–∫–∏ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞, —è–∫—â–æ –≤–æ–Ω–∏ —î
            markNewbieBonus();

            // 13. –ü–æ–∫—Ä–∞—â—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ —î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            const tabButton = document.querySelector('.tab-button[data-tab="past"]');
            if (tabButton || document.getElementById('history-container')) {
                enhanceRaffleHistory();

                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ú–∏–Ω—É–ª—ñ"
                if (tabButton) {
                    tabButton.addEventListener('click', function() {
                        setTimeout(enhanceRaffleHistory, 300);
                    });
                }
            }
            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–∫—Å–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–∏—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó
const dailyModal = document.getElementById('daily-raffle-modal');
if (dailyModal) {
    const dailyCloseBtn = dailyModal.querySelector('.modal-close');
    if (dailyCloseBtn) {
        dailyCloseBtn.addEventListener('click', function() {
            dailyModal.classList.remove('open');
        });
    }

    const dailyCloseActionBtn = dailyModal.querySelector('#daily-close-btn, button:contains ("–ó–∞–∫—Ä–∏—Ç–∏")');
    if (dailyCloseActionBtn) {
        dailyCloseActionBtn.addEventListener('click', function() {
            dailyModal.classList.remove('open');
        });
    }
}

            // 14. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥—Ü—ñ "–ú–∏–Ω—É–ª—ñ", –æ–Ω–æ–≤–∏–º–æ —ó—ó –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (document.querySelector('.tab-button[data-tab="past"].active') ||
                document.getElementById('past-raffles')?.classList.contains('active')) {
                setTimeout(enhanceRaffleHistory, 500);
            }

            console.log("‚úÖ –°–∏—Å—Ç–µ–º—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å WINIX —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
            setTimeout(() => {
                showToast(getLocalizedText(
                    '–°–∏—Å—Ç–µ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX —É—Å–ø—ñ—à–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–æ',
                    '–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π WINIX —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞',
                    'WINIX raffle system has been successfully enhanced'
                ), 3000);
            }, 2000);

            return true;
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:", error);
            return false;
        }
    }
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
setInterval(() => {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    const endDates = updateRaffleEndDates();
    if (endDates && endDates.mainEndDate) {
        updateProgressBar(endDates.mainEndDate);
    }
}, 60000); // 60000 –º—Å = 1 —Ö–≤–∏–ª–∏–Ω–∞

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑–∑–æ–≤–Ω—ñ
    window.winixUnifiedFixes = {
        participateInRaffle,
        createRaffleDetailsModal,
        claimNewbieBonus,
        checkAllBadges,
        markCompletedBadges,
        giveRewardForBadge,
        enhanceRaffleHistory
    };

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSystem);
    } else {
        // –Ø–∫—â–æ DOM –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
        setTimeout(initSystem, 100);
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó
    setTimeout(initSystem, 1500);
})();
