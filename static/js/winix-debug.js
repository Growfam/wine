/**
 * winix-debug.js
 *
 * –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –≤ —Å–∏—Å—Ç–µ–º—ñ WINIX.
 * –¶–µ–π —Ñ–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–º –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏.
 */

(function() {
    console.log("üîç WINIX-DEBUG: –ó–∞–ø—É—Å–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è...");

    // –û–±'—î–∫—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    window.WinixDebug = {
        // –í–µ—Ä—Å—ñ—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        version: '1.0.0',

        // –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        enableVerboseLogging: false,

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏
         * @returns {Object} –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
         */
        checkSystemStatus: function() {
            const status = {
                core: !!window.WinixCore,
                coreInitialized: !!window.WinixCoreInitialized,
                connector: typeof initPage !== 'undefined',
                fix: typeof window.balanceSystem !== 'undefined',
                initState: !!window.WinixInitState,
                fullyInitialized: window.WinixInitState ? window.WinixInitState.isFullyInitialized : false
            };

            console.log("üîç WINIX-DEBUG: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:", status);
            return status;
        },

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –≤ localStorage
         * @returns {Object} –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏
         */
        checkStorageConflicts: function() {
            const conflicts = {};
            const keyMappings = {
                'winix_balance': 'userTokens',
                'winix_coins': 'userCoins',
                'winix_staking': 'stakingData',
                'winix_transactions': 'transactions'
            };

            for (const [coreKey, fixKey] of Object.entries(keyMappings)) {
                const coreData = localStorage.getItem(coreKey);
                const fixData = localStorage.getItem(fixKey);

                if (coreData && fixData && coreData !== fixData) {
                    conflicts[coreKey] = {
                        coreValue: coreData,
                        fixValue: fixData
                    };
                }
            }

            if (Object.keys(conflicts).length > 0) {
                console.warn("‚ö†Ô∏è WINIX-DEBUG: –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –≤ localStorage:", conflicts);
            } else {
                console.log("‚úÖ WINIX-DEBUG: –ö–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –≤ localStorage –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            return conflicts;
        },

        /**
         * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –≤ localStorage
         * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
         */
        fixStorageConflicts: function() {
            try {
                const conflicts = this.checkStorageConflicts();

                if (Object.keys(conflicts).length === 0) {
                    return true; // –ù—ñ—á–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏
                }

                // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏, –Ω–∞–¥–∞—é—á–∏ –ø–µ—Ä–µ–≤–∞–≥—É coreKey
                for (const [coreKey, conflict] of Object.entries(conflicts)) {
                    const fixKey = Object.entries(keyMappings).find(([key, value]) => key === coreKey)[1];
                    localStorage.setItem(fixKey, conflict.coreValue);
                }

                console.log("‚úÖ WINIX-DEBUG: –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –≤ localStorage –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ");
                return true;
            } catch (e) {
                console.error("‚ùå WINIX-DEBUG: –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤:", e);
                return false;
            }
        },

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥—É–±–ª—é—é—á–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
         * @returns {Object} –ó–Ω–∞–π–¥–µ–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏
         */
        checkDuplicateEventListeners: function() {
            const duplicates = {};
            const importantButtons = [
                'stake-button',
                'cancel-staking-button',
                'add-to-stake-button',
                'details-button',
                'send-button',
                'receive-button',
                'claim-daily',
                'twitter-verify',
                'telegram-verify',
                'youtube-verify'
            ];

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –∫–Ω–æ–ø–∫—É
            importantButtons.forEach(id => {
                const button = document.getElementById(id);
                if (!button) return;

                // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ (–Ω–µ –ø—Ä—è–º–∏–π —Å–ø–æ—Å—ñ–±)
                // –í –±—Ä–∞—É–∑–µ—Ä–∞—Ö –Ω–µ–º–∞—î –ø—Ä—è–º–æ–≥–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª—É—Ö–∞—á—ñ–≤
                const cloned = button.cloneNode(true);
                const buttonsWithListeners = [button, cloned];

                // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
                let clickCount = 0;
                buttonsWithListeners.forEach(btn => {
                    btn.addEventListener('click', function testHandler() {
                        clickCount++;
                        btn.removeEventListener('click', testHandler);
                    });
                });

                // –î—É–±–ª—é—î–º–æ –∫–ª—ñ–∫
                const clickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });

                button.dispatchEvent(clickEvent);
                cloned.dispatchEvent(clickEvent);

                // –Ø–∫—â–æ –∫–ª—ñ–∫—ñ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏ –ø–æ-—Ä—ñ–∑–Ω–æ–º—É, —Ü–µ –º–æ–∂–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
                if (clickCount !== 2) {
                    duplicates[id] = true;
                }
            });

            if (Object.keys(duplicates).length > 0) {
                console.warn("‚ö†Ô∏è WINIX-DEBUG: –ú–æ–∂–ª–∏–≤—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π:", duplicates);
            } else {
                console.log("‚úÖ WINIX-DEBUG: –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            return duplicates;
        },

        /**
         * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—é—é—á–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
         * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
         */
        fixDuplicateEventListeners: function() {
            try {
                const duplicates = Object.keys(this.checkDuplicateEventListeners());

                if (duplicates.length === 0) {
                    return true; // –ù—ñ—á–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏
                }

                // –ó–∞–º—ñ–Ω—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏ –Ω–∞ –Ω–æ–≤—ñ
                duplicates.forEach(id => {
                    const button = document.getElementById(id);
                    if (!button) return;

                    const newButton = button.cloneNode(true);
                    button.parentNode.replaceChild(newButton, button);

                    // –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ ID –∫–Ω–æ–ø–∫–∏
                    if (id === 'stake-button' && window.WinixCore && window.WinixCore.Staking) {
                        newButton.addEventListener('click', function() {
                            const amountInput = document.getElementById('staking-amount');
                            if (!amountInput) {
                                window.WinixCore.UI.showNotification("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ —Å—É–º–∏", window.WinixCore.MESSAGE_TYPES.ERROR);
                                return;
                            }

                            const amount = parseFloat(amountInput.value);
                            if (isNaN(amount) || amount <= 0) {
                                window.WinixCore.UI.showNotification("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É", window.WinixCore.MESSAGE_TYPES.ERROR);
                                return;
                            }

                            const periodSelect = document.getElementById('staking-period');
                            const period = parseInt(periodSelect ? periodSelect.value : 14);

                            const result = window.WinixCore.Staking.createStaking(amount, period);

                            if (result.success) {
                                window.WinixCore.UI.showNotification("–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", window.WinixCore.MESSAGE_TYPES.SUCCESS,
                                    () => window.navigateTo('staking-details.html'));
                            }
                        });
                    }
                    // –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
                });

                console.log("‚úÖ WINIX-DEBUG: –î—É–±–ª—ñ–∫–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ");
                return true;
            } catch (e) {
                console.error("‚ùå WINIX-DEBUG: –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤:", e);
                return false;
            }
        },

        /**
         * –§–æ—Ä—Å–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
         * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
         */
        forceUIUpdate: function() {
            try {
                console.log("üîÑ WINIX-DEBUG: –§–æ—Ä—Å–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...");

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (window.WinixCore && window.WinixCore.UI) {
                    window.WinixCore.UI.updateBalanceDisplay();
                    window.WinixCore.UI.updateStakingDisplay();
                    window.WinixCore.UI.updateTransactionsList('transaction-list', 3);
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
                if (window.balanceSystem) {
                    window.balanceSystem.updateDisplay();
                }

                if (window.stakingSystem) {
                    window.stakingSystem.updateStakingDisplay();
                }

                console.log("‚úÖ WINIX-DEBUG: –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–Ω–æ–≤–ª–µ–Ω–æ");
                return true;
            } catch (e) {
                console.error("‚ùå WINIX-DEBUG: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:", e);
                return false;
            }
        },

        /**
         * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–æ–º–∏—Ö –ø—Ä–æ–±–ª–µ–º
         * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
         */
        fixAllIssues: function() {
            console.log("üîÑ WINIX-DEBUG: –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...");

            const results = {
                storageConflicts: this.fixStorageConflicts(),
                duplicateEventListeners: this.fixDuplicateEventListeners(),
                uiUpdate: this.forceUIUpdate()
            };

            const allFixed = Object.values(results).every(result => result === true);

            if (allFixed) {
                console.log("‚úÖ WINIX-DEBUG: –í—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ");
            } else {
                console.warn("‚ö†Ô∏è WINIX-DEBUG: –î–µ—è–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏:", results);
            }

            return allFixed;
        },

        /**
         * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏
         * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
         */
        restartSystem: function() {
            try {
                console.log("üîÑ WINIX-DEBUG: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏...");

                // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                window.WinixCoreInitialized = false;

                if (window.WinixInitState) {
                    window.WinixInitState.coreInitialized = false;
                    window.WinixInitState.connectorInitialized = false;
                    window.WinixInitState.fixInitialized = false;
                }

                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–Ω–æ–≤–æ
                if (window.WinixCore) {
                    window.WinixCore.init();
                    window.WinixCoreInitialized = true;
                    document.dispatchEvent(new CustomEvent('winix-core-initialized'));
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.forceUIUpdate();

                console.log("‚úÖ WINIX-DEBUG: –°–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞");
                return true;
            } catch (e) {
                console.error("‚ùå WINIX-DEBUG: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏:", e);
                return false;
            }
        },

        /**
         * –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (–¥–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è)
         */
        enableDevMode: function() {
            this.enableVerboseLogging = true;
            console.log("üîß WINIX-DEBUG: –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–æ");

            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º–æ–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
            if (!document.getElementById('debug-toggle')) {
                const debugButton = document.createElement('button');
                debugButton.id = 'debug-toggle';
                debugButton.textContent = 'Debug Mode';
                debugButton.style.position = 'fixed';
                debugButton.style.bottom = '10px';
                debugButton.style.right = '10px';
                debugButton.style.zIndex = '9999';
                debugButton.style.padding = '5px 10px';
                debugButton.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                debugButton.style.color = 'white';
                debugButton.style.border = 'none';
                debugButton.style.borderRadius = '4px';
                debugButton.style.cursor = 'pointer';

                debugButton.addEventListener('click', () => {
                    if (this.enableVerboseLogging) {
                        this.disableDevMode();
                        debugButton.textContent = 'Debug Off';
                        debugButton.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
                    } else {
                        this.enableDevMode();
                        debugButton.textContent = 'Debug On';
                        debugButton.style.backgroundColor = 'rgba(0, 128, 0, 0.7)';
                    }
                });

                document.body.appendChild(debugButton);
            }
        },

        /**
         * –í–∏–º–∫–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞
         */
        disableDevMode: function() {
            this.enableVerboseLogging = false;
            console.log("üîß WINIX-DEBUG: –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–æ");
        }
    };

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    document.addEventListener('winix-initialized', function() {
        console.log("üîÑ WINIX-DEBUG: –°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º...");
        setTimeout(function() {
            window.WinixDebug.checkSystemStatus();
            window.WinixDebug.checkStorageConflicts();
            window.WinixDebug.forceUIUpdate();
        }, 500);
    });

    // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    window.addEventListener('load', function() {
        setTimeout(function() {
            window.WinixDebug.checkSystemStatus();
        }, 1000);
    });

    console.log("‚úÖ WINIX-DEBUG: –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –≥–æ—Ç–æ–≤—ñ");
})();