/**
 * winix-fix-improved.js - –í–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ WINIX
 *
 * –¶–µ–π —Ñ–∞–π–ª –≤–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ —É–Ω–∏–∫–∞—î –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏:
 * - winix-core.js
 * - winix-connector.js
 *
 * –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
 * 1. –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ñ–∞–π–ª –¥–æ —Å–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É –≤ –ø–∞–ø–∫—É static/js/
 * 2. –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å –π–æ–≥–æ –ø—ñ—Å–ª—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ —É –≤—Å—ñ—Ö HTML —Ñ–∞–π–ª–∞—Ö —Ç–∞–∫:
 *    <script src="static/js/winix-core.js"></script>
 *    <script src="static/js/winix-connector.js"></script>
 *    <script src="static/js/winix-fix-improved.js"></script>
 */

(function() {
    console.log("üîÑ WINIX-FIX: –ó–∞–ø—É—Å–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å —Å–∏—Å—Ç–µ–º–∏...");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
    const hasWinixCore = typeof window.WinixCore !== 'undefined';
    const hasRewardSystem = typeof window.rewardSystem !== 'undefined';
    const hasStakingSystem = typeof window.stakingSystem !== 'undefined';

    console.log(`WINIX-FIX: –í–∏—è–≤–ª–µ–Ω–æ WinixCore: ${hasWinixCore}, RewardSystem: ${hasRewardSystem}, StakingSystem: ${hasStakingSystem}`);

    // ================ –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ê –£–¢–ò–õ–Ü–¢–ò ================

    // –ö–ª—é—á—ñ –¥–ª—è localStorage
    const STORAGE = {
        USER_TOKENS: 'userTokens',
        USER_COINS: 'userCoins',
        STAKING_DATA: 'stakingData',
        TRANSACTIONS: 'transactions',
        COMPLETED_TASKS: 'completedTasks',
        LAST_DAILY_CLAIM: 'lastDailyClaim',
        DAILY_STREAK: 'dailyStreak'
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const STAKING_RATES = {
        7: 4,    // 4% –∑–∞ 7 –¥–Ω—ñ–≤
        14: 9,   // 9% –∑–∞ 14 –¥–Ω—ñ–≤
        28: 15   // 15% –∑–∞ 28 –¥–Ω—ñ–≤
    };

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ localStorage
     * @param {string} key - –ö–ª—é—á
     * @param {any} defaultValue - –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     * @param {boolean} isJSON - –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON
     * @returns {any} - –û—Ç—Ä–∏–º–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
     */
    function getStorage(key, defaultValue, isJSON = false) {
        try {
            const value = localStorage.getItem(key);
            if (value === null) return defaultValue;

            if (isJSON) {
                return JSON.parse(value);
            }

            // –Ø–∫—â–æ —Ü–µ —á–∏—Å–ª–æ, –ø–∞—Ä—Å–∏–º–æ —è–∫ —á–∏—Å–ª–æ
            if (!isNaN(parseFloat(value))) {
                return parseFloat(value);
            }

            return value;
        } catch (e) {
            console.warn(`WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ${key} –∑ localStorage:`, e);
            return defaultValue;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage
     * @param {string} key - –ö–ª—é—á
     * @param {any} value - –ó–Ω–∞—á–µ–Ω–Ω—è
     * @returns {boolean} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    function setStorage(key, value) {
        try {
            if (typeof value === 'object') {
                localStorage.setItem(key, JSON.stringify(value));
            } else {
                localStorage.setItem(key, value);
            }
            return true;
        } catch (e) {
            console.warn(`WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${key} –≤ localStorage:`, e);
            return false;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID
     * @returns {string} - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
     */
    function generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     */
    function showToast(message, type = 'success', callback) {
        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
            if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.showNotification) {
                return window.WinixCore.UI.showNotification(message, type, callback);
            }

            // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            let toastElement = document.getElementById('toast-message');

            if (!toastElement) {
                toastElement = document.createElement('div');
                toastElement.id = 'toast-message';
                toastElement.className = 'toast-message';
                document.body.appendChild(toastElement);
            }

            toastElement.textContent = message;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
            switch (type) {
                case 'success':
                case 'SUCCESS':
                    toastElement.style.backgroundColor = 'rgba(76, 175, 80, 0.9)';
                    break;
                case 'error':
                case 'ERROR':
                    toastElement.style.backgroundColor = 'rgba(244, 67, 54, 0.9)';
                    break;
                case 'warning':
                case 'WARNING':
                    toastElement.style.backgroundColor = 'rgba(255, 152, 0, 0.9)';
                    break;
                case 'info':
                case 'INFO':
                    toastElement.style.backgroundColor = 'rgba(33, 150, 243, 0.9)';
                    break;
            }

            toastElement.classList.add('show');

            setTimeout(() => {
                toastElement.classList.remove('show');
                if (callback && typeof callback === 'function') {
                    setTimeout(callback, 300);
                }
            }, 3000);

            return true;
        } catch (e) {
            console.warn("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", e);
            return false;
        }
    }

    // ================ –†–û–ó–®–ò–†–ï–ù–ù–Ø –Ü–°–ù–£–Æ–ß–ò–• –°–ò–°–¢–ï–ú ================

    /**
     * –£–¥–æ—Å–∫–æ–Ω–∞–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º—É –±–∞–ª–∞–Ω—Å—É
     */
    function enhanceBalanceSystem() {
        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–∏—Å—Ç–µ–º—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
            const originalSystem = hasWinixCore ? window.WinixCore.Balance :
                                  hasRewardSystem ? window.rewardSystem : null;

            // –†–æ–∑—à–∏—Ä—é—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–∏—Å—Ç–µ–º—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
            window.balanceSystem = {
                /**
                 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É —Ç–æ–∫–µ–Ω—ñ–≤
                 * @returns {number} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
                 */
                getTokens: function() {
                    if (originalSystem && typeof originalSystem.getTokens === 'function') {
                        return originalSystem.getTokens();
                    }

                    return getStorage(STORAGE.USER_TOKENS, 1000);
                },

                /**
                 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
                 * @returns {number} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
                 */
                getCoins: function() {
                    if (originalSystem && typeof originalSystem.getCoins === 'function') {
                        return originalSystem.getCoins();
                    }

                    return getStorage(STORAGE.USER_COINS, 250);
                },

                /**
                 * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É —Ç–æ–∫–µ–Ω—ñ–≤
                 * @param {number} amount - –ù–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
                 * @returns {boolean} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                setTokens: function(amount) {
                    if (originalSystem && typeof originalSystem.setTokens === 'function') {
                        return originalSystem.setTokens(amount);
                    }

                    return setStorage(STORAGE.USER_TOKENS, amount);
                },

                /**
                 * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
                 * @param {number} amount - –ù–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
                 * @returns {boolean} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                setCoins: function(amount) {
                    if (originalSystem && typeof originalSystem.setCoins === 'function') {
                        return originalSystem.setCoins(amount);
                    }

                    return setStorage(STORAGE.USER_COINS, amount);
                },

                /**
                 * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ –±–∞–ª–∞–Ω—Å—É
                 * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
                 * @param {string} description - –û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 * @returns {boolean} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                addTokens: function(amount, description) {
                    if (originalSystem && typeof originalSystem.addTokens === 'function') {
                        return originalSystem.addTokens(amount, description);
                    }

                    const currentBalance = this.getTokens();
                    const newBalance = currentBalance + amount;

                    // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                    if (window.transactionSystem) {
                        window.transactionSystem.addTransaction({
                            type: 'receive',
                            amount: amount,
                            description: description || '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É'
                        });
                    }

                    const result = this.setTokens(newBalance);
                    this.updateDisplay();
                    return result;
                },

                /**
                 * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å—É
                 * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
                 * @param {string} description - –û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 * @returns {boolean} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                subtractTokens: function(amount, description) {
                    if (originalSystem && typeof originalSystem.subtractTokens === 'function') {
                        return originalSystem.subtractTokens(amount, description);
                    }

                    const currentBalance = this.getTokens();

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤
                    if (currentBalance < amount) {
                        showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ', 'error');
                        return false;
                    }

                    const newBalance = currentBalance - amount;

                    // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                    if (window.transactionSystem) {
                        window.transactionSystem.addTransaction({
                            type: 'send',
                            amount: -amount,
                            description: description || '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤'
                        });
                    }

                    const result = this.setTokens(newBalance);
                    this.updateDisplay();
                    return result;
                },

                /**
                 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ –¥–æ –±–∞–ª–∞–Ω—Å—É
                 * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
                 * @returns {boolean} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                addCoins: function(amount) {
                    if (originalSystem && typeof originalSystem.addCoins === 'function') {
                        return originalSystem.addCoins(amount);
                    }

                    const currentCoins = this.getCoins();
                    const newCoins = currentCoins + amount;

                    const result = this.setCoins(newCoins);
                    this.updateDisplay();
                    return result;
                },

                /**
                 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
                 */
                updateDisplay: function() {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
                    if (originalSystem && typeof originalSystem.updateBalanceDisplay === 'function') {
                        return originalSystem.updateBalanceDisplay();
                    }

                    const tokens = this.getTokens();
                    const coins = this.getCoins();

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
                    document.querySelectorAll('#user-tokens, .balance-value').forEach(el => {
                        if (el) el.textContent = tokens.toFixed(2);
                    });

                    // –û—Å–æ–±–ª–∏–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è main-balance, —è–∫—â–æ —î
                    const mainBalance = document.getElementById('main-balance');
                    if (mainBalance) {
                        mainBalance.innerHTML = `${tokens.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" alt="WINIX"></span>`;
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
                    document.querySelectorAll('#user-coins').forEach(el => {
                        if (el) el.textContent = coins.toFixed(0);
                    });

                    return true;
                }
            };

            // –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –º–∞—î –º–µ—Ç–æ–¥—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
            if (originalSystem && !originalSystem.updateBalanceDisplay) {
                originalSystem.updateBalanceDisplay = window.balanceSystem.updateDisplay;
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            window.balanceSystem.updateDisplay();

            console.log("‚úÖ WINIX-FIX: –°–∏—Å—Ç–µ–º—É –±–∞–ª–∞–Ω—Å—É —É—Å–ø—ñ—à–Ω–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ");
            return true;
        } catch (e) {
            console.error("‚ùå WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –±–∞–ª–∞–Ω—Å—É:", e);
            return false;
        }
    }

    /**
     * –£–¥–æ—Å–∫–æ–Ω–∞–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function enhanceStakingSystem() {
        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–∏—Å—Ç–µ–º—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
            const originalSystem = hasWinixCore ? window.WinixCore.Staking :
                                hasStakingSystem ? window.stakingSystem : null;

            // –†–æ–∑—à–∏—Ä—é—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–∏—Å—Ç–µ–º—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
            window.stakingSystem = {
                /**
                 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @returns {boolean} - –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
                 */
                hasActiveStaking: function() {
                    if (originalSystem && typeof originalSystem.hasActiveStaking === 'function') {
                        return originalSystem.hasActiveStaking();
                    }

                    const stakingData = this.getStakingData();
                    return stakingData && stakingData.hasActiveStaking === true;
                },

                /**
                 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @returns {object} - –î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 */
                getStakingData: function() {
                    if (originalSystem && typeof originalSystem.getStakingData === 'function') {
                        return originalSystem.getStakingData();
                    }

                    const defaultData = {
                        hasActiveStaking: false,
                        stakingAmount: 0,
                        period: 0,
                        rewardPercent: 0,
                        expectedReward: 0,
                        remainingDays: 0,
                        startDate: null,
                        endDate: null
                    };

                    const data = getStorage(STORAGE.STAKING_DATA, defaultData, true);

                    // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥, –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                    if (data.hasActiveStaking && data.endDate) {
                        const now = new Date();
                        const endDate = new Date(data.endDate);

                        // –Ø–∫—â–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
                        if (now >= endDate) {
                            this.completeStaking();
                            return defaultData;
                        }

                        // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤, —â–æ –∑–∞–ª–∏—à–∏–ª–∞—Å—å
                        const diffTime = endDate - now;
                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                        data.remainingDays = Math.max(0, diffDays);

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
                        setStorage(STORAGE.STAKING_DATA, data);
                    }

                    return data;
                },

                /**
                 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @returns {object} - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                 */
                getStakingDisplayData: function() {
                    if (originalSystem && typeof originalSystem.getStakingDisplayData === 'function') {
                        return originalSystem.getStakingDisplayData();
                    }

                    return this.getStakingData();
                },

                /**
                 * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                 * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @returns {number} - –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
                 */
                calculateExpectedReward: function(amount, period) {
                    if (originalSystem && typeof originalSystem.calculateExpectedReward === 'function') {
                        return originalSystem.calculateExpectedReward(amount, period);
                    }

                    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å–æ—Ç–∫–∞
                    const percent = STAKING_RATES[period] || 0;
                    return parseFloat((amount * percent / 100).toFixed(2));
                },

                /**
                 * –ê–ª—ñ–∞—Å –¥–ª—è calculateExpectedReward, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ
                 * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @returns {number} - –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
                 */
                calculatePotentialReward: function(amount, period) {
                    return this.calculateExpectedReward(amount, period);
                },

                /**
                 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                createStaking: function(amount, period) {
                    try {
                        amount = parseFloat(amount);
                        period = parseInt(period);

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                        if (isNaN(amount) || amount <= 0) {
                            showToast("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                            return { success: false, message: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É" };
                        }

                        if (![7, 14, 28].includes(period)) {
                            showToast("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                            return { success: false, message: "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥" };
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        if (this.hasActiveStaking()) {
                            showToast("–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥", "error");
                            return { success: false, message: "–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥" };
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—à—Ç—ñ–≤
                        const currentBalance = window.balanceSystem.getTokens();
                        if (currentBalance < amount) {
                            showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(2)} $WINIX`, "error");
                            return { success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤" };
                        }

                        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î —ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∂–µ —î
                        if (originalSystem && typeof originalSystem.createStaking === 'function') {
                            return originalSystem.createStaking(amount, period);
                        }

                        // –ó–Ω—ñ–º–∞—î–º–æ –∫–æ—à—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É
                        const description = `–°—Ç–µ–π–∫—ñ–Ω–≥ –Ω–∞ ${period} –¥–Ω—ñ–≤`;
                        if (!window.balanceSystem.subtractTokens(amount, description)) {
                            return { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤" };
                        }

                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ —ñ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                        const rewardPercent = STAKING_RATES[period];
                        const expectedReward = this.calculateExpectedReward(amount, period);

                        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        const currentDate = new Date();
                        const endDate = new Date(currentDate);
                        endDate.setDate(endDate.getDate() + period);

                        const stakingData = {
                            hasActiveStaking: true,
                            stakingId: generateId(),
                            stakingAmount: amount,
                            period: period,
                            rewardPercent: rewardPercent,
                            expectedReward: expectedReward,
                            remainingDays: period,
                            startDate: currentDate.toISOString(),
                            endDate: endDate.toISOString()
                        };

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        setStorage(STORAGE.STAKING_DATA, stakingData);

                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        showToast("–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", "success");

                        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        this.updateStakingDisplay();

                        return {
                            success: true,
                            message: "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                            data: stakingData
                        };
                    } catch (e) {
                        console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                        showToast("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                        return { success: false, message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞" };
                    }
                },

                /**
                 * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                cancelStaking: function() {
                    try {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        if (!this.hasActiveStaking()) {
                            showToast("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                            return { success: false, message: "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É" };
                        }

                        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
                        if (originalSystem && typeof originalSystem.cancelStaking === 'function') {
                            return originalSystem.cancelStaking();
                        }

                        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        const stakingData = this.getStakingData();

                        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è (–∑ —É—Ç—Ä–∏–º–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ—ó 20%)
                        const fee = 0.2; // 20% –∫–æ–º—ñ—Å—ñ—è
                        const returnAmount = stakingData.stakingAmount * (1 - fee);
                        const feeAmount = stakingData.stakingAmount * fee;

                        // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
                        window.balanceSystem.addTokens(
                            returnAmount,
                            `–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (—É—Ç—Ä–∏–º–∞–Ω–æ ${feeAmount.toFixed(2)} $WINIX –∫–æ–º—ñ—Å—ñ—ó)`
                        );

                        // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        setStorage(STORAGE.STAKING_DATA, {
                            hasActiveStaking: false,
                            stakingAmount: 0,
                            period: 0,
                            rewardPercent: 0,
                            expectedReward: 0,
                            remainingDays: 0,
                            startDate: null,
                            endDate: null
                        });

                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        showToast(`–°—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ ${returnAmount.toFixed(2)} $WINIX`, "success");

                        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        this.updateStakingDisplay();

                        return {
                            success: true,
                            message: `–°—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ ${returnAmount.toFixed(2)} $WINIX`,
                            data: { returnAmount, feeAmount }
                        };
                    } catch (e) {
                        console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                        showToast("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                        return { success: false, message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞" };
                    }
                },

                /**
                 * –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É —ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                 * @returns {boolean} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                completeStaking: function() {
                    try {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        if (!this.hasActiveStaking()) {
                            return false;
                        }

                        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        const stakingData = this.getStakingData();

                        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
                        if (originalSystem && typeof originalSystem.completeStaking === 'function') {
                            return originalSystem.completeStaking();
                        }

                        // –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                        const totalReturn = stakingData.stakingAmount + stakingData.expectedReward;

                        // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
                        window.balanceSystem.addTokens(
                            totalReturn,
                            `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É: +${stakingData.stakingAmount} –æ—Å–Ω–æ–≤–Ω–∞ —Å—É–º–∞, +${stakingData.expectedReward.toFixed(2)} –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞`
                        );

                        // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        setStorage(STORAGE.STAKING_DATA, {
                            hasActiveStaking: false,
                            stakingAmount: 0,
                            period: 0,
                            rewardPercent: 0,
                            expectedReward: 0,
                            remainingDays: 0,
                            startDate: null,
                            endDate: null
                        });

                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        showToast(`–°—Ç–µ–π–∫—ñ–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç—Ä–∏–º–∞–Ω–æ ${totalReturn.toFixed(2)} $WINIX`, "success");

                        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        this.updateStakingDisplay();

                        return true;
                    } catch (e) {
                        console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                        return false;
                    }
                },

                /**
                 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
                 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
                 */
                addToStaking: function(amount) {
                    try {
                        amount = parseFloat(amount);

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                        if (isNaN(amount) || amount <= 0) {
                            showToast("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É", "error");
                            return { success: false, message: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É" };
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        if (!this.hasActiveStaking()) {
                            showToast("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                            return { success: false, message: "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É" };
                        }

                        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
                        if (originalSystem && typeof originalSystem.addToStaking === 'function') {
                            return originalSystem.addToStaking(amount);
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—à—Ç—ñ–≤
                        const currentBalance = window.balanceSystem.getTokens();
                        if (currentBalance < amount) {
                            showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(2)} $WINIX`, "error");
                            return { success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤" };
                        }

                        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        const stakingData = this.getStakingData();

                        // –ó–Ω—ñ–º–∞—î–º–æ –∫–æ—à—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É
                        if (!window.balanceSystem.subtractTokens(amount, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É")) {
                            return { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –∑–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤" };
                        }

                        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        const newAmount = stakingData.stakingAmount + amount;
                        stakingData.stakingAmount = newAmount;

                        // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                        stakingData.expectedReward = this.calculateExpectedReward(newAmount, stakingData.period);

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
                        setStorage(STORAGE.STAKING_DATA, stakingData);

                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        showToast(`–î–æ–¥–∞–Ω–æ ${amount.toFixed(2)} $WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`, "success");

                        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        this.updateStakingDisplay();

                        return {
                            success: true,
                            message: `–î–æ–¥–∞–Ω–æ ${amount.toFixed(2)} $WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`,
                            data: stakingData
                        };
                    } catch (e) {
                        console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                        showToast("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                        return { success: false, message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞" };
                    }
                },

                /**
                 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                 */
                updateStakingDisplay: function() {
                    try {
                        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
                        if (originalSystem && typeof originalSystem.updateStakingDisplay === 'function') {
                            return originalSystem.updateStakingDisplay();
                        }

                        const stakingData = this.getStakingData();
                        const hasStaking = stakingData.hasActiveStaking === true;

                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É, –Ω–∞ —è–∫—ñ–π –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—å
                        const currentPage = window.location.pathname.split('/').pop();

                        // –î–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≥–∞–º–∞–Ω—Ü—è
                        if (currentPage === 'wallet.html' || currentPage === 'index.html' || currentPage === '') {
                            const stakingBalanceElement = document.getElementById('staking-balance');
                            const stakingRewardsElement = document.getElementById('staking-rewards');

                            if (stakingBalanceElement) {
                                stakingBalanceElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${hasStaking ? stakingData.stakingAmount.toFixed(2) : '0'} $WINIX`;
                            }

                            if (stakingRewardsElement) {
                                stakingRewardsElement.textContent = `–ù–∞–≥–æ—Ä–æ–¥–∏: ${hasStaking ? stakingData.expectedReward.toFixed(2) : '0'} $WINIX`;
                            }
                        }

                        // –î–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        else if (currentPage === 'staking.html') {
                            const statusElement = document.getElementById('staking-status');
                            const detailsButton = document.getElementById('details-button');
                            const cancelButton = document.getElementById('cancel-staking-button');

                            if (statusElement) {
                                statusElement.textContent = hasStaking
                                    ? `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingData.stakingAmount.toFixed(2)} $WINIX`
                                    : "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                            }

                            if (detailsButton) {
                                detailsButton.style.opacity = hasStaking ? '1' : '0.5';
                                detailsButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                            }

                            if (cancelButton) {
                                cancelButton.style.opacity = hasStaking ? '1' : '0.5';
                                cancelButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                            }
                        }

                        // –î–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        else if (currentPage === 'staking-details.html') {
                            if (!hasStaking) {
                                showToast("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error", function() {
                                    window.location.href = "staking.html";
                                });
                                return;
                            }

                            // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                            const amountElement = document.getElementById('staking-amount');
                            const periodElement = document.getElementById('staking-period');
                            const rewardPercentElement = document.getElementById('staking-reward-percent');
                            const expectedRewardElement = document.getElementById('staking-expected-reward');
                            const remainingDaysElement = document.getElementById('staking-remaining-days');

                            if (amountElement) amountElement.textContent = `${stakingData.stakingAmount.toFixed(2)} $WINIX`;
                            if (periodElement) periodElement.textContent = `${stakingData.period} –¥–Ω—ñ–≤`;
                            if (rewardPercentElement) rewardPercentElement.textContent = `${stakingData.rewardPercent}%`;
                            if (expectedRewardElement) expectedRewardElement.textContent = `${stakingData.expectedReward.toFixed(2)} $WINIX`;
                            if (remainingDaysElement) remainingDaysElement.textContent = stakingData.remainingDays.toString();
                        }

                        return true;
                    } catch (e) {
                        console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                        return false;
                    }
                },

                // –î–æ–¥–∞—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏ –±–∞–ª–∞–Ω—Å—É –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                walletSystem: {
                    getBalance: function() {
                        return window.balanceSystem.getTokens();
                    }
                }
            };

            console.log("‚úÖ WINIX-FIX: –°–∏—Å—Ç–µ–º—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ");
            return true;
        } catch (e) {
            console.error("‚ùå WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
            return false;
        }
    }

    /**
     * –£–¥–æ—Å–∫–æ–Ω–∞–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
     */
    function enhanceRewardSystem() {
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ —Ä–æ–∑—à–∏—Ä—é—î–º–æ —Å–∏—Å—Ç–µ–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
            if (!window.rewardSystem) {
                window.rewardSystem = {};
            }

            // –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥–∏ –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
            if (!window.rewardSystem.getTokens && window.balanceSystem) {
                window.rewardSystem.getTokens = window.balanceSystem.getTokens.bind(window.balanceSystem);
                window.rewardSystem.getUserTokens = window.balanceSystem.getTokens.bind(window.balanceSystem);
                window.rewardSystem.getCoins = window.balanceSystem.getCoins.bind(window.balanceSystem);
                window.rewardSystem.getUserCoins = window.balanceSystem.getCoins.bind(window.balanceSystem);
                window.rewardSystem.setTokens = window.balanceSystem.setTokens.bind(window.balanceSystem);
                window.rewardSystem.setUserTokens = window.balanceSystem.setTokens.bind(window.balanceSystem);
                window.rewardSystem.setCoins = window.balanceSystem.setCoins.bind(window.balanceSystem);
                window.rewardSystem.setUserCoins = window.balanceSystem.setCoins.bind(window.balanceSystem);
                window.rewardSystem.addTokens = window.balanceSystem.addTokens.bind(window.balanceSystem);
                window.rewardSystem.subtractTokens = window.balanceSystem.subtractTokens.bind(window.balanceSystem);
                window.rewardSystem.addCoins = window.balanceSystem.addCoins.bind(window.balanceSystem);
                window.rewardSystem.updateBalanceDisplay = window.balanceSystem.updateDisplay.bind(window.balanceSystem);
            }

            // –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
            window.rewardSystem.isActionCompleted = function(taskId) {
                try {
                    const completedTasks = getStorage(STORAGE.COMPLETED_TASKS, {}, true);
                    return completedTasks[taskId] === true;
                } catch (e) {
                    console.warn("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:", e);
                    return false;
                }
            };

            window.rewardSystem.completeTask = function(taskId, tokensReward, coinsReward = 0, description = "") {
                try {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
                    if (this.isActionCompleted(taskId)) {
                        showToast("–¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ", "info");
                        return { success: false, message: "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ" };
                    }

                    // –î–æ–¥–∞—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                    if (tokensReward > 0) {
                        window.balanceSystem.addTokens(tokensReward, description || `–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è ${taskId}`);
                    }

                    if (coinsReward > 0) {
                        window.balanceSystem.addCoins(coinsReward);
                    }

                    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
                    const completedTasks = getStorage(STORAGE.COMPLETED_TASKS, {}, true);
                    completedTasks[taskId] = true;
                    setStorage(STORAGE.COMPLETED_TASKS, completedTasks);

                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    showToast(`–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! +${tokensReward} $WINIX${coinsReward > 0 ? `, +${coinsReward} –∂–µ—Ç–æ–Ω—ñ–≤` : ''}`, "success");

                    return { success: true, message: "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ" };
                } catch (e) {
                    console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:", e);
                    return { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è" };
                }
            };

            window.rewardSystem.reward = function(actionId, tokens, coins = 0) {
                return this.completeTask(actionId, tokens, coins, `–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${actionId}`);
            };

            // –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
            window.rewardSystem.claimDailyBonus = function() {
                try {
                    const now = new Date();
                    const today = now.toISOString().substring(0, 10); // YYYY-MM-DD

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ
                    const lastClaimDate = getStorage(STORAGE.LAST_DAILY_CLAIM, "");

                    if (lastClaimDate === today) {
                        showToast("–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ —â–æ–¥–µ–Ω–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É —Å—å–æ–≥–æ–¥–Ω—ñ", "info");
                        return { success: false, message: "–í–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ" };
                    }

                    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —Ç–∏–∂–Ω—è (1-7)
                    let dailyStreak = getStorage(STORAGE.DAILY_STREAK, 0);

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–µ–Ω—å
                    const yesterday = new Date(now);
                    yesterday.setDate(yesterday.getDate() - 1);
                    const yesterdayString = yesterday.toISOString().substring(0, 10);

                    if (lastClaimDate !== yesterdayString && lastClaimDate !== "") {
                        dailyStreak = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —è–∫—â–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–µ–Ω—å
                    }

                    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                    dailyStreak++;

                    // –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –¥–Ω—è (–∑—Ä–æ—Å—Ç–∞—î –≤—ñ–¥ 10 –¥–æ 70)
                    const amount = Math.min(10 * dailyStreak, 70);

                    // –î–æ–¥–∞—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                    window.balanceSystem.addTokens(amount, `–©–æ–¥–µ–Ω–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: –î–µ–Ω—å ${dailyStreak}`);

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
                    setStorage(STORAGE.LAST_DAILY_CLAIM, today);
                    setStorage(STORAGE.DAILY_STREAK, dailyStreak);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
                    this.updateDailyProgress();

                    return {
                        success: true,
                        message: `–û—Ç—Ä–∏–º–∞–Ω–æ —â–æ–¥–µ–Ω–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É: ${amount} $WINIX`,
                        amount: amount
                    };
                } catch (e) {
                    console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", e);
                    return { success: false, message: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏" };
                }
            };

            // –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
            window.rewardSystem.updateDailyProgress = function() {
                try {
                    const dailyProgress = document.getElementById('weekly-progress');
                    if (!dailyProgress) return false;

                    const dailyStreak = getStorage(STORAGE.DAILY_STREAK, 0);
                    const progressWidth = Math.min((dailyStreak / 7) * 100, 100);

                    dailyProgress.style.width = `${progressWidth}%`;

                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä—É–∂–µ—á–∫–∏ –∑ –¥–Ω—è–º–∏
                    const dayCircles = document.querySelectorAll('.day-circle');
                    if (dayCircles && dayCircles.length > 0) {
                        dayCircles.forEach((circle, index) => {
                            if (index < dailyStreak) {
                                circle.classList.add('completed');
                                circle.classList.remove('active');
                            } else if (index === dailyStreak) {
                                circle.classList.add('active');
                                circle.classList.remove('completed');
                            } else {
                                circle.classList.remove('completed', 'active');
                            }
                        });
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏
                    const claimButton = document.getElementById('claim-daily');
                    if (claimButton) {
                        const lastClaimDate = getStorage(STORAGE.LAST_DAILY_CLAIM, "");
                        const today = new Date().toISOString().substring(0, 10);

                        if (lastClaimDate === today) {
                            claimButton.disabled = true;
                            claimButton.textContent = "–í–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ";
                        } else {
                            claimButton.disabled = false;
                            const amount = Math.min(10 * (dailyStreak + 1), 70);
                            claimButton.textContent = `–û—Ç—Ä–∏–º–∞—Ç–∏ ${amount} $WINIX`;
                        }
                    }

                    return true;
                } catch (e) {
                    console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:", e);
                    return false;
                }
            };

            console.log("‚úÖ WINIX-FIX: –°–∏—Å—Ç–µ–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥ —É—Å–ø—ñ—à–Ω–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ");
            return true;
        } catch (e) {
            console.error("‚ùå WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥:", e);
            return false;
        }
    }

    // ================ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í –ü–û–î–Ü–ô ================

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function setupStakingPageHandlers() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!window.location.pathname.includes('staking.html')) return false;

            console.log("WINIX-FIX: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

            // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≥–∞–º–∞–Ω—Ü—è
            const backButton = document.getElementById('back-button');
            if (backButton) {
                backButton.addEventListener('click', function() {
                    window.location.href = 'wallet.html';
                });
            }

            // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            const amountInput = document.getElementById('staking-amount');
            const periodSelect = document.getElementById('staking-period');
            const rewardElement = document.getElementById('expected-reward');

            function updateExpectedReward() {
                if (!amountInput || !periodSelect || !rewardElement) return;

                const amount = parseFloat(amountInput.value) || 0;
                const period = parseInt(periodSelect.value) || 14;

                const reward = window.stakingSystem.calculateExpectedReward(amount, period);
                rewardElement.textContent = reward.toFixed(2);
            }

            if (amountInput && periodSelect) {
                // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
                const newAmountInput = amountInput.cloneNode(true);
                const newPeriodSelect = periodSelect.cloneNode(true);

                amountInput.parentNode.replaceChild(newAmountInput, amountInput);
                periodSelect.parentNode.replaceChild(newPeriodSelect, periodSelect);

                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                newAmountInput.addEventListener('input', updateExpectedReward);
                newPeriodSelect.addEventListener('change', updateExpectedReward);

                // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
                updateExpectedReward();

                // –ö–Ω–æ–ø–∫–∞ "Max"
                const maxButton = document.getElementById('max-button');
                if (maxButton) {
                    const newMaxButton = maxButton.cloneNode(true);
                    maxButton.parentNode.replaceChild(newMaxButton, maxButton);

                    newMaxButton.addEventListener('click', function() {
                        const balance = window.balanceSystem.getTokens();
                        newAmountInput.value = balance.toFixed(2);
                        updateExpectedReward();
                    });
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–ó–∞—Å—Ç–µ–π–∫–∞—Ç–∏"
            const stakeButton = document.getElementById('stake-button');
            if (stakeButton) {
                const newStakeButton = stakeButton.cloneNode(true);
                stakeButton.parentNode.replaceChild(newStakeButton, stakeButton);

                newStakeButton.addEventListener('click', function() {
                    const amount = parseFloat(amountInput.value) || 0;
                    const period = parseInt(periodSelect.value) || 14;

                    window.stakingSystem.createStaking(amount, period);
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–î–µ—Ç–∞–ª—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
            const detailsButton = document.getElementById('details-button');
            if (detailsButton) {
                const newDetailsButton = detailsButton.cloneNode(true);
                detailsButton.parentNode.replaceChild(newDetailsButton, detailsButton);

                newDetailsButton.addEventListener('click', function() {
                    if (window.stakingSystem.hasActiveStaking()) {
                        window.location.href = 'staking-details.html';
                    } else {
                        showToast("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelButton = document.getElementById('cancel-staking-button');
            if (cancelButton) {
                const newCancelButton = cancelButton.cloneNode(true);
                cancelButton.parentNode.replaceChild(newCancelButton, cancelButton);

                newCancelButton.addEventListener('click', function() {
                    if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é 20%.")) {
                        window.stakingSystem.cancelStaking();
                    }
                });
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            window.stakingSystem.updateStakingDisplay();

            return true;
        } catch (e) {
            console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
            return false;
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function setupStakingDetailsPageHandlers() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!window.location.pathname.includes('staking-details.html')) return false;

            console.log("WINIX-FIX: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

            // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const backButton = document.getElementById('back-button');
            if (backButton) {
                backButton.addEventListener('click', function() {
                    window.location.href = 'staking.html';
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
            const addButton = document.getElementById('add-to-stake-button');
            if (addButton) {
                const newAddButton = addButton.cloneNode(true);
                addButton.parentNode.replaceChild(newAddButton, addButton);

                newAddButton.addEventListener('click', function() {
                    const amount = prompt("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:");
                    if (amount !== null) {
                        const numAmount = parseFloat(amount);
                        if (!isNaN(numAmount) && numAmount > 0) {
                            window.stakingSystem.addToStaking(numAmount);
                        } else {
                            showToast("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É", "error");
                        }
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelButton = document.getElementById('cancel-staking-button');
            if (cancelButton) {
                const newCancelButton = cancelButton.cloneNode(true);
                cancelButton.parentNode.replaceChild(newCancelButton, cancelButton);

                newCancelButton.addEventListener('click', function() {
                    if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é 20%.")) {
                        window.stakingSystem.cancelStaking();
                    }
                });
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            window.stakingSystem.updateStakingDisplay();

            return true;
        } catch (e) {
            console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
            return false;
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–≤–¥–∞–Ω—å
     */
    function setupEarnPageHandlers() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑–∞–≤–¥–∞–Ω—å
            if (!window.location.pathname.includes('earn.html')) return false;

            console.log("WINIX-FIX: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑–∞–≤–¥–∞–Ω—å");

            // –ö–Ω–æ–ø–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
            const claimDailyButton = document.getElementById('claim-daily');
            if (claimDailyButton) {
                const newClaimButton = claimDailyButton.cloneNode(true);
                claimDailyButton.parentNode.replaceChild(newClaimButton, claimDailyButton);

                newClaimButton.addEventListener('click', function() {
                    window.rewardSystem.claimDailyBonus();
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
                window.rewardSystem.updateDailyProgress();
            }

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
            const socialTasks = [
                { subscribeId: 'twitter-subscribe', verifyId: 'twitter-verify', reward: 50 },
                { subscribeId: 'telegram-subscribe', verifyId: 'telegram-verify', reward: 80 },
                { subscribeId: 'youtube-subscribe', verifyId: 'youtube-verify', reward: 50 }
            ];

            socialTasks.forEach(task => {
                // –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
                const subscribeButton = document.getElementById(task.subscribeId);
                if (subscribeButton) {
                    const newSubscribeButton = subscribeButton.cloneNode(true);
                    subscribeButton.parentNode.replaceChild(newSubscribeButton, subscribeButton);

                    newSubscribeButton.addEventListener('click', function() {
                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª—ñ–∫–Ω—É–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É
                        localStorage.setItem(`${task.subscribeId}_clicked`, 'true');

                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL
                        let url = '';
                        switch(task.subscribeId) {
                            case 'twitter-subscribe':
                                url = 'https://twitter.com/Winix_Official';
                                break;
                            case 'telegram-subscribe':
                                url = 'https://t.me/Winix_Official';
                                break;
                            case 'youtube-subscribe':
                                url = 'https://youtube.com/c/Winix_Official';
                                break;
                        }

                        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ URL
                        window.open(url, '_blank');
                    });
                }

                // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                const verifyButton = document.getElementById(task.verifyId);
                if (verifyButton) {
                    const newVerifyButton = verifyButton.cloneNode(true);
                    verifyButton.parentNode.replaceChild(newVerifyButton, verifyButton);

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–µ
                    const taskId = task.subscribeId.replace('-subscribe', '');
                    if (window.rewardSystem.isActionCompleted(taskId)) {
                        newVerifyButton.disabled = true;
                        newVerifyButton.textContent = '–í–∏–∫–æ–Ω–∞–Ω–æ';

                        const taskItem = newVerifyButton.closest('.task-item');
                        if (taskItem) {
                            taskItem.classList.add('completed-task');
                        }
                    }

                    newVerifyButton.addEventListener('click', function() {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–ø–æ—á–∞—Ç–∫—É –∫–ª—ñ–∫–Ω—É–≤ –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É
                        if (localStorage.getItem(`${task.subscribeId}_clicked`) !== 'true') {
                            showToast('–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å"', 'warning');
                            return;
                        }

                        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
                        const taskId = task.subscribeId.replace('-subscribe', '');
                        const result = window.rewardSystem.completeTask(taskId, task.reward, 0, `–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${taskId}`);

                        if (result.success) {
                            newVerifyButton.disabled = true;
                            newVerifyButton.textContent = '–í–∏–∫–æ–Ω–∞–Ω–æ';

                            const taskItem = newVerifyButton.closest('.task-item');
                            if (taskItem) {
                                taskItem.classList.add('completed-task');
                            }
                        }
                    });
                }
            });

            return true;
        } catch (e) {
            console.error("WINIX-FIX: –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–≤–¥–∞–Ω—å:", e);
            return false;
        }
    }

    // ================ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á ================

    /**
     * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
     */
    function initFixSystem() {
        try {
            // –ü–æ–∫—Ä–∞—â—É—î–º–æ —Å–∏—Å—Ç–µ–º–∏
            enhanceBalanceSystem();
            enhanceStakingSystem();
            enhanceRewardSystem();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
            setupStakingPageHandlers();
            setupStakingDetailsPageHandlers();
            setupEarnPageHandlers();

            console.log("‚úÖ WINIX-FIX: –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ —É—Å–ø—ñ—à–Ω–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ!");
            return true;
        } catch (e) {
            console.error("‚ùå WINIX-FIX: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", e);
            return false;
        }
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initFixSystem);
    } else {
        initFixSystem();
    }

    // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.showToast = showToast;

})();