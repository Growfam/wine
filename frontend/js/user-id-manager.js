/**
 * user-id-manager.js (FIXED VERSION)
 *
 * –Ñ–¥–∏–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ WINIX.
 * –ó–∞–±–µ–∑–ø–µ—á—É—î –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å ID –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏ —Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω—É —Ä–æ–±–æ—Ç—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É.
 */

(function() {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

    // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let currentUserId = null;

    // –ö–ª—é—á—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –≤ localStorage
    const STORAGE_KEYS = {
        TELEGRAM_ID: 'telegram_user_id',
        USER_ID: 'userId',
        SESSION_ID: 'session_user_id'
    };

    // –ü–µ—Ä–µ–ª—ñ–∫ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const USER_ID_SELECTORS = [
        '#user-id',
        '.user-id-value',
        '[data-user-id]'
    ];

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
     */
    function getUserId() {
        // 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î ID –≤ –∑–º—ñ–Ω–Ω—ñ–π
        if (currentUserId && currentUserId !== 'undefined' && currentUserId !== 'null') {
            console.log("[ID Manager] ID –∑ –∫–µ—à—É: " + currentUserId);
            return currentUserId;
        }

        // 2. –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ localStorage (—Å–ø—Ä–æ–±—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ)
        for (const key of Object.values(STORAGE_KEYS)) {
            const storedId = localStorage.getItem(key);
            if (storedId && storedId !== 'undefined' && storedId !== 'null') {
                console.log(`[ID Manager] ID –∑ localStorage (${key}): ${storedId}`);
                saveUserId(storedId); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —É—Å—ñ —Å—Ö–æ–≤–∏—â–∞
                return storedId;
            }
        }

        // 3. –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤–∏—â–µ, –Ω—ñ–∂ DOM)
        const urlParams = new URLSearchParams(window.location.search);
        const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
        if (urlId && urlId !== 'undefined' && urlId !== 'null') {
            console.log(`[ID Manager] ID –∑ URL: ${urlId}`);
            saveUserId(urlId); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —É—Å—ñ —Å—Ö–æ–≤–∏—â–∞
            return urlId;
        }

        // 4. –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        for (const selector of USER_ID_SELECTORS) {
            const elements = document.querySelectorAll(selector);
            for (const element of elements) {
                if (element && element.textContent &&
                    element.textContent.trim() !== '' &&
                    element.textContent !== 'undefined' &&
                    element.textContent !== 'null') {
                    const domId = element.textContent.trim();
                    console.log(`[ID Manager] ID –∑ DOM (${selector}): ${domId}`);
                    saveUserId(domId); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —É—Å—ñ —Å—Ö–æ–≤–∏—â–∞
                    return domId;
                }
            }
        }

        // 5. –ê–≤–∞—Ä—ñ–π–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π ID –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        // –í–ê–ñ–õ–ò–í–û: –¶–µ–π –∫–æ–¥ –º–∞—î –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π —É –≤–∏—Ä–æ–±–Ω–∏—á—ñ–π –≤–µ—Ä—Å—ñ—ó
        const emergencyId = "12345678";
        console.warn("[ID Manager] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≤–∞—Ä—ñ–π–Ω–∏–π ID: " + emergencyId);
        saveUserId(emergencyId);
        return emergencyId;
    }

    /**
     * –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ö–æ–≤–∏—â–∞
     * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function saveUserId(userId) {
        if (!userId || userId === 'undefined' || userId === 'null') {
            console.warn("[ID Manager] –°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID: " + userId);
            return;
        }

        // –ö–µ—à—É—î–º–æ ID –≤ –∑–º—ñ–Ω–Ω—ñ–π
        currentUserId = userId;

        try {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage —É –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–ª—é—á—ñ
            for (const key of Object.values(STORAGE_KEYS)) {
                localStorage.setItem(key, userId);
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ sessionStorage
            sessionStorage.setItem('user_id', userId);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ DOM –µ–ª–µ–º–µ–Ω—Ç–∏
            updateDomElements(userId);

            console.log("[ID Manager] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: " + userId);
        } catch (error) {
            console.error("[ID Manager] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID:", error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function updateDomElements(userId) {
        try {
            if (!userId) return;

            for (const selector of USER_ID_SELECTORS) {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    if (element) {
                        if (element.tagName === 'INPUT') {
                            element.value = userId;
                        } else {
                            element.textContent = userId;
                        }

                        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ data-–∞—Ç—Ä–∏–±—É—Ç
                        element.setAttribute('data-user-id', userId);
                    }
                });
            }

            // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π
            if (document.querySelectorAll(USER_ID_SELECTORS.join(',')).length === 0) {
                const hiddenElement = document.createElement('div');
                hiddenElement.id = 'user-id';
                hiddenElement.style.display = 'none';
                hiddenElement.textContent = userId;
                document.body.appendChild(hiddenElement);
                console.log('[ID Manager] –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ hidden input –∑ ID –¥–ª—è —Ñ–æ—Ä–º
            let hiddenInput = document.getElementById('hidden-user-id');
            if (!hiddenInput) {
                hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.id = 'hidden-user-id';
                hiddenInput.name = 'user_id';
                document.body.appendChild(hiddenInput);
            }
            hiddenInput.value = userId;
        } catch (error) {
            console.error('[ID Manager] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:', error);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ ID –≤–∞–ª—ñ–¥–Ω–∏–π
     * @param {string} userId - ID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function isValidUserId(userId) {
        return userId &&
               userId !== 'undefined' &&
               userId !== 'null' &&
               userId.trim() !== '';
    }

    /**
     * –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó)
     * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function setUserId(userId) {
        if (!isValidUserId(userId)) {
            console.warn("[ID Manager] –°–ø—Ä–æ–±–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID: " + userId);
            return false;
        }

        saveUserId(userId);
        console.log("[ID Manager] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + userId);

        // –î–æ–¥–∞—î–º–æ ID –¥–æ –≤—Å—ñ—Ö URL –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        updatePageLinks(userId);

        return true;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function updatePageLinks(userId) {
        try {
            const links = document.querySelectorAll('a[href]');
            links.forEach(link => {
                const href = link.getAttribute('href');
                if (href && !href.startsWith('#') && !href.startsWith('http') && !href.includes('id=')) {
                    // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä ID –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å
                    const separator = href.includes('?') ? '&' : '?';
                    link.setAttribute('href', `${href}${separator}id=${userId}`);
                }
            });
            console.log('[ID Manager] –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ');
        } catch (error) {
            console.error('[ID Manager] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å:', error);
        }
    }

    /**
     * –ê–≤–∞—Ä—ñ–π–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥-—Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    function fixStakingPage() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (window.location.href.includes('staking.html') || window.location.href.includes('staking-details.html')) {
            console.log('[ID Manager] –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥-—Å—Ç–æ—Ä—ñ–Ω–∫–∏');

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
            window.addEventListener('error', function(event) {
                if (event.message && (event.message.includes('API') || event.message.includes('404'))) {
                    console.warn('[ID Manager] –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É API:', event.message);

                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    const emptyStakingData = {
                        hasActiveStaking: false,
                        stakingAmount: 0,
                        period: 0,
                        rewardPercent: 0,
                        expectedReward: 0,
                        remainingDays: 0
                    };

                    localStorage.setItem('stakingData', JSON.stringify(emptyStakingData));
                    localStorage.setItem('winix_staking', JSON.stringify(emptyStakingData));

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    setTimeout(function() {
                        const stakingStatus = document.getElementById('staking-status');
                        if (stakingStatus) {
                            stakingStatus.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                        }

                        const loadingElements = document.querySelectorAll('.loading');
                        loadingElements.forEach(el => el.classList.remove('loading'));
                    }, 1000);

                    return true; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –æ–±—Ä–æ–±—Ü—ñ –ø–æ–º–∏–ª–∫–∏
                }
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–∞–≤–∏—Å–∞–Ω—å
            setTimeout(function() {
                const stakeBtnElement = document.getElementById('stake-button');
                if (stakeBtnElement) {
                    stakeBtnElement.onclick = function() {
                        alert("–£ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤—ñ—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—Ä–∞—Ü—é—î –≤ –æ–±–º–µ–∂–µ–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
                        return false;
                    };
                }

                const detailsBtnElement = document.getElementById('details-button');
                if (detailsBtnElement) {
                    detailsBtnElement.onclick = function() {
                        alert("–£ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –¥–µ—Ç–∞–ª—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
                        return false;
                    };
                }
            }, 2000);
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} options - –û–ø—Ü—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     * @param {string} options.userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ –≤–∂–µ –≤—ñ–¥–æ–º–∏–π)
     * @param {boolean} options.debug - –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
     */
    function init(options = {}) {
        console.log("[ID Manager] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...");

        try {
            // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ ID –≤ –æ–ø—Ü—ñ—è—Ö, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ
            if (options.userId && isValidUserId(options.userId)) {
                saveUserId(options.userId);
            } else {
                // –Ü–Ω–∞–∫—à–µ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
                const userId = getUserId();

                if (userId) {
                    console.log("[ID Manager] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ID: " + userId);
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
                    updatePageLinks(userId);
                } else {
                    console.warn("[ID Manager] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!");
                }
            }

            // –ü–∞—Ç—á–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó API –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ ID
            patchApiModules();

            // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∞–≤–∞—Ä—ñ–π–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            fixStakingPage();

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            window.addEventListener('load', function() {
                // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ ID, —è–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏ –≤ DOM
                const userId = getUserId();
                if (userId) {
                    updateDomElements(userId);
                    updatePageLinks(userId);
                }
            });

            console.log("[ID Manager] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
        } catch (error) {
            console.error("[ID Manager] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", error);
        }
    }

    /**
     * –ü–∞—Ç—á –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö API —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ ID
     */
    function patchApiModules() {
        try {
            // –ü–∞—Ç—á –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —É WinixAPI
            if (window.WinixAPI && window.WinixAPI.getUserId) {
                const originalGetUserId = window.WinixAPI.getUserId;
                window.WinixAPI.getUserId = function() {
                    const id = getUserId();
                    if (id) return id;
                    return originalGetUserId();
                };
                console.log("[ID Manager] –§—É–Ω–∫—Ü—ñ—é WinixAPI.getUserId —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ç—á–µ–Ω–æ");
            }

            // –ü–∞—Ç—á –¥–ª—è window.getUserId, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
            if (typeof window.getUserId === 'function') {
                const originalWindowGetUserId = window.getUserId;
                window.getUserId = function() {
                    const id = getUserId();
                    if (id) return id;
                    return originalWindowGetUserId();
                };
                console.log("[ID Manager] –§—É–Ω–∫—Ü—ñ—é window.getUserId —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ç—á–µ–Ω–æ");
            }

            // –ü–∞—Ç—á –¥–ª—è fetch, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≤—Å—ñ—Ö API –∑–∞–ø–∏—Ç—ñ–≤
            const originalFetch = window.fetch;
            window.fetch = function(resource, options = {}) {
                // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
                if (!options.headers) {
                    options.headers = {};
                }

                const userId = getUserId();
                if (userId) {
                    options.headers['X-User-Id'] = userId;
                    options.headers['X-Telegram-User-Id'] = userId;
                }

                // –Ø–∫—â–æ —Ü–µ API –∑–∞–ø–∏—Ç, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –≤ URL
                if (typeof resource === 'string' && resource.includes('/api/')) {
                    // –î–æ–¥–∞—î–º–æ ID –¥–æ URL, —è–∫—â–æ –∑–∞–ø–∏—Ç –º—ñ—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä user_id –∞–±–æ telegram_id
                    if (resource.includes('/user/') && !resource.match(/\/user\/[^\/]+\//)) {
                        const userIdInUrl = resource.split('/user/')[1]?.split('/')[0];
                        if (!userIdInUrl || userIdInUrl === 'undefined') {
                            resource = resource.replace('/user/', `/user/${userId}/`);
                            console.log(`[ID Manager] –î–æ–¥–∞–Ω–æ ID ${userId} –¥–æ –∑–∞–ø–∏—Ç—É API: ${resource}`);
                        }
                    }
                }

                return originalFetch(resource, options);
            };
            console.log("[ID Manager] –§—É–Ω–∫—Ü—ñ—é window.fetch —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ç—á–µ–Ω–æ");

        } catch (error) {
            console.error("[ID Manager] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ç—á—É API –º–æ–¥—É–ª—ñ–≤:", error);
        }
    }

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.UserIdManager = {
        getUserId,
        setUserId,
        saveUserId,
        isValidUserId,
        updateDomElements,
        init,
        updatePageLinks,
        // –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        fixStakingPage,
        version: "1.1.0-fixed"
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            init();
        });
    } else {
        init();
    }

    console.log("[ID Manager] –ú–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
})();