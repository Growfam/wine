/**
 * WinixCore.js - –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏ WINIX
 *
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è - –≤—Å—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
 * –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–∏—à–µ –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç–∏ –¥–æ API —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
 */

(function() {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixCore) {
        console.log("‚úÖ WinixCore –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        return window.WinixCore;
    }

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ö–û–ù–°–¢–ê–ù–¢–ò ---------------

    // –ö–ª—é—á—ñ –¥–ª—è localStorage
    const STORAGE_KEYS = {
        // –ë–∞–ª–∞–Ω—Å–∏
        USER_TOKENS: 'winix_balance',
        USER_COINS: 'winix_coins',

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        STAKING_DATA: 'winix_staking',
        STAKING_HISTORY: 'winix_staking_history',

        // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        TRANSACTIONS: 'winix_transactions',

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
        REFERRAL_DATA: 'winix_referral',

        // –ú–µ—Ç–∞–¥–∞–Ω—ñ
        VERSION: 'winix_version',
        LAST_SYNC: 'winix_last_sync'
    };

    // –¢–∏–ø–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    const TRANSACTION_TYPES = {
        RECEIVE: 'receive',
        SEND: 'send',
        STAKE: 'stake',
        UNSTAKE: 'unstake',
        REWARD: 'reward',
        FEE: 'fee'
    };

    // –¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    const MESSAGE_TYPES = {
        SUCCESS: 'success',
        ERROR: 'error',
        INFO: 'info',
        WARNING: 'warning'
    };

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ---------------

    // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
    let _isProcessingRequest = false;

    // –°–ø–∏—Å–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    let _eventListeners = {
        balanceChanged: [],
        stakingChanged: [],
        transactionAdded: [],
        stakingCreated: [],
        stakingCancelled: []
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    let _config = {
        debug: false,
        autoSync: true,
        syncInterval: 5000
    };

    // --------------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---------------

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º —Å–∏—Å—Ç–µ–º–∏
     */
    function log(type, message, data) {
        if (!_config.debug && type !== 'error') return;

        const prefix = 'üè¶ WINIX CORE';

        switch (type) {
            case 'error':
                console.error(`${prefix} –ü–û–ú–ò–õ–ö–ê:`, message, data);
                break;
            case 'warn':
                console.warn(`${prefix} –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:`, message, data);
                break;
            case 'info':
                console.info(`${prefix} –Ü–ù–§–û:`, message, data);
                break;
            default:
                console.log(`${prefix}:`, message, data);
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è JSON
     */
    function safeParseJSON(json, defaultValue = null) {
        try {
            return json ? JSON.parse(json) : defaultValue;
        } catch (e) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è JSON', {json, error: e});
            return defaultValue;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage
     */
    function safeSetItem(key, value) {
        try {
            // –î–ª—è –æ–±'—î–∫—Ç—ñ–≤ —ñ –º–∞—Å–∏–≤—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JSON.stringify
            if (typeof value === 'object' && value !== null) {
                localStorage.setItem(key, JSON.stringify(value));
            } else {
                localStorage.setItem(key, value);
            }
            return true;
        } catch (e) {
            log('error', `–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${key} –≤ localStorage`, e);
            return false;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ localStorage
     */
    function safeGetItem(key, defaultValue = null, parse = false) {
        try {
            const value = localStorage.getItem(key);

            if (value === null) return defaultValue;

            if (parse) {
                return safeParseJSON(value, defaultValue);
            }

            return value;
        } catch (e) {
            log('error', `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ${key} –∑ localStorage`, e);
            return defaultValue;
        }
    }

    /**
     * –í–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
     */
    async function apiRequest(endpoint, options = {}) {
        try {
            const userId = localStorage.getItem('telegram_user_id') ||
                          (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

            if (userId) {
                options.headers = options.headers || {};
                options.headers['X-Telegram-User-Id'] = userId;
            }

            const response = await fetch(endpoint, options);

            if (!response.ok) {
                throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            log('error', `–ü–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É –Ω–∞ ${endpoint}`, error);
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–¥—ñ—ó —Å–∏—Å—Ç–µ–º–∏
     */
    function emitEvent(eventName, data) {
        if (!_eventListeners[eventName]) return;

        _eventListeners[eventName].forEach(callback => {
            try {
                callback(data);
            } catch (e) {
                log('error', `–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó ${eventName}`, e);
            }
        });
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async function syncUserData() {
        try {
            const userId = localStorage.getItem('telegram_user_id') ||
                          (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

            if (!userId) {
                log('warn', '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }

            log('info', '–ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');

            const data = await apiRequest(`/api/user/${userId}`);

            if (data.status === 'success' && data.data) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É
                if (data.data.balance !== undefined) {
                    safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.balance.toString());
                }

                if (data.data.coins !== undefined) {
                    safeSetItem(STORAGE_KEYS.USER_COINS, data.data.coins.toString());
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (data.data.staking_data) {
                    safeSetItem(STORAGE_KEYS.STAKING_DATA, data.data.staking_data);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                if (Array.isArray(data.data.transactions)) {
                    safeSetItem(STORAGE_KEYS.TRANSACTIONS, data.data.transactions);
                }

                log('info', '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø—ñ—à–Ω–∞');
                safeSetItem(STORAGE_KEYS.LAST_SYNC, Date.now().toString());

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                UIManager.updateBalanceDisplay();
                UIManager.updateStakingDisplay();

                return true;
            } else {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞', data);
                return false;
            }
        } catch (error) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', error);
            return false;
        }
    }

    // --------------- –û–°–ù–û–í–ù–ê –°–ò–°–¢–ï–ú–ê ---------------

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å—É - —Å–ø—Ä–æ—â–µ–Ω–∏–π, –≤—Å—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
     */
    const BalanceManager = {
        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É WINIX
         */
        getTokens: function() {
            const balance = parseFloat(safeGetItem(STORAGE_KEYS.USER_TOKENS, '0'));
            return isNaN(balance) ? 0 : balance;
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
         */
        getCoins: function() {
            const coins = parseFloat(safeGetItem(STORAGE_KEYS.USER_COINS, '0'));
            return isNaN(coins) ? 0 : coins;
        },

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
         */
        syncBalanceFromServer: async function() {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) return false;

                const data = await apiRequest(`/api/user/${userId}/balance`);

                if (data.status === 'success' && data.data) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
                    if (data.data.balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.balance.toString());
                    }

                    if (data.data.coins !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_COINS, data.data.coins.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É', error);
                return false;
            }
        }
    };

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–µ–π–∫—ñ–Ω–≥—É - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ª–∏—à–µ —Å–µ—Ä–≤–µ—Ä–Ω—ñ API
     */
    const StakingManager = {
        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        hasActiveStaking: function() {
            const stakingData = safeGetItem(STORAGE_KEYS.STAKING_DATA, null, true);
            return stakingData && stakingData.hasActiveStaking === true;
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        getStakingData: function() {
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
            this.syncStakingFromServer();

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
            const data = safeGetItem(STORAGE_KEYS.STAKING_DATA, null, true);

            // –Ø–∫—â–æ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç
            if (!data || typeof data !== 'object') {
                return {
                    hasActiveStaking: false,
                    stakingAmount: 0,
                    rewardPercent: 0,
                    expectedReward: 0,
                    remainingDays: 0
                };
            }

            return data;
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
         */
        syncStakingFromServer: async function() {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) return false;

                log('info', '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞');

                const data = await apiRequest(`/api/user/${userId}/staking`);

                if (data.status === 'success' && data.data) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    safeSetItem(STORAGE_KEYS.STAKING_DATA, data.data);
                    log('info', '–î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ');

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateStakingDisplay();
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É', error);
                return false;
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        syncStakingHistoryFromServer: async function() {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) return false;

                const data = await apiRequest(`/api/user/${userId}/staking/history`);

                if (data.status === 'success' && Array.isArray(data.data)) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    safeSetItem(STORAGE_KEYS.STAKING_HISTORY, data.data);
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É', error);
                return false;
            }
        },

        /**
         * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (—á–µ—Ä–µ–∑ API)
         */
        createStaking: async function(amount, period) {
            if (_isProcessingRequest) {
                return { success: false, message: '–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è' };
            }

            _isProcessingRequest = true;

            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    return { success: false, message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
                }

                // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const result = await apiRequest(`/api/user/${userId}/staking`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ stakingAmount: amount, period: period })
                });

                // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ - –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                if (result.status === 'success') {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    if (result.data && result.data.staking) {
                        safeSetItem(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                    await BalanceManager.syncBalanceFromServer();

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateStakingDisplay();

                    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é
                    emitEvent('stakingCreated', result.data.staking);

                    return {
                        success: true,
                        message: '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
                        data: result.data
                    };
                } else {
                    return {
                        success: false,
                        message: result.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
                    };
                }
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', error);
                return {
                    success: false,
                    message: '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º'
                };
            } finally {
                _isProcessingRequest = false;
            }
        },

        /**
         * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (—á–µ—Ä–µ–∑ API)
         */
        addToStaking: async function(amount) {
            if (_isProcessingRequest) {
                return { success: false, message: '–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è' };
            }

            _isProcessingRequest = true;

            try {
                const stakingData = this.getStakingData();

                if (!stakingData || !stakingData.hasActiveStaking) {
                    return { success: false, message: '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É' };
                }

                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    return { success: false, message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
                }

                // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const result = await apiRequest(`/api/user/${userId}/staking/${stakingData.stakingId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ additionalAmount: amount })
                });

                // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ - –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                if (result.status === 'success') {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    if (result.data && result.data.staking) {
                        safeSetItem(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                    await BalanceManager.syncBalanceFromServer();

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateStakingDisplay();

                    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é
                    emitEvent('stakingChanged', result.data.staking);

                    return {
                        success: true,
                        message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`,
                        data: result.data
                    };
                } else {
                    return {
                        success: false,
                        message: result.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
                    };
                }
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', error);
                return {
                    success: false,
                    message: '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º'
                };
            } finally {
                _isProcessingRequest = false;
            }
        },

        /**
         * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (—á–µ—Ä–µ–∑ API)
         */
        cancelStaking: async function() {
            if (_isProcessingRequest) {
                return { success: false, message: '–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è' };
            }

            _isProcessingRequest = true;

            try {
                const stakingData = this.getStakingData();

                if (!stakingData || !stakingData.hasActiveStaking) {
                    return { success: false, message: '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É' };
                }

                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    return { success: false, message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
                }

                // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const result = await apiRequest(`/api/user/${userId}/staking/${stakingData.stakingId}/cancel`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(stakingData)
                });

                // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ - –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                if (result.status === 'success') {
                    // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    localStorage.removeItem(STORAGE_KEYS.STAKING_DATA);

                    // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö
                    if (result.data && result.data.staking) {
                        safeSetItem(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                    await BalanceManager.syncBalanceFromServer();

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateStakingDisplay();

                    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é
                    emitEvent('stakingCancelled', {
                        stakingAmount: stakingData.stakingAmount,
                        returnedAmount: result.data.returnedAmount || 0
                    });

                    return {
                        success: true,
                        message: result.message || '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ',
                        data: result.data
                    };
                } else {
                    return {
                        success: false,
                        message: result.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
                    };
                }
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', error);
                return {
                    success: false,
                    message: '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º'
                };
            } finally {
                _isProcessingRequest = false;
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        getStakingHistory: function(limit = 0) {
            const history = safeGetItem(STORAGE_KEYS.STAKING_HISTORY, [], true);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
            this.syncStakingHistoryFromServer();

            if (limit > 0 && history.length > limit) {
                return history.slice(0, limit);
            }

            return history;
        }
    };

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π - —Å–ø—Ä–æ—â–µ–Ω–∏–π
     */
    const TransactionManager = {
        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
         */
        getTransactions: function() {
            return safeGetItem(STORAGE_KEYS.TRANSACTIONS, [], true);
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
         */
        getRecentTransactions: function(limit = 3) {
            const transactions = this.getTransactions();
            return transactions.slice(0, limit);
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Å–µ—Ä–≤–µ—Ä–∞
         */
        syncTransactionsFromServer: async function() {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) return false;

                const data = await apiRequest(`/api/user/${userId}/transactions`);

                if (data.status === 'success' && Array.isArray(data.data)) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                    safeSetItem(STORAGE_KEYS.TRANSACTIONS, data.data);
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π', error);
                return false;
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionText: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                    return '–û—Ç—Ä–∏–º–∞–Ω–æ';
                case TRANSACTION_TYPES.SEND:
                    return '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ';
                case TRANSACTION_TYPES.STAKE:
                    return '–ó–∞—Å—Ç–µ–π–∫–∞–Ω–æ';
                case TRANSACTION_TYPES.UNSTAKE:
                    return '–†–æ–∑—Å—Ç–µ–π–∫–∞–Ω–æ';
                case TRANSACTION_TYPES.REWARD:
                    return '–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞';
                case TRANSACTION_TYPES.FEE:
                    return '–ö–æ–º—ñ—Å—ñ—è';
                default:
                    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è';
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞—Å—É CSS –¥–ª—è —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionClass: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                case TRANSACTION_TYPES.UNSTAKE:
                case TRANSACTION_TYPES.REWARD:
                    return 'transaction-positive';
                case TRANSACTION_TYPES.SEND:
                case TRANSACTION_TYPES.FEE:
                    return 'transaction-negative';
                case TRANSACTION_TYPES.STAKE:
                    return 'transaction-neutral';
                default:
                    return '';
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–µ—Ñ—ñ–∫—Å–∞ –¥–ª—è —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionPrefix: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                case TRANSACTION_TYPES.UNSTAKE:
                case TRANSACTION_TYPES.REWARD:
                    return '+';
                case TRANSACTION_TYPES.SEND:
                case TRANSACTION_TYPES.STAKE:
                case TRANSACTION_TYPES.FEE:
                    return '-';
                default:
                    return '';
            }
        }
    };

    /**
     * –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ UI
     */
    const UIManager = {
        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
         */
        updateBalanceDisplay: function() {
            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
                const tokenBalance = BalanceManager.getTokens();
                const coinsBalance = BalanceManager.getCoins();

                log('info', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', {
                    tokens: tokenBalance,
                    coins: coinsBalance
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –ø–æ–∫–∞–∑—É—é—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤
                const tokenSelectors = [
                    '#user-tokens',
                    '#main-balance',
                    '.balance-amount',
                    '#current-balance',
                    '.balance-value'
                ];

                tokenSelectors.forEach(selector => {
                    const elements = document.querySelectorAll(selector);
                    elements.forEach(element => {
                        if (element) {
                            // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —ñ–∫–æ–Ω–∫–∏, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó
                            if (element.id === 'main-balance' && element.innerHTML && element.innerHTML.includes('main-balance-icon')) {
                                element.innerHTML = `${tokenBalance.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" width="100" height="100" alt="WINIX"></span>`;
                            } else {
                                element.textContent = tokenBalance.toFixed(2);
                            }
                        }
                    });
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
                const coinsSelectors = [
                    '#user-coins',
                    '.coins-amount',
                    '.coins-value'
                ];

                coinsSelectors.forEach(selector => {
                    const elements = document.querySelectorAll(selector);
                    elements.forEach(element => {
                        if (element) {
                            element.textContent = coinsBalance.toFixed(0);
                        }
                    });
                });

                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', e);
                return false;
            }
        },

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
         */
        updateStakingDisplay: function() {
            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                const stakingData = StakingManager.getStakingData();
                const hasStaking = stakingData && stakingData.hasActiveStaking;

                log('info', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', {
                    hasStaking,
                    stakingData
                });

                // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (window.location.href.includes('staking.html')) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    const statusElement = document.getElementById('staking-status');
                    if (statusElement) {
                        statusElement.textContent = hasStaking
                            ? `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingData.stakingAmount.toFixed(2)} $WINIX`
                            : "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
                    const detailsButton = document.getElementById('details-button');
                    const cancelButton = document.getElementById('cancel-staking-button');

                    if (detailsButton) {
                        detailsButton.style.opacity = hasStaking ? '1' : '0.5';
                        detailsButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                    }

                    if (cancelButton) {
                        cancelButton.style.opacity = hasStaking ? '1' : '0.5';
                        cancelButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                    }
                }
                // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                else if (window.location.href.includes('staking-details.html')) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                    const amountElement = document.getElementById('staking-amount');
                    const periodElement = document.getElementById('staking-period');
                    const rewardPercentElement = document.getElementById('staking-reward-percent');
                    const expectedRewardElement = document.getElementById('staking-expected-reward');
                    const remainingDaysElement = document.getElementById('staking-remaining-days');

                    if (amountElement) amountElement.textContent = `${stakingData.stakingAmount.toFixed(2)} $WINIX`;
                    if (periodElement) periodElement.textContent = `${stakingData.period} –¥–Ω—ñ–≤`;
                    if (rewardPercentElement) rewardPercentElement.textContent = `${stakingData.rewardPercent}%`;
                    if (expectedRewardElement) expectedRewardElement.textContent = `${stakingData.expectedReward.toFixed(2)} $WINIX`;
                    if (remainingDaysElement) remainingDaysElement.textContent = stakingData.remainingDays.toString();
                }
                // –Ø–∫—â–æ –º–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≥–∞–º–∞–Ω—Ü—è
                else if (window.location.href.includes('wallet.html')) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                    const stakingBalanceElement = document.getElementById('staking-balance');
                    const stakingRewardsElement = document.getElementById('staking-rewards');

                    if (stakingBalanceElement) {
                        stakingBalanceElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${hasStaking ? stakingData.stakingAmount.toFixed(2) : '0'} $WINIX`;
                    }

                    if (stakingRewardsElement) {
                        stakingRewardsElement.textContent = `–ù–∞–≥–æ—Ä–æ–¥–∏: ${hasStaking ? stakingData.expectedReward.toFixed(2) : '0'} $WINIX`;
                    }
                }

                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', e);
                return false;
            }
        },

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
         */
        updateTransactionsList: function(elementId = 'transaction-list', limit = 3) {
            try {
                const listElement = document.getElementById(elementId);
                if (!listElement) return false;

                // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                const recentTransactions = TransactionManager.getRecentTransactions(limit);

                // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫
                listElement.innerHTML = '';

                if (recentTransactions.length === 0) {
                    listElement.innerHTML = '<div class="empty-message">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</div>';
                    return true;
                }

                // –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                recentTransactions.forEach(transaction => {
                    const transactionElement = document.createElement('div');
                    transactionElement.className = 'transaction-item';
                    transactionElement.setAttribute('data-tx-id', transaction.id);

                    const txText = TransactionManager.getTransactionText(transaction.type);
                    const amountClass = TransactionManager.getTransactionClass(transaction.type);
                    const amountPrefix = TransactionManager.getTransactionPrefix(transaction.type);

                    transactionElement.innerHTML = `
                        <div class="transaction-details">${transaction.description || txText}</div>
                        <div class="transaction-amount ${amountClass}">${amountPrefix}${transaction.amount.toFixed(2)} $WINIX</div>
                    `;

                    listElement.appendChild(transactionElement);
                });

                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π', e);
                return false;
            }
        },

        /**
         * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
         */
        showNotification: function(message, type = MESSAGE_TYPES.SUCCESS, callback = null) {
            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                let toastElement = document.getElementById('toast-message');

                if (!toastElement) {
                    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                    toastElement = document.createElement('div');
                    toastElement.id = 'toast-message';
                    toastElement.className = 'toast-message';
                    document.body.appendChild(toastElement);
                }

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç —ñ —Å—Ç–∏–ª—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                toastElement.textContent = message;

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
                switch (type) {
                    case MESSAGE_TYPES.SUCCESS:
                        toastElement.style.backgroundColor = 'rgba(76, 175, 80, 0.9)';
                        break;
                    case MESSAGE_TYPES.ERROR:
                        toastElement.style.backgroundColor = 'rgba(244, 67, 54, 0.9)';
                        break;
                    case MESSAGE_TYPES.WARNING:
                        toastElement.style.backgroundColor = 'rgba(255, 152, 0, 0.9)';
                        break;
                    case MESSAGE_TYPES.INFO:
                        toastElement.style.backgroundColor = 'rgba(33, 150, 243, 0.9)';
                        break;
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                toastElement.classList.add('show');

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
                setTimeout(() => {
                    toastElement.classList.remove('show');

                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
                    if (callback) {
                        setTimeout(callback, 500);
                    }
                }, 3000);

                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', e);
                return false;
            }
        }
    };

    // --------------- –ü–£–ë–õ–Ü–ß–ù–ò–ô API ---------------

    /**
     * –ü—É–±–ª—ñ—á–Ω–∏–π API –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω –ø—Ä–æ–≥—Ä–∞–º–∏
     */
    const WinixCore = {
        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
         */
        init: async function(config = {}) {
            try {
                log('info', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WinixCore');

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
                Object.assign(_config, config);

                // –°–ø—Ä–æ–±–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
                try {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    const userId = localStorage.getItem('telegram_user_id') ||
                                  (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                    if (userId) {
                        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                        await syncUserData();
                        log('info', '–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø—ñ—à–Ω–∞');
                    } else {
                        log('warn', '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                    }
                } catch (syncError) {
                    log('warn', '–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', syncError);
                    log('info', '–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏');
                }

                // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                if (_config.autoSync) {
                    this.startAutoSync();
                }

                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
                this._applyCompatibilityPatches();

                log('info', 'WinixCore —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WinixCore', e);
                return false;
            }
        },

        /**
         * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
         */
        startAutoSync: function() {
            // –û–Ω–æ–≤–ª—é—î–º–æ UI –∫–æ–∂–Ω—ñ N –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
            setInterval(() => {
                try {
                    UIManager.updateBalanceDisplay();
                    UIManager.updateStakingDisplay();
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI', e);
                }
            }, _config.syncInterval);

            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            const serverSyncInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                try {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    const userId = localStorage.getItem('telegram_user_id') ||
                                  (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                    if (userId) {
                        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                        syncUserData().catch(error => {
                            log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', error);
                        });
                    }
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', e);
                }
            }, serverSyncInterval);

            log('info', `–ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é UI –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${_config.syncInterval}–º—Å`);
            log('info', `–ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30—Å`);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
            window.addEventListener('focus', () => {
                try {
                    const userId = localStorage.getItem('telegram_user_id') ||
                                  (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                    if (userId) {
                        syncUserData().catch(error => {
                            log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É', error);
                        });
                    }
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É', e);
                }
            });
        },

        /**
         * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó
         */
        on: function(eventName, callback) {
            if (!_eventListeners[eventName]) {
                _eventListeners[eventName] = [];
            }

            _eventListeners[eventName].push(callback);
            return this;
        },

        /**
         * –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó
         */
        off: function(eventName, callback) {
            if (!_eventListeners[eventName]) return this;

            _eventListeners[eventName] = _eventListeners[eventName].filter(
                cb => cb !== callback
            );
            return this;
        },

        /**
         * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—ñ–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
         */
        _applyCompatibilityPatches: function() {
            log('info', '–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—ñ–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏');

            // –ü–∞—Ç—á –¥–ª—è —Å—Ç–∞—Ä–æ—ó RewardSystem
            if (!window.rewardSystem) {
                window.rewardSystem = {
                    getUserTokens: BalanceManager.getTokens,
                    getUserCoins: BalanceManager.getCoins,
                    updateBalanceDisplay: UIManager.updateBalanceDisplay
                };
            }

            // –ü–∞—Ç—á –¥–ª—è StakingSystem
            if (!window.stakingSystem) {
                window.stakingSystem = {
                    hasActiveStaking: StakingManager.hasActiveStaking,
                    getStakingDisplayData: StakingManager.getStakingData,
                    getStakingHistory: StakingManager.getStakingHistory,
                    createStaking: function(amount, period) {
                        return StakingManager.createStaking(amount, period)
                            .then(result => {
                                if (result.success) {
                                    UIManager.showNotification('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
                                } else {
                                    UIManager.showNotification(result.message, MESSAGE_TYPES.ERROR);
                                }
                                return result;
                            });
                    },
                    cancelStaking: function() {
                        return StakingManager.cancelStaking()
                            .then(result => {
                                if (result.success) {
                                    UIManager.showNotification(result.message);
                                } else {
                                    UIManager.showNotification(result.message, MESSAGE_TYPES.ERROR);
                                }
                                return result;
                            });
                    },
                    updateStakingDisplay: UIManager.updateStakingDisplay,
                    walletSystem: {
                        getBalance: BalanceManager.getTokens
                    }
                };
            }

            // –ü–∞—Ç—á –¥–ª—è TransactionSystem
            if (!window.transactionSystem) {
                window.transactionSystem = {
                    getTransactions: TransactionManager.getTransactions,
                    getRecentTransactions: TransactionManager.getRecentTransactions,
                    getTransactionText: TransactionManager.getTransactionText,
                    getTransactionClass: TransactionManager.getTransactionClass,
                    getTransactionAmountPrefix: TransactionManager.getTransactionPrefix,
                    updateTransactionsList: UIManager.updateTransactionsList,
                    hasRealTransactions: true,
                    shouldShowTestTransactions: function() { return true; },
                    transactions: TransactionManager.getTransactions()
                };
            }

            // –ü–∞—Ç—á –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
            window.getUserTokens = BalanceManager.getTokens;
            window.getUserCoins = BalanceManager.getCoins;
            window.getBalance = BalanceManager.getTokens;

            // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑ –±–µ–∑–ø–µ—á–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –±–∞–ª–∞–Ω—Å—É
            window.navigateTo = function(page) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
                sessionStorage.setItem('lastBalance', BalanceManager.getTokens().toString());
                sessionStorage.setItem('lastCoins', BalanceManager.getCoins().toString());
                sessionStorage.setItem('navigationTime', Date.now().toString());

                window.location.href = page;
            };

            // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
            window.showToast = UIManager.showNotification;
            window.updateBalanceDisplay = UIManager.updateBalanceDisplay;
            window.updateStakingDisplay = UIManager.updateStakingDisplay;
            window.updateTransactionsList = UIManager.updateTransactionsList;

            log('info', '–ü–∞—Ç—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ');
        },

        // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        Balance: BalanceManager,
        Staking: StakingManager,
        Transactions: TransactionManager,
        UI: UIManager,

        // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
        TRANSACTION_TYPES,
        MESSAGE_TYPES,
        STORAGE_KEYS
    };

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
    window.WinixCore = WinixCore;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    document.addEventListener('DOMContentLoaded', function() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        if (!window.WinixCoreInitialized) {
            WinixCore.init();
            window.WinixCoreInitialized = true;

            log('info', 'WinixCore –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏');

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            setTimeout(function() {
                UIManager.updateBalanceDisplay();
                UIManager.updateStakingDisplay();
                UIManager.updateTransactionsList();

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                document.dispatchEvent(new CustomEvent('winix-core-initialized'));
            }, 300);
        }
    });

    // –Ø–∫—â–æ DOM –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞—Ä–∞–∑
    if (document.readyState === 'interactive' || document.readyState === 'complete') {
        if (!window.WinixCoreInitialized) {
            WinixCore.init();
            window.WinixCoreInitialized = true;

            log('info', 'WinixCore –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (DOM –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π)');

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            setTimeout(function() {
                UIManager.updateBalanceDisplay();
                UIManager.updateStakingDisplay();
                UIManager.updateTransactionsList();

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                document.dispatchEvent(new CustomEvent('winix-core-initialized'));
            }, 300);
        }
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    return WinixCore;
})();