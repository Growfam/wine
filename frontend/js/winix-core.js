/**
 * WinixCore.js - –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏ WINIX
 *
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è - –≤—Å—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
 * –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–∏—à–µ –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç–∏ –¥–æ API —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
 */

(function() {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixCore) {
        console.log("‚úÖ WinixCore –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        return window.WinixCore;
    }

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ö–û–ù–°–¢–ê–ù–¢–ò ---------------

    // –ö–ª—é—á—ñ –¥–ª—è localStorage
    const STORAGE_KEYS = {
        // –ë–∞–ª–∞–Ω—Å–∏
        USER_TOKENS: 'winix_balance',
        USER_COINS: 'winix_coins',

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        STAKING_DATA: 'winix_staking',
        STAKING_HISTORY: 'winix_staking_history',

        // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        TRANSACTIONS: 'winix_transactions',

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
        REFERRAL_DATA: 'winix_referral',

        // –ú–µ—Ç–∞–¥–∞–Ω—ñ
        VERSION: 'winix_version',
        LAST_SYNC: 'winix_last_sync'
    };

    // –¢–∏–ø–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    const TRANSACTION_TYPES = {
        RECEIVE: 'receive',
        SEND: 'send',
        STAKE: 'stake',
        UNSTAKE: 'unstake',
        REWARD: 'reward',
        FEE: 'fee'
    };

    // –¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    const MESSAGE_TYPES = {
        SUCCESS: 'success',
        ERROR: 'error',
        INFO: 'info',
        WARNING: 'warning'
    };

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const STAKING_CONFIG = {
        minAmount: 50,
        maxBalancePercentage: 0.9,
        allowedPeriods: [7, 14, 28],
        rewardRates: {
            7: 4,  // 4% –∑–∞ 7 –¥–Ω—ñ–≤
            14: 9, // 9% –∑–∞ 14 –¥–Ω—ñ–≤
            28: 15 // 15% –∑–∞ 28 –¥–Ω—ñ–≤
        }
    };

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ---------------

    // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
    let _isProcessingRequest = false;

    // –°–ø–∏—Å–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    let _eventListeners = {
        balanceChanged: [],
        stakingChanged: [],
        transactionAdded: [],
        stakingCreated: [],
        stakingCancelled: []
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    let _config = {
        debug: false,
        autoSync: true,
        syncInterval: 5000
    };

    // --------------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---------------

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º —Å–∏—Å—Ç–µ–º–∏
     */
    function log(type, message, data) {
        if (!_config.debug && type !== 'error') return;

        const prefix = 'üè¶ WINIX CORE';

        switch (type) {
            case 'error':
                console.error(`${prefix} –ü–û–ú–ò–õ–ö–ê:`, message, data);
                break;
            case 'warn':
                console.warn(`${prefix} –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:`, message, data);
                break;
            case 'info':
                console.info(`${prefix} –Ü–ù–§–û:`, message, data);
                break;
            default:
                console.log(`${prefix}:`, message, data);
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è JSON
     */
    function safeParseJSON(json, defaultValue = null) {
        try {
            return json ? JSON.parse(json) : defaultValue;
        } catch (e) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è JSON', {json, error: e});
            return defaultValue;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage
     */
    function safeSetItem(key, value) {
        try {
            // –î–ª—è –æ–±'—î–∫—Ç—ñ–≤ —ñ –º–∞—Å–∏–≤—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JSON.stringify
            if (typeof value === 'object' && value !== null) {
                localStorage.setItem(key, JSON.stringify(value));
            } else {
                localStorage.setItem(key, value);
            }
            return true;
        } catch (e) {
            log('error', `–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${key} –≤ localStorage`, e);
            return false;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ localStorage
     */
    function safeGetItem(key, defaultValue = null, parse = false) {
        try {
            const value = localStorage.getItem(key);

            if (value === null) return defaultValue;

            if (parse) {
                return safeParseJSON(value, defaultValue);
            }

            return value;
        } catch (e) {
            log('error', `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ${key} –∑ localStorage`, e);
            return defaultValue;
        }
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—É–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function validateStakingAmount(amount, balance) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        if (isNaN(amount) || amount <= 0) {
            return {
                isValid: false,
                message: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É –±—ñ–ª—å—à–µ –Ω—É–ª—è"
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Å—É–º–∞ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º
        if (amount !== Math.floor(amount)) {
            return {
                isValid: false,
                message: "–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º"
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        if (amount < STAKING_CONFIG.minAmount) {
            return {
                isValid: false,
                message: `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${STAKING_CONFIG.minAmount} WINIX`
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å—É–º—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞–ª–∞–Ω—Å—É
        const maxAllowedAmount = Math.floor(balance * STAKING_CONFIG.maxBalancePercentage);
        if (amount > maxAllowedAmount) {
            return {
                isValid: false,
                message: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${maxAllowedAmount} WINIX (${STAKING_CONFIG.maxBalancePercentage*100}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)`
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –±–∞–ª–∞–Ω—Å—É
        if (amount > balance) {
            return {
                isValid: false,
                message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`
            };
        }

        return {
            isValid: true,
            message: ""
        };
    }

    /**
 * –í–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
 * @param {string} endpoint - URL –¥–ª—è –∑–∞–ø–∏—Ç—É
 * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
 * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST/PUT –∑–∞–ø–∏—Ç—ñ–≤)
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
 * @param {number} retries - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
 */
async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 3) {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
    const userId = getUserId();

    if (!userId) {
        console.error('‚ö†Ô∏è API-–∑–∞–ø–∏—Ç –Ω–µ–º–æ–∂–ª–∏–≤–∏–π: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
    const timestamp = Date.now();
    const url = endpoint.includes('?')
        ? `${endpoint}&t=${timestamp}`
        : `${endpoint}?t=${timestamp}`;

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É
    const requestOptions = {
        method: method,
        headers: {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': userId,
            ...options.headers
        },
        ...options
    };

    // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT
    if (data && ['POST', 'PUT'].includes(method.toUpperCase())) {
        requestOptions.body = JSON.stringify(data);
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    async function tryRequest(attemptsLeft) {
        try {
            console.log(`üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø–∏—Ç—É –Ω–∞ ${url}`);

            const response = await fetch(url, requestOptions);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (!response.ok) {
                const statusText = response.statusText || '';
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É: ${response.status} ${statusText}`);

                // –î–ª—è 401/403 –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
                if (response.status === 401 || response.status === 403) {
                    console.warn('üîê –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                }

                // –î–ª—è 404 –ø–æ–º–∏–ª–æ–∫ –≤–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                if (response.status === 404) {
                    console.error(`‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${url}`);
                    throw new Error(`–ó–∞–ø–∏—Ç–∞–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (404)`);
                }

                // –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Å–ø—Ä–æ–±–∏, –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
                if (attemptsLeft > 0) {
                    const delay = Math.pow(2, retries - attemptsLeft) * 500; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                    console.log(`‚è±Ô∏è –ü–æ–≤—Ç–æ—Ä –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft})`);

                    await new Promise(resolve => setTimeout(resolve, delay));
                    return tryRequest(attemptsLeft - 1);
                }

                throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${statusText}`);
            }

            // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –û–ö, –ø–∞—Ä—Å–∏–º–æ JSON
            let jsonData;
            try {
                jsonData = await response.json();
            } catch (parseError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', parseError);
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (jsonData && jsonData.status === 'error') {
                console.error('‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:', jsonData.message);
                throw new Error(jsonData.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
            }

            console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏–π API-–∑–∞–ø–∏—Ç –Ω–∞ ${url}`);
            return jsonData;

        } catch (error) {
            // –î–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
            if (error.name === 'TypeError' && attemptsLeft > 0) {
                const delay = Math.pow(2, retries - attemptsLeft) * 500;
                console.log(`‚ö†Ô∏è –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft}):`, error.message);

                await new Promise(resolve => setTimeout(resolve, delay));
                return tryRequest(attemptsLeft - 1);
            }

            // –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω—ñ, –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Ä–µ–π—Ç–∏–º–æ –ø–æ–º–∏–ª–∫—É
            throw error;
        }
    }

    // –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
    return tryRequest(retries);
}

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–¥—ñ—ó —Å–∏—Å—Ç–µ–º–∏
     */
    function emitEvent(eventName, data) {
        if (!_eventListeners[eventName]) return;

        _eventListeners[eventName].forEach(callback => {
            try {
                callback(data);
            } catch (e) {
                log('error', `–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó ${eventName}`, e);
            }
        });
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async function syncUserData() {
        try {
            const userId = localStorage.getItem('telegram_user_id') ||
                          (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

            if (!userId) {
                log('warn', '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return false;
            }

            log('info', '–ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');

            const data = await apiRequest(`/api/user/${userId}`);

            if (data.status === 'success' && data.data) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É
                if (data.data.balance !== undefined) {
                    safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.balance.toString());
                }

                if (data.data.coins !== undefined) {
                    safeSetItem(STORAGE_KEYS.USER_COINS, data.data.coins.toString());
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (data.data.staking_data) {
                    safeSetItem(STORAGE_KEYS.STAKING_DATA, data.data.staking_data);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                if (Array.isArray(data.data.transactions)) {
                    safeSetItem(STORAGE_KEYS.TRANSACTIONS, data.data.transactions);
                }

                log('info', '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø—ñ—à–Ω–∞');
                safeSetItem(STORAGE_KEYS.LAST_SYNC, Date.now().toString());

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                UIManager.updateBalanceDisplay();
                // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                    window.WinixStakingSystem.updateStakingDisplay();
                }

                return true;
            } else {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞', data);
                return false;
            }
        } catch (error) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', error);
            return false;
        }
    }

    // --------------- –û–°–ù–û–í–ù–ê –°–ò–°–¢–ï–ú–ê ---------------

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å—É - —Å–ø—Ä–æ—â–µ–Ω–∏–π, –≤—Å—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
     */
    const BalanceManager = {
        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É WINIX
         */
        getTokens: function() {
            const balance = parseFloat(safeGetItem(STORAGE_KEYS.USER_TOKENS, '0'));
            return isNaN(balance) ? 0 : balance;
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
         */
        getCoins: function() {
            const coins = parseFloat(safeGetItem(STORAGE_KEYS.USER_COINS, '0'));
            return isNaN(coins) ? 0 : coins;
        },

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
         */
        syncBalanceFromServer: async function() {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) return false;

                const data = await apiRequest(`/api/user/${userId}/balance`);

                if (data.status === 'success' && data.data) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
                    if (data.data.balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.balance.toString());
                    }

                    if (data.data.coins !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_COINS, data.data.coins.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É', error);
                return false;
            }
        },

        /**
         * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
         * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        addTokens: async function(amount, description = '–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    log('error', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                    return false;
                }

                const data = await apiRequest(`/api/user/${userId}/add-tokens`, 'POST', {
                    amount: amount,
                    description: description
                });

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
                    if (data.data && data.data.new_balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.new_balance.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –∑–º—ñ–Ω—É –±–∞–ª–∞–Ω—Å—É
                    emitEvent('balanceChanged', {
                        previous: data.data.previous_balance,
                        current: data.data.new_balance,
                        change: amount
                    });

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
         * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        subtractTokens: async function(amount, description = '–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    log('error', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                    return false;
                }

                const data = await apiRequest(`/api/user/${userId}/subtract-tokens`, 'POST', {
                    amount: amount,
                    description: description
                });

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
                    if (data.data && data.data.new_balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.new_balance.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –∑–º—ñ–Ω—É –±–∞–ª–∞–Ω—Å—É
                    emitEvent('balanceChanged', {
                        previous: data.data.previous_balance,
                        current: data.data.new_balance,
                        change: -amount
                    });

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ –¥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
         */
        addCoins: async function(amount) {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    log('error', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                    return false;
                }

                const data = await apiRequest(`/api/user/${userId}/add-coins`, 'POST', {
                    amount: amount
                });

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
                    if (data.data && data.data.new_coins !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_COINS, data.data.new_coins.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
         */
        subtractCoins: async function(amount) {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    log('error', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                    return false;
                }

                const data = await apiRequest(`/api/user/${userId}/subtract-coins`, 'POST', {
                    amount: amount
                });

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
                    if (data.data && data.data.new_coins !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_COINS, data.data.new_coins.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∂–µ—Ç–æ–Ω—ñ–≤ —É —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ API
         * @param {number} coinsAmount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
         */
        convertCoinsToTokens: async function(coinsAmount) {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    log('error', '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                    return false;
                }

                const data = await apiRequest(`/api/user/${userId}/convert-coins`, 'POST', {
                    coins_amount: coinsAmount
                });

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
                    if (data.data) {
                        if (data.data.new_tokens_balance !== undefined) {
                            safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.new_tokens_balance.toString());
                        }

                        if (data.data.new_coins_balance !== undefined) {
                            safeSetItem(STORAGE_KEYS.USER_COINS, data.data.new_coins_balance.toString());
                        }
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∂–µ—Ç–æ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–Ω–æ—Å—Ç—ñ –∫–æ—à—Ç—ñ–≤ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –°—É–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
         * @param {string} type - –¢–∏–ø –±–∞–ª–∞–Ω—Å—É ('tokens' –∞–±–æ 'coins')
         */
        checkSufficientFunds: async function(amount, type = 'tokens') {
            try {
                // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                if (type === 'tokens') {
                    const balance = this.getTokens();
                    if (balance >= amount) {
                        return {
                            success: true,
                            data: {
                                has_sufficient_funds: true,
                                current_balance: balance,
                                required_amount: amount,
                                source: 'local'
                            }
                        };
                    }
                } else if (type === 'coins') {
                    const coins = this.getCoins();
                    if (coins >= amount) {
                        return {
                            success: true,
                            data: {
                                has_sufficient_funds: true,
                                current_balance: coins,
                                required_amount: amount,
                                source: 'local'
                            }
                        };
                    }
                }

                // –Ø–∫—â–æ –ª–æ–∫–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞, –∑–∞–ø–∏—Ç—É—î–º–æ —Å–µ—Ä–≤–µ—Ä
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) {
                    return { success: false, message: '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' };
                }

                const data = await apiRequest(`/api/user/${userId}/check-funds`, 'POST', {
                    amount: amount,
                    type: type
                });

                if (data && data.status === 'success') {
                    return { success: true, data: data.data };
                }

                return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—à—Ç—ñ–≤' };
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–Ω–æ—Å—Ç—ñ –∫–æ—à—Ç—ñ–≤', error);
                return { success: false, message: error.message };
            }
        }
    };

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π - —Å–ø—Ä–æ—â–µ–Ω–∏–π
     */
    const TransactionManager = {
        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
         */
        getTransactions: function() {
            return safeGetItem(STORAGE_KEYS.TRANSACTIONS, [], true);
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
         */
        getRecentTransactions: function(limit = 3) {
            const transactions = this.getTransactions();
            return transactions.slice(0, limit);
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Å–µ—Ä–≤–µ—Ä–∞
         */
        syncTransactionsFromServer: async function() {
            try {
                const userId = localStorage.getItem('telegram_user_id') ||
                              (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                if (!userId) return false;

                const data = await apiRequest(`/api/user/${userId}/transactions`);

                if (data.status === 'success' && Array.isArray(data.data)) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                    safeSetItem(STORAGE_KEYS.TRANSACTIONS, data.data);
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π', error);
                return false;
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionText: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                    return '–û—Ç—Ä–∏–º–∞–Ω–æ';
                case TRANSACTION_TYPES.SEND:
                    return '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ';
                case TRANSACTION_TYPES.STAKE:
                    return '–ó–∞—Å—Ç–µ–π–∫–∞–Ω–æ';
                case TRANSACTION_TYPES.UNSTAKE:
                    return '–†–æ–∑—Å—Ç–µ–π–∫–∞–Ω–æ';
                case TRANSACTION_TYPES.REWARD:
                    return '–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞';
                case TRANSACTION_TYPES.FEE:
                    return '–ö–æ–º—ñ—Å—ñ—è';
                default:
                    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è';
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞—Å—É CSS –¥–ª—è —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionClass: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                case TRANSACTION_TYPES.UNSTAKE:
                case TRANSACTION_TYPES.REWARD:
                    return 'transaction-positive';
                case TRANSACTION_TYPES.SEND:
                case TRANSACTION_TYPES.FEE:
                    return 'transaction-negative';
                case TRANSACTION_TYPES.STAKE:
                    return 'transaction-neutral';
                default:
                    return '';
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–µ—Ñ—ñ–∫—Å–∞ –¥–ª—è —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionPrefix: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                case TRANSACTION_TYPES.UNSTAKE:
                case TRANSACTION_TYPES.REWARD:
                    return '+';
                case TRANSACTION_TYPES.SEND:
                case TRANSACTION_TYPES.STAKE:
                case TRANSACTION_TYPES.FEE:
                    return '-';
                default:
                    return '';
            }
        }
    };

    /**
 * –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ UI
 */
const UIManager = {
    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    updateBalanceDisplay: function() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
            const tokenBalance = BalanceManager.getTokens();
            const coinsBalance = BalanceManager.getCoins();

            log('info', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', {
                tokens: tokenBalance,
                coins: coinsBalance
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –ø–æ–∫–∞–∑—É—é—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤
            const tokenSelectors = [
                '#user-tokens',
                '#main-balance',
                '.balance-amount',
                '#current-balance',
                '.balance-value'
            ];

            tokenSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    if (element) {
                        // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —ñ–∫–æ–Ω–∫–∏, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó
                        if (element.id === 'main-balance' && element.innerHTML && element.innerHTML.includes('main-balance-icon')) {
                            element.innerHTML = `${tokenBalance.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" width="100" height="100" alt="WINIX"></span>`;
                        } else {
                            element.textContent = tokenBalance.toFixed(2);
                        }
                    }
                });
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
            const coinsSelectors = [
                '#user-coins',
                '.coins-amount',
                '.coins-value'
            ];

            coinsSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    if (element) {
                        element.textContent = coinsBalance.toFixed(0);
                    }
                });
            });

            return true;
        } catch (e) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', e);
            return false;
        }
    },

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    updateTransactionsList: function(elementId = 'transaction-list', limit = 3) {
        try {
            const listElement = document.getElementById(elementId);
            if (!listElement) return false;

            // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            const recentTransactions = TransactionManager.getRecentTransactions(limit);

            // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫
            listElement.innerHTML = '';

            if (recentTransactions.length === 0) {
                listElement.innerHTML = '<div class="empty-message">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</div>';
                return true;
            }

            // –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            recentTransactions.forEach(transaction => {
                const transactionElement = document.createElement('div');
                transactionElement.className = 'transaction-item';
                transactionElement.setAttribute('data-tx-id', transaction.id);

                const txText = TransactionManager.getTransactionText(transaction.type);
                const amountClass = TransactionManager.getTransactionClass(transaction.type);
                const amountPrefix = TransactionManager.getTransactionPrefix(transaction.type);

                transactionElement.innerHTML = `
                    <div class="transaction-details">${transaction.description || txText}</div>
                    <div class="transaction-amount ${amountClass}">${amountPrefix}${transaction.amount.toFixed(2)} $WINIX</div>
                `;

                listElement.appendChild(transactionElement);
            });

            return true;
        } catch (e) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π', e);
            return false;
        }
    },

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Å—Ç–∏–ª—ñ WINIX
     */
    showNotification: function(message, type = 'success', callback = null) {
        try {
            // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            const existingNotifications = document.querySelectorAll('.winix-notification');
            existingNotifications.forEach(notification => {
                if (notification.parentNode) {
                    document.body.removeChild(notification);
                }
            });

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
            let gradientColors;
            switch (type) {
                case 'success':
                    gradientColors = 'linear-gradient(135deg, #00BFA5, #00CFBB)';
                    break;
                case 'error':
                    gradientColors = 'linear-gradient(135deg, #FF3B58, #FF5C5C)';
                    break;
                case 'warning':
                    gradientColors = 'linear-gradient(135deg, #FFA000, #FFB300)';
                    break;
                case 'info':
                    gradientColors = 'linear-gradient(135deg, #2196F3, #03A9F4)';
                    break;
                default:
                    gradientColors = 'linear-gradient(135deg, #00BFA5, #00CFBB)';
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            const notification = document.createElement('div');
            notification.className = `winix-notification winix-notification-${type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                max-width: 80%;
                padding: 12px 20px;
                border-radius: 10px;
                font-weight: 500;
                font-size: 16px;
                z-index: 9999;
                opacity: 0;
                transform: translateY(-20px);
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                color: white;
                background: ${gradientColors};
            `;

            notification.textContent = message;
            document.body.appendChild(notification);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–æ–∫–∞–∑—É
            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateY(0)';
            }, 10);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateY(-20px)';

                // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
                setTimeout(() => {
                    if (notification.parentNode) {
                        document.body.removeChild(notification);
                    }

                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
                    if (typeof callback === 'function') {
                        callback();
                    }
                }, 300);
            }, 3000);

            return true;
        } catch (e) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', e);

            // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –∑–≤–∏—á–∞–π–Ω–∏–π alert
            alert(message);
            if (typeof callback === 'function') {
                setTimeout(callback, 100);
            }

            return false;
        }
    },

    /**
     * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ —Å—Ç–∏–ª—ñ WINIX
     */
    showConfirmation: function(message, onConfirm, onCancel) {
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–π —Ñ–æ–Ω
            const overlay = document.createElement('div');
            overlay.className = 'winix-modal-overlay';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.7);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 9998;
                opacity: 0;
                transition: opacity 0.3s ease;
            `;

            // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            const modal = document.createElement('div');
            modal.className = 'winix-modal';
            modal.style.cssText = `
                background: linear-gradient(135deg, #2B3144, #1A1F2F);
                border-radius: 15px;
                padding: 25px;
                width: 85%;
                max-width: 350px;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
                transform: scale(0.9);
                transition: transform 0.3s ease;
                color: white;
            `;

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const modalMessage = document.createElement('div');
            modalMessage.textContent = message;
            modalMessage.style.cssText = `
                margin: 0 0 20px 0;
                font-size: 16px;
                text-align: center;
                line-height: 1.4;
                color: #ffffff;
            `;

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
            const buttonsContainer = document.createElement('div');
            buttonsContainer.style.cssText = `
                display: flex;
                justify-content: space-between;
                gap: 15px;
            `;

            const cancelButton = document.createElement('button');
            cancelButton.textContent = '–°–∫–∞—Å—É–≤–∞—Ç–∏';
            cancelButton.style.cssText = `
                flex: 1;
                padding: 14px;
                border: none;
                border-radius: 10px;
                background: rgba(255, 255, 255, 0.1);
                color: white;
                font-size: 15px;
                font-weight: 500;
                cursor: pointer;
                transition: background 0.3s;
            `;

            const confirmButton = document.createElement('button');
            confirmButton.textContent = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏';
            confirmButton.style.cssText = `
                flex: 1;
                padding: 14px;
                border: none;
                border-radius: 10px;
                background: linear-gradient(135deg, #00BFA5, #00CFBB);
                color: white;
                font-size: 15px;
                font-weight: 500;
                cursor: pointer;
                transition: opacity 0.3s;
            `;

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            function closeModal() {
                overlay.style.opacity = '0';
                modal.style.transform = 'scale(0.9)';

                setTimeout(() => {
                    if (overlay.parentNode) {
                        document.body.removeChild(overlay);
                    }
                }, 300);
            }

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            cancelButton.addEventListener('click', () => {
                closeModal();
                if (typeof onCancel === 'function') {
                    onCancel();
                }
            });

            confirmButton.addEventListener('click', () => {
                closeModal();
                if (typeof onConfirm === 'function') {
                    onConfirm();
                }
            });

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
            buttonsContainer.appendChild(cancelButton);
            buttonsContainer.appendChild(confirmButton);

            modal.appendChild(modalMessage);
            modal.appendChild(buttonsContainer);
            overlay.appendChild(modal);

            // –î–æ–¥–∞—î–º–æ –¥–æ DOM —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
            document.body.appendChild(overlay);

            setTimeout(() => {
                overlay.style.opacity = '1';
                modal.style.transform = 'scale(1)';
            }, 10);

            return true;
        } catch (e) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', e);

            // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –∑–≤–∏—á–∞–π–Ω–∏–π confirm
            if (confirm(message)) {
                if (typeof onConfirm === 'function') {
                    onConfirm();
                }
            } else {
                if (typeof onCancel === 'function') {
                    onCancel();
                }
            }

            return false;
        }
    }
};

    // --------------- –ü–£–ë–õ–Ü–ß–ù–ò–ô API ---------------

    /**
     * –ü—É–±–ª—ñ—á–Ω–∏–π API –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω –ø—Ä–æ–≥—Ä–∞–º–∏
     */
    const WinixCore = {
        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
         */
        init: async function(config = {}) {
            try {
                log('info', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WinixCore');

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
                Object.assign(_config, config);

                // –°–ø—Ä–æ–±–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
                try {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    const userId = localStorage.getItem('telegram_user_id') ||
                                  (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                    if (userId) {
                        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                        await syncUserData();
                        log('info', '–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø—ñ—à–Ω–∞');
                    } else {
                        log('warn', '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                    }
                } catch (syncError) {
                    log('warn', '–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', syncError);
                    log('info', '–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏');
                }

                // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                if (_config.autoSync) {
                    this.startAutoSync();
                }

                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
                this._applyCompatibilityPatches();

                log('info', 'WinixCore —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WinixCore', e);
                return false;
            }
        },

        /**
         * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
         */
        startAutoSync: function() {
            // –û–Ω–æ–≤–ª—é—î–º–æ UI –∫–æ–∂–Ω—ñ N –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
            setInterval(() => {
                try {
                    UIManager.updateBalanceDisplay();

                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                    if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                        window.WinixStakingSystem.updateStakingDisplay();
                    }
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI', e);
                }
            }, _config.syncInterval);

            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            const serverSyncInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                try {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    const userId = localStorage.getItem('telegram_user_id') ||
                                  (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                    if (userId) {
                        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                        syncUserData().catch(error => {
                            log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', error);
                        });
                    }
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', e);
                }
            }, serverSyncInterval);

            log('info', `–ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é UI –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${_config.syncInterval}–º—Å`);
            log('info', `–ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30—Å`);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
            window.addEventListener('focus', () => {
                try {
                    const userId = localStorage.getItem('telegram_user_id') ||
                                  (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);

                    if (userId) {
                        syncUserData().catch(error => {
                            log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É', error);
                        });
                    }
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É', e);
                }
            });
        },

        /**
         * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó
         */
        on: function(eventName, callback) {
            if (!_eventListeners[eventName]) {
                _eventListeners[eventName] = [];
            }

            _eventListeners[eventName].push(callback);
            return this;
        },

        /**
         * –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó
         */
        off: function(eventName, callback) {
            if (!_eventListeners[eventName]) return this;

            _eventListeners[eventName] = _eventListeners[eventName].filter(
                cb => cb !== callback
            );
            return this;
        },

        /**
         * –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—É–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        validateStakingAmount: validateStakingAmount,

        /**
         * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—ñ–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
         */
        _applyCompatibilityPatches: function() {
            log('info', '–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—ñ–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏');

            // –ü–∞—Ç—á –¥–ª—è —Å—Ç–∞—Ä–æ—ó RewardSystem
            if (!window.rewardSystem) {
                window.rewardSystem = {
                    getUserTokens: BalanceManager.getTokens,
                    getUserCoins: BalanceManager.getCoins,
                    updateBalanceDisplay: UIManager.updateBalanceDisplay
                };
            }

            // –ü–∞—Ç—á –¥–ª—è StakingSystem - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!window.stakingSystem && window.WinixStakingSystem) {
                window.stakingSystem = {
                    hasActiveStaking: window.WinixStakingSystem.hasActiveStaking,
                    getStakingDisplayData: window.WinixStakingSystem.getStakingData,
                    getStakingHistory: window.WinixStakingSystem.syncStakingHistoryFromServer,
                    createStaking: function(amount, period) {
                        return window.WinixStakingSystem.createStaking(amount, period)
                            .then(result => {
                                if (result.success) {
                                    UIManager.showNotification('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
                                } else {
                                    UIManager.showNotification(result.message, MESSAGE_TYPES.ERROR);
                                }
                                return result;
                            });
                    },
                    cancelStaking: function() {
                        return window.WinixStakingSystem.cancelStaking()
                            .then(result => {
                                if (result.success) {
                                    UIManager.showNotification(result.message);
                                } else {
                                    UIManager.showNotification(result.message, MESSAGE_TYPES.ERROR);
                                }
                                return result;
                            });
                    },
                    updateStakingDisplay: window.WinixStakingSystem.updateStakingDisplay,
                    walletSystem: {
                        getBalance: BalanceManager.getTokens
                    }
                };
            } else if (!window.stakingSystem) {
                // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç–∏–π –æ–±'—î–∫—Ç, —è–∫—â–æ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –Ω–µ–º–∞—î
                window.stakingSystem = {
                    hasActiveStaking: function() { return false; },
                    getStakingDisplayData: function() {
                        return {
                            hasActiveStaking: false,
                            stakingAmount: 0,
                            rewardPercent: 0,
                            expectedReward: 0,
                            remainingDays: 0
                        };
                    },
                    getStakingHistory: function() { return []; },
                    createStaking: function() {
                        console.error("–°–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
                        return Promise.reject("–°–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
                    },
                    cancelStaking: function() {
                        console.error("–°–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
                        return Promise.reject("–°–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
                    },
                    updateStakingDisplay: function() { },
                    walletSystem: {
                        getBalance: BalanceManager.getTokens
                    }
                };
            }

            // –ü–∞—Ç—á –¥–ª—è TransactionSystem
            if (!window.transactionSystem) {
                window.transactionSystem = {
                    getTransactions: TransactionManager.getTransactions,
                    getRecentTransactions: TransactionManager.getRecentTransactions,
                    getTransactionText: TransactionManager.getTransactionText,
                    getTransactionClass: TransactionManager.getTransactionClass,
                    getTransactionAmountPrefix: TransactionManager.getTransactionPrefix,
                    updateTransactionsList: UIManager.updateTransactionsList,
                    hasRealTransactions: true,
                    shouldShowTestTransactions: function() { return true; },
                    transactions: TransactionManager.getTransactions()
                };
            }

            // –ü–∞—Ç—á –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
            window.getUserTokens = BalanceManager.getTokens;
            window.getUserCoins = BalanceManager.getCoins;
            window.getBalance = BalanceManager.getTokens;

            // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑ –±–µ–∑–ø–µ—á–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –±–∞–ª–∞–Ω—Å—É
            window.navigateTo = function(page) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
                sessionStorage.setItem('lastBalance', BalanceManager.getTokens().toString());
                sessionStorage.setItem('lastCoins', BalanceManager.getCoins().toString());
                sessionStorage.setItem('navigationTime', Date.now().toString());

                window.location.href = page;
            };

            // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
            window.showToast = UIManager.showNotification;
            window.updateBalanceDisplay = UIManager.updateBalanceDisplay;

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
            window.updateStakingDisplay = window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function'
                ? window.WinixStakingSystem.updateStakingDisplay
                : function() { console.log("–§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"); };

            window.updateTransactionsList = UIManager.updateTransactionsList;

            log('info', '–ü–∞—Ç—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ');
        },

        // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        Balance: BalanceManager,
        Transactions: TransactionManager,
        UI: UIManager,

        // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
        TRANSACTION_TYPES,
        MESSAGE_TYPES,
        STORAGE_KEYS,
        STAKING_CONFIG
    };

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
    window.WinixCore = WinixCore;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    document.addEventListener('DOMContentLoaded', function() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        if (!window.WinixCoreInitialized) {
            WinixCore.init();
            window.WinixCoreInitialized = true;

            log('info', 'WinixCore –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏');

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            setTimeout(function() {
                UIManager.updateBalanceDisplay();

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                    window.WinixStakingSystem.updateStakingDisplay();
                }

                UIManager.updateTransactionsList();

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                document.dispatchEvent(new CustomEvent('winix-core-initialized'));
            }, 300);
        }
    });

    // –Ø–∫—â–æ DOM –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞—Ä–∞–∑
    if (document.readyState === 'interactive' || document.readyState === 'complete') {
        if (!window.WinixCoreInitialized) {
            WinixCore.init();
            window.WinixCoreInitialized = true;

            log('info', 'WinixCore –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (DOM –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π)');

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            setTimeout(function() {
                UIManager.updateBalanceDisplay();

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                    window.WinixStakingSystem.updateStakingDisplay();
                }

                UIManager.updateTransactionsList();

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                document.dispatchEvent(new CustomEvent('winix-core-initialized'));
            }, 300);
        }
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    return WinixCore;
})();