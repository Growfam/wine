/**
 * WinixCore.js - –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏ WINIX
 *
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è - –≤—Å—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
 * –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–∏—à–µ –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç–∏ –¥–æ API —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —î–¥–∏–Ω–∏–π API –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
 */

(function() {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixCore) {
        console.log("‚úÖ WinixCore –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        return window.WinixCore;
    }

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ö–û–ù–°–¢–ê–ù–¢–ò ---------------

    // –ö–ª—é—á—ñ –¥–ª—è localStorage
    const STORAGE_KEYS = {
        // –ë–∞–ª–∞–Ω—Å–∏
        USER_TOKENS: 'winix_balance',
        USER_COINS: 'winix_coins',

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        STAKING_DATA: 'winix_staking',
        STAKING_HISTORY: 'winix_staking_history',

        // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        TRANSACTIONS: 'winix_transactions',

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
        REFERRAL_DATA: 'winix_referral',

        // –ú–µ—Ç–∞–¥–∞–Ω—ñ
        VERSION: 'winix_version',
        LAST_SYNC: 'winix_last_sync'
    };

    // –¢–∏–ø–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    const TRANSACTION_TYPES = {
        RECEIVE: 'receive',
        SEND: 'send',
        STAKE: 'stake',
        UNSTAKE: 'unstake',
        REWARD: 'reward',
        FEE: 'fee'
    };

    // –¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    const MESSAGE_TYPES = {
        SUCCESS: 'success',
        ERROR: 'error',
        INFO: 'info',
        WARNING: 'warning'
    };

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const STAKING_CONFIG = {
        minAmount: 50,
        maxBalancePercentage: 0.9,
        allowedPeriods: [7, 14, 28],
        rewardRates: {
            7: 4,  // 4% –∑–∞ 7 –¥–Ω—ñ–≤
            14: 9, // 9% –∑–∞ 14 –¥–Ω—ñ–≤
            28: 15 // 15% –∑–∞ 28 –¥–Ω—ñ–≤
        }
    };

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ---------------

    // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
    let _isProcessingRequest = false;

    // –°–ø–∏—Å–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    let _eventListeners = {
        balanceChanged: [],
        stakingChanged: [],
        transactionAdded: [],
        stakingCreated: [],
        stakingCancelled: []
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    let _config = {
        debug: false,
        autoSync: true,
        syncInterval: 5000
    };

    // --------------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---------------

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º —Å–∏—Å—Ç–µ–º–∏
     */
    function log(type, message, data) {
        if (!_config.debug && type !== 'error') return;

        const prefix = 'üè¶ WINIX CORE';

        switch (type) {
            case 'error':
                console.error(`${prefix} –ü–û–ú–ò–õ–ö–ê:`, message, data);
                break;
            case 'warn':
                console.warn(`${prefix} –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:`, message, data);
                break;
            case 'info':
                console.info(`${prefix} –Ü–ù–§–û:`, message, data);
                break;
            default:
                console.log(`${prefix}:`, message, data);
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è JSON
     */
    function safeParseJSON(json, defaultValue = null) {
        try {
            return json ? JSON.parse(json) : defaultValue;
        } catch (e) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å—É–≤–∞–Ω–Ω—è JSON', {json, error: e});
            return defaultValue;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage
     */
    function safeSetItem(key, value) {
        try {
            // –î–ª—è –æ–±'—î–∫—Ç—ñ–≤ —ñ –º–∞—Å–∏–≤—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ JSON.stringify
            if (typeof value === 'object' && value !== null) {
                localStorage.setItem(key, JSON.stringify(value));
            } else {
                localStorage.setItem(key, value);
            }
            return true;
        } catch (e) {
            log('error', `–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${key} –≤ localStorage`, e);
            return false;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ localStorage
     */
    function safeGetItem(key, defaultValue = null, parse = false) {
        try {
            const value = localStorage.getItem(key);

            if (value === null) return defaultValue;

            if (parse) {
                return safeParseJSON(value, defaultValue);
            }

            return value;
        } catch (e) {
            log('error', `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ${key} –∑ localStorage`, e);
            return defaultValue;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–¥—ñ—ó —Å–∏—Å—Ç–µ–º–∏
     */
    function emitEvent(eventName, data) {
        if (!_eventListeners[eventName]) return;

        _eventListeners[eventName].forEach(callback => {
            try {
                callback(data);
            } catch (e) {
                log('error', `–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó ${eventName}`, e);
            }
        });
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async function syncUserData() {
        try {
            log('info', '–ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const data = await window.WinixAPI.getUserData();

            if (data.status === 'success' && data.data) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É
                if (data.data.balance !== undefined) {
                    safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.balance.toString());
                }

                if (data.data.coins !== undefined) {
                    safeSetItem(STORAGE_KEYS.USER_COINS, data.data.coins.toString());
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (data.data.staking_data) {
                    safeSetItem(STORAGE_KEYS.STAKING_DATA, data.data.staking_data);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                if (Array.isArray(data.data.transactions)) {
                    safeSetItem(STORAGE_KEYS.TRANSACTIONS, data.data.transactions);
                }

                log('info', '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø—ñ—à–Ω–∞');
                safeSetItem(STORAGE_KEYS.LAST_SYNC, Date.now().toString());

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                UIManager.updateBalanceDisplay();
                // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                    window.WinixStakingSystem.updateStakingDisplay();
                }

                return true;
            } else {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞', data);
                return false;
            }
        } catch (error) {
            log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', error);
            return false;
        }
    }

    // --------------- –û–°–ù–û–í–ù–ê –°–ò–°–¢–ï–ú–ê ---------------

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–ª–∞–Ω—Å—É - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î API –º–æ–¥—É–ª—å
     */
    const BalanceManager = {
        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É WINIX
         */
        getTokens: function() {
            const balance = parseFloat(safeGetItem(STORAGE_KEYS.USER_TOKENS, '0'));
            return isNaN(balance) ? 0 : balance;
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
         */
        getCoins: function() {
            const coins = parseFloat(safeGetItem(STORAGE_KEYS.USER_COINS, '0'));
            return isNaN(coins) ? 0 : coins;
        },

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
         */
        syncBalanceFromServer: async function() {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
                const data = await window.WinixAPI.getBalance();

                if (data.status === 'success' && data.data) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
                    if (data.data.balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.balance.toString());
                    }

                    if (data.data.coins !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_COINS, data.data.coins.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É', error);
                return false;
            }
        },

        /**
         * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
         * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        addTokens: async function(amount, description = '–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
                const data = await window.WinixAPI.addTokens(amount, description);

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
                    if (data.data && data.data.new_balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.new_balance.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –∑–º—ñ–Ω—É –±–∞–ª–∞–Ω—Å—É
                    emitEvent('balanceChanged', {
                        previous: data.data.previous_balance,
                        current: data.data.new_balance,
                        change: amount
                    });

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
         * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        subtractTokens: async function(amount, description = '–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
                const data = await window.WinixAPI.subtractTokens(amount, description);

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
                    if (data.data && data.data.new_balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.new_balance.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –∑–º—ñ–Ω—É –±–∞–ª–∞–Ω—Å—É
                    emitEvent('balanceChanged', {
                        previous: data.data.previous_balance,
                        current: data.data.new_balance,
                        change: -amount
                    });

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ –¥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
         */
        addCoins: async function(amount) {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
                const data = await window.WinixAPI.addCoins(amount);

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
                    if (data.data && data.data.new_coins !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_COINS, data.data.new_coins.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
         */
        subtractCoins: async function(amount) {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
                const data = await window.WinixAPI.subtractCoins(amount);

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
                    if (data.data && data.data.new_coins !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_COINS, data.data.new_coins.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∂–µ—Ç–æ–Ω—ñ–≤ —É —Ç–æ–∫–µ–Ω–∏ —á–µ—Ä–µ–∑ API
         * @param {number} coinsAmount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
         */
        convertCoinsToTokens: async function(coinsAmount) {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∂–µ—Ç–æ–Ω—ñ–≤ —É —Ç–æ–∫–µ–Ω–∏
                const data = await window.WinixAPI.convertCoinsToTokens(coinsAmount);

                if (data && data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
                    if (data.data) {
                        if (data.data.new_tokens_balance !== undefined) {
                            safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.new_tokens_balance.toString());
                        }

                        if (data.data.new_coins_balance !== undefined) {
                            safeSetItem(STORAGE_KEYS.USER_COINS, data.data.new_coins_balance.toString());
                        }
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    UIManager.updateBalanceDisplay();

                    return true;
                }

                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∂–µ—Ç–æ–Ω—ñ–≤', error);
                return false;
            }
        },

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–Ω–æ—Å—Ç—ñ –∫–æ—à—Ç—ñ–≤ —á–µ—Ä–µ–∑ API
         * @param {number} amount - –°—É–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
         * @param {string} type - –¢–∏–ø –±–∞–ª–∞–Ω—Å—É ('tokens' –∞–±–æ 'coins')
         */
        checkSufficientFunds: async function(amount, type = 'tokens') {
            try {
                // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                if (type === 'tokens') {
                    const balance = this.getTokens();
                    if (balance >= amount) {
                        return {
                            success: true,
                            data: {
                                has_sufficient_funds: true,
                                current_balance: balance,
                                required_amount: amount,
                                source: 'local'
                            }
                        };
                    }
                } else if (type === 'coins') {
                    const coins = this.getCoins();
                    if (coins >= amount) {
                        return {
                            success: true,
                            data: {
                                has_sufficient_funds: true,
                                current_balance: coins,
                                required_amount: amount,
                                source: 'local'
                            }
                        };
                    }
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ API
                const checkData = await window.WinixAPI.apiRequest('/api/check-funds', 'POST', {
                    amount: amount,
                    type: type
                });

                return {
                    success: checkData.status === 'success',
                    data: checkData.data
                };
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–Ω–æ—Å—Ç—ñ –∫–æ—à—Ç—ñ–≤', error);
                return { success: false, message: error.message };
            }
        }
    };

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π - —Å–ø—Ä–æ—â–µ–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î API –º–æ–¥—É–ª—å
     */
    const TransactionManager = {
        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
         */
        getTransactions: function() {
            return safeGetItem(STORAGE_KEYS.TRANSACTIONS, [], true);
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
         */
        getRecentTransactions: function(limit = 3) {
            const transactions = this.getTransactions();
            return transactions.slice(0, limit);
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Å–µ—Ä–≤–µ—Ä–∞
         */
        syncTransactionsFromServer: async function() {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
                const data = await window.WinixAPI.getTransactions();

                if (data.status === 'success' && Array.isArray(data.data)) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                    safeSetItem(STORAGE_KEYS.TRANSACTIONS, data.data);
                    return true;
                }
                return false;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π', error);
                return false;
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionText: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                    return '–û—Ç—Ä–∏–º–∞–Ω–æ';
                case TRANSACTION_TYPES.SEND:
                    return '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ';
                case TRANSACTION_TYPES.STAKE:
                    return '–ó–∞—Å—Ç–µ–π–∫–∞–Ω–æ';
                case TRANSACTION_TYPES.UNSTAKE:
                    return '–†–æ–∑—Å—Ç–µ–π–∫–∞–Ω–æ';
                case TRANSACTION_TYPES.REWARD:
                    return '–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞';
                case TRANSACTION_TYPES.FEE:
                    return '–ö–æ–º—ñ—Å—ñ—è';
                default:
                    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è';
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞—Å—É CSS –¥–ª—è —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionClass: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                case TRANSACTION_TYPES.UNSTAKE:
                case TRANSACTION_TYPES.REWARD:
                    return 'transaction-positive';
                case TRANSACTION_TYPES.SEND:
                case TRANSACTION_TYPES.FEE:
                    return 'transaction-negative';
                case TRANSACTION_TYPES.STAKE:
                    return 'transaction-neutral';
                default:
                    return '';
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–µ—Ñ—ñ–∫—Å–∞ –¥–ª—è —Å—É–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        getTransactionPrefix: function(type) {
            switch (type) {
                case TRANSACTION_TYPES.RECEIVE:
                case TRANSACTION_TYPES.UNSTAKE:
                case TRANSACTION_TYPES.REWARD:
                    return '+';
                case TRANSACTION_TYPES.SEND:
                case TRANSACTION_TYPES.STAKE:
                case TRANSACTION_TYPES.FEE:
                    return '-';
                default:
                    return '';
            }
        }
    };

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
     */
    const ReferralManager = {
        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
         */
        getReferralLink: async function() {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                const data = await window.WinixAPI.getReferralLink();

                if (data.status === 'success' && data.data && data.data.referral_link) {
                    return data.data.referral_link;
                }

                return null;
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è', error);
                return null;
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
         */
        getReferrals: async function() {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
                const data = await window.WinixAPI.getReferrals();

                if (data.status === 'success' && data.data) {
                    return data.data;
                }

                return { direct: [], indirect: [], total_earned: 0 };
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤', error);
                return { direct: [], indirect: [], total_earned: 0 };
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
         */
        claimReferralReward: async function() {
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
                const data = await window.WinixAPI.claimReferralReward();

                if (data.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    if (data.data && data.data.new_balance !== undefined) {
                        safeSetItem(STORAGE_KEYS.USER_TOKENS, data.data.new_balance.toString());
                        UIManager.updateBalanceDisplay();
                    }

                    return {
                        success: true,
                        amount: data.data ? data.data.claimed_amount : 0,
                        message: data.message || '–í–∏–Ω–∞–≥–æ—Ä–æ–¥—É —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ'
                    };
                }

                return {
                    success: false,
                    message: data.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É'
                };
            } catch (error) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤', error);
                return {
                    success: false,
                    message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'
                };
            }
        }
    };

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    const StakingManager = {
        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        hasActiveStaking: function() {
            if (window.WinixStakingSystem && typeof window.WinixStakingSystem.hasActiveStaking === 'function') {
                return window.WinixStakingSystem.hasActiveStaking();
            }

            const stakingData = safeGetItem(STORAGE_KEYS.STAKING_DATA, null, true);
            return stakingData && stakingData.hasActiveStaking === true;
        },

        /**
         * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥
         */
        calculateExpectedReward: function(amount, period) {
            if (window.WinixStakingSystem && typeof window.WinixStakingSystem.calculateExpectedReward === 'function') {
                return window.WinixStakingSystem.calculateExpectedReward(amount, period);
            }

            try {
                // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
                amount = parseFloat(amount);
                period = parseInt(period);

                if (isNaN(amount) || isNaN(period) || amount <= 0 || period <= 0) {
                    return 0;
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–µ—Ä—ñ–æ–¥—É
                const rewardPercent = STAKING_CONFIG.rewardRates[period] || 9; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 9%

                // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                const reward = (amount * rewardPercent) / 100;
                return parseFloat(reward.toFixed(2));
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', e);
                return 0;
            }
        }
    };

    /**
     * –ú–µ–Ω–µ–¥–∂–µ—Ä UI
     */
    const UIManager = {
        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
         */
        updateBalanceDisplay: function() {
            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
                const tokenBalance = BalanceManager.getTokens();
                const coinsBalance = BalanceManager.getCoins();

                log('info', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', {
                    tokens: tokenBalance,
                    coins: coinsBalance
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –ø–æ–∫–∞–∑—É—é—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤
                const tokenSelectors = [
                    '#user-tokens',
                    '#main-balance',
                    '.balance-amount',
                    '#current-balance',
                    '.balance-value'
                ];

                tokenSelectors.forEach(selector => {
                    const elements = document.querySelectorAll(selector);
                    elements.forEach(element => {
                        if (element) {
                            // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —ñ–∫–æ–Ω–∫–∏, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó
                            if (element.id === 'main-balance' && element.innerHTML && element.innerHTML.includes('main-balance-icon')) {
                                element.innerHTML = `${tokenBalance.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" width="100" height="100" alt="WINIX"></span>`;
                            } else {
                                element.textContent = tokenBalance.toFixed(2);
                            }
                        }
                    });
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
                const coinsSelectors = [
                    '#user-coins',
                    '.coins-amount',
                    '.coins-value'
                ];

                coinsSelectors.forEach(selector => {
                    const elements = document.querySelectorAll(selector);
                    elements.forEach(element => {
                        if (element) {
                            element.textContent = coinsBalance.toFixed(0);
                        }
                    });
                });

                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É', e);
                return false;
            }
        },

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
         */
        updateTransactionsList: function(elementId = 'transaction-list', limit = 3) {
            try {
                const listElement = document.getElementById(elementId);
                if (!listElement) return false;

                // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                const recentTransactions = TransactionManager.getRecentTransactions(limit);

                // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫
                listElement.innerHTML = '';

                if (recentTransactions.length === 0) {
                    listElement.innerHTML = '<div class="empty-message">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</div>';
                    return true;
                }

                // –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                recentTransactions.forEach(transaction => {
                    const transactionElement = document.createElement('div');
                    transactionElement.className = 'transaction-item';
                    transactionElement.setAttribute('data-tx-id', transaction.id);

                    const txText = TransactionManager.getTransactionText(transaction.type);
                    const amountClass = TransactionManager.getTransactionClass(transaction.type);
                    const amountPrefix = TransactionManager.getTransactionPrefix(transaction.type);

                    transactionElement.innerHTML = `
                        <div class="transaction-details">${transaction.description || txText}</div>
                        <div class="transaction-amount ${amountClass}">${amountPrefix}${transaction.amount.toFixed(2)} $WINIX</div>
                    `;

                    listElement.appendChild(transactionElement);
                });

                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π', e);
                return false;
            }
        },

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
         */
        updateStakingDisplay: function() {
            if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                return window.WinixStakingSystem.updateStakingDisplay();
            }

            log('warn', '–§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ WinixStakingSystem');
            return false;
        },

        /**
         * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
         */
        showNotification: function(message, type = 'success', callback = null) {
            try {
                if (window.showNotification) {
                    return window.showNotification(message, type, callback);
                }

                if (window.showToast) {
                    window.showToast(message);
                    if (callback) setTimeout(callback, 3000);
                    return true;
                }

                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –∑–≤–∏—á–∞–π–Ω–∏–π alert
                alert(message);
                if (callback) setTimeout(callback, 500);
                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', e);
                return false;
            }
        },

        /**
         * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
         */
        showConfirmation: function(message, onConfirm, onCancel) {
            try {
                // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é
                if (window.createConfirmDialog) {
                    return window.createConfirmDialog(message, onConfirm, onCancel);
                }

                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π confirm
                if (confirm(message)) {
                    if (typeof onConfirm === 'function') {
                        onConfirm();
                    }
                } else {
                    if (typeof onCancel === 'function') {
                        onCancel();
                    }
                }

                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', e);

                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –∑–≤–∏—á–∞–π–Ω–∏–π confirm
                if (confirm(message)) {
                    if (typeof onConfirm === 'function') {
                        onConfirm();
                    }
                } else {
                    if (typeof onCancel === 'function') {
                        onCancel();
                    }
                }

                return false;
            }
        }
    };

    // --------------- –ü–£–ë–õ–Ü–ß–ù–ò–ô API ---------------

    /**
     * –ü—É–±–ª—ñ—á–Ω–∏–π API –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω –ø—Ä–æ–≥—Ä–∞–º–∏
     */
    const WinixCore = {
        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
         */
        init: async function(config = {}) {
            try {
                log('info', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WinixCore');

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
                Object.assign(_config, config);

                // –°–ø—Ä–æ–±–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
                try {
                    await syncUserData();
                    log('info', '–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø—ñ—à–Ω–∞');
                } catch (syncError) {
                    log('warn', '–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', syncError);
                    log('info', '–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏');
                }

                // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                if (_config.autoSync) {
                    this.startAutoSync();
                }

                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ç—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
                this._applyCompatibilityPatches();

                log('info', 'WinixCore —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                return true;
            } catch (e) {
                log('error', '–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WinixCore', e);
                return false;
            }
        },

        /**
         * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
         */
        startAutoSync: function() {
            // –û–Ω–æ–≤–ª—é—î–º–æ UI –∫–æ–∂–Ω—ñ N –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
            setInterval(() => {
                try {
                    UIManager.updateBalanceDisplay();

                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                    if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                        window.WinixStakingSystem.updateStakingDisplay();
                    }
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI', e);
                }
            }, _config.syncInterval);

            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            const serverSyncInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                try {
                    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                    syncUserData().catch(error => {
                        log('error', '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', error);
                    });
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', e);
                }
            }, serverSyncInterval);

            log('info', `–ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é UI –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${_config.syncInterval}–º—Å`);
            log('info', `–ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30—Å`);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
            window.addEventListener('focus', () => {
                try {
                    syncUserData().catch(error => {
                        log('error', '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É', error);
                    });
                } catch (e) {
                    log('error', '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É', e);
                }
            });
        },

        /**
         * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó
         */
        on: function(eventName, callback) {
            if (!_eventListeners[eventName]) {
                _eventListeners[eventName] = [];
            }

            _eventListeners[eventName].push(callback);
            return this;
        },

        /**
         * –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó
         */
        off: function(eventName, callback) {
            if (!_eventListeners[eventName]) return this;

            _eventListeners[eventName] = _eventListeners[eventName].filter(
                cb => cb !== callback
            );
            return this;
        },

        /**
         * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—ñ–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
         */
        _applyCompatibilityPatches: function() {
            log('info', '–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—ñ–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏');

            // –ü–∞—Ç—á –¥–ª—è —Å—Ç–∞—Ä–æ—ó RewardSystem
            if (!window.rewardSystem) {
                window.rewardSystem = {
                    getUserTokens: BalanceManager.getTokens,
                    getUserCoins: BalanceManager.getCoins,
                    updateBalanceDisplay: UIManager.updateBalanceDisplay
                };
            }

            // –ü–∞—Ç—á –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
            window.getUserTokens = BalanceManager.getTokens;
            window.getUserCoins = BalanceManager.getCoins;
            window.getBalance = BalanceManager.getTokens;

            // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑ –±–µ–∑–ø–µ—á–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –±–∞–ª–∞–Ω—Å—É
            window.navigateTo = function(page) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
                sessionStorage.setItem('lastBalance', BalanceManager.getTokens().toString());
                sessionStorage.setItem('lastCoins', BalanceManager.getCoins().toString());
                sessionStorage.setItem('navigationTime', Date.now().toString());

                window.location.href = page;
            };

            // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
            window.showToast = UIManager.showNotification;
            window.updateBalanceDisplay = UIManager.updateBalanceDisplay;

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
            window.updateStakingDisplay = window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function'
                ? window.WinixStakingSystem.updateStakingDisplay
                : function() { console.log("–§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"); };

            window.updateTransactionsList = UIManager.updateTransactionsList;

            log('info', '–ü–∞—Ç—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ');
        },

        // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        Balance: BalanceManager,
        Transactions: TransactionManager,
        Referrals: ReferralManager,
        Staking: StakingManager,
        UI: UIManager,

        // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
        TRANSACTION_TYPES,
        MESSAGE_TYPES,
        STORAGE_KEYS,
        STAKING_CONFIG
    };

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
    window.WinixCore = WinixCore;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    document.addEventListener('DOMContentLoaded', function() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        if (!window.WinixCoreInitialized) {
            WinixCore.init();
            window.WinixCoreInitialized = true;

            log('info', 'WinixCore –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏');

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            setTimeout(function() {
                UIManager.updateBalanceDisplay();

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                    window.WinixStakingSystem.updateStakingDisplay();
                }

                UIManager.updateTransactionsList();

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                document.dispatchEvent(new CustomEvent('winix-core-initialized'));
            }, 300);
        }
    });

    // –Ø–∫—â–æ DOM –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞—Ä–∞–∑
    if (document.readyState === 'interactive' || document.readyState === 'complete') {
        if (!window.WinixCoreInitialized) {
            WinixCore.init();
            window.WinixCoreInitialized = true;

            log('info', 'WinixCore –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (DOM –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π)');

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            setTimeout(function() {
                UIManager.updateBalanceDisplay();

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
                if (window.WinixStakingSystem && typeof window.WinixStakingSystem.updateStakingDisplay === 'function') {
                    window.WinixStakingSystem.updateStakingDisplay();
                }

                UIManager.updateTransactionsList();

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                document.dispatchEvent(new CustomEvent('winix-core-initialized'));
            }, 300);
        }
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    return WinixCore;
})();