
// –§–∞–π–ª: frontend/js/fix-module-loader.js

/**
 * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ES –º–æ–¥—É–ª—ñ–≤
 * –í–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É –∑ MIME —Ç–∏–ø–∞–º–∏ —Ç–∞ —à–ª—è—Ö–∞–º–∏ –¥–æ –º–æ–¥—É–ª—ñ–≤
 */
(function() {
  'use strict';

  console.log('üõ†Ô∏è –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤');

  // –ú–∞—Å–∏–≤ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —à–ª—è—Ö—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏
  const criticalPaths = [
    '/js/tasks/config/index.js',
    '/js/tasks/utils/index.js',
    '/js/tasks/api/index.js',
    '/js/tasks/api/models/daily-bonus.js',
    '/js/tasks/models/types/daily-bonus-model.js'
  ];

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
  function checkPathsExistence() {
    const promises = criticalPaths.map(path =>
      fetch(path, { method: 'HEAD' })
        .then(response => ({ path, exists: response.ok, status: response.status }))
        .catch(() => ({ path, exists: false, status: 0 }))
    );

    return Promise.all(promises);
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤
  function setupModuleHandler() {
    // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–º–ø–æ—Ä—Ç—É
    const originalImport = window.import;

    // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
    window.fixedImport = function(path) {
      console.log(`üîÑ –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É: ${path}`);

      // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —à–ª—è—Ö, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      let fixedPath = path;

      // –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤–∏–π —à–ª—è—Ö, —è–∫—â–æ —à–ª—è—Ö –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —Ç–∞ –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ /
      if (!path.startsWith('/') && !path.startsWith('http') && !path.startsWith('./')) {
        fixedPath = `/js/${path}`;
      }

      // –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .js, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
      if (!fixedPath.endsWith('.js')) {
        fixedPath += '.js';
      }

      console.log(`üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —à–ª—è—Ö —ñ–º–ø–æ—Ä—Ç—É: ${fixedPath}`);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fetch –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É —è–∫ —Ç–µ–∫—Å—Ç
      return fetch(fixedPath)
        .then(response => {
          if (!response.ok) {
            throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥—É–ª—å: ${fixedPath}, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
          }
          return response.text();
        })
        .then(code => {
          // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
          const fixedCode = code.replace(/import\s+.*?from\s+['"]([^'"]+)['"]/g, (match, importPath) => {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∑–æ–≤–∏–π —à–ª—è—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            const basePath = fixedPath.substring(0, fixedPath.lastIndexOf('/'));

            // –Ø–∫—â–æ —ñ–º–ø–æ—Ä—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ './' –∞–±–æ '../', –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
            if (importPath.startsWith('./') || importPath.startsWith('../')) {
              let absolutePath = new URL(importPath, `http://example.com${basePath}/`).pathname;
              return match.replace(importPath, absolutePath);
            }

            return match;
          });

          // –°—Ç–≤–æ—Ä—é—î–º–æ Blob –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º –∫–æ–¥–æ–º
          const blob = new Blob([fixedCode], { type: 'application/javascript' });
          const blobUrl = URL.createObjectURL(blob);

          // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
          return import(blobUrl).catch(err => {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—è: ${fixedPath}`, err);
            throw err;
          });
        });
    };

    console.log('‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤ –∑–∞–≤–¥–∞–Ω—å
    window.importTaskModule = function(modulePath) {
      const fullPath = modulePath.startsWith('tasks/')
        ? `/js/${modulePath}`
        : `/js/tasks/${modulePath}`;

      return window.fixedImport(fullPath);
    };
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä –º–æ–¥—É–ª—ñ–≤
  window.ModuleRegistry = {
    modules: {},
    register: function(name, module) {
      this.modules[name] = module;
      console.log(`üì¶ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª—å: ${name}`);
      return module;
    },
    get: function(name) {
      return this.modules[name];
    },
    list: function() {
      return Object.keys(this.modules);
    }
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
  checkPathsExistence()
    .then(results => {
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—ñ–≤:');
      results.forEach(result => {
        console.log(`${result.path}: ${result.exists ? '‚úÖ' : '‚ùå'} (—Å—Ç–∞—Ç—É—Å: ${result.status})`);
      });

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —ñ–º–ø–æ—Ä—Ç—É
      setupModuleHandler();

      // –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏
      const event = new CustomEvent('module-system-ready', { detail: results });
      document.dispatchEvent(event);
    })
    .catch(error => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ñ–∞–π–ª—ñ–≤:', error);
    });

  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  window.reportModuleError = function(modulePath, errorDetails) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è: ${modulePath}`, errorDetails);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    fetch('/api/debug', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        type: 'module_error',
        module: modulePath,
        error: typeof errorDetails === 'object' ?
          (errorDetails.message || JSON.stringify(errorDetails)) :
          String(errorDetails),
        timestamp: new Date().toISOString()
      })
    }).catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—É:', err));
  };

  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤ –≥–æ—Ç–æ–≤–∞');
})();