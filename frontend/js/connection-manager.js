/**
 * connection-manager.js - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º
 * –ó–∞–±–µ–∑–ø–µ—á—É—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è, –æ–±—Ä–æ–±–∫—É —Å—Ç–∞–Ω—É –æ—Ñ–ª–∞–π–Ω
 * @version 1.0.0
 */

(function() {
  'use strict';

  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
  const _state = {
    // –°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
    isOnline: typeof navigator.onLine !== 'undefined' ? navigator.onLine : true,
    networkType: 'unknown',
    effectiveType: 'unknown',

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    lastOnlineTime: Date.now(),
    lastOfflineTime: 0,
    connectionDrops: 0,
    pingStats: {
      attempts: 0,
      success: 0,
      failed: 0,
      totalLatency: 0,
      average: 0
    },

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    pingInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
    pingTimeout: 5000,   // 5 —Å–µ–∫—É–Ω–¥
    pingEndpoint: '/api/ping',
    pingTimer: null,

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    eventHandlers: {
      'connection-change': [],
      'connection-restored': [],
      'connection-lost': []
    }
  };

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
   */
  function log(message, level = 'log') {
    const timestamp = new Date().toISOString().substring(11, 19);
    const prefix = `[${timestamp}] [ConnectionManager]`;

    switch (level) {
      case 'error':
        console.error(`‚ùå ${prefix} ${message}`);
        break;
      case 'warn':
        console.warn(`‚ö†Ô∏è ${prefix} ${message}`);
        break;
      case 'success':
        console.log(`‚úÖ ${prefix} ${message}`);
        break;
      default:
        console.log(`üîÑ ${prefix} ${message}`);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
   * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   */
  async function checkServerConnection() {
    try {
      // –Ø–∫—â–æ navigator.onLine –≥–æ–≤–æ—Ä–∏—Ç—å, —â–æ –º–∏ –æ—Ñ–ª–∞–π–Ω, —Ç–æ —Ç–æ—á–Ω–æ –æ—Ñ–ª–∞–π–Ω
      if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
        updateConnectionState(false);
        return false;
      }

      // –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
      let pingUrl;

      // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ URL –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –º–æ–¥—É–ª—ñ–≤
      if (window.WinixAPI && window.WinixAPI.config && window.WinixAPI.config.baseUrl) {
        pingUrl = `${window.WinixAPI.config.baseUrl}/api/ping`;
      } else if (window.WinixCore && window.WinixCore.config && window.WinixCore.config.apiBaseUrl) {
        pingUrl = `${window.WinixCore.config.apiBaseUrl}/api/ping`;
      } else {
        pingUrl = `${window.location.origin}${_state.pingEndpoint}`;
      }

      // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è
      pingUrl = `${pingUrl}?t=${Date.now()}`;

      // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–± –ø—ñ–Ω–≥—É
      _state.pingStats.attempts++;

      // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), _state.pingTimeout);

      const startTime = Date.now();

      try {
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
        const response = await fetch(pingUrl, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          signal: controller.signal
        });

        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
        clearTimeout(timeoutId);

        // –†–∞—Ö—É—î–º–æ –ª–∞—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å
        const latency = Date.now() - startTime;

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ–Ω–≥—É
        _state.pingStats.success++;
        _state.pingStats.totalLatency += latency;
        _state.pingStats.average = _state.pingStats.totalLatency / _state.pingStats.success;

        log(`–ü—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π, –ª–∞—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: ${latency}ms, —Å–µ—Ä–µ–¥–Ω—è: ${Math.round(_state.pingStats.average)}ms`, 'success');

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É—Å–ø—ñ—à–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
        if (response.ok) {
          updateConnectionState(true);
          return true;
        }

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å 4xx, —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –∑ –ø–æ–º–∏–ª–∫–æ—é
        if (response.status >= 400 && response.status < 500) {
          log(`–ü—ñ–Ω–≥ –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å ${response.status}, –∞–ª–µ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π`, 'warn');
          updateConnectionState(true);
          return true;
        }

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å 5xx, —Å–µ—Ä–≤–µ—Ä –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏
        if (response.status >= 500) {
          log(`–ü—ñ–Ω–≥ –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å ${response.status}, —Å–µ—Ä–≤–µ—Ä –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏`, 'error');
          _state.pingStats.failed++;
          updateConnectionState(false);
          return false;
        }
      } catch (error) {
        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç, —è–∫—â–æ –≤—ñ–Ω —â–µ –∞–∫—Ç–∏–≤–Ω–∏–π
        clearTimeout(timeoutId);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ–Ω–≥—É
        _state.pingStats.failed++;

        log(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–Ω–≥—É: ${error.message}`, 'error');

        // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ —Ç–∞–π–º–∞—É—Ç—É —á–∏ –º–µ—Ä–µ–∂—ñ, –≤–≤–∞–∂–∞—î–º–æ, —â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ
        updateConnectionState(false);
        return false;
      }

      // –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏, –∑–Ω–∞—á–∏—Ç—å —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –∞–ª–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º
      return _state.isOnline;
    } catch (error) {
      log(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${error.message}`, 'error');
      return false;
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ–¥—ñ—ó
   * @param {boolean} isOnline - –ù–æ–≤–∏–π —Å—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function updateConnectionState(isOnline) {
    const wasOnline = _state.isOnline;

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    _state.isOnline = isOnline;

    // –Ø–∫—â–æ —Å—Ç–∞–Ω –∑–º—ñ–Ω–∏–≤—Å—è, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é
    if (wasOnline !== isOnline) {
      if (isOnline) {
        // –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ
        _state.lastOnlineTime = Date.now();
        log(`–ó'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è ${Math.round((_state.lastOnlineTime - _state.lastOfflineTime) / 1000)}—Å –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ`, 'success');

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é
        fireEvent('connection-restored', {
          downtime: _state.lastOnlineTime - _state.lastOfflineTime
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        updateUI(true);

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        synchronizeData();
      } else {
        // –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ
        _state.connectionDrops++;
        _state.lastOfflineTime = Date.now();
        log(`–ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ (–≤–∏–ø–∞–¥–æ–∫ #${_state.connectionDrops})`, 'error');

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é
        fireEvent('connection-lost', {
          connectionDrops: _state.connectionDrops
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        updateUI(false);
      }

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –ø–æ–¥—ñ—é –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –∑'—î–¥–Ω–∞–Ω–Ω—è
      fireEvent('connection-change', {
        isOnline,
        connectionDrops: _state.connectionDrops,
        lastOnlineTime: _state.lastOnlineTime,
        lastOfflineTime: _state.lastOfflineTime,
        pingStats: { ..._state.pingStats }
      });
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î UI –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞–Ω—É –∑'—î–¥–Ω–∞–Ω–Ω—è
   * @param {boolean} isOnline - –°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function updateUI(isOnline) {
    try {
      // –Ø–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è showToast, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
      if (typeof window.showToast === 'function') {
        if (isOnline) {
          window.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        } else {
          window.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Ç—Ä–∞—á–µ–Ω–æ. –ü—Ä–∞—Ü—é—î–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ.', 'warning');
        }
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω —î
      const connectionIndicator = document.getElementById('connection-status');
      if (connectionIndicator) {
        connectionIndicator.className = isOnline ? 'connection-online' : 'connection-offline';
        connectionIndicator.title = isOnline ? '–ó\'—î–¥–Ω–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ' : '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
      } else {
        // –Ø–∫—â–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
        createConnectionIndicator(isOnline);
      }
    } catch (error) {
      log(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI: ${error.message}`, 'error');
    }
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—É –∑'—î–¥–Ω–∞–Ω–Ω—è
   * @param {boolean} isOnline - –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function createConnectionIndicator(isOnline) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (document.getElementById('connection-status')) {
      return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const indicator = document.createElement('div');
    indicator.id = 'connection-status';
    indicator.className = isOnline ? 'connection-online' : 'connection-offline';
    indicator.title = isOnline ? '–ó\'—î–¥–Ω–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ' : '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
    indicator.innerHTML = `<span class="connection-icon"></span>`;

    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
    const style = document.createElement('style');
    style.textContent = `
      #connection-status {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 9999;
        border-radius: 50%;
        width: 12px;
        height: 12px;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .connection-online {
        background-color: #4CAF50;
      }
      .connection-offline {
        background-color: #F44336;
        animation: pulse 1.5s infinite;
      }
      @keyframes pulse {
        0% { opacity: 1; transform: scale(1); }
        50% { opacity: 0.6; transform: scale(1.1); }
        100% { opacity: 1; transform: scale(1); }
      }
    `;

    // –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∞ —Å—Ç–∏–ª—ñ –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
    document.head.appendChild(style);
    document.body.appendChild(indicator);

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
    indicator.addEventListener('click', () => {
      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
      let status = isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω';
      let details = '';

      if (isOnline) {
        details += `–°–µ—Ä–µ–¥–Ω—è –ª–∞—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: ${Math.round(_state.pingStats.average)}ms\n`;
        details += `–£—Å–ø—ñ—à–Ω–∏—Ö –ø—ñ–Ω–≥—ñ–≤: ${_state.pingStats.success} / ${_state.pingStats.attempts}\n`;
      } else {
        const downtime = Math.round((Date.now() - _state.lastOfflineTime) / 1000);
        details += `–ß–∞—Å –±–µ–∑ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${downtime}—Å\n`;
        details += `–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—Ä–∏–≤—ñ–≤: ${_state.connectionDrops}\n`;
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–∫–Ω–æ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
      alert(`–°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è: ${status}\n${details}`);

      // –Ü–Ω—ñ—Ü—ñ—é—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è
      checkServerConnection();
    });
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function synchronizeData() {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤
    if (window.WinixCore && typeof window.WinixCore.syncUserData === 'function') {
      log("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ WinixCore...");

      window.WinixCore.syncUserData(true)
        .then(() => {
          log("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ", 'success');
        })
        .catch(error => {
          log(`–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}`, 'error');
        });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º–æ–¥—É–ª—è API
    if (window.WinixAPI && typeof window.WinixAPI.getUserData === 'function') {
      log("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ WinixAPI...");

      window.WinixAPI.getUserData(true)
        .then(response => {
          if (response && response.status === 'success') {
            log("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ", 'success');
          } else {
            log("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", 'warn');
          }
        })
        .catch(error => {
          log(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}`, 'error');
        });
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function startConnectionMonitoring() {
    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if (_state.pingTimer) {
      clearInterval(_state.pingTimer);
      _state.pingTimer = null;
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
    _state.pingTimer = setInterval(() => {
      checkServerConnection();
    }, _state.pingInterval);

    log(`–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${_state.pingInterval / 1000}—Å)`);
  }

  /**
   * –ó—É–ø–∏–Ω—è—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function stopConnectionMonitoring() {
    if (_state.pingTimer) {
      clearInterval(_state.pingTimer);
      _state.pingTimer = null;
      log("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ");
    }
  }

  /**
   * –î–æ–¥–∞—î –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
   * @param {string} eventName - –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó
   * @param {Function} handler - –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
   */
  function addEventListener(eventName, handler) {
    if (!_state.eventHandlers[eventName]) {
      _state.eventHandlers[eventName] = [];
    }

    if (typeof handler === 'function' && !_state.eventHandlers[eventName].includes(handler)) {
      _state.eventHandlers[eventName].push(handler);
      return true;
    }

    return false;
  }

  /**
   * –í–∏–¥–∞–ª—è—î –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
   * @param {string} eventName - –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó
   * @param {Function} handler - –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
   */
  function removeEventListener(eventName, handler) {
    if (_state.eventHandlers[eventName] && typeof handler === 'function') {
      const index = _state.eventHandlers[eventName].indexOf(handler);

      if (index !== -1) {
        _state.eventHandlers[eventName].splice(index, 1);
        return true;
      }
    }

    return false;
  }

  /**
   * –í–∏–∫–ª–∏–∫–∞—î –ø–æ–¥—ñ—é
   * @param {string} eventName - –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó
   * @param {object} data - –î–∞–Ω—ñ –ø–æ–¥—ñ—ó
   */
  function fireEvent(eventName, data) {
    if (_state.eventHandlers[eventName]) {
      for (const handler of _state.eventHandlers[eventName]) {
        try {
          handler(data);
        } catch (error) {
          log(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–¥—ñ—ó ${eventName}: ${error.message}`, 'error');
        }
      }
    }

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ç–∞–∫–æ–∂ –ø–æ–¥—ñ—é DOM
    try {
      document.dispatchEvent(new CustomEvent(`connection-${eventName}`, {
        detail: data
      }));
    } catch (error) {
      log(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó DOM: ${error.message}`, 'error');
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–µ—Ä–µ–∂–µ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function getConnectionInfo() {
    try {
      if ('connection' in navigator) {
        const connection = navigator.connection;

        if (connection) {
          _state.networkType = connection.type || 'unknown';
          _state.effectiveType = connection.effectiveType || 'unknown';

          log(`–¢–∏–ø –º–µ—Ä–µ–∂—ñ: ${_state.networkType}, –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ç–∏–ø: ${_state.effectiveType}`);

          // –°–ª—É—Ö–∞—î–º–æ –∑–º—ñ–Ω–∏ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
          connection.addEventListener('change', () => {
            _state.networkType = connection.type || 'unknown';
            _state.effectiveType = connection.effectiveType || 'unknown';

            log(`–ó–º—ñ–Ω–∞ —Ç–∏–ø—É –º–µ—Ä–µ–∂—ñ: ${_state.networkType}, –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ç–∏–ø: ${_state.effectiveType}`);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∏–ø—É –º–µ—Ä–µ–∂—ñ
            checkServerConnection();
          });
        }
      }
    } catch (error) {
      log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${error.message}`, 'error');
    }
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
   */
  function monitorPageLoadingSpeed() {
    try {
      if (window.performance && window.performance.timing) {
        window.addEventListener('load', () => {
          setTimeout(() => {
            const timing = window.performance.timing;
            const pageLoadTime = timing.loadEventEnd - timing.navigationStart;
            const domLoadTime = timing.domComplete - timing.domLoading;

            log(`–ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${pageLoadTime}ms, DOM: ${domLoadTime}ms`);

            // –Ø–∫—â–æ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π, –∑–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø—ñ–Ω–≥—É
            if (pageLoadTime > 5000) {
              _state.pingInterval = 60000; // 1 —Ö–≤–∏–ª–∏–Ω–∞

              if (_state.pingTimer) {
                clearInterval(_state.pingTimer);
                _state.pingTimer = setInterval(() => {
                  checkServerConnection();
                }, _state.pingInterval);
              }

              log(`–ó–±—ñ–ª—å—à–µ–Ω–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø—ñ–Ω–≥—É –¥–æ ${_state.pingInterval / 1000}—Å —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è`);
            }
          }, 0);
        });
      }
    } catch (error) {
      log(`–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error.message}`, 'error');
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –º–µ–Ω–µ–¥–∂–µ—Ä –∑'—î–¥–Ω–∞–Ω–Ω—è
   */
  function init() {
    log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è");

    // –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    window.addEventListener('online', () => {
      log("–ë—Ä–∞—É–∑–µ—Ä –ø–æ–≤—ñ–¥–æ–º–∏–≤ –ø—Ä–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è", 'success');
      checkServerConnection();
    });

    window.addEventListener('offline', () => {
      log("–ë—Ä–∞—É–∑–µ—Ä –ø–æ–≤—ñ–¥–æ–º–∏–≤ –ø—Ä–æ –≤—Ç—Ä–∞—Ç—É –∑'—î–¥–Ω–∞–Ω–Ω—è", 'error');
      updateConnectionState(false);
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    getConnectionInfo();

    // –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    monitorPageLoadingSpeed();

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑'—î–¥–Ω–∞–Ω–Ω—è
    startConnectionMonitoring();

    // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è
    checkServerConnection();

    log("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ", 'success');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ DOM –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // –ü—É–±–ª—ñ—á–Ω–µ API
  window.ConnectionManager = {
    // –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è–º
    checkConnection: checkServerConnection,
    isOnline: () => _state.isOnline,
    getConnectionStats: () => ({
      isOnline: _state.isOnline,
      networkType: _state.networkType,
      effectiveType: _state.effectiveType,
      lastOnlineTime: _state.lastOnlineTime,
      lastOfflineTime: _state.lastOfflineTime,
      connectionDrops: _state.connectionDrops,
      pingStats: { ..._state.pingStats }
    }),

    // –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º
    startMonitoring: startConnectionMonitoring,
    stopMonitoring: stopConnectionMonitoring,
    setPingInterval: (interval) => {
      if (interval >= 5000) {
        _state.pingInterval = interval;

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑ –Ω–æ–≤–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if (_state.pingTimer) {
          stopConnectionMonitoring();
          startConnectionMonitoring();
        }

        log(`–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø—ñ–Ω–≥—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${interval / 1000}—Å`);
        return true;
      }
      return false;
    },

    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–¥—ñ—è–º–∏
    on: addEventListener,
    off: removeEventListener
  };
})();