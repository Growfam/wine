/**
 * api-wrapper.js - –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API –º–æ–¥—É–ª—è
 * –ó–∞–±–µ–∑–ø–µ—á—É—î –Ω–∞–¥—ñ–π–Ω—É —Ä–æ–±–æ—Ç—É –∑ API –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
 * @version 1.0.0
 */

(function() {
  'use strict';

  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
  let _isInitialized = false;
  let _isInitializing = false;
  let _apiInitPromise = null;
  let _initRetryCount = 0;
  let _maxRetryAttempts = 5;
  let _retryDelay = 1500;
  let _originalApi = null;
  let _offlineMode = false;
  let _fallbackData = {};

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
   */
  function log(message, level = 'log') {
    const timestamp = new Date().toISOString().substring(11, 19);
    const prefix = `[${timestamp}] [APIWrapper]`;

    switch (level) {
      case 'error':
        console.error(`‚ùå ${prefix} ${message}`);
        break;
      case 'warn':
        console.warn(`‚ö†Ô∏è ${prefix} ${message}`);
        break;
      case 'success':
        console.log(`‚úÖ ${prefix} ${message}`);
        break;
      default:
        console.log(`üîÑ ${prefix} ${message}`);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API –º–æ–¥—É–ª—è
   */
  function checkApiModule() {
    return (window.WinixAPI !== undefined &&
      typeof window.WinixAPI.apiRequest === 'function' &&
      typeof window.WinixAPI.getUserId === 'function');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ API
   */
  function saveOriginalApi() {
    if (checkApiModule() && !_originalApi) {
      _originalApi = {
        api: window.WinixAPI,
        apiRequest: window.apiRequest,
        getUserId: window.getUserId
      };
      return true;
    }
    return false;
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–∏—Ö –≤–µ—Ä—Å—ñ–π API —Ñ—É–Ω–∫—Ü—ñ–π
   * —è–∫—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ
   */
  function createSafeApiFunctions() {
    // –ó–∞–º—ñ—â–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏
    window.apiRequest = safeApiRequest;
    window.getUserId = safeGetUserId;

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ—ó –æ–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è WinixAPI
    window.WinixAPI = createSafeApiWrapper();

    log("–°—Ç–≤–æ—Ä–µ–Ω–æ –±–µ–∑–ø–µ—á–Ω—ñ –≤–µ—Ä—Å—ñ—ó API —Ñ—É–Ω–∫—Ü—ñ–π");
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è apiRequest
   */
  async function safeApiRequest(endpoint, method = 'GET', data = null, options = {}) {
    if (_isInitialized && _originalApi && _originalApi.api) {
      try {
        return await _originalApi.api.apiRequest(endpoint, method, data, options);
      } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ apiRequest: ${error.message}`, 'error');

        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é, —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API
        if (error.message &&
            (error.message.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞') || error.message.includes('auth'))) {
          await initApi(true);

          // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
          return _originalApi.api.apiRequest(endpoint, method, data, options);
        }

        throw error;
      }
    } else if (_offlineMode) {
      log(`API –∑–∞–ø–∏—Ç –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ: ${endpoint}`, 'warn');

      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É –∞–±–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      return generateFallbackResponse(endpoint, method, data);
    } else {
      try {
        log(`API —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ, —Å–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...`);

        // –°–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API
        await initApi();

        if (_isInitialized && _originalApi && _originalApi.api) {
          return await _originalApi.api.apiRequest(endpoint, method, data, options);
        } else {
          throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API");
        }
      } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É ${endpoint}: ${error.message}`, 'error');

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å-–∑–∞–≥–ª—É—à–∫—É
        return generateFallbackResponse(endpoint, method, data);
      }
    }
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è getUserId
   */
  function safeGetUserId() {
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ AppInitializer
    if (window.AppInitializer && typeof window.AppInitializer.getUserId === 'function') {
      try {
        // getUserId –≤ AppInitializer –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º—ñ—Å, –∞–ª–µ –º–∏ —Ç—É—Ç –æ—á—ñ–∫—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        // —Ç–æ–º—É –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∞ –ø—Ä–æ–º—ñ—Å –∑–∞–ø—É—Å—Ç–∏–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        window.AppInitializer.getUserId().then(userId => {
          if (userId) {
            try {
              localStorage.setItem('telegram_user_id', userId);
            } catch (e) {}
          }
        });
      } catch (e) {}
    }

    // –Ø–∫—â–æ API —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    if (_isInitialized && _originalApi && _originalApi.getUserId) {
      try {
        return _originalApi.getUserId();
      } catch (error) {
        log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ getUserId: ${error.message}`, 'error');
      }
    }

    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ API, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–ª–∞—Å–Ω—É –ª–æ–≥—ñ–∫—É
    try {
      // 1. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ Telegram WebApp
      if (window.Telegram && window.Telegram.WebApp &&
          window.Telegram.WebApp.initDataUnsafe &&
          window.Telegram.WebApp.initDataUnsafe.user &&
          window.Telegram.WebApp.initDataUnsafe.user.id) {

        const id = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
        log(`–û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram WebApp: ${id}`, 'success');
        return id;
      }

      // 2. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ localStorage
      const storedId = localStorage.getItem('telegram_user_id') || localStorage.getItem('user_id');
      if (storedId && storedId !== 'undefined' && storedId !== 'null') {
        log(`–û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage: ${storedId}`, 'success');
        return storedId;
      }

      // 3. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ DOM
      const headerUserIdElement = document.getElementById('header-user-id');
      if (headerUserIdElement && headerUserIdElement.textContent) {
        const id = headerUserIdElement.textContent.trim();
        if (id && id !== 'undefined' && id !== 'null') {
          log(`–û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ DOM (header): ${id}`, 'success');
          return id;
        }
      }

      const userIdElement = document.getElementById('user-id');
      if (userIdElement && userIdElement.textContent) {
        const id = userIdElement.textContent.trim();
        if (id && id !== 'undefined' && id !== 'null') {
          log(`–û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ DOM (hidden): ${id}`, 'success');
          return id;
        }
      }

      // 4. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ URL
      const urlParams = new URLSearchParams(window.location.search);
      const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
      if (urlId && urlId !== 'undefined' && urlId !== 'null') {
        log(`–û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ URL: ${urlId}`, 'success');
        return urlId;
      }

      // 5. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID
      const isSettingsPage = window.location.pathname.includes('general.html');
      if (isSettingsPage) {
        const testId = "7066583465";
        log(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: ${testId}`, 'warn');
        return testId;
      }

      log("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", 'error');
      return null;
    } catch (error) {
      log(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}`, 'error');
      return null;
    }
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è WinixAPI, —è–∫–∞ –≥–∞—Ä–∞–Ω—Ç—É—î –±–µ–∑–ø–µ—á–Ω—É —Ä–æ–±–æ—Ç—É
   */
  function createSafeApiWrapper() {
    const apiWrapper = {};

    // –ë–∞–∑–æ–≤—ñ —à–∞–±–ª–æ–Ω–Ω—ñ –º–µ—Ç–æ–¥–∏
    const defaultMethods = {
      // –ú–µ—Ç–æ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      getUserData: async function(forceRefresh = false) {
        if (_isInitialized && _originalApi && _originalApi.api) {
          try {
            return await _originalApi.api.getUserData(forceRefresh);
          } catch (error) {
            log(`–ü–æ–º–∏–ª–∫–∞ getUserData: ${error.message}`, 'error');
          }
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –∑–∞–≥–ª—É—à–∫—É
        return {
          status: 'success',
          data: getFallbackUserData(),
          source: 'fallback',
          fallback: true
        };
      },
      getBalance: async function() {
        if (_isInitialized && _originalApi && _originalApi.api) {
          try {
            return await _originalApi.api.getBalance();
          } catch (error) {
            log(`–ü–æ–º–∏–ª–∫–∞ getBalance: ${error.message}`, 'error');
          }
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –∑–∞–≥–ª—É—à–∫—É
        return {
          status: 'success',
          data: {
            balance: parseFloat(localStorage.getItem('userTokens') || '0'),
            coins: parseInt(localStorage.getItem('userCoins') || '0')
          },
          source: 'fallback',
          fallback: true
        };
      },

      // –£—Ç–∏–ª—ñ—Ç–∏
      clearCache: function() {
        if (_isInitialized && _originalApi && _originalApi.api &&
            typeof _originalApi.api.clearCache === 'function') {
          return _originalApi.api.clearCache();
        }
        return false;
      },
      forceCleanupRequests: function() {
        if (_isInitialized && _originalApi && _originalApi.api &&
            typeof _originalApi.api.forceCleanupRequests === 'function') {
          return _originalApi.api.forceCleanupRequests();
        }
        return false;
      },
      reconnect: async function() {
        if (_isInitialized && _originalApi && _originalApi.api &&
            typeof _originalApi.api.reconnect === 'function') {
          return await _originalApi.api.reconnect();
        }

        // –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API
        return await initApi(true);
      },

      // –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏
      paths: API_PATHS,
      config: {
        baseUrl: getBaseUrl(),
        version: '1.2.5-safe',
        environment: 'safe-mode'
      }
    };

    // –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–æ –æ–±–≥–æ—Ä—Ç–∫–∏
    for (const methodName in defaultMethods) {
      apiWrapper[methodName] = defaultMethods[methodName];
    }

    // –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π API —ñ—Å–Ω—É—î, –∫–æ–ø—ñ—é—î–º–æ –≤—Å—ñ –º–µ—Ç–æ–¥–∏
    if (_originalApi && _originalApi.api) {
      for (const methodName in _originalApi.api) {
        if (!apiWrapper[methodName]) {
          // –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω—É –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è –º–µ—Ç–æ–¥—É
          apiWrapper[methodName] = async function(...args) {
            if (_isInitialized && _originalApi && _originalApi.api &&
                typeof _originalApi.api[methodName] === 'function') {
              try {
                return await _originalApi.api[methodName](...args);
              } catch (error) {
                log(`–ü–æ–º–∏–ª–∫–∞ –º–µ—Ç–æ–¥—É ${methodName}: ${error.message}`, 'error');

                // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é, —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API
                if (error.message &&
                    (error.message.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞') || error.message.includes('auth'))) {
                  await initApi(true);

                  // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                  if (_isInitialized && _originalApi && _originalApi.api &&
                      typeof _originalApi.api[methodName] === 'function') {
                    return await _originalApi.api[methodName](...args);
                  }
                }

                throw error;
              }
            } else {
              // –Ø–∫—â–æ –º–µ—Ç–æ–¥ –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ
              log(`–ú–µ—Ç–æ–¥ ${methodName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ)`, 'warn');
              throw new Error(`API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∞–±–æ –º–µ—Ç–æ–¥ ${methodName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π`);
            }
          };
        }
      }
    }

    return apiWrapper;
  }

  /**
   * –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤ (–∫–æ–ø—ñ—è –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ API)
   */
  const API_PATHS = {
    // –ó–∞–≤–¥–∞–Ω–Ω—è
    TASKS: {
      ALL: 'quests/tasks',
      BY_TYPE: (type) => `quests/tasks/${type}`,
      SOCIAL: 'quests/tasks/social',
      LIMITED: 'quests/tasks/limited',
      PARTNER: 'quests/tasks/partner',
      REFERRAL: 'quests/tasks/referral',
      DETAILS: (taskId) => `quests/tasks/${taskId}/details`,
      START: (taskId) => `quests/tasks/${taskId}/start`,
      VERIFY: (taskId) => `quests/tasks/${taskId}/verify`,
      PROGRESS: (taskId) => `quests/tasks/${taskId}/progress`
    },

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —à–ª—è—Ö–∏
    USER: {
      DATA: (userId) => `user/${userId}`,
      BALANCE: (userId) => `user/${userId}/balance`,
      TASKS: (userId) => `user/${userId}/tasks`,
      PROGRESS: (userId) => `user/${userId}/progress`,
      TASK_STATUS: (userId, taskId) => `user/${userId}/tasks/${taskId}/status`,
      SETTINGS: (userId) => `user/${userId}/settings`
    },

    // –©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
    DAILY_BONUS: {
      STATUS: (userId) => `user/${userId}/daily-bonus`,
      CLAIM: (userId) => `user/${userId}/claim-daily-bonus`,
      STREAK: (userId) => `user/${userId}/claim-streak-bonus`,
      HISTORY: (userId) => `user/${userId}/bonus-history`
    },

    // –°—Ç–µ–π–∫—ñ–Ω–≥
    STAKING: {
      DATA: (userId) => `user/${userId}/staking`,
      HISTORY: (userId) => `user/${userId}/staking/history`,
      CANCEL: (userId, stakingId) => `user/${userId}/staking/${stakingId}/cancel`
    },

    // –Ü–Ω—à—ñ
    AUTH: {
      REFRESH_TOKEN: 'auth/refresh-token'
    },

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    TRANSACTIONS: (userId) => `user/${userId}/transactions`
  };

  /**
   * –ì–µ–Ω–µ—Ä—É—î –±–∞–∑–æ–≤–∏–π URL –¥–ª—è API
   */
  function getBaseUrl() {
    const hostname = window.location.hostname;

    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      return `http://${hostname}:8080`;
    } else if (hostname.includes('testenv') || hostname.includes('staging')) {
      return `https://${hostname}`;
    } else {
      return 'https://winixbot.com';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä—É—î –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  function getFallbackUserData() {
    // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
    const storedData = {};

    try {
      const userDataJson = localStorage.getItem('userData');
      if (userDataJson) {
        const userData = JSON.parse(userDataJson);
        Object.assign(storedData, userData);
      }
    } catch (e) {}

    // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userId = safeGetUserId() || 'unknown';
    return {
      telegram_id: userId,
      username: storedData.username || localStorage.getItem('username') || 'User',
      balance: parseFloat(storedData.balance || localStorage.getItem('userTokens') || '0'),
      coins: parseInt(storedData.coins || localStorage.getItem('userCoins') || '0'),
      notifications_enabled: storedData.notifications_enabled !== undefined
        ? storedData.notifications_enabled
        : localStorage.getItem('notifications_enabled') === 'true',
      source: 'localStorage_fallback'
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
   */
  function generateFallbackResponse(endpoint, method, data) {
    if (safeIncludes(endpoint, '/user/') &&
        (safeIncludes(endpoint, '/data') || endpoint.endsWith('/user'))) {
      return {
        status: 'success',
        data: getFallbackUserData(),
        source: 'fallback',
        fallback: true
      };
    }

    if (safeIncludes(endpoint, '/balance')) {
      return {
        status: 'success',
        data: {
          balance: parseFloat(localStorage.getItem('userTokens') || '0'),
          coins: parseInt(localStorage.getItem('userCoins') || '0')
        },
        source: 'fallback',
        fallback: true
      };
    }

    if (safeIncludes(endpoint, '/daily-bonus')) {
      return {
        status: 'success',
        data: {
          day: 1,
          canClaim: true,
          nextBonus: 25,
          streakDays: 1,
          lastClaimed: new Date().toISOString()
        },
        source: 'fallback',
        fallback: true
      };
    }

    if (safeIncludes(endpoint, '/tasks')) {
      return {
        status: 'success',
        data: [],
        source: 'fallback',
        fallback: true
      };
    }

    // –ë–∞–∑–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    return {
      status: 'error',
      message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
      source: 'fallback',
      fallback: true,
      offline: true
    };
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ä—è–¥–æ–∫ –ø–µ–≤–Ω–∏–π –ø—ñ–¥—Ä—è–¥–æ–∫ (–±–µ–∑–ø–µ—á–Ω–∞)
   */
  function safeIncludes(str, substring) {
    if (!str || typeof str !== 'string') return false;
    return str.includes(substring);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –º–æ–¥—É–ª—è
   * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
   * @returns {Promise} –ü—Ä–æ–º—ñ—Å, —â–æ –≤–∏—Ä—ñ—à—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
   */
  async function initApi(forceRefresh = false) {
    // –Ø–∫—â–æ API –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–∏–º—É—Å–æ–≤–∞ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if (_isInitialized && !forceRefresh) {
      return _apiInitPromise;
    }

    // –Ø–∫—â–æ API –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º—ñ—Å
    if (_isInitializing && _apiInitPromise) {
      return _apiInitPromise;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    _isInitializing = true;
    _apiInitPromise = new Promise(async (resolve, reject) => {
      try {
        log(`–ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API –º–æ–¥—É–ª—è ${forceRefresh ? '(–ø—Ä–∏–º—É—Å–æ–≤–∞)' : ''}`);

        // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π API, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        saveOriginalApi();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –º–æ–¥—É–ª—è
        if (!checkApiModule()) {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ —á–∏ —î —Å–∫—Ä–∏–ø—Ç API
          const apiScript = document.querySelector('script[src*="tasks-api.js"]');

          if (!apiScript) {
            log("–°–∫—Ä–∏–ø—Ç API –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...", 'warn');

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –¥–æ–¥–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç API
            const script = document.createElement('script');
            script.src = '/js/tasks-api.js';
            script.async = true;

            // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—É
            const scriptLoadPromise = new Promise((resolveScript, rejectScript) => {
              script.onload = resolveScript;
              script.onerror = () => rejectScript(new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç API"));
            });

            document.head.appendChild(script);

            try {
              await scriptLoadPromise;
              log("–°–∫—Ä–∏–ø—Ç API —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", 'success');
            } catch (error) {
              log(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—É API: ${error.message}`, 'error');
              throw error;
            }
          }

          // –ß–µ–∫–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É, —â–æ–± —Å–∫—Ä–∏–ø—Ç –≤—Å—Ç–∏–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è
          await new Promise(resolveTimeout => setTimeout(resolveTimeout, 1000));

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
          if (!checkApiModule()) {
            log("API –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è", 'error');

            // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑, —è–∫—â–æ –Ω–µ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
            if (_initRetryCount < _maxRetryAttempts) {
              _initRetryCount++;
              log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API (${_initRetryCount}/${_maxRetryAttempts})...`, 'warn');

              // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
              const retryDelay = _retryDelay * Math.pow(1.5, _initRetryCount - 1);
              setTimeout(() => {
                _isInitializing = false;
                initApi(true).then(resolve).catch(reject);
              }, retryDelay);

              return;
            } else {
              // –í–∏—á–µ—Ä–ø–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
              log("–í–∏—á–µ—Ä–ø–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API", 'error');
              _offlineMode = true;
              createSafeApiFunctions();
              throw new Error("API –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±");
            }
          }

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ API –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
          saveOriginalApi();
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ø—Ä–∞–≤–¥—ñ –ø—Ä–∞—Ü—é—î API
        try {
          const userId = (_originalApi && _originalApi.getUserId) ?
                        _originalApi.getUserId() : safeGetUserId();

          if (!userId) {
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
          }

          log(`ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userId}`, 'success');

          // –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ API
          if (_originalApi && _originalApi.api && _originalApi.api.getUserData) {
            const userData = await _originalApi.api.getUserData(true);

            if (userData && (userData.status === 'success' || userData.source)) {
              log("–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç API —É—Å–ø—ñ—à–Ω–∏–π", 'success');
            } else {
              log("–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ", 'warn');
            }
          }

          // –£—Å–ø—ñ—à–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
          _isInitialized = true;
          _isInitializing = false;
          _initRetryCount = 0;
          _offlineMode = false;

          log("API –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π", 'success');

          // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é —É—Å–ø—ñ—à–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
          if (typeof document.dispatchEvent === 'function') {
            document.dispatchEvent(new CustomEvent('api-initialized', { detail: { success: true } }));
          }

          resolve(true);
        } catch (error) {
          log(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API: ${error.message}`, 'error');

          // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑, —è–∫—â–æ –Ω–µ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
          if (_initRetryCount < _maxRetryAttempts) {
            _initRetryCount++;
            log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API (${_initRetryCount}/${_maxRetryAttempts})...`, 'warn');

            // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
            const retryDelay = _retryDelay * Math.pow(1.5, _initRetryCount - 1);
            setTimeout(() => {
              _isInitializing = false;
              initApi(true).then(resolve).catch(reject);
            }, retryDelay);

            return;
          } else {
            // –í–∏—á–µ—Ä–ø–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
            log("–í–∏—á–µ—Ä–ø–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API", 'error');
            _offlineMode = true;
            createSafeApiFunctions();
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API –º–æ–¥—É–ª—å");
          }
        }
      } catch (error) {
        _isInitializing = false;
        _isInitialized = false;

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é –ø–æ–º–∏–ª–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if (typeof document.dispatchEvent === 'function') {
          document.dispatchEvent(new CustomEvent('api-initialized', {
            detail: { success: false, error: error.message }
          }));
        }

        reject(error);
      }
    });

    return _apiInitPromise;
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±–≥–æ—Ä—Ç–∫–∏
  function init() {
    log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –æ–±–≥–æ—Ä—Ç–∫–∏");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω—ñ –≤–µ—Ä—Å—ñ—ó API —Ñ—É–Ω–∫—Ü—ñ–π
    createSafeApiFunctions();

    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó AppInitializer, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if (window.AppInitializer) {
      // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É
      window.AppInitializer.onEvent('app-init-success', () => {
        log("–ü–æ–¥—ñ—è app-init-success –æ—Ç—Ä–∏–º–∞–Ω–∞, –ø–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é API", 'success');
        initApi();
      });

      // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      window.AppInitializer.onEvent('user-id-received', (data) => {
        if (data && data.userId) {
          log(`–û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${data.userId}`, 'success');

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –≤ localStorage
          try {
            localStorage.setItem('telegram_user_id', data.userId);
          } catch (e) {}
        }
      });
    }

    // –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API
    initApi().catch(error => {
      log(`–ü–æ—á–∞—Ç–∫–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –Ω–µ –≤–¥–∞–ª–∞—Å—è: ${error.message}`, 'error');
    });

    // –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        log("DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API");
        initApi();
      });
    }

    // –î–æ–¥–∞—î–º–æ –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±'—î–∫—Ç—É
    window.APIWrapper = {
      initApi,
      isInitialized: () => _isInitialized,
      isOfflineMode: () => _offlineMode,
      getStatus: () => ({
        isInitialized: _isInitialized,
        isInitializing: _isInitializing,
        retryCount: _initRetryCount,
        offlineMode: _offlineMode
      })
    };
  }

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
  init();
})();