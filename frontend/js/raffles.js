// ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –Ü –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü =====
let telegramId = null;
let authToken = null;
let activeRaffles = [];
let userRaffles = [];
let rafflesToShow = [];
let rafflePrizeMultipliers = {'WINIX': 1, 'USD': 28, 'EUR': 30};
let activeTimers = {};
let currentTab = 'active';
const API_BASE_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000' : '';
const REFRESH_INTERVAL = 60000; // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

// ===== TELEGRAM WEBAPP –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø =====
document.addEventListener('DOMContentLoaded', () => {
    console.log("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...");
    initTelegramWebApp();

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    setupTabSwitching();
    createParticles();
    setupEventListeners();

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    setInterval(refreshActiveRaffles, REFRESH_INTERVAL);
});

function initTelegramWebApp() {
    console.log("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram WebApp...");

    if (window.Telegram && window.Telegram.WebApp) {
        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram WebApp
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
                telegramId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
                console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ Telegram ID:", telegramId);

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –≤ DOM —Ç–∞ localStorage
                document.getElementById('user-id').textContent = telegramId;
                localStorage.setItem('telegram_user_id', telegramId);

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                const userIdElement = document.getElementById('header-user-id');
                if (userIdElement) {
                    userIdElement.textContent = telegramId;
                }

                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
                loadUserData();
                loadActiveRaffles();
            } else {
                console.warn("‚ö†Ô∏è –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ Telegram WebApp");
                tryGetUserIdFromAlternativeSources();
            }
        } catch (e) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram WebApp:", e);
            tryGetUserIdFromAlternativeSources();
        }
    } else {
        console.warn("‚ö†Ô∏è Telegram WebApp API –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ. –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.");
        tryGetUserIdFromAlternativeSources();
    }
}

function tryGetUserIdFromAlternativeSources() {
    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage
    telegramId = localStorage.getItem('telegram_user_id');

    if (telegramId) {
        console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ID —ñ–∑ localStorage:", telegramId);
        document.getElementById('header-user-id').textContent = telegramId;

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        loadUserData();
        loadActiveRaffles();
        return;
    }

    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const urlParams = new URLSearchParams(window.location.search);
    telegramId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');

    if (telegramId) {
        console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ID –∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:", telegramId);
        localStorage.setItem('telegram_user_id', telegramId);
        document.getElementById('header-user-id').textContent = telegramId;

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        loadUserData();
        loadActiveRaffles();
        return;
    }

    // –Ø–∫—â–æ –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    showToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.", "error");
}

// ===== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• =====
function loadUserData() {
    if (!telegramId) {
        console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.");
        return;
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    fetchWithAuth(`${API_BASE_URL}/api/user/${telegramId}/init_data`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            document.getElementById('user-coins').textContent = data.data.coins || 0;
            document.getElementById('user-tokens').textContent = data.data.balance || 0;

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
            localStorage.setItem('userCoins', data.data.coins);
            localStorage.setItem('userTokens', data.data.balance);

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä—à—É –ª—ñ—Ç–µ—Ä—É —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∞–≤–∞—Ç–∞—Ä—ñ
            const avatar = document.getElementById('profile-avatar');
            if (avatar && data.data.username) {
                avatar.textContent = data.data.username.charAt(0).toUpperCase();
            }

            console.log("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.");
        } else {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", data.message);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∑ localStorage, —è–∫—â–æ –≤–æ–Ω–∏ —î
            const savedCoins = localStorage.getItem('userCoins');
            const savedTokens = localStorage.getItem('userTokens');

            if (savedCoins) document.getElementById('user-coins').textContent = savedCoins;
            if (savedTokens) document.getElementById('user-tokens').textContent = savedTokens;
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        loadUserRaffles();
    })
    .catch(error => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∑ localStorage, —è–∫—â–æ –≤–æ–Ω–∏ —î
        const savedCoins = localStorage.getItem('userCoins');
        const savedTokens = localStorage.getItem('userTokens');

        if (savedCoins) document.getElementById('user-coins').textContent = savedCoins;
        if (savedTokens) document.getElementById('user-tokens').textContent = savedTokens;

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        loadUserRaffles();
    });
}

function loadActiveRaffles() {
    if (!telegramId) {
        console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.");
        return;
    }

    showLoadingIndicator();

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
    fetchWithAuth(`${API_BASE_URL}/api/raffles`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingIndicator();

        if (data.status === 'success') {
            activeRaffles = data.data || [];
            console.log("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", activeRaffles.length);

            // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π —ñ –º—ñ–Ω—ñ
            processActiveRaffles();
        } else {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", data.message);
            showToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", "error");

            // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            document.getElementById('main-raffle-container').innerHTML = `
                <div class="alert alert-warning">
                    <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>
                </div>
            `;
            document.getElementById('mini-raffles-container').innerHTML = '';
        }
    })
    .catch(error => {
        hideLoadingIndicator();
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        document.getElementById('main-raffle-container').innerHTML = `
            <div class="alert alert-error">
                <p>–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</p>
            </div>
        `;
        document.getElementById('mini-raffles-container').innerHTML = '';
    });
}

function loadUserRaffles() {
    if (!telegramId) {
        console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
        return;
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, —É —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    fetchWithAuth(`${API_BASE_URL}/api/user/${telegramId}/raffles`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            userRaffles = data.data || [];
            console.log("‚úÖ –†–æ–∑—ñ–≥—Ä–∞—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", userRaffles.length);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
            if (activeRaffles.length > 0) {
                processActiveRaffles();
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            if (currentTab === 'past') {
                loadRafflesHistory();
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (currentTab === 'stats') {
                loadStatistics();
            }
        } else {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", data.message);
        }
    })
    .catch(error => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    });
}

function loadRafflesHistory() {
    if (!telegramId) {
        console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.");
        return;
    }

    showLoadingIndicator();

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    fetchWithAuth(`${API_BASE_URL}/api/user/${telegramId}/raffles-history`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingIndicator();

        if (data.status === 'success') {
            const historyData = data.data || [];
            console.log("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞:", historyData.length);

            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            renderRafflesHistory(historyData);
        } else {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", data.message);

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            document.getElementById('history-container').innerHTML = `
                <div class="alert alert-warning">
                    <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>
                </div>
            `;
        }
    })
    .catch(error => {
        hideLoadingIndicator();
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        document.getElementById('history-container').innerHTML = `
            <div class="alert alert-error">
                <p>–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</p>
            </div>
        `;
    });
}

function loadStatistics() {
    if (!telegramId) {
        console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
        return;
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    fetchWithAuth(`${API_BASE_URL}/api/user/${telegramId}`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            const userData = data.data || {};
            console.log("‚úÖ –î–∞–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById('total-participated').textContent = userData.participations_count || 0;
            document.getElementById('total-wins').textContent = userData.wins_count || 0;

            // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏–≥—Ä–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—á–µ–Ω—ñ –∂–µ—Ç–æ–Ω–∏, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ó—Ö
            // –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É, –∑–∞–ª–∏—à–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç—É—Ç
            // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—É–º—É –≤–∏–≥—Ä–∞—à—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
            fetchWithAuth(`${API_BASE_URL}/api/user/${telegramId}/transactions?limit=1000`, {
                method: 'GET'
            })
            .then(response => response.json())
            .then(txData => {
                if (txData.status === 'success') {
                    const transactions = txData.data || [];

                    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –≤–∏–≥—Ä–∞—à—ñ–≤
                    const totalWinix = transactions
                        .filter(tx => tx.type === 'prize')
                        .reduce((sum, tx) => sum + parseFloat(tx.amount || 0), 0);

                    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∂–µ—Ç–æ–Ω—ñ–≤
                    const totalSpent = transactions
                        .filter(tx => tx.type === 'fee')
                        .reduce((sum, tx) => sum + Math.abs(parseFloat(tx.amount || 0)), 0);

                    document.getElementById('total-winix-won').textContent = totalWinix.toFixed(0);
                    document.getElementById('total-tokens-spent').textContent = totalSpent.toFixed(0);
                }
            })
            .catch(error => {
                console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
            });
        } else {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", data.message);
        }
    })
    .catch(error => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    });
}

function refreshActiveRaffles() {
    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ª–∏—à–µ —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    if (currentTab === 'active') {
        console.log("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...");
        loadActiveRaffles();
    }
}

// ===== –û–ë–†–û–ë–ö–ê –î–ê–ù–ò–• =====
function processActiveRaffles() {
    // –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î–º–æ –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏
    clearAllTimers();

    // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!activeRaffles || activeRaffles.length === 0) {
        console.log("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ");
        document.getElementById('main-raffle-container').innerHTML = `
            <div class="alert alert-info">
                <p>–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>
            </div>
        `;
        document.getElementById('mini-raffles-container').innerHTML = '';
        return;
    }

    // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —Ç–∞ –æ—Å–Ω–æ–≤–Ω—ñ
    const dailyRaffles = activeRaffles.filter(raffle => raffle.is_daily);
    const mainRaffles = activeRaffles.filter(raffle => !raffle.is_daily);

    console.log(`‚ÑπÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ ${mainRaffles.length} –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞ ${dailyRaffles.length} —â–æ–¥–µ–Ω–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤`);

    // –í–∏–±–∏—Ä–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
    let mainRaffle = null;

    if (mainRaffles.length > 0) {
        // –í–∏–±–∏—Ä–∞—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é —Å—É–º–æ—é –ø—Ä–∏–∑—É
        mainRaffle = mainRaffles.reduce((prev, current) => {
            const prevValue = prev.prize_amount * (rafflePrizeMultipliers[prev.prize_currency] || 1);
            const currentValue = current.prize_amount * (rafflePrizeMultipliers[current.prize_currency] || 1);
            return currentValue > prevValue ? current : prev;
        }, mainRaffles[0]);
    } else if (dailyRaffles.length > 0) {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, –≤–∏–±–∏—Ä–∞—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é —Å—É–º–æ—é –ø—Ä–∏–∑—É
        mainRaffle = dailyRaffles.reduce((prev, current) => {
            const prevValue = prev.prize_amount * (rafflePrizeMultipliers[prev.prize_currency] || 1);
            const currentValue = current.prize_amount * (rafflePrizeMultipliers[current.prize_currency] || 1);
            return currentValue > prevValue ? current : prev;
        }, dailyRaffles[0]);
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
    if (mainRaffle) {
        renderMainRaffle(mainRaffle);
    } else {
        document.getElementById('main-raffle-container').innerHTML = `
            <div class="alert alert-info">
                <p>–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</p>
            </div>
        `;
    }

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –¥–ª—è –º—ñ–Ω—ñ-–±–ª–æ–∫—ñ–≤ (–±–µ–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ)
    const miniRaffles = activeRaffles.filter(raffle => raffle.id !== (mainRaffle ? mainRaffle.id : null));

    // –†–µ–Ω–¥–µ—Ä–∏–º–æ –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
    renderMiniRaffles(miniRaffles);
}

// ===== –†–ï–ù–î–ï–†–ò–ù–ì –Ü–ù–¢–ï–†–§–ï–ô–°–£ =====
function renderMainRaffle(raffle) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–µ—Ä–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
    const userParticipation = userRaffles.find(ur => ur.raffle_id === raffle.id);
    const isParticipating = !!userParticipation;
    const entryCount = userParticipation ? userParticipation.entry_count : 0;

    // –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ—à—Ç—É —á–∞—Å—É
    const now = Date.now();
    const endTime = raffle.end_time;
    const timeLeft = Math.max(0, endTime - now);

    // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    let html = `
        <img src="${raffle.image_url || 'assets/raffle-default.jpg'}" alt="${raffle.title}" class="main-raffle-image">
        <div class="main-raffle-content">
            <div class="main-raffle-header">
                <h3 class="main-raffle-title">${raffle.title}</h3>
                <div class="main-raffle-cost">
                    <img src="assets/token-icon.png" alt="–ñ–µ—Ç–æ–Ω" class="token-icon">
                    ${raffle.entry_fee}
                </div>
            </div>
            <p>${raffle.description || '–ü—Ä–∏–π–º–∞–π—Ç–µ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏!'}</p>
            <div class="main-raffle-prize">–ü—Ä–∏–∑: ${raffle.prize_amount} ${raffle.prize_currency}</div>
            
            <div class="timer-container" id="timer-${raffle.id}">
                <div class="timer-block">
                    <div class="timer-value" id="days-${raffle.id}">0</div>
                    <div class="timer-label">–î–Ω—ñ–≤</div>
                </div>
                <div class="timer-block">
                    <div class="timer-value" id="hours-${raffle.id}">0</div>
                    <div class="timer-label">–ì–æ–¥–∏–Ω</div>
                </div>
                <div class="timer-block">
                    <div class="timer-value" id="minutes-${raffle.id}">0</div>
                    <div class="timer-label">–•–≤–∏–ª–∏–Ω</div>
                </div>
                <div class="timer-block">
                    <div class="timer-value" id="seconds-${raffle.id}">0</div>
                    <div class="timer-label">–°–µ–∫—É–Ω–¥</div>
                </div>
            </div>
            
            <div class="main-raffle-participants">
                <span class="participants-info">–£—á–∞—Å–Ω–∏–∫—ñ–≤: <span class="participants-count">${raffle.participants_count || 0}</span></span>
                <span>–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: ${raffle.winners_count}</span>
            </div>
            
            <div class="progress-bar">
                <div class="progress" style="width: ${Math.min(100, (raffle.participants_count / 100) * 100)}%"></div>
            </div>
    `;

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Å—Ç–∞–Ω–æ–º
    const userCoins = parseInt(document.getElementById('user-coins').textContent) || 0;
    const canJoin = userCoins >= raffle.entry_fee;

    if (isParticipating) {
        html += `
            <button class="join-button participating" disabled>
                –í–∏ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å (${entryCount} ${entryCount === 1 ? '–∂–µ—Ç–æ–Ω' : (entryCount < 5 ? '–∂–µ—Ç–æ–Ω–∏' : '–∂–µ—Ç–æ–Ω—ñ–≤')})
            </button>
        `;
    } else if (!canJoin) {
        html += `
            <button class="join-button disabled" disabled>
                –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ ${raffle.entry_fee})
            </button>
        `;
    } else {
        html += `
            <button class="join-button" data-raffle-id="${raffle.id}" data-entry-fee="${raffle.entry_fee}" 
                onclick="participateInRaffle(this, '${raffle.id}', ${raffle.entry_fee})">
                –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å
            </button>
        `;
    }

    html += `</div>`;

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    document.getElementById('main-raffle-container').innerHTML = html;

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    startTimer(raffle.id, timeLeft);
}

function renderMiniRaffles(raffles) {
    if (!raffles || raffles.length === 0) {
        document.getElementById('mini-raffles-container').innerHTML = `
            <div class="alert alert-info">
                <p>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —â–æ–¥–µ–Ω–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.</p>
            </div>
        `;
        return;
    }

    let html = '';

    // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—É
    raffles.forEach(raffle => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±–µ—Ä–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        const userParticipation = userRaffles.find(ur => ur.raffle_id === raffle.id);
        const isParticipating = !!userParticipation;
        const entryCount = userParticipation ? userParticipation.entry_count : 0;

        // –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ—à—Ç—É —á–∞—Å—É
        const now = Date.now();
        const endTime = raffle.end_time;
        const timeLeft = Math.max(0, endTime - now);

        // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—É
        html += `
            <div class="mini-raffle" data-raffle-id="${raffle.id}">
                <div class="mini-raffle-info">
                    <h3 class="mini-raffle-title">${raffle.title}</h3>
                    <div class="mini-raffle-cost">
                        <img src="assets/token-icon.png" alt="–ñ–µ—Ç–æ–Ω" class="token-icon">
                        ${raffle.entry_fee}
                    </div>
                    <div class="mini-raffle-prize">–ü—Ä–∏–∑: ${raffle.prize_amount} ${raffle.prize_currency}</div>
                    <div class="mini-raffle-time" id="mini-time-${raffle.id}">
                        –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${formatTimeLeft(timeLeft)}
                    </div>
                </div>
        `;

        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Å—Ç–∞–Ω–æ–º
        const userCoins = parseInt(document.getElementById('user-coins').textContent) || 0;
        const canJoin = userCoins >= raffle.entry_fee;

        if (isParticipating) {
            html += `
                <button class="mini-raffle-button participating" disabled>
                    –£—á–∞—Å—Ç—å (${entryCount})
                </button>
            `;
        } else if (!canJoin) {
            html += `
                <button class="mini-raffle-button disabled" disabled>
                    –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ
                </button>
            `;
        } else {
            html += `
                <button class="mini-raffle-button" data-raffle-id="${raffle.id}" data-entry-fee="${raffle.entry_fee}" 
                    onclick="participateInRaffle(this, '${raffle.id}', ${raffle.entry_fee})">
                    –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å
                </button>
            `;
        }

        html += `</div>`;

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—É
        setTimeout(() => {
            startMiniTimer(raffle.id, timeLeft);
        }, 100);
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    document.getElementById('mini-raffles-container').innerHTML = html;
}

function renderRafflesHistory(historyData) {
    if (!historyData || historyData.length === 0) {
        document.getElementById('history-container').innerHTML = `
            <div class="alert alert-info">
                <p>–í–∏ —â–µ –Ω–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ê–∫—Ç–∏–≤–Ω—ñ" –¥–ª—è —É—á–∞—Å—Ç—ñ.</p>
            </div>
        `;
        return;
    }

    let html = '';

    // –°–æ—Ä—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö –¥–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏—Ö
    historyData.sort((a, b) => {
        const dateA = new Date(a.date.split('.').reverse().join('-'));
        const dateB = new Date(b.date.split('.').reverse().join('-'));
        return dateB - dateA;
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —ñ—Å—Ç–æ—Ä—ñ—ó
    historyData.forEach(item => {
        const statusClass = item.status === 'won' ? 'won' : 'participated';
        const statusText = item.status === 'won' ? '–í–∏–≥—Ä–∞—à' : '–£—á–∞—Å—Ç—å';

        html += `
            <div class="history-card ${statusClass}" data-raffle-id="${item.raffle_id}">
                <div class="history-date">${item.date}</div>
                <div class="history-prize">${item.title}</div>
                <div class="history-prize">–ü—Ä–∏–∑: ${item.prize}</div>
                <div class="history-winners">${item.result}</div>
                <div class="history-status ${statusClass}">${statusText}</div>
                <div class="view-details-hint">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</div>
            </div>
        `;
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ—Å—Ç–æ—Ä—ñ—ó
    document.getElementById('history-container').innerHTML = html;

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π
    document.querySelectorAll('.history-card').forEach(card => {
        card.addEventListener('click', () => {
            const raffleId = card.dataset.raffleId;
            if (raffleId) {
                showRaffleDetails(raffleId);
            }
        });
    });
}

function showRaffleDetails(raffleId) {
    console.log(`‚ÑπÔ∏è –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}`);
    showLoadingIndicator();

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    fetchWithAuth(`${API_BASE_URL}/api/raffles/${raffleId}`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingIndicator();

        if (data.status === 'success') {
            const raffleDetails = data.data;

            // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –¥–µ—Ç–∞–ª—è–º–∏
            // –Ø–∫—â–æ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞, —Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–¥ –¥–ª—è —ó—Ö –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            // –í –¥–∞–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É, –ø–æ–∫–∞–∂–µ–º–æ –¥–µ—Ç–∞–ª—ñ –≤ —Å–ø–ª–∏–≤–∞—é—á–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ

            let detailsMessage = `
                ${raffleDetails.title}
                –ü—Ä–∏–∑: ${raffleDetails.prize_amount} ${raffleDetails.prize_currency}
                –°—Ç–∞—Ç—É—Å: ${raffleDetails.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–π'}
            `;

            if (raffleDetails.winners && raffleDetails.winners.length > 0) {
                detailsMessage += `\n–ü–µ—Ä–µ–º–æ–∂—Ü—ñ:\n`;
                raffleDetails.winners.forEach(winner => {
                    detailsMessage += `${winner.place} –º—ñ—Å—Ü–µ: ${winner.username} (${winner.prize_amount} ${winner.prize_currency})\n`;
                });
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Telegram WebApp ShowPopup –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
            if (window.Telegram && window.Telegram.WebApp) {
                window.Telegram.WebApp.showPopup(
                    {
                        title: '–î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É',
                        message: detailsMessage,
                        buttons: [{type: 'close'}]
                    }
                );
            } else {
                // –Ø–∫—â–æ Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                showToast('–î–µ—Ç–∞–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤ Telegram.', 'info');
            }
        } else {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É:", data.message);
            showToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É", "error");
        }
    })
    .catch(error => {
        hideLoadingIndicator();
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É:", error);
        showToast("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º", "error");
    });
}

// ===== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –¢–ê–ô–ú–ï–†–ê–ú–ò =====
function startTimer(raffleId, duration) {
    if (activeTimers[raffleId]) {
        clearInterval(activeTimers[raffleId]);
    }

    const timer = setInterval(() => {
        const days = document.getElementById(`days-${raffleId}`);
        const hours = document.getElementById(`hours-${raffleId}`);
        const minutes = document.getElementById(`minutes-${raffleId}`);
        const seconds = document.getElementById(`seconds-${raffleId}`);

        if (!days || !hours || !minutes || !seconds) {
            clearInterval(timer);
            delete activeTimers[raffleId];
            return;
        }

        const now = Date.now();
        const endTime = now + duration - 1000; // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É, —â–æ–± –∫–æ–º–ø–µ–Ω—Å—É–≤–∞—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        const timeLeft = Math.max(0, endTime - now);

        // –Ø–∫—â–æ —á–∞—Å –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        if (timeLeft <= 0) {
            clearInterval(timer);
            delete activeTimers[raffleId];

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            loadActiveRaffles();
            return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä
        const timeValues = calculateTimeLeft(timeLeft);
        days.textContent = timeValues.days;
        hours.textContent = timeValues.hours;
        minutes.textContent = timeValues.minutes;
        seconds.textContent = timeValues.seconds;
    }, 1000);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è
    activeTimers[raffleId] = timer;

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –æ–¥—Ä–∞–∑—É
    const timeValues = calculateTimeLeft(duration);
    document.getElementById(`days-${raffleId}`).textContent = timeValues.days;
    document.getElementById(`hours-${raffleId}`).textContent = timeValues.hours;
    document.getElementById(`minutes-${raffleId}`).textContent = timeValues.minutes;
    document.getElementById(`seconds-${raffleId}`).textContent = timeValues.seconds;
}

function startMiniTimer(raffleId, duration) {
    if (activeTimers[`mini-${raffleId}`]) {
        clearInterval(activeTimers[`mini-${raffleId}`]);
    }

    const timer = setInterval(() => {
        const timeElement = document.getElementById(`mini-time-${raffleId}`);

        if (!timeElement) {
            clearInterval(timer);
            delete activeTimers[`mini-${raffleId}`];
            return;
        }

        const now = Date.now();
        const endTime = now + duration - 1000; // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É, —â–æ–± –∫–æ–º–ø–µ–Ω—Å—É–≤–∞—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        const timeLeft = Math.max(0, endTime - now);

        // –Ø–∫—â–æ —á–∞—Å –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        if (timeLeft <= 0) {
            clearInterval(timer);
            delete activeTimers[`mini-${raffleId}`];

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            loadActiveRaffles();
            return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞–π–º–µ—Ä–∞
        timeElement.textContent = `–ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${formatTimeLeft(timeLeft)}`;
    }, 1000);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è
    activeTimers[`mini-${raffleId}`] = timer;

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –æ–¥—Ä–∞–∑—É
    const timeElement = document.getElementById(`mini-time-${raffleId}`);
    if (timeElement) {
        timeElement.textContent = `–ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${formatTimeLeft(duration)}`;
    }
}

function clearAllTimers() {
    // –û—á–∏—â—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞–π–º–µ—Ä–∏
    Object.keys(activeTimers).forEach(key => {
        clearInterval(activeTimers[key]);
        delete activeTimers[key];
    });
}

function calculateTimeLeft(duration) {
    const days = Math.floor(duration / (1000 * 60 * 60 * 24));
    const hours = Math.floor((duration % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((duration % (1000 * 60)) / 1000);

    return {
        days: days.toString().padStart(2, '0'),
        hours: hours.toString().padStart(2, '0'),
        minutes: minutes.toString().padStart(2, '0'),
        seconds: seconds.toString().padStart(2, '0')
    };
}

function formatTimeLeft(duration) {
    const days = Math.floor(duration / (1000 * 60 * 60 * 24));
    const hours = Math.floor((duration % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));

    if (days > 0) {
        return `${days}–¥ ${hours}–≥`;
    } else if (hours > 0) {
        return `${hours}–≥ ${minutes}—Ö–≤`;
    } else {
        const seconds = Math.floor((duration % (1000 * 60)) / 1000);
        return `${minutes}—Ö–≤ ${seconds}—Å`;
    }
}

// ===== –£–ß–ê–°–¢–¨ –í –†–û–ó–Ü–ì–†–ê–®–ê–• =====
function participateInRaffle(button, raffleId, entryFee) {
    if (!telegramId) {
        showToast("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.", "error");
        return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤
    const userCoins = parseInt(document.getElementById('user-coins').textContent) || 0;
    if (userCoins < entryFee) {
        showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ: ${entryFee}`, "error");
        return;
    }

    // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–∏—Ö –∫–ª—ñ–∫—ñ–≤
    button.disabled = true;
    button.textContent = "–û–±—Ä–æ–±–∫–∞...";
    showLoadingIndicator();

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
    fetchWithAuth(`${API_BASE_URL}/api/user/${telegramId}/participate-raffle`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            raffle_id: raffleId,
            entry_count: 1
        })
    })
    .then(response => response.json())
    .then(data => {
        hideLoadingIndicator();

        if (data.status === 'success') {
            console.log("‚úÖ –£—Å–ø—ñ—à–Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:", data);

            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
            document.getElementById('user-coins').textContent = data.data.new_coins_balance || (userCoins - entryFee);

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            button.classList.add('participating');
            button.disabled = true;
            button.textContent = '–í–∏ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å';

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            showToast("–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!", "success");

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            loadUserRaffles();

            // –Ø–∫—â–æ —Ü–µ –±—É–≤ –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à, –æ–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
            const raffleElement = document.querySelector(`[data-raffle-id="${raffleId}"]`);
            if (raffleElement) {
                const participantsCountElement = raffleElement.querySelector('.participants-count');
                if (participantsCountElement) {
                    const currentCount = parseInt(participantsCountElement.textContent) || 0;
                    participantsCountElement.textContent = currentCount + 1;
                }
            }
        } else {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:", data.message);

            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            button.disabled = false;
            button.textContent = '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å';

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            showToast(data.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ", "error");
        }
    })
    .catch(error => {
        hideLoadingIndicator();
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:", error);

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
        button.disabled = false;
        button.textContent = '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å';

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        showToast("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", "error");
    });
}

// ===== UI –£–¢–Ü–õ–Ü–¢–ò =====
function setupTabSwitching() {
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.dataset.tab;

            // –ó–º—ñ–Ω—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            // –ó–º—ñ–Ω—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –≤–º—ñ—Å—Ç—É –≤–∫–ª–∞–¥–æ–∫
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(`${tabId}-raffles`).classList.add('active');

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
            currentTab = tabId;

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
            if (tabId === 'active') {
                loadActiveRaffles();
                loadUserRaffles();
            } else if (tabId === 'past') {
                loadRafflesHistory();
            } else if (tabId === 'stats') {
                loadStatistics();
            }
        });
    });
}

function createParticles() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Å—Ç–∏–Ω–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü—ñ—ó
    document.querySelectorAll('.particles-container').forEach(container => {
        for (let i = 0; i < 15; i++) {
            const particle = document.createElement('div');
            particle.classList.add('particle');

            // –í–∏–ø–∞–¥–∫–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó
            const size = Math.random() * 10 + 2;
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            particle.style.left = `${Math.random() * 100}%`;
            particle.style.top = `${Math.random() * 100}%`;

            // –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ—ó
            particle.style.animationDelay = `${Math.random() * 5}s`;

            container.appendChild(particle);
        }
    });
}

function setupEventListeners() {
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', () => {
            const section = item.dataset.section;
            console.log(`üîÑ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ä–æ–∑–¥—ñ–ª—É: ${section}`);

            // –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —ñ–Ω—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —á–µ—Ä–µ–∑ Telegram WebApp
                window.Telegram.WebApp.openTelegramLink(`https://t.me/winix_bot?start=${section}`);
            }
        });
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è toast-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    document.getElementById('toast-message').addEventListener('click', () => {
        hideToast();
    });
}

function showToast(message, type = 'info') {
    const toast = document.getElementById('toast-message');
    toast.textContent = message;
    toast.className = 'toast-message';

    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (type === 'success') {
        toast.classList.add('success');
    } else if (type === 'error') {
        toast.classList.add('error');
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    toast.classList.add('show');

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        hideToast();
    }, 3000);
}

function hideToast() {
    const toast = document.getElementById('toast-message');
    toast.classList.remove('show');
}

function showLoadingIndicator() {
    document.getElementById('loading-spinner').style.display = 'flex';
}

function hideLoadingIndicator() {
    document.getElementById('loading-spinner').style.display = 'none';
}

// ===== –£–¢–Ü–õ–Ü–¢–ò –î–õ–Ø –†–û–ë–û–¢–ò –ó API =====
function fetchWithAuth(url, options = {}) {
    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ —î
    const headers = options.headers || {};

    // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ —î
    if (authToken) {
        headers['Authorization'] = `Bearer ${authToken}`;
    }

    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (telegramId) {
        headers['X-Telegram-User-Id'] = telegramId;
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –∑ fetch
    return fetch(url, {
        ...options,
        headers: {
            ...headers,
            'Content-Type': 'application/json'
        }
    }).then(response => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (!response.ok && response.status === 401) {
            // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω
            return refreshAuthToken().then(() => {
                // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
                const newHeaders = {
                    ...headers,
                    'Authorization': `Bearer ${authToken}`
                };

                return fetch(url, {
                    ...options,
                    headers: newHeaders
                });
            });
        }

        return response;
    }).catch(error => {
        console.error('–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞:', error);
        throw error;
    });
}

function refreshAuthToken() {
    // –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    return fetch(`${API_BASE_URL}/api/auth/refresh-token`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': telegramId
        },
        body: JSON.stringify({ telegram_id: telegramId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success' && data.token) {
            authToken = data.token;
            console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
            return true;
        } else {
            console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:', data.message);
            throw new Error('Failed to refresh token');
        }
    });
}