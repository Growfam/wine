/**
 * ui.js - –ï–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É WINIX
 */

(function() {
    'use strict';

    console.log("üîÑ UI: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    let _loaderVisible = false;

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º
    let _isShowingNotification = false;

    // –û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞
    let _lastErrorNotificationTime = 0;
    let _lastErrorMessage = '';

    // ======== –Ü–ù–î–ò–ö–ê–¢–û–†–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ========

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function showLoading(message = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...') {
        try {
            // –Ø–∫—â–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (_loaderVisible) {
                const loaderMessage = document.querySelector('#loading-spinner .message');
                if (loaderMessage) loaderMessage.textContent = message;
                return;
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            let loader = document.getElementById('loading-spinner');

            if (!loader) {
                loader = document.createElement('div');
                loader.id = 'loading-spinner';
                loader.innerHTML = `
                    <div class="spinner"></div>
                    <div class="message">${message}</div>
                `;

                // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
                loader.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.5);
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                `;

                // –î–æ–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å
                loader.dataset.useCount = '1';

                document.body.appendChild(loader);
            } else {
                // –Ø–∫—â–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∂–µ —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                const loaderMessage = loader.querySelector('.message');
                if (loaderMessage) loaderMessage.textContent = message;

                // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å
                const useCount = parseInt(loader.dataset.useCount || '0') + 1;
                loader.dataset.useCount = useCount.toString();

                // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
                loader.style.display = 'flex';
            }

            _loaderVisible = true;
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', e);
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function hideLoading() {
        try {
            const loader = document.getElementById('loading-spinner');
            if (!loader) {
                _loaderVisible = false;
                return;
            }

            // –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å
            let useCount = parseInt(loader.dataset.useCount || '1') - 1;

            // –Ø–∫—â–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–æ—Å—è–≥ –Ω—É–ª—è, –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if (useCount <= 0) {
                loader.style.display = 'none';
                loader.dataset.useCount = '0';
                _loaderVisible = false;
            } else {
                // –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                loader.dataset.useCount = useCount.toString();
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', e);
            _loaderVisible = false;
        }
    }

    // ======== –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø ========

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {boolean} isError - –ß–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–æ—é
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     */
    function showNotification(message, isError = false, callback = null) {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–∫–∞–∑—É –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if (!message || message.trim() === '') {
            if (callback) setTimeout(callback, 100);
            return;
        }

        try {
            // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
            if (_isShowingNotification) {
                // –Ø–∫—â–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ alert
                if (isError) alert(message);
                if (callback) setTimeout(callback, 100);
                return;
            }

            _isShowingNotification = true;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∂–µ —ñ—Å–Ω—É—î
            let container = document.getElementById('notification-container');

            if (!container) {
                container = document.createElement('div');
                container.id = 'notification-container';
                container.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 9999;
                    width: 300px;
                `;
                document.body.appendChild(container);
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const notification = document.createElement('div');
            notification.className = `notification ${isError ? 'error' : 'success'}`;
            notification.innerHTML = message;
            notification.style.cssText = `
                padding: 15px 20px;
                margin-bottom: 10px;
                border-radius: 8px;
                color: white;
                animation: slideIn 0.3s ease;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
                cursor: pointer;
                background-color: ${isError ? '#e74c3c' : '#2ecc71'};
            `;

            // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes fadeOut {
                    from { opacity: 1; }
                    to { opacity: 0; }
                }
            `;
            document.head.appendChild(style);

            // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container.appendChild(notification);

            // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∫–ª—ñ–∫—É
            notification.addEventListener('click', () => {
                notification.style.animation = 'fadeOut 0.3s ease';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            });

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
            setTimeout(() => {
                notification.style.animation = 'fadeOut 0.3s ease';
                setTimeout(() => {
                    notification.remove();
                    if (callback) callback();
                }, 300);
            }, 5000);

            _isShowingNotification = false;
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', e);

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ alert
            alert(message);
            if (callback) callback();

            _isShowingNotification = false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–µ—Ä–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {Function} onConfirm - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
     * @param {Function} onCancel - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
     */
    function showModernConfirm(message, onConfirm, onCancel) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ overlay –≤–∂–µ —ñ—Å–Ω—É—î
            let overlay = document.getElementById('dialog-overlay');

            if (!overlay) {
                // –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                overlay = document.createElement('div');
                overlay.id = 'dialog-overlay';
                overlay.className = 'modern-dialog-overlay';

                const dialog = document.createElement('div');
                dialog.id = 'dialog';
                dialog.className = 'modern-dialog';

                const title = document.createElement('div');
                title.id = 'dialog-title';
                title.className = 'modern-dialog-title';
                title.textContent = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è';

                const content = document.createElement('div');
                content.id = 'dialog-content';
                content.className = 'modern-dialog-content';

                const buttons = document.createElement('div');
                buttons.className = 'modern-dialog-buttons';

                const cancelButton = document.createElement('button');
                cancelButton.id = 'dialog-cancel';
                cancelButton.className = 'modern-dialog-button modern-dialog-button-secondary';
                cancelButton.textContent = '–°–∫–∞—Å—É–≤–∞—Ç–∏';

                const confirmButton = document.createElement('button');
                confirmButton.id = 'dialog-confirm';
                confirmButton.className = 'modern-dialog-button modern-dialog-button-primary';
                confirmButton.textContent = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏';

                // –ó–±–∏—Ä–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                buttons.appendChild(cancelButton);
                buttons.appendChild(confirmButton);
                dialog.appendChild(title);
                dialog.appendChild(content);
                dialog.appendChild(buttons);
                overlay.appendChild(dialog);
                document.body.appendChild(overlay);

                // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
                const style = document.createElement('style');
                style.textContent = `
                    .modern-dialog-overlay {
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: rgba(0, 0, 0, 0.7);
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        z-index: 2000;
                        opacity: 0;
                        visibility: hidden;
                        transition: opacity 0.3s, visibility 0.3s;
                    }
                    .modern-dialog-overlay.active {
                        opacity: 1;
                        visibility: visible;
                    }
                    .modern-dialog {
                        background: rgba(30, 39, 70, 0.8);
                        border-radius: 1.5rem;
                        padding: 1.5rem;
                        width: 90%;
                        max-width: 350px;
                        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
                        border: 1px solid rgba(78, 181, 247, 0.2);
                        transform: scale(0.9);
                        opacity: 0;
                        transition: transform 0.3s, opacity 0.3s;
                    }
                    .modern-dialog-overlay.active .modern-dialog {
                        transform: scale(1);
                        opacity: 1;
                    }
                    .modern-dialog-title {
                        font-size: 1.25rem;
                        font-weight: bold;
                        margin-bottom: 1rem;
                        color: #4eb5f7;
                        text-align: center;
                    }
                    .modern-dialog-content {
                        margin-bottom: 1.5rem;
                        text-align: center;
                        color: white;
                    }
                    .modern-dialog-buttons {
                        display: flex;
                        justify-content: center;
                        gap: 1rem;
                    }
                    .modern-dialog-button {
                        padding: 0.75rem 1.25rem;
                        border: none;
                        border-radius: 0.75rem;
                        font-size: 1rem;
                        font-weight: bold;
                        cursor: pointer;
                        transition: transform 0.2s, background-color 0.2s;
                    }
                    .modern-dialog-button:active {
                        transform: scale(0.98);
                    }
                    .modern-dialog-button-primary {
                        background: linear-gradient(90deg, #1A1A2E, #0F3460, #00C9A7);
                        color: white;
                    }
                    .modern-dialog-button-secondary {
                        background: rgba(255, 255, 255, 0.1);
                        color: white;
                    }
                `;
                document.head.appendChild(style);
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥—ñ–∞–ª–æ–≥—É
            const dialog = document.getElementById('dialog');
            const dialogTitle = document.getElementById('dialog-title');
            const dialogContent = document.getElementById('dialog-content');
            const dialogCancel = document.getElementById('dialog-cancel');
            const dialogConfirm = document.getElementById('dialog-confirm');

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤–º—ñ—Å—Ç
            dialogContent.textContent = message;

            // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            const closeDialog = () => {
                overlay.classList.remove('active');
            };

            dialogCancel.onclick = () => {
                closeDialog();
                if (onCancel) onCancel();
            };

            dialogConfirm.onclick = () => {
                closeDialog();
                if (onConfirm) onConfirm();
            };

            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
            overlay.classList.add('active');
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:', e);

            // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π confirm
            if (confirm(message)) {
                if (onConfirm) onConfirm();
            } else {
                if (onCancel) onCancel();
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –≤–≤–µ–¥–µ–Ω–Ω—è
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∑ –≤–≤–µ–¥–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
     */
    function showInputModal(message, callback) {
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ overlay
            const overlay = document.createElement('div');
            overlay.className = 'modern-dialog-overlay active';

            // –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥
            const dialog = document.createElement('div');
            dialog.className = 'modern-input-dialog';

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            const title = document.createElement('div');
            title.className = 'modern-input-dialog-title';
            title.textContent = message;

            // –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è
            const input = document.createElement('input');
            input.className = 'modern-input-field';
            input.type = 'text';
            input.placeholder = '–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è';

            // –ö–Ω–æ–ø–∫–∏
            const buttons = document.createElement('div');
            buttons.className = 'modern-dialog-buttons';

            const cancelButton = document.createElement('button');
            cancelButton.className = 'modern-dialog-button modern-dialog-button-secondary';
            cancelButton.textContent = '–°–∫–∞—Å—É–≤–∞—Ç–∏';

            const confirmButton = document.createElement('button');
            confirmButton.className = 'modern-dialog-button modern-dialog-button-primary';
            confirmButton.textContent = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏';

            // –ó–±–∏—Ä–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            buttons.appendChild(cancelButton);
            buttons.appendChild(confirmButton);
            dialog.appendChild(title);
            dialog.appendChild(input);
            dialog.appendChild(buttons);
            overlay.appendChild(dialog);
            document.body.appendChild(overlay);

            // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
            const style = document.createElement('style');
            style.textContent = `
                .modern-input-dialog {
                    background: rgba(30, 39, 70, 0.8);
                    border-radius: 1.5rem;
                    padding: 1.5rem;
                    width: 90%;
                    max-width: 350px;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
                    border: 1px solid rgba(78, 181, 247, 0.2);
                }
                .modern-input-dialog-title {
                    font-size: 1.125rem;
                    font-weight: bold;
                    margin-bottom: 1rem;
                    color: #4eb5f7;
                    text-align: center;
                }
                .modern-input-field {
                    width: 100%;
                    padding: 0.75rem 1rem;
                    background: rgba(20, 30, 60, 0.7);
                    color: white;
                    border: 1px solid rgba(0, 201, 167, 0.3);
                    border-radius: 0.75rem;
                    margin-bottom: 1.25rem;
                    font-size: 1rem;
                    box-shadow: inset 0 0.125rem 0.3125rem rgba(0, 0, 0, 0.2);
                    transition: all 0.3s ease;
                }
                .modern-input-field:focus {
                    outline: none;
                    border-color: rgba(0, 201, 167, 0.8);
                    box-shadow: 0 0 0.625rem rgba(0, 201, 167, 0.4), inset 0 0.125rem 0.3125rem rgba(0, 0, 0, 0.2);
                }
            `;
            document.head.appendChild(style);

            // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            const closeModal = () => {
                overlay.remove();
            };

            cancelButton.onclick = () => {
                closeModal();
            };

            confirmButton.onclick = () => {
                const value = input.value.trim();
                closeModal();
                if (callback) callback(value);
            };

            // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª—ñ –≤–≤–µ–¥–µ–Ω–Ω—è
            setTimeout(() => input.focus(), 100);

            // –û–±—Ä–æ–±–∫–∞ Enter
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const value = input.value.trim();
                    closeModal();
                    if (callback) callback(value);
                }
            });
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–≤–µ–¥–µ–Ω–Ω—è:', e);

            // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π prompt
            const value = prompt(message);
            if (callback) callback(value);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ API
     * @param {Error} error - –û–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏
     * @param {string} operation - –ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó
     * @param {boolean} showToast - –ß–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function handleApiError(error, operation = 'API –æ–ø–µ—Ä–∞—Ü—ñ—ó', showToast = true) {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—é –ø–æ–º–∏–ª–æ–∫
        if (!error._logged) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}:`, error.message || error);
            // –ë–µ–∑–ø–µ—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å _logged
            try {
                error._logged = true;
            } catch (e) {}
        }

        // –£–Ω–∏–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        const now = Date.now();
        const errorMessage = error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥–∏
        const shouldShowToast = showToast &&
                               (now - _lastErrorNotificationTime > 3000 ||
                                _lastErrorMessage !== errorMessage);

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let userFriendlyMessage = '';

        if (errorMessage.includes('fetch') || errorMessage.includes('network')) {
            userFriendlyMessage = "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.";
        } else if (errorMessage.includes('timeout')) {
            userFriendlyMessage = "–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.";
        } else if (errorMessage.includes('404')) {
            userFriendlyMessage = "–ó–∞–ø–∏—Ç–∞–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.";
        } else if (errorMessage.includes('500')) {
            userFriendlyMessage = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.";
        } else if (errorMessage.includes('–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
            userFriendlyMessage = "–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.";
        } else {
            userFriendlyMessage = errorMessage;
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (shouldShowToast) {
            _lastErrorNotificationTime = now;
            _lastErrorMessage = errorMessage;

            showNotification(userFriendlyMessage, true);
        }

        return userFriendlyMessage;
    }

    // ======== –ì–õ–û–ë–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
    window.showLoading = showLoading;
    window.hideLoading = hideLoading;
    window.showNotification = showNotification;
    window.showToast = showNotification; // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.simpleAlert = showNotification; // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.showMessage = showNotification; // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.showModernNotification = showNotification; // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.showModernConfirm = showModernConfirm;
    window.showInputModal = showInputModal;
    window.handleApiError = handleApiError;

    console.log("‚úÖ UI: –ï–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
})();