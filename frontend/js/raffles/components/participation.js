/**
 * WINIX - –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (participation.js) - –°–ø—Ä–æ—â–µ–Ω–∞ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è
 * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ–∫—É—Ä—Å—ñ—î—é, Memory leaks —Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º
 * @version 4.0.0
 */

(function () {
  'use strict';

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  if (typeof window.WinixRaffles === 'undefined') {
    console.error(
      '‚ùå WinixRaffles –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ core.js –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ participation.js'
    );
    return;
  }

  // –¢—Ä–µ–∫–µ—Ä –ø–æ–∫–∞–∑–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é
  const shownNotifications = new Set();

  // –ü—ñ–¥–º–æ–¥—É–ª—å –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
  const participation = {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    MIN_REQUEST_INTERVAL: 2000, // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (–º—Å)
    REQUEST_TIMEOUT: 15000, // —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É (–º—Å)

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    participatingRaffles: new Set(), // —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –≤ —è–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å
    userRaffleTickets: {}, // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª–µ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    invalidRaffleIds: new Set(), // –Ω–µ–¥—ñ–π—Å–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
    lastRequestTimes: {}, // —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    lastKnownBalance: null, // –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–æ–º–∏–π –±–∞–ª–∞–Ω—Å
    lastBalanceUpdateTime: 0, // —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É

    // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è
    requestInProgress: false, // –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    syncInProgress: false, // –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    lastSyncTime: 0, // —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó

    // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ —Ç–∞–π–º–µ—Ä—ñ–≤
    syncTimer: null, // —Ç–∞–π–º–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    serverCheckTimer: null, // —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    init: function () {
      console.log('üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö...');

      // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
      this._cleanupState();

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
      this._loadUserParticipation();

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
      this._setupEventHandlers();

      console.log('‚úÖ –ú–æ–¥—É–ª—å —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    },

    /**
     * –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
     * @private
     */
    _cleanupState: function () {
      // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä—ñ–≤
      if (this.syncTimer) {
        clearTimeout(this.syncTimer);
        this.syncTimer = null;
      }

      if (this.serverCheckTimer) {
        clearInterval(this.serverCheckTimer);
        this.serverCheckTimer = null;
      }

      this.requestInProgress = false;
      this.syncInProgress = false;

      // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
      document
        .querySelectorAll('.join-button.processing, .mini-raffle-button.processing')
        .forEach((button) => {
          button.classList.remove('processing');
          button.disabled = false;

          // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç
          const originalText = button.getAttribute('data-original-text');
          if (originalText) {
            button.textContent = originalText;
          } else {
            const entryFee = button.getAttribute('data-entry-fee') || '1';
            button.textContent = button.classList.contains('mini-raffle-button')
              ? '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å'
              : `–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å –∑–∞ ${entryFee} –∂–µ—Ç–æ–Ω${parseInt(entryFee) > 1 ? '–∏' : ''}`;
          }
        });
    },

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @private
     */
    _loadUserParticipation: function () {
      // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ localStorage
      try {
        const savedState = localStorage.getItem('winix_participation_state');
        if (savedState) {
          const parsedState = JSON.parse(savedState);

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö (–Ω–µ —Å—Ç–∞—Ä—ñ—à—ñ 30 —Ö–≤–∏–ª–∏–Ω)
          if (parsedState && parsedState.lastUpdate) {
            const now = Date.now();
            const cacheAge = now - parsedState.lastUpdate;

            if (cacheAge < 30 * 60 * 1000) {
              if (Array.isArray(parsedState.raffles)) {
                this.participatingRaffles = new Set(parsedState.raffles);
              }

              if (parsedState.tickets) {
                this.userRaffleTickets = parsedState.tickets;
              }

              if (parsedState.balance !== undefined) {
                this.lastKnownBalance = parsedState.balance;
                this.lastBalanceUpdateTime = parsedState.lastBalanceUpdateTime || now;
              }

              console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –ø—Ä–æ —É—á–∞—Å—Ç—å —ñ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞');
            }
          }
        }

        // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        const invalidRaffles = localStorage.getItem('winix_invalid_raffles');
        if (invalidRaffles) {
          try {
            this.invalidRaffleIds = new Set(JSON.parse(invalidRaffles));
          } catch (e) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–µ–¥—ñ–π—Å–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', e);
          }
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —É—á–∞—Å—Ç—å:', error);
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞
      this.loadUserRaffles();
    },

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     * @private
     */
    _setupEventHandlers: function () {
      // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç—ñ
      document.addEventListener('click', (event) => {
        const participateButton = event.target.closest('.join-button, .mini-raffle-button');

        if (
          participateButton &&
          !participateButton.disabled &&
          !participateButton.classList.contains('processing')
        ) {
          const raffleId = participateButton.getAttribute('data-raffle-id');
          if (!raffleId) return;

          event.preventDefault();

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç—ñ –∫–ª—ñ–∫–∏
          const now = Date.now();
          const lastRequestTime = this.lastRequestTimes[raffleId] || 0;
          if (now - lastRequestTime < this.MIN_REQUEST_INTERVAL) {
            this._showToast('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é', 'info');
            return;
          }

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É
          if (this.requestInProgress) {
            this._showToast('–ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É', 'warning');
            return;
          }

          // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É
          const raffleType = participateButton.classList.contains('mini-raffle-button')
            ? 'daily'
            : 'main';

          // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
          participateButton.classList.add('processing');
          participateButton.disabled = true;

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
          if (!participateButton.getAttribute('data-original-text')) {
            participateButton.setAttribute('data-original-text', participateButton.textContent);
          }

          // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç
          participateButton.textContent = '–û–±—Ä–æ–±–∫–∞...';

          // –°–ø—Ä–æ–±–∞ —É—á–∞—Å—Ç—ñ
          this.participateInRaffle(raffleId, raffleType)
            .then((result) => {
              if (result.success) {
                console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}`);
              } else {
                console.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ: ${result.message}`);

                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
                this._resetButtonState(raffleId);

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                this._showToast(result.message, 'warning');
              }
            })
            .catch((error) => {
              console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:', error);

              // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
              this._resetButtonState(raffleId);

              // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
              this._showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ', 'error');
            });
        }
      });

      // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
          // –ü—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
          if (this.requestInProgress && Date.now() - this.lastRequestTime > 15000) {
            console.warn(
              '‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω requestInProgress –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É. –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω.'
            );
            this.requestInProgress = false;
          }

          // –Ø–∫—â–æ –¥–∞–≤–Ω–æ –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∏, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
          const now = Date.now();
          if (now - this.lastSyncTime > 30000) {
            setTimeout(() => {
              this.loadUserRaffles(true);
              this.lastSyncTime = now;
            }, 1000);
          }
        }
      });
    },

    /**
     * –ü–æ–∫–∞–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (info, warning, error, success)
     * @private
     */
    _showToast: function (message, type = 'info') {
      if (typeof window.showToast !== 'function') return;

      // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const messageKey = message + (type || '');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ—â–æ–¥–∞–≤–Ω–æ
      if (shownNotifications.has(messageKey)) {
        return;
      }

      // –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –ø–æ–∫–∞–∑–∞–Ω–∏—Ö
      shownNotifications.add(messageKey);

      // –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        shownNotifications.delete(messageKey);
      }, 5000);

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      window.showToast(message, type);
    },

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
     * @returns {string} –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
     * @private
     */
    _generateTransactionId: function () {
      return 'txn_' + Date.now() + '_' + Math.random().toString(36).substring(2, 11);
    },

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∂–µ—Ç–æ–Ω—ñ–≤
     * @returns {number} –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
     * @private
     */
    _getCurrentCoins: function () {
      // –ó DOM
      const userCoinsElement = document.getElementById('user-coins');
      if (userCoinsElement) {
        return parseInt(userCoinsElement.textContent) || 0;
      }

      // –ó –∫–µ—à—É
      if (this.lastKnownBalance !== null) {
        return this.lastKnownBalance;
      }

      // –ó localStorage
      return (
        parseInt(localStorage.getItem('userCoins') || localStorage.getItem('winix_coins')) || 0
      );
    },

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —É—á–∞—Å—Ç—å —É localStorage
     * @private
     */
    _saveParticipationToStorage: function () {
      try {
        const participationState = {
          raffles: Array.from(this.participatingRaffles),
          tickets: this.userRaffleTickets,
          lastUpdate: Date.now(),
          balance: this.lastKnownBalance,
          lastBalanceUpdateTime: this.lastBalanceUpdateTime,
        };

        localStorage.setItem('winix_participation_state', JSON.stringify(participationState));

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–µ–¥—ñ–π—Å–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        localStorage.setItem(
          'winix_invalid_raffles',
          JSON.stringify(Array.from(this.invalidRaffleIds))
        );
      } catch (error) {
        console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —É—á–∞—Å—Ç—å:', error);
      }
    },

    /**
     * –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç—ñ
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @private
     */
    _resetButtonState: function (raffleId) {
      const buttons = document.querySelectorAll(
        `.join-button[data-raffle-id="${raffleId}"], .mini-raffle-button[data-raffle-id="${raffleId}"]`
      );

      buttons.forEach((button) => {
        // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å –æ–±—Ä–æ–±–∫–∏
        button.classList.remove('processing');
        button.removeAttribute('data-processing');
        button.disabled = false;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—á–∞—Å—Ç—å
        const isParticipating = this.participatingRaffles.has(raffleId);

        if (isParticipating) {
          // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—å
          const ticketCount = this.userRaffleTickets[raffleId] || 1;
          const isMini = button.classList.contains('mini-raffle-button');

          button.textContent = isMini
            ? `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (${ticketCount})`
            : `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (—É –≤–∞—Å: ${ticketCount})`;

          button.classList.add('participating');
        } else {
          // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
          const originalText = button.getAttribute('data-original-text');

          if (originalText) {
            button.textContent = originalText;
          } else {
            const entryFee = button.getAttribute('data-entry-fee') || '1';
            button.textContent = button.classList.contains('mini-raffle-button')
              ? '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å'
              : `–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å –∑–∞ ${entryFee} –∂–µ—Ç–æ–Ω${parseInt(entryFee) > 1 ? '–∏' : ''}`;
          }

          button.classList.remove('participating');
        }
      });
    },

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ —É—á–∞—Å—Ç—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    loadUserRaffles: async function (forceRefresh = false) {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É
      if (this.syncInProgress && !forceRefresh) {
        console.log('‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
        return { success: false, message: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è' };
      }

      // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —á–∞—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
      const now = Date.now();
      if (!forceRefresh && now - this.lastSyncTime < 5000) {
        console.log('‚è≥ –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç');
        return { success: true, message: '–î–∞–Ω—ñ –Ω–µ—â–æ–¥–∞–≤–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ' };
      }

      this.syncInProgress = true;

      try {
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = this._getUserId();

        if (!userId) {
          console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
          return { success: false, message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API
        if (!window.WinixAPI || typeof window.WinixAPI.apiRequest !== 'function') {
          console.warn('‚ö†Ô∏è WinixAPI.apiRequest –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π');
          return { success: false, message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π' };
        }

        // –ó–∞–ø–∏—Ç –¥–æ API
        const response = await window.WinixAPI.apiRequest(
          `user/${userId}/raffles?nocache=${now}`,
          'GET',
          null,
          {
            suppressErrors: true,
            hideLoader: true,
            timeout: 10000,
            allowParallel: true,
            retries: 1,
          }
        );

        if (response && response.status === 'success' && Array.isArray(response.data)) {
          // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
          this.participatingRaffles.clear();
          this.userRaffleTickets = {};

          // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
          response.data.forEach((raffle) => {
            if (raffle.raffle_id) {
              this.participatingRaffles.add(raffle.raffle_id);
              this.userRaffleTickets[raffle.raffle_id] = raffle.entry_count || 1;
            }
          });

          console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É ${this.participatingRaffles.size} —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö`);

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
          this._saveParticipationToStorage();

          // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
          this.lastSyncTime = now;

          // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç—ñ
          this.updateParticipationButtons();

          return {
            success: true,
            data: {
              rafflesCount: this.participatingRaffles.size,
              raffles: Array.from(this.participatingRaffles),
            },
          };
        } else {
          console.warn(
            `‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: ${response?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`
          );
          return {
            success: false,
            message: response?.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö',
          };
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
        return {
          success: false,
          message: error.message || '–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —É—á–∞—Å—Ç—å',
        };
      } finally {
        this.syncInProgress = false;
      }
    },

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @private
     */
    _getUserId: function () {
      // –ó WinixRaffles
      if (
        window.WinixRaffles &&
        window.WinixRaffles.state &&
        window.WinixRaffles.state.telegramId
      ) {
        return window.WinixRaffles.state.telegramId;
      }

      // –ó WinixAPI
      if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
        return window.WinixAPI.getUserId();
      }

      // –ó WinixCore
      if (window.WinixCore && typeof window.WinixCore.getUserId === 'function') {
        return window.WinixCore.getUserId();
      }

      // –ó localStorage
      return localStorage.getItem('telegram_user_id');
    },

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ
     */
    updateParticipationButtons: function () {
      try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç—ñ
        const buttons = document.querySelectorAll('.join-button, .mini-raffle-button');
        if (!buttons.length) return;

        // –ö–µ—à—É—î–º–æ —Å—Ç–∞–Ω–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        const participatingCache = {};
        this.participatingRaffles.forEach((id) => {
          participatingCache[id] = true;
        });

        const invalidCache = {};
        this.invalidRaffleIds.forEach((id) => {
          invalidCache[id] = true;
        });

        // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É –∫–Ω–æ–ø–∫—É
        buttons.forEach((button) => {
          const raffleId = button.getAttribute('data-raffle-id');
          if (!raffleId) return;

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–Ω–æ–ø–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –æ–±—Ä–æ–±–∫–∏
          if (button.classList.contains('processing')) {
            return;
          }

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
          const isParticipating = participatingCache[raffleId];

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ–¥—ñ–π—Å–Ω–∏–π
          const isInvalid =
            invalidCache[raffleId] ||
            (window.WinixRaffles &&
              window.WinixRaffles.state &&
              window.WinixRaffles.state.invalidRaffleIds &&
              window.WinixRaffles.state.invalidRaffleIds.has(raffleId));

          // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
          if (isInvalid) {
            // –î–ª—è –Ω–µ–¥—ñ–π—Å–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            button.textContent = '–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ';
            button.classList.add('disabled');
            button.disabled = true;
          } else if (isParticipating) {
            // –î–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ —É—á–∞—Å—Ç—é
            const ticketCount = this.userRaffleTickets[raffleId] || 1;
            const isMini = button.classList.contains('mini-raffle-button');

            button.textContent = isMini
              ? `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (${ticketCount})`
              : `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (—É –≤–∞—Å: ${ticketCount})`;

            button.classList.add('participating');
            button.classList.remove('processing');
            button.disabled = false;

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª–µ—Ç—ñ–≤ —É –∞—Ç—Ä–∏–±—É—Ç—ñ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
            button.setAttribute('data-ticket-count', ticketCount);
          } else {
            // –î–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –±–µ–∑ —É—á–∞—Å—Ç—ñ
            const entryFee = button.getAttribute('data-entry-fee') || '1';

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç
            button.textContent = button.classList.contains('mini-raffle-button')
              ? '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å'
              : `–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å –∑–∞ ${entryFee} –∂–µ—Ç–æ–Ω${parseInt(entryFee) > 1 ? '–∏' : ''}`;

            button.classList.remove('participating', 'processing');
            button.disabled = false;

            // –í–∏–¥–∞–ª—è—î–º–æ –∞—Ç—Ä–∏–±—É—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±—ñ–ª–µ—Ç—ñ–≤
            button.removeAttribute('data-ticket-count');
          }
        });
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ:', error);
      }
    },

    /**
     * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleType - –¢–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É (daily/main)
     * @param {number} entryCount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª–µ—Ç—ñ–≤
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
     */
    participateInRaffle: async function (raffleId, raffleType, entryCount = 1) {
      console.log(`üéØ –°–ø—Ä–æ–±–∞ —É—á–∞—Å—Ç—ñ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${entryCount}`);

      // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
      if (this.requestInProgress) {
        return {
          success: false,
          message: '–ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É',
        };
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
      if (!raffleId || !window.isValidUUID(raffleId)) {
        return {
          success: false,
          message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É',
        };
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É
      if (
        this.invalidRaffleIds.has(raffleId) ||
        (window.WinixRaffles &&
          window.WinixRaffles.state &&
          window.WinixRaffles.state.invalidRaffleIds &&
          window.WinixRaffles.state.invalidRaffleIds.has(raffleId))
      ) {
        return {
          success: false,
          message: '–†–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
        };
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
      const now = Date.now();
      const lastRequestTime = this.lastRequestTimes[raffleId] || 0;
      if (now - lastRequestTime < this.MIN_REQUEST_INTERVAL) {
        return {
          success: false,
          message: '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é',
        };
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
      const coinsBalance = this._getCurrentCoins();
      let entryFee = 1;
      try {
        const button = document.querySelector(
          `.join-button[data-raffle-id="${raffleId}"], .mini-raffle-button[data-raffle-id="${raffleId}"]`
        );
        if (button) {
          entryFee = parseInt(button.getAttribute('data-entry-fee') || '1');
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ:', e);
      }

      if (coinsBalance < entryFee) {
        return {
          success: false,
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ: ${entryFee}, —É –≤–∞—Å: ${coinsBalance}`,
        };
      }

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É
      this.requestInProgress = true;
      this.lastParticipationTime = now;
      this.lastRequestTimes[raffleId] = now;

      // –ì–µ–Ω–µ—Ä—É—î–º–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
      const transactionId = this._generateTransactionId();

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
      const timeoutId = setTimeout(() => {
        console.warn(`‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}`);
        this.requestInProgress = false;
        this._resetButtonState(raffleId);
      }, this.REQUEST_TIMEOUT);

      try {
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof window.showLoading === 'function') {
          window.showLoading();
        }

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = this._getUserId();
        if (!userId) {
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à ID');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API
        if (!window.WinixAPI || typeof window.WinixAPI.apiRequest !== 'function') {
          throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        const alreadyParticipating =
          this.participatingRaffles && this.participatingRaffles.has(raffleId);

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
        const requestData = {
          raffle_id: raffleId,
          entry_count: entryCount,
          _transaction_id: transactionId,
          _timestamp: now,
          _current_tickets: this.userRaffleTickets[raffleId] || 0,
          _already_participating: alreadyParticipating,
          _current_balance: coinsBalance,
        };

        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É
        const endpoint = `user/${userId}/participate-raffle`;
        console.log(`üì° –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ —É—á–∞—Å—Ç—å (T:${transactionId.split('_')[1]})`);

        const response = await window.WinixAPI.apiRequest(endpoint, 'POST', requestData, {
          timeout: 15000,
          retries: 1,
          bypassThrottle: true,
        });

        // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        console.log(
          `üì© –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç —É—á–∞—Å—Ç—ñ:`,
          response.status === 'success' ? '–£—Å–ø—ñ—Ö' : `–ü–æ–º–∏–ª–∫–∞: ${response.message}`
        );

        if (response.status === 'success') {
          // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª–µ—Ç—ñ–≤
          let newTicketCount = 1;
          if (response.data && typeof response.data.total_entries === 'number') {
            newTicketCount = response.data.total_entries;
          } else {
            const currentTickets = this.userRaffleTickets[raffleId] || 0;
            newTicketCount = currentTickets + 1;
          }

          // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
          this.participatingRaffles.add(raffleId);
          this.userRaffleTickets[raffleId] = newTicketCount;

          // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
          if (response.data && typeof response.data.new_coins_balance === 'number') {
            const oldBalance = this._getCurrentCoins();
            const newBalance = response.data.new_coins_balance;

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            const transactionRecord = {
              type: 'participation',
              raffleId: raffleId,
              oldBalance: oldBalance,
              newBalance: newBalance,
              timestamp: Date.now(),
              confirmed: true,
              transactionId: transactionId,
              ticketCount: newTicketCount,
            };

            localStorage.setItem('winix_last_transaction', JSON.stringify(transactionRecord));

            // –û–Ω–æ–≤–ª—é—î–º–æ DOM
            const userCoinsElement = document.getElementById('user-coins');
            if (userCoinsElement) {
              userCoinsElement.classList.add('decreasing');
              userCoinsElement.textContent = newBalance;

              setTimeout(() => {
                userCoinsElement.classList.remove('decreasing');
              }, 1000);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
            localStorage.setItem('userCoins', newBalance.toString());
            localStorage.setItem('winix_coins', newBalance.toString());
            localStorage.setItem('winix_balance_update_time', Date.now().toString());

            // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –±–∞–ª–∞–Ω—Å
            this.lastKnownBalance = newBalance;
            this.lastBalanceUpdateTime = Date.now();

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
            document.dispatchEvent(
              new CustomEvent('balance-updated', {
                detail: {
                  oldBalance: oldBalance,
                  newBalance: newBalance,
                  source: 'participation.js',
                },
              })
            );
          }

          // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
          const buttons = document.querySelectorAll(
            `.join-button[data-raffle-id="${raffleId}"], .mini-raffle-button[data-raffle-id="${raffleId}"]`
          );
          buttons.forEach((button) => {
            button.classList.remove('processing');
            button.disabled = false;
            button.classList.add('participating');

            const isMini = button.classList.contains('mini-raffle-button');
            button.textContent = isMini
              ? `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (${newTicketCount})`
              : `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (—É –≤–∞—Å: ${newTicketCount})`;
          });

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
          this._saveParticipationToStorage();

          // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
          if (response.data && typeof response.data.participants_count === 'number') {
            const participantsCount = response.data.participants_count;
            const participantsElements = document.querySelectorAll(
              `.raffle-card[data-raffle-id="${raffleId}"] .participants-count .count, ` +
                `.main-raffle[data-raffle-id="${raffleId}"] .participants-info .participants-count, ` +
                `.main-raffle .participants-info .participants-count`
            );

            participantsElements.forEach((element) => {
              const currentCount = parseInt(element.textContent.replace(/\s+/g, '')) || 0;
              if (currentCount !== participantsCount) {
                element.textContent = participantsCount;
                element.classList.add('updated');
                setTimeout(() => {
                  element.classList.remove('updated');
                }, 1000);
              }
            });
          }

          // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —É—á–∞—Å—Ç—å
          document.dispatchEvent(
            new CustomEvent('raffle-participation', {
              detail: {
                successful: true,
                raffleId: raffleId,
                ticketCount: newTicketCount,
              },
            })
          );

          // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          this._showToast('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ', 'success');

          return {
            success: true,
            data: response.data,
            message: '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
          };
        } else {
          // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
          if (response.message && response.message.includes('–∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤')) {
            return {
              success: false,
              message: '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥',
            };
          } else if (
            response.message &&
            (response.message.includes('raffle_not_found') ||
              response.message.includes('–∑–∞–≤–µ—Ä—à–µ–Ω–æ'))
          ) {
            // –î–æ–¥–∞—î–º–æ –¥–æ –Ω–µ–¥—ñ–π—Å–Ω–∏—Ö
            this.addInvalidRaffleId(raffleId);

            return {
              success: false,
              message: '–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
            };
          } else {
            return {
              success: false,
              message: response.message || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
            };
          }
        }
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}:`, error);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        if (
          error.message &&
          (error.message.includes('–∑–∞–≤–µ—Ä—à–µ–Ω–æ') ||
            error.message.includes('not found') ||
            error.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'))
        ) {
          this.addInvalidRaffleId(raffleId);
        }

        return {
          success: false,
          message: error.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
        };
      } finally {
        // –ó–∞–≤–µ—Ä—à–∞–ª—å–Ω—ñ –¥—ñ—ó
        clearTimeout(timeoutId);
        this.requestInProgress = false;

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof window.hideLoading === 'function') {
          window.hideLoading();
        }

        // –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
        setTimeout(() => {
          this.loadUserRaffles(true).catch((e) => {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', e);
          });
        }, 5000);
      }
    },

    /**
     * –î–æ–¥–∞—î —Ä–æ–∑—ñ–≥—Ä–∞—à –¥–æ —Å–ø–∏—Å–∫—É –Ω–µ–¥—ñ–π—Å–Ω–∏—Ö
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    addInvalidRaffleId: function (raffleId) {
      if (!raffleId) return;

      this.invalidRaffleIds.add(raffleId);

      // –î–æ–¥–∞—î–º–æ –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
      if (
        window.WinixRaffles &&
        window.WinixRaffles.state &&
        window.WinixRaffles.state.invalidRaffleIds
      ) {
        window.WinixRaffles.state.invalidRaffleIds.add(raffleId);
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
      try {
        localStorage.setItem(
          'winix_invalid_raffles',
          JSON.stringify(Array.from(this.invalidRaffleIds))
        );
      } catch (e) {
        console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:', e);
      }

      console.log(`‚ö†Ô∏è –î–æ–¥–∞–Ω–æ —Ä–æ–∑—ñ–≥—Ä–∞—à ${raffleId} –¥–æ —Å–ø–∏—Å–∫—É –Ω–µ–¥—ñ–π—Å–Ω–∏—Ö`);

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ
      this.updateParticipationButtons();
    },

    /**
     * –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –º–æ–¥—É–ª—è
     */
    resetState: function () {
      console.log('üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –º–æ–¥—É–ª—è —É—á–∞—Å—Ç—ñ...');

      // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
      this.requestInProgress = false;
      this.syncInProgress = false;

      // –û—á–∏—â–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å
      this.lastRequestTimes = {};

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ
      this.updateParticipationButtons();

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      if (typeof window.hideLoading === 'function') {
        window.hideLoading();
      }

      console.log('‚úÖ –°—Ç–∞–Ω –º–æ–¥—É–ª—è —É—á–∞—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ');
      return true;
    },
  };

  // –î–æ–¥–∞—î–º–æ –º–æ–¥—É–ª—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  window.WinixRaffles.participation = participation;

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  document.addEventListener('DOMContentLoaded', function () {
    if (window.WinixRaffles.state.isInitialized) {
      participation.init();
    } else {
      document.addEventListener('winix-raffles-initialized', function () {
        participation.init();
      });
    }
  });

  // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó
  const styleElement = document.createElement('style');
  styleElement.textContent = `
        @keyframes count-updated {
            0% { transform: scale(1); color: inherit; }
            50% { transform: scale(1.2); color: #4CAF50; }
            100% { transform: scale(1); color: inherit; }
        }
        
        .participants-count.updated, .count.updated {
            animation: count-updated 1s ease-out;
        }
        
        @keyframes decrease-coins {
            0% { color: #FF5722; transform: scale(1.1); text-shadow: 0 0 5px rgba(255, 87, 34, 0.7); }
            50% { color: #FF5722; transform: scale(1.15); text-shadow: 0 0 10px rgba(255, 87, 34, 0.5); }
            100% { color: inherit; transform: scale(1); }
        }
        
        @keyframes increase-coins {
            0% { color: #4CAF50; transform: scale(1.1); text-shadow: 0 0 5px rgba(76, 175, 80, 0.7); }
            50% { color: #4CAF50; transform: scale(1.15); text-shadow: 0 0 10px rgba(76, 175, 80, 0.5); }
            100% { color: inherit; transform: scale(1); }
        }
        
        #user-coins.decreasing {
            animation: decrease-coins 0.8s ease-out;
        }
        
        #user-coins.increasing {
            animation: increase-coins 0.8s ease-out;
        }
    `;
  document.head.appendChild(styleElement);

  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
  window.addEventListener('error', function (event) {
    if (participation) {
      console.warn('‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —É—á–∞—Å—Ç—ñ...');
      participation.resetState();
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ Promise
  window.addEventListener('unhandledrejection', function (event) {
    if (participation) {
      console.warn('‚ö†Ô∏è –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ Promise –ø–æ–º–∏–ª–∫–∞. –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —É—á–∞—Å—Ç—ñ...');
      participation.resetState();
    }
  });

  console.log('‚úÖ –ú–æ–¥—É–ª—å participation.js —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
})();
