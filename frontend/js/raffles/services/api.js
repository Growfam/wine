/**
 * api.js - –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * –î–æ–ø–æ–≤–Ω—é—î –æ—Å–Ω–æ–≤–Ω–∏–π API —Å–∏—Å—Ç–µ–º–∏ –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—é—á–∏ —ñ—Å–Ω—É—é—á—ñ
 */

import WinixRaffles from '../globals.js';

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è API
const determineBaseUrl = () => {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ñ—ñ–≥—É
    if (WinixRaffles && WinixRaffles.config && WinixRaffles.config.apiBaseUrl) {
        return WinixRaffles.config.apiBaseUrl;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥
    if (window.WinixConfig && window.WinixConfig.apiBaseUrl) {
        return window.WinixConfig.apiBaseUrl;
    }

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    const hostname = window.location.hostname;
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
        // –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä—Ç 8080
        return `http://${hostname}:8080/api`;
    } else {
        // –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
        return 'https://winixbot.com/api';
    }
};

// –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è API-–∑–∞–ø–∏—Ç—ñ–≤
const RAFFLES_API_BASE_URL = determineBaseUrl();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
const REQUEST_THROTTLE = {
    '/raffles-history': 15000,      // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    '/participate-raffle': 3000,    // 3 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
    'default': 2000                 // 2 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
const mainAPI = window.WinixAPI || {};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É API
 * @param {string} funcName - –ù–∞–∑–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
 * @returns {boolean} True, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î
 */
function hasMainAPIFunction(funcName) {
    return mainAPI && typeof mainAPI[funcName] === 'function';
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
 */
export function getUserId() {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (hasMainAPIFunction('getUserId')) {
        return mainAPI.getUserId();
    }

    // –†–µ–∑–µ—Ä–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            try {
                if (window.Telegram.WebApp.initDataUnsafe &&
                    window.Telegram.WebApp.initDataUnsafe.user &&
                    window.Telegram.WebApp.initDataUnsafe.user.id) {

                    const telegramId = String(window.Telegram.WebApp.initDataUnsafe.user.id);
                    return telegramId;
                }
            } catch (e) {
                console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
        try {
            const localId = localStorage.getItem('telegram_user_id');
            if (localId) return localId;
        } catch (e) {
            console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage:", e);
        }

        return null;
    } catch (error) {
        console.error("üîå Raffles API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        return null;
    }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 * @returns {string|null} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ null, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
 */
export function getAuthToken() {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (hasMainAPIFunction('getAuthToken')) {
        return mainAPI.getAuthToken();
    }

    // –†–µ–∑–µ—Ä–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
    try {
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ localStorage
        try {
            const token = localStorage.getItem('auth_token');
            if (token && typeof token === 'string' && token.length > 5) {
                return token;
            }
        } catch (e) {
            console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ localStorage:", e);
        }

        return null;
    } catch (error) {
        console.error("üîå Raffles API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
        return null;
    }
}

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
 * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
 * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
 */
export async function apiRequest(endpoint, method = 'GET', data = null, options = {}) {
    // –Ø–∫—â–æ endpoint –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "/", –≤–∏–¥–∞–ª—è—î–º–æ —Ü–µ–π —Å–∏–º–≤–æ–ª
    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

    // –Ø–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π API –¥–æ—Å—Ç—É–ø–Ω–∏–π —ñ –æ–ø—Ü—ñ—è useMainAPI –Ω–µ false, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    if (hasMainAPIFunction('apiRequest') && options.useMainAPI !== false) {
        try {
            return await mainAPI.apiRequest(cleanEndpoint, method, data, options);
        } catch (mainApiError) {
            console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É API, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π:", mainApiError);
            // –Ø–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π API –≤–∏–¥–∞–≤ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—à–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
        }
    }

    // –†–µ–∑–µ—Ä–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è API –∑–∞–ø–∏—Ç—É
    try {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–∞–¥–µ—Ä–∞
        if (!options.hideLoader && WinixRaffles && WinixRaffles.loader) {
            WinixRaffles.loader.show(options.loaderMessage || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...', `raffles-api-${cleanEndpoint}`);
        }

        // –§–æ—Ä–º—É—î–º–æ URL
        const timestamp = Date.now();
        const hasQuery = cleanEndpoint.includes('?');
        const url = `${RAFFLES_API_BASE_URL}/${cleanEndpoint}${hasQuery ? '&' : '?'}t=${timestamp}`;

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        const authToken = getAuthToken();

        // –ì–æ—Ç—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = {
            'Content-Type': 'application/json',
            ...(options.headers || {})
        };

        // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
        if (userId) {
            headers['X-Telegram-User-Id'] = userId;
        }

        if (authToken) {
            headers['Authorization'] = authToken.startsWith('Bearer ') ?
                authToken : `Bearer ${authToken}`;
        }

        // –ì–æ—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        const requestOptions = {
            method: method,
            headers: headers,
            mode: 'cors',
            cache: 'no-cache',
            credentials: 'same-origin',
            redirect: 'follow',
            referrerPolicy: 'no-referrer'
        };

        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST, PUT, PATCH
        if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
            requestOptions.body = JSON.stringify(data);
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —Ç–∞–π–º–∞—É—Ç—É
        const controller = new AbortController();
        requestOptions.signal = controller.signal;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç
        const timeout = options.timeout || 10000;
        const timeoutId = setTimeout(() => controller.abort(), timeout);

        try {
            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const response = await fetch(url, requestOptions);

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            clearTimeout(timeoutId);

            // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
            }

            // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            const jsonData = await response.json();

            return jsonData;
        } catch (error) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
            if (error.name === 'AbortError') {
                throw new Error('–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ');
            }

            throw error;
        } finally {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && WinixRaffles && WinixRaffles.loader) {
                WinixRaffles.loader.hide(`raffles-api-${cleanEndpoint}`);
            }
        }
    } catch (error) {
        console.error(`üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error);

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (!options.hideLoader && WinixRaffles && WinixRaffles.loader) {
            WinixRaffles.loader.hide(`raffles-api-${cleanEndpoint}`);
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É API
        if (WinixRaffles && WinixRaffles.events) {
            WinixRaffles.events.emit('api-error', {
                error: error,
                endpoint: endpoint,
                method: method
            });
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é
        return {
            status: 'error',
            message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
            source: error.source || 'raffles_api'
        };
    }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
 * @returns {Promise<Object>} –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function getUserData(forceRefresh = false) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (hasMainAPIFunction('getUserData')) {
        return mainAPI.getUserData(forceRefresh);
    }

    try {
        const userId = getUserId();
        if (!userId) {
            return {
                status: 'error',
                message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            };
        }

        return await apiRequest(`user/${userId}`, 'GET', null, {
            useMainAPI: false, // –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π API –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó
            bypassCache: forceRefresh,
            cacheTTL: 5 * 60 * 1000 // 5 —Ö–≤–∏–ª–∏–Ω
        });
    } catch (error) {
        console.error("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        return {
            status: 'error',
            message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' + error.message
        };
    }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
 * @returns {Promise<Object>} –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
export async function getBalance(forceRefresh = false) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (hasMainAPIFunction('getBalance')) {
        return mainAPI.getBalance(forceRefresh);
    }

    try {
        const userId = getUserId();
        if (!userId) {
            return {
                status: 'error',
                message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            };
        }

        return await apiRequest(`user/${userId}/balance`, 'GET', null, {
            useMainAPI: false, // –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π API –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó
            bypassCache: forceRefresh
        });
    } catch (error) {
        console.error("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        return {
            status: 'error',
            message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: ' + error.message
        };
    }
}

// –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É API

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */
export async function getActiveRaffles(forceRefresh = false) {
    try {
        const response = await apiRequest('raffles', 'GET', null, {
            timeout: 15000,
            loaderMessage: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...'
        });

        if (response && response.status === 'success') {
            return Array.isArray(response.data) ? response.data : [];
        }

        throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
        return [];
    }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * @param {Object} filters - –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */
export async function getRafflesHistory(filters = {}) {
    try {
        const userId = getUserId();
        if (!userId) {
            throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        let queryParams = '';
        if (filters.type && filters.type !== 'all') {
            queryParams += `&type=${filters.type}`;
        }
        if (filters.status && filters.status !== 'all') {
            queryParams += `&status=${filters.status}`;
        }
        if (filters.period && filters.period !== 'all') {
            queryParams += `&period=${filters.period}`;
        }

        // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–æ URL, —è–∫—â–æ –≤–æ–Ω–∏ —î
        const url = queryParams
            ? `user/${userId}/raffles-history?${queryParams.substring(1)}`
            : `user/${userId}/raffles-history`;

        const response = await apiRequest(url, 'GET', null, {
            timeout: 15000,
            loaderMessage: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...'
        });

        if (response && response.status === 'success') {
            return Array.isArray(response.data) ? response.data : [];
        }

        return [];
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
        return [];
    }
}

/**
 * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
 * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
 * @param {number} entryCount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
 */
export async function participateInRaffle(raffleId, entryCount = 1) {
    try {
        const userId = getUserId();
        if (!userId) {
            throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å entryCount
        if (isNaN(entryCount) || entryCount <= 0) {
            throw new Error('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å');
        }

        const response = await apiRequest(`user/${userId}/participate-raffle`, 'POST', {
            raffle_id: raffleId,
            entry_count: entryCount
        }, {
            timeout: 15000,
            loaderMessage: '–ë–µ—Ä–µ–º–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ...'
        });

        if (response && response.status === 'success') {
            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (hasMainAPIFunction('getBalance')) {
                await mainAPI.getBalance(true);
            }

            return {
                status: 'success',
                message: response.data?.message || '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                data: response.data
            };
        }

        throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ');
    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}:`, error);
        return {
            status: 'error',
            message: error.message || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ'
        };
    }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
 */
export async function claimNewbieBonus() {
    try {
        const userId = getUserId();
        if (!userId) {
            throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        const response = await apiRequest(`user/${userId}/claim-newbie-bonus`, 'POST', null, {
            timeout: 10000,
            loaderMessage: '–û—Ç—Ä–∏–º—É—î–º–æ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞...'
        });

        if (response && (response.status === 'success' || response.status === 'already_claimed')) {
            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (hasMainAPIFunction('getBalance')) {
                await mainAPI.getBalance(true);
            }

            return {
                status: response.status,
                message: response.message || '–ë–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ',
                data: response.data
            };
        }

        throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞:', error);
        return {
            status: 'error',
            message: error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞'
        };
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑ API —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –¥–ª—è –º–æ–¥—É–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
const rafflesAPI = {
    // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    apiRequest,
    getUserId,
    getAuthToken,
    getUserData,
    getBalance,

    // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    getActiveRaffles,
    getRafflesHistory,
    participateInRaffle,
    claimNewbieBonus,

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    config: {
        baseUrl: RAFFLES_API_BASE_URL,
        throttle: REQUEST_THROTTLE
    },

    // –ú–µ—Ç–∞–¥–∞–Ω—ñ
    _version: '1.0.0',
    _type: 'raffles'
};

// –†–æ–∑—à–∏—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
if (window.WinixAPI) {
    // –î–æ–¥–∞—î–º–æ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API –≤—Å—ñ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∏—Ö —Ç–∞–º –Ω–µ–º–∞—î
    Object.keys(rafflesAPI).forEach(key => {
        if (!window.WinixAPI[key] && key !== 'apiRequest' && key !== 'getUserId' && key !== 'getAuthToken') {
            window.WinixAPI[key] = rafflesAPI[key];
        }
    });

    // –î–æ–¥–∞—î–º–æ –æ–±'—î–∫—Ç raffles –≤ –æ—Å–Ω–æ–≤–Ω–∏–π API
    window.WinixAPI.raffles = rafflesAPI;

    console.log("üîå Raffles API: –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–π API —Å–∏—Å—Ç–µ–º–∏");
} else {
    // –Ø–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π API –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    window.WinixRafflesAPI = rafflesAPI;
    console.log("üîå Raffles API: –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–∫—Ä–µ–º–∏–π API –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (–æ—Å–Ω–æ–≤–Ω–∏–π API –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)");
}

// –î–æ–¥–∞—î–º–æ API –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (WinixRaffles) {
    WinixRaffles.api = rafflesAPI;
}

console.log("üîå Raffles API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ");

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
export default rafflesAPI;