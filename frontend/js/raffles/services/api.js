/**
 * raffles-api.js - –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX
 * –ü—Ä–∞—Ü—é—î –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º WinixAPI, –∞–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ª–∏—à–µ –∑–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ IIFE –¥–ª—è —ñ–∑–æ–ª—è—Ü—ñ—ó –∑–º—ñ–Ω–Ω–∏—Ö
(function() {
    'use strict';

    console.log("üé≤ Raffles API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    const API_BASE_URL = '/api';

    // –î–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    let _token = null;
    let _userId = null;
    // –í–∏–¥–∞–ª–µ–Ω–∞ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –∑–º—ñ–Ω–Ω–∞ _userData

    // –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    let _cachedResponses = {};
    let _cacheTTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    let _lastRequestTime = 0;
    let _requestsInProgress = {};

    // –û–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    const REQUEST_THROTTLE = {
        '/raffles-history': 15000,      // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        '/participate-raffle': 3000,    // 3 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
        'default': 2000                 // 2 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö
    };

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    const PARALLEL_REQUESTS_LIMIT = 5;

    // –¢–∞–π–º–∞—É—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
    let _requestTimeouts = {};

    // –†–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    let _debugMode = false;

    // ======== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ========

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @returns {number} - –ß–∞—Å –æ–±–º–µ–∂–µ–Ω–Ω—è –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    function getThrottleTime(endpoint) {
        for (const key in REQUEST_THROTTLE) {
            if (endpoint.includes(key)) {
                return REQUEST_THROTTLE[key];
            }
        }
        return REQUEST_THROTTLE.default;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {string|null} - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function getUserId() {
        // 1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π ID, —è–∫—â–æ –≤—ñ–Ω —î
        if (_userId) {
            return _userId;
        }

        // 2. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —ñ–∑ —Å—Ç–∞—Ä–æ–≥–æ API
        if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
            const legacyId = window.WinixAPI.getUserId();
            if (legacyId) {
                _userId = legacyId;
                return _userId;
            }
        }

        // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            try {
                if (window.Telegram.WebApp.initDataUnsafe &&
                    window.Telegram.WebApp.initDataUnsafe.user &&
                    window.Telegram.WebApp.initDataUnsafe.user.id) {

                    _userId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
                    return _userId;
                }
            } catch (e) {
                console.warn("üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
            }
        }

        // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
        try {
            const localId = localStorage.getItem('telegram_user_id');
            if (localId) {
                _userId = localId;
                return _userId;
            }
        } catch (e) {}

        // ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        return null;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     * @returns {string|null} - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    function getAuthToken() {
        // 1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω, —è–∫—â–æ –≤—ñ–Ω —î
        if (_token) {
            return _token;
        }

        // 2. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ localStorage
        try {
            _token = localStorage.getItem('auth_token');
            return _token;
        } catch (e) {}

        return null;
    }

    /**
     * –ö–µ—à—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
     * @param {string} key - –ö–ª—é—á –∫–µ—à—É
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
     */
    function cacheResponse(key, data) {
        _cachedResponses[key] = {
            data: data,
            timestamp: Date.now()
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
     * @param {string} key - –ö–ª—é—á –∫–µ—à—É
     * @returns {Object|null} - –ö–µ—à–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ null
     */
    function getCachedResponse(key) {
        const cached = _cachedResponses[key];
        if (cached && (Date.now() - cached.timestamp) < _cacheTTL) {
            if (_debugMode) {
                console.log(`üé≤ Raffles API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è ${key}`);
            }
            return {
                ...cached.data,
                source: 'cache'
            };
        }
        return null;
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—É –¥–ª—è –∑–∞–ø–∏—Ç—É
     * @param {string} requestKey - –ö–ª—é—á –∑–∞–ø–∏—Ç—É
     * @param {AbortController} controller - –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
     * @param {number} timeout - –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    function setRequestTimeout(requestKey, controller, timeout) {
        if (_requestTimeouts[requestKey]) {
            clearTimeout(_requestTimeouts[requestKey]);
        }

        _requestTimeouts[requestKey] = setTimeout(() => {
            controller.abort();
            delete _requestTimeouts[requestKey];
            delete _requestsInProgress[requestKey];
            console.warn(`üé≤ Raffles API: –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É ${requestKey}`);
        }, timeout);
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—É –∑–∞–ø–∏—Ç—É
     * @param {string} requestKey - –ö–ª—é—á –∑–∞–ø–∏—Ç—É
     */
    function clearRequestTimeout(requestKey) {
        if (_requestTimeouts[requestKey]) {
            clearTimeout(_requestTimeouts[requestKey]);
            delete _requestTimeouts[requestKey];
        }
    }

    // ======== –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø API –ó–ê–ü–ò–¢–£ ========

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤ –¥–æ —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function apiRequest(endpoint, method = 'GET', data = null, options = {}) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
            if (!endpoint) {
                return Promise.reject({
                    status: 'error',
                    message: '–ï–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–µ –≤–∫–∞–∑–∞–Ω–æ',
                    source: 'validation'
                });
            }

            // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –º–µ—Ç–æ–¥
            method = method.toUpperCase();

            // –§–æ—Ä–º—É—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
            const requestKey = `${method}:${endpoint}:${JSON.stringify(data || {})}`;
            // –í–∏–¥–∞–ª–µ–Ω–∞ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –∑–º—ñ–Ω–Ω–∞ requestEndpointKey

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
            const now = Date.now();
            const timeSinceLastRequest = now - _lastRequestTime;
            const throttleTime = getThrottleTime(endpoint);

            if (timeSinceLastRequest < throttleTime && !options.ignoreThrottle) {
                console.warn(`üé≤ Raffles API: –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–æ ${endpoint}, –º–∏–Ω—É–ª–æ ${timeSinceLastRequest}ms`);

                // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if (endpoint.includes('/raffles-history')) {
                    console.log("üé≤ Raffles API: –ü–æ–≤–µ—Ä—Ç–∞—é –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –¥–ª—è –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ–≥–æ –∑–∞–ø–∏—Ç—É —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");
                    return Promise.resolve({
                        status: 'success',
                        data: [],
                        source: 'throttle_fallback'
                    });
                }

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                return Promise.reject({
                    status: 'error',
                    source: 'throttle',
                    message: "–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç",
                    retryAfter: throttleTime - timeSinceLastRequest,
                    endpoint: endpoint
                });
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
            _lastRequestTime = now;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤
            if (method === 'GET' && !options.bypassCache) {
                const cachedResponse = getCachedResponse(requestKey);
                if (cachedResponse) {
                    return cachedResponse;
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ–π –∑–∞–ø–∏—Ç —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            if (_requestsInProgress[requestKey] && !options.allowParallel) {
                console.warn(`üé≤ Raffles API: –î—É–±–ª—ñ–∫–∞—Ç –∑–∞–ø–∏—Ç—É –≤–∏—è–≤–ª–µ–Ω–æ: ${endpoint}`);
                return Promise.reject({
                    status: 'error',
                    source: 'duplicate',
                    message: "–ó–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è",
                    endpoint: endpoint
                });
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            const activeRequestsCount = Object.keys(_requestsInProgress).length;
            if (activeRequestsCount >= PARALLEL_REQUESTS_LIMIT && !options.allowParallel) {
                console.warn(`üé≤ Raffles API: –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ (${PARALLEL_REQUESTS_LIMIT})`);
                return Promise.reject({
                    status: 'error',
                    source: 'parallel_limit',
                    message: "–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤",
                    endpoint: endpoint
                });
            }

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–ø–∏—Ç —è–∫ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π
            _requestsInProgress[requestKey] = true;

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();

            // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            const authToken = getAuthToken();

            // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
            const timestamp = Date.now();
            const hasQuery = endpoint.includes('?');
            const url = `${API_BASE_URL}${endpoint}${hasQuery ? '&' : '?'}t=${timestamp}`;

            // –ì–æ—Ç—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = {
                'Content-Type': 'application/json',
                ...options.headers
            };

            // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
            if (userId) {
                headers['X-Telegram-User-Id'] = userId;
            }

            if (authToken) {
                headers['Authorization'] = authToken.startsWith('Bearer ') ?
                    authToken : `Bearer ${authToken}`;
            }

            // –ì–æ—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: headers,
                mode: 'cors',
                cache: 'no-cache',
                credentials: 'same-origin',
                redirect: 'follow',
                referrerPolicy: 'no-referrer'
            };

            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST, PUT, PATCH
            if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
                requestOptions.body = JSON.stringify(data);
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —Ç–∞–π–º–∞—É—Ç—É
            const controller = new AbortController();
            requestOptions.signal = controller.signal;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç
            const timeout = options.timeout || 10000;
            setRequestTimeout(requestKey, controller, timeout);

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.showLoading === 'function') {
                    window.showLoading('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...');
                }
            }

            try {
                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                const response = await fetch(url, requestOptions);

                // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                if (!response.ok) {
                    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞
                    if (endpoint.includes('/raffles-history') && response.status >= 500) {
                        console.warn(`üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—é –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤`);
                        return {
                            status: 'success',
                            data: [],
                            source: 'error_fallback'
                        };
                    }

                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
                }

                // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                const jsonData = await response.json();

                // –ö–µ—à—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤
                if (method === 'GET') {
                    cacheResponse(requestKey, jsonData);
                }

                return jsonData;
            } catch (error) {
                // –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if (endpoint.includes('/raffles-history')) {
                    console.warn(`üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: ${error.message}, –ø–æ–≤–µ—Ä—Ç–∞—é –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤`);
                    return {
                        status: 'success',
                        data: [],
                        source: 'error_fallback'
                    };
                }

                throw error;
            } finally {
                // –ó–Ω—ñ–º–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç —ñ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                clearRequestTimeout(requestKey);
                delete _requestsInProgress[requestKey];

                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (!options.hideLoader) {
                    if (typeof window.hideLoading === 'function') {
                        window.hideLoading();
                    }
                }
            }
        } catch (error) {
            console.error(`üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message);

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É API
            document.dispatchEvent(new CustomEvent('raffles-api-error', {
                detail: {
                    error: error,
                    endpoint: endpoint,
                    method: method
                }
            }));

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é
            return {
                status: 'error',
                message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                source: error.source || 'unknown'
            };
        }
    }

    // ======== –°–ü–ï–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ó–Ü–ì–†–ê–®–Ü–í ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    async function getRaffles(params = {}) {
        try {
            const queryParams = new URLSearchParams();

            // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            if (params.page) queryParams.append('page', params.page);
            if (params.limit) queryParams.append('limit', params.limit);
            if (params.status) queryParams.append('status', params.status);

            const endpoint = `/raffles${queryParams.toString() ? '?' + queryParams.toString() : ''}`;

            return await apiRequest(endpoint, 'GET', null, {
                timeout: 8000,
                bypassCache: params.forceRefresh
            });
        } catch (error) {
            console.error("üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);
            return {
                status: 'error',
                message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤'
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @returns {Promise<Object>} - –î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function getRaffleDetails(raffleId) {
        try {
            if (!raffleId) {
                throw new Error("ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ");
            }

            return await apiRequest(`/raffles/${raffleId}`, 'GET', null, {
                timeout: 8000
            });
        } catch (error) {
            console.error(`üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            return {
                status: 'error',
                message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É'
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} - –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    async function getRafflesHistory(params = {}) {
        try {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            const queryParams = new URLSearchParams();

            // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            if (params.page) queryParams.append('page', params.page);
            if (params.limit) queryParams.append('limit', params.limit);
            if (params.status) queryParams.append('status', params.status);

            const endpoint = `/raffles-history${queryParams.toString() ? '?' + queryParams.toString() : ''}`;

            return await apiRequest(endpoint, 'GET', null, {
                timeout: 10000,
                bypassCache: params.forceRefresh
            });
        } catch (error) {
            console.error("üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);
            return {
                status: 'success',  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º –º–∞—Å–∏–≤–æ–º –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                data: [],
                source: 'error_handler'
            };
        }
    }

    /**
     * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {Object} participationData - –î–∞–Ω—ñ –¥–ª—è —É—á–∞—Å—Ç—ñ
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
     */
    async function participateInRaffle(raffleId, participationData = {}) {
        try {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            if (!raffleId) {
                throw new Error("ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ");
            }

            // –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —É—á–∞—Å—Ç—ñ
            const data = {
                telegram_id: userId,
                ...participationData
            };

            return await apiRequest(`/participate-raffle/${raffleId}`, 'POST', data, {
                timeout: 8000
            });
        } catch (error) {
            console.error(`üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}:`, error);
            return {
                status: 'error',
                message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ'
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
     */
    async function getRaffleWinners(raffleId) {
        try {
            if (!raffleId) {
                throw new Error("ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ");
            }

            return await apiRequest(`/raffles/${raffleId}/winners`, 'GET', null, {
                timeout: 8000
            });
        } catch (error) {
            console.error(`üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            return {
                status: 'error',
                message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É'
            };
        }
    }

    // ======== –°–õ–£–ñ–ë–û–í–Ü –§–£–ù–ö–¶–Ü–á ========

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Object} config - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
     * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    async function init(config = {}) {
        try {
            console.log("üé≤ Raffles API: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó");

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            if (typeof config.debugMode !== 'undefined') {
                _debugMode = config.debugMode;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª
            _userId = getUserId();

            if (!_userId) {
                console.warn("üé≤ Raffles API: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à—ñ –¥–∂–µ—Ä–µ–ª–∞");

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ä–∏–π API
                if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
                    _userId = window.WinixAPI.getUserId();
                    if (_userId) {
                        console.log(`üé≤ Raffles API: –û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ WinixAPI: ${_userId}`);
                    }
                }

                // –Ø–∫—â–æ ID –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º–æ –∑ localStorage
                if (!_userId) {
                    _userId = localStorage.getItem('telegram_user_id');
                    if (_userId) {
                        console.log(`üé≤ Raffles API: –û—Ç—Ä–∏–º–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage: ${_userId}`);
                    }
                }
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            _token = getAuthToken();

            // –í–∏–∫–æ–Ω—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
            try {
                const response = await apiRequest('/raffles', 'GET', null, {
                    timeout: 5000,
                    hideLoader: true,
                });

                if (response.status === 'success') {
                    console.log("üé≤ Raffles API: –£—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

                    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                    document.dispatchEvent(new CustomEvent('raffles-api-ready', {
                        detail: { success: true }
                    }));

                    return true;
                } else {
                    console.warn("üé≤ Raffles API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –∞–ª–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–µ–≤–¥–∞–ª–∏–π:", response.message);

                    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —á–∞—Å—Ç–∫–æ–≤—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                    document.dispatchEvent(new CustomEvent('raffles-api-ready', {
                        detail: { success: true, warning: true, message: response.message }
                    }));

                    return true; // –í—Å–µ –æ–¥–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö, –±–æ API –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
                }
            } catch (error) {
                console.warn("üé≤ Raffles API: –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–µ–≤–¥–∞–ª–∏–π, –∞–ª–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–∞:", error.message);

                // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
                document.dispatchEvent(new CustomEvent('raffles-api-ready', {
                    detail: { success: true, warning: true, message: error.message }
                }));

                return true; // –í—Å–µ –æ–¥–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞
            }
        } catch (error) {
            console.error("üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", error);

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            document.dispatchEvent(new CustomEvent('raffles-api-error', {
                detail: { error: error, message: '–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤' }
            }));

            return false;
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É API
     * @param {string} pattern - –®–∞–±–ª–æ–Ω –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∫–ª—é—á—ñ–≤
     */
    function clearCache(pattern = null) {
        if (pattern) {
            // –û—á–∏—â–µ–Ω–Ω—è –∑–∞ —à–∞–±–ª–æ–Ω–æ–º
            const keysToDelete = [];
            for (const key in _cachedResponses) {
                if (key.includes(pattern)) {
                    keysToDelete.push(key);
                }
            }

            keysToDelete.forEach(key => {
                delete _cachedResponses[key];
            });

            console.log(`üé≤ Raffles API: –û—á–∏—â–µ–Ω–æ ${keysToDelete.length} –∑–∞–ø–∏—Å—ñ–≤ –∫–µ—à—É –∑–∞ —à–∞–±–ª–æ–Ω–æ–º "${pattern}"`);
        } else {
            // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∫–µ—à—É
            _cachedResponses = {};
            console.log("üé≤ Raffles API: –û—á–∏—â–µ–Ω–æ –≤–µ—Å—å –∫–µ—à");
        }
    }

    /**
     * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     * @returns {number} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∏—â–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     */
    function forceCleanupRequests() {
        const count = Object.keys(_requestsInProgress).length;

        // –û—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        _requestsInProgress = {};

        // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—ñ–≤
        for (const key in _requestTimeouts) {
            clearTimeout(_requestTimeouts[key]);
            delete _requestTimeouts[key];
        }

        console.log(`üé≤ Raffles API: –ü—Ä–∏–º—É—Å–æ–≤–æ –æ—á–∏—â–µ–Ω–æ ${count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤`);
        return count;
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API ========

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.RafflesAPI = {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        init,
        apiRequest,
        getUserId,
        clearCache,
        forceCleanupRequests,

        // –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        getRaffles,
        getRaffleDetails,
        getRafflesHistory,
        participateInRaffle,
        getRaffleWinners,

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            console.log(`üé≤ Raffles API: –†–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è ${debug ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
            return this;
        }
    };

    // ======== –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ========

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ API –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
    document.addEventListener('DOMContentLoaded', function() {
        console.log("üé≤ Raffles API: DOMContentLoaded, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è");

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó, —â–æ —Å—Ç–∞—Ä–∏–π API –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
        setTimeout(() => {
            init().then(success => {
                if (success) {
                    console.log("üé≤ Raffles API: –ê–≤—Ç–æ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞");
                } else {
                    console.warn("üé≤ Raffles API: –ê–≤—Ç–æ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏");
                }
            }).catch(error => {
                console.error("üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", error);
            });
        }, 500);
    });

    // –Ø–∫—â–æ DOM –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
    if (document.readyState === 'interactive' || document.readyState === 'complete') {
        console.log("üé≤ Raffles API: –î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é");

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó, —â–æ —Å—Ç–∞—Ä–∏–π API –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
        setTimeout(() => {
            init().then(success => {
                if (success) {
                    console.log("üé≤ Raffles API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞");
                } else {
                    console.warn("üé≤ Raffles API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏");
                }
            }).catch(error => {
                console.error("üé≤ Raffles API: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", error);
            });
        }, 500);
    }

    console.log("‚úÖ Raffles API: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
})();