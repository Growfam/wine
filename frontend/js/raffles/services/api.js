/**
 * api.js - –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –æ—Å–Ω–æ–≤–Ω–∏–º API —Å–∏—Å—Ç–µ–º–∏
 * @version 1.3.0 - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è —î–¥–∏–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 */

import WinixRaffles from '../globals.js';
import { showToast } from '../utils/ui-helpers.js';

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API, —è–∫—É –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —ñ–º–ø–æ—Ä—Ç –∑ config.js
const API_CONFIG = {
  BASE_URL: '/api',
  TIMEOUT: 30000,
  CACHE_TTL: {
    ACTIVE_RAFFLES: 60000,   // 1 —Ö–≤–∏–ª–∏–Ω–∞
    HISTORY: 300000,         // 5 —Ö–≤–∏–ª–∏–Ω
    USER_DATA: 120000,       // 2 —Ö–≤–∏–ª–∏–Ω–∏
    STATISTICS: 600000       // 10 —Ö–≤–∏–ª–∏–Ω
  },
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 2000,
  RATE_LIMIT_COOLDOWN: 60000
};

// –ó–±—ñ–ª—å—à–µ–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
const REQUEST_THROTTLE = {
  '/raffles-history': 180000,     // 3 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  '/participate-raffle': 60000,   // 1 —Ö–≤–∏–ª–∏–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
  '/raffles': 60000,              // 1 —Ö–≤–∏–ª–∏–Ω–∞ –¥–ª—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  '/balance': 30000,              // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–∞–ª–∞–Ω—Å—É
  '/refresh-token': 60000,        // 1 —Ö–≤–∏–ª–∏–Ω–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
  'default': 20000                // 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö
};

// –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
const _lastRequestsByEndpoint = {};

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
let _lastRequestTime = Date.now();

// –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏
const _activeRequests = {};

// –ö–µ—à –¥–∞–Ω–∏—Ö
const _cache = {
  activeRaffles: { data: null, timestamp: 0, ttl: API_CONFIG.CACHE_TTL.ACTIVE_RAFFLES },
  history: { data: null, timestamp: 0, ttl: API_CONFIG.CACHE_TTL.HISTORY },
  userData: { data: null, timestamp: 0, ttl: API_CONFIG.CACHE_TTL.USER_DATA }
};

// –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é
let _requestCounter = {
  total: 0,
  errors: 0,
  lastReset: Date.now()
};

// –ü—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –≤–∫–∞–∑—É—î –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
let _tokenLastRefreshed = 0;

// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
const hasMainApi = () => {
  try {
    return window.WinixAPI &&
      typeof window.WinixAPI.apiRequest === 'function' &&
      typeof window.WinixAPI.getUserId === 'function';
  } catch (e) {
    console.error("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ API:", e);
    return false;
  }
};

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
 */
function getUserId() {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (hasMainApi()) {
    try {
      return window.WinixAPI.getUserId();
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API:", e);
    }
  }

  // –†–µ–∑–µ—Ä–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
      try {
        if (window.Telegram.WebApp.initDataUnsafe &&
          window.Telegram.WebApp.initDataUnsafe.user &&
          window.Telegram.WebApp.initDataUnsafe.user.id) {

          const telegramId = String(window.Telegram.WebApp.initDataUnsafe.user.id);
          return telegramId;
        }
      } catch (e) {
        console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
    try {
      const localId = localStorage.getItem('telegram_user_id');
      if (localId && localId !== 'undefined' && localId !== 'null') return localId;
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage:", e);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
    try {
      const userIdElement = document.getElementById('user-id');
      if (userIdElement && userIdElement.textContent) {
        const domId = userIdElement.textContent.trim();
        if (domId && domId !== 'undefined' && domId !== 'null') {
          return domId;
        }
      }
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ DOM:", e);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
      if (urlId && urlId !== 'undefined' && urlId !== 'null') {
        return urlId;
      }
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ URL:", e);
    }

    return null;
  } catch (error) {
    console.error("üîå Raffles API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    return null;
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 * @returns {string|null} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ null
 */
function getAuthToken() {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (hasMainApi() && typeof window.WinixAPI.getAuthToken === 'function') {
    try {
      const token = window.WinixAPI.getAuthToken();
      if (token) {
        return token;
      }
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API:", e);
    }
  }

  // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - localStorage
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –∫–ª—é—á—ñ
    const possibleKeys = ['auth_token', 'token', 'accessToken'];
    for (const key of possibleKeys) {
      const token = localStorage.getItem(key);
      if (token && typeof token === 'string' && token.length > 5) {
        return token;
      }
    }
  } catch (e) {
    console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ localStorage:", e);
  }

  console.warn("‚ö†Ô∏è Raffles API: –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
  return null;
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ URL API
 * @returns {string} –ë–∞–∑–æ–≤–∏–π URL API
 */
function getApiBaseUrl() {
  // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ñ—ñ–≥—É
  if (WinixRaffles && WinixRaffles.config && WinixRaffles.config.apiBaseUrl) {
    return WinixRaffles.config.apiBaseUrl;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥
  if (window.WinixConfig && window.WinixConfig.apiBaseUrl) {
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ URL –Ω–µ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ /api
    const url = window.WinixConfig.apiBaseUrl;
    return url.endsWith('/api') ? url.slice(0, -4) : url;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API
  if (hasMainApi() && window.WinixAPI.config && window.WinixAPI.config.baseUrl) {
    const baseUrl = window.WinixAPI.config.baseUrl;
    return baseUrl.endsWith('/api') ? baseUrl.slice(0, -4) : baseUrl;
  }

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  const hostname = window.location.hostname;
  if (hostname === 'localhost' || hostname === '127.0.0.1') {
    // –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä—Ç 8080
    return `http://${hostname}:8080`;
  } else if (hostname.includes('testenv') || hostname.includes('staging')) {
    // –¢–µ—Å—Ç–æ–≤—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    return `https://${hostname}`;
  } else {
    // –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    return 'https://winixbot.com';
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω–Ω—è–º —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
 * @param {string} endpoint - Endpoint API
 * @returns {boolean} –î–æ–∑–≤–æ–ª–µ–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç
 */
function canMakeRequest(endpoint) {
  const now = Date.now();

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
  let throttleTime = REQUEST_THROTTLE.default;
  for (const key in REQUEST_THROTTLE) {
    if (endpoint.includes(key)) {
      throttleTime = REQUEST_THROTTLE[key];
      break;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –∫–æ–ª–∏ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç
  const lastRequestTime = _lastRequestsByEndpoint[endpoint] || 0;
  if (now - lastRequestTime < throttleTime) {
    console.warn(`üîå Raffles API: –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–æ ${endpoint}, –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${Math.ceil((throttleTime - (now - lastRequestTime)) / 1000)}—Å`);
    return false;
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
  _lastRequestsByEndpoint[endpoint] = now;
  _lastRequestTime = now;
  return true;
}

/**
 * –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–∏—Å–∞—é—á–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
 */
function cleanupHangingRequests() {
  const now = Date.now();
  for (const endpoint in _activeRequests) {
    if (now - _activeRequests[endpoint] > 30000) { // 30 —Å–µ–∫—É–Ω–¥
      console.warn(`üîå Raffles API: –í–∏—è–≤–ª–µ–Ω–æ –∑–∞–≤–∏—Å–∞—é—á–∏–π –∑–∞–ø–∏—Ç –¥–æ ${endpoint}, –æ—á–∏—â–∞—î–º–æ`);
      delete _activeRequests[endpoint];
    }
  }
}

/**
 * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
 */
function forceCleanupRequests() {
  for (const endpoint in _activeRequests) {
    delete _activeRequests[endpoint];
  }
  console.log("üîå Raffles API: –ü—Ä–∏–º—É—Å–æ–≤–æ –æ—á–∏—â–µ–Ω–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏");
  return true;
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 */
async function refreshToken() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –±—É–ª–æ –Ω–µ—â–æ–¥–∞–≤–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
  const now = Date.now();
  if (now - _tokenLastRefreshed < 30000) {
    console.log("üîå Raffles API: –¢–æ–∫–µ–Ω –Ω–µ—â–æ–¥–∞–≤–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞–≤—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ");
    return true;
  }

  console.log("üîÑ Raffles API: –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (hasMainApi() && typeof window.WinixAPI.refreshToken === 'function') {
    try {
      console.log("üîÑ Raffles API: –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π API");
      const result = await window.WinixAPI.refreshToken();
      if (result) {
        _tokenLastRefreshed = now;
        console.log("‚úÖ Raffles API: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π API");
        return true;
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π API:", e);
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—à–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
    }
  }

  // –í–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
  try {
    const userId = getUserId();
    if (!userId) {
      throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }

    const oldToken = getAuthToken() || '';

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞–ø—Ä—è–º—É
    const apiBaseUrl = getApiBaseUrl();
    const response = await fetch(`${apiBaseUrl}/api/auth/refresh-token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Telegram-User-Id': userId
      },
      body: JSON.stringify({
        telegram_id: userId,
        token: oldToken
      })
    });

    if (!response.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
    }

    const data = await response.json();

    if (data && data.status === 'success' && data.token) {
      _tokenLastRefreshed = now;
      console.log("‚úÖ Raffles API: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–ª–∞—Å–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é");
      localStorage.setItem('auth_token', data.token);

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
      if (data.expires_at) {
        localStorage.setItem('auth_token_expiry', new Date(data.expires_at).getTime().toString());
      } else if (data.expires_in) {
        localStorage.setItem('auth_token_expiry', (Date.now() + (data.expires_in * 1000)).toString());
      }

      return true;
    } else {
      throw new Error(data.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω");
    }
  } catch (error) {
    console.error("‚ùå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
    return false;
  }
}

/**
 * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–∞ –∫–µ—à—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ endpoint
 * @param {string} endpoint - Endpoint –∑–∞–ø–∏—Ç—É
 * @returns {string|null} –ö–ª—é—á –∫–µ—à—É –∞–±–æ null
 */
function getCacheKeyFromEndpoint(endpoint) {
  if (endpoint.includes('raffles') && !endpoint.includes('history')) {
    return 'activeRaffles';
  } else if (endpoint.includes('history')) {
    return 'history';
  } else if (endpoint.includes('user')) {
    return 'userData';
  }
  return null;
}

/**
 * –ö–µ—à—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
 * @param {string} endpoint - Endpoint –∑–∞–ø–∏—Ç—É
 * @param {Object} response - –í—ñ–¥–ø–æ–≤—ñ–¥—å API
 */
function cacheResponse(endpoint, response) {
  if (!response || response.status !== 'success' || !response.data) return;

  const cacheKey = getCacheKeyFromEndpoint(endpoint);
  if (!cacheKey) return;

  _cache[cacheKey] = {
    data: response.data,
    timestamp: Date.now(),
    ttl: _cache[cacheKey]?.ttl || 60000
  };
}

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
 * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
 * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
 * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
 */
async function apiRequest(endpoint, method = 'GET', data = null, options = {}) {
  // –Ø–∫—â–æ endpoint –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "/", –≤–∏–¥–∞–ª—è—î–º–æ —Ü–µ–π —Å–∏–º–≤–æ–ª
  const cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö API –∑–∞–ø–∏—Ç—ñ–≤ (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫)
  if (window._blockApiRequests && !options.bypassBlocker) {
    console.warn(`üîå Raffles API: –ó–∞–ø–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–ª—è ${cleanEndpoint}`);
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    const cacheKey = getCacheKeyFromEndpoint(cleanEndpoint);
    if (cacheKey && _cache[cacheKey] && _cache[cacheKey].data) {
      return {
        status: 'success',
        data: _cache[cacheKey].data,
        source: 'cache_blocked'
      };
    }
    return {
      status: 'error',
      message: '–ó–∞–ø–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏',
      source: 'blocked'
    };
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç (–æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏)
  if (!options.bypassThrottle && !canMakeRequest(cleanEndpoint)) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    const cacheKey = getCacheKeyFromEndpoint(cleanEndpoint);
    if (cacheKey && _cache[cacheKey] && _cache[cacheKey].data) {
      console.log(`üîå Raffles API: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${cleanEndpoint} —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏`);
      return {
        status: 'success',
        data: _cache[cacheKey].data,
        source: 'cache_throttled'
      };
    }

    return {
      status: 'error',
      message: '–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç',
      source: 'throttled'
    };
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è
  if (_activeRequests[cleanEndpoint] && !options.allowParallel) {
    console.warn(`üîå Raffles API: –ó–∞–ø–∏—Ç –¥–æ ${cleanEndpoint} –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    const cacheKey = getCacheKeyFromEndpoint(cleanEndpoint);
    if (cacheKey && _cache[cacheKey] && _cache[cacheKey].data) {
      console.log(`üîå Raffles API: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${cleanEndpoint} —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç`);
      return {
        status: 'success',
        data: _cache[cacheKey].data,
        source: 'cache_parallel'
      };
    }

    return {
      status: 'error',
      message: '–ó–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è',
      source: 'parallel'
    };
  }

  // –Ø–∫—â–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –æ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
  if (typeof navigator.onLine !== 'undefined' && !navigator.onLine && !options.bypassOfflineCheck) {
    console.warn("üîå Raffles API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –∑–∞–ø–∏—Ç –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ");

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ —Ç–∞–∫—ñ —î
    const cacheKey = getCacheKeyFromEndpoint(cleanEndpoint);
    if (cacheKey && _cache[cacheKey] && _cache[cacheKey].data) {
      console.log(`üîå Raffles API: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${cleanEndpoint} –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ`);
      return {
        status: 'success',
        data: _cache[cacheKey].data,
        source: 'cache_offline'
      };
    }

    return {
      status: 'error',
      message: '–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω',
      source: 'offline'
    };
  }

  // –û—á–∏—â–∞—î–º–æ –∑–∞–≤–∏—Å–∞—é—á—ñ –∑–∞–ø–∏—Ç–∏
  cleanupHangingRequests();

  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–ø–∏—Ç —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π
  _activeRequests[cleanEndpoint] = Date.now();
  _lastRequestTime = Date.now();

  setTimeout(() => {
  if (_activeRequests[cleanEndpoint]) {
    delete _activeRequests[cleanEndpoint];
    console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É: ${cleanEndpoint}`);
  }
}, 10000);

  // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
  _requestCounter.total++;

  // –Ø–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å, –º–æ–∂–ª–∏–≤–æ —î –ø—Ä–æ–±–ª–µ–º–∞
  if (_requestCounter.total > 50 && (Date.now() - _requestCounter.lastReset < 60000)) {
    console.warn(`üîå Raffles API: –í–∏—è–≤–ª–µ–Ω–æ –±—ñ–ª—å—à–µ 50 –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É, –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏`);
    // –Ø–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫, –±–ª–æ–∫—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    if (_requestCounter.errors > 20) {
      console.error(`üîå Raffles API: –ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫ (${_requestCounter.errors}), –±–ª–æ–∫—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥`);
      window._blockApiRequests = true;
      setTimeout(() => {
        window._blockApiRequests = false;
        console.log("üîå Raffles API: –†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç–∏");
        // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
        _requestCounter = {
          total: 0,
          errors: 0,
          lastReset: Date.now()
        };
      }, 30000);
    }
  }

  // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
  if (Date.now() - _requestCounter.lastReset > 60000) {
    _requestCounter = {
      total: 1,
      errors: 0,
      lastReset: Date.now()
    };
  }

  // –Ø–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π API –¥–æ—Å—Ç—É–ø–Ω–∏–π —ñ –æ–ø—Ü—ñ—è useMainAPI –Ω–µ false, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
  if (hasMainApi() && options.useMainAPI !== false) {
    try {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –≤–∞–∂–ª–∏–≤–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏
      if (cleanEndpoint.includes('history') || cleanEndpoint.includes('participate')) {
        try {
          await refreshToken();
        } catch (tokenError) {
          console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º:", tokenError);
        }
      }

      const response = await window.WinixAPI.apiRequest(cleanEndpoint, method, data, options);

      // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      cacheResponse(cleanEndpoint, response);

      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
      delete _activeRequests[cleanEndpoint];

      return response;
    } catch (mainApiError) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É API, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π:", mainApiError);

      // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
      _requestCounter.errors++;

      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      const cacheKey = getCacheKeyFromEndpoint(cleanEndpoint);
      if (cacheKey && _cache[cacheKey] && _cache[cacheKey].data) {
        console.log(`üîå Raffles API: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${cleanEndpoint} –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API`);

        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        delete _activeRequests[cleanEndpoint];

        return {
          status: 'success',
          data: _cache[cacheKey].data,
          source: 'cache_after_main_api_error'
        };
      }

      // –Ø–∫—â–æ –∫–µ—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—à–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
    }
  }

  // –†–µ–∑–µ—Ä–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è API –∑–∞–ø–∏—Ç—É
  try {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–∞–¥–µ—Ä–∞
    if (!options.hideLoader && WinixRaffles && WinixRaffles.loader) {
      WinixRaffles.loader.show(options.loaderMessage || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...', `raffles-api-${cleanEndpoint}`);
    }

    // –§–æ—Ä–º—É—î–º–æ –±–∞–∑–æ–≤–∏–π URL API
    const apiBaseUrl = getApiBaseUrl();

    // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
    const timestamp = Date.now();
    const hasQuery = cleanEndpoint.includes('?');

    // –§–æ—Ä–º—É—î–º–æ URL
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ endpoint –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å 'api/'
    let urlEndpoint = cleanEndpoint;
    if (urlEndpoint.startsWith('api/')) {
      urlEndpoint = urlEndpoint.substring(4);
    }

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π URL
    let apiUrlBase = apiBaseUrl;
    // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç /api —è–∫—â–æ –≤—ñ–Ω —î
    if (apiUrlBase.endsWith('/api') && urlEndpoint.startsWith('api/')) {
      urlEndpoint = urlEndpoint.substring(4);
    } else if (apiUrlBase.endsWith('/api') && urlEndpoint.startsWith('/api/')) {
      urlEndpoint = urlEndpoint.substring(5);
    }

    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ URL –Ω–µ –º–∞—î –ø–æ–¥–≤—ñ–π–Ω–∏—Ö —Å–ª–µ—à—ñ–≤
    if (apiUrlBase.endsWith('/') && urlEndpoint.startsWith('/')) {
      urlEndpoint = urlEndpoint.substring(1);
    } else if (!apiUrlBase.endsWith('/') && !urlEndpoint.startsWith('/')) {
      apiUrlBase += '/';
    }

    // –î–æ–±–∞–≤–ª—è—î–º–æ /api/ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î –≤ endpoint
    if (!urlEndpoint.startsWith('api/') && !urlEndpoint.startsWith('/api/')) {
      urlEndpoint = 'api/' + urlEndpoint;
    }

    const url = `${apiUrlBase}${urlEndpoint}${hasQuery ? '&' : '?'}t=${timestamp}`;

    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userId = getUserId();

    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    const authToken = getAuthToken();

    // –ì–æ—Ç—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      'Content-Type': 'application/json',
      ...(options.headers || {})
    };

    // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if (userId) {
      headers['X-Telegram-User-Id'] = userId;
    }

    if (authToken) {
      headers['Authorization'] = authToken.startsWith('Bearer ') ?
        authToken : `Bearer ${authToken}`;
    }

    // –ì–æ—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
    const requestOptions = {
      method: method,
      headers: headers,
      mode: 'cors',
      cache: 'no-cache',
      credentials: 'same-origin',
      redirect: 'follow',
      referrerPolicy: 'no-referrer'
    };

    // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST, PUT, PATCH
    if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
      if (urlEndpoint.includes('participate-raffle') && data) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ raffleId –Ω–∞ –≤–∞–ª—ñ–¥–Ω–∏–π UUID
        if (data.raffle_id) {
          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
          const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

          if (typeof data.raffle_id !== 'string') {
            data.raffle_id = String(data.raffle_id);
          }

          if (!uuidRegex.test(data.raffle_id)) {
            throw new Error(`–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${data.raffle_id}`);
          }
        }
      }
      requestOptions.body = JSON.stringify(data);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —Ç–∞–π–º–∞—É—Ç—É
    const controller = new AbortController();
    requestOptions.signal = controller.signal;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç
    const timeout = options.timeout || API_CONFIG.TIMEOUT;
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    try {
      // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
      const response = await fetch(url, requestOptions);

      // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
      clearTimeout(timeoutId);

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      if (!options.hideLoader && WinixRaffles && WinixRaffles.loader) {
        WinixRaffles.loader.hide(`raffles-api-${cleanEndpoint}`);
      }

      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      if (!response.ok) {
        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        if (response.status === 429) {
          // –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
          console.warn(`üîå Raffles API: –û—Ç—Ä–∏–º–∞–Ω–æ 429 (Too Many Requests) –¥–ª—è ${cleanEndpoint}`);

          // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
          if (typeof showToast === 'function') {
            showToast(
              "–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
              "warning",
              5000
            );
          }

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç—Ä–∏–≤–∞–ª–∏–π –ø–µ—Ä—ñ–æ–¥
          const retryAfter = API_CONFIG.RATE_LIMIT_COOLDOWN;
          _lastRequestsByEndpoint[cleanEndpoint] = Date.now() + retryAfter;

          // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ —î
          const cacheKey = getCacheKeyFromEndpoint(cleanEndpoint);
          if (cacheKey && _cache[cacheKey] && _cache[cacheKey].data) {
            return {
              status: 'success',
              data: _cache[cacheKey].data,
              source: 'cache_rate_limited'
            };
          }

          // –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
          return {
            status: 'error',
            code: 429,
            message: '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
            retry_after: retryAfter
          };
        }

        if (response.status === 404 && urlEndpoint.includes('raffles')) {
          // –†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –æ–±—Ä–æ–±–∫–∞
          console.warn(`üîå Raffles API: –û—Ç—Ä–∏–º–∞–Ω–æ 404 (Not Found) –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${cleanEndpoint}`);

          // –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          if (typeof showToast === 'function') {
            showToast(
              "–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è. –û–Ω–æ–≤—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.",
              "warning"
            );
          }

          // –ü–æ–¥—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
          if (WinixRaffles && WinixRaffles.events) {
            WinixRaffles.events.emit('refresh-raffles', { force: true });
          }

          throw new Error(`–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ID –º–æ–∂–µ –±—É—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º.`);
        }

        // –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
      }

      // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      const jsonData = await response.json();

      // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      cacheResponse(cleanEndpoint, jsonData);

      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
      delete _activeRequests[cleanEndpoint];

      return jsonData;
    } catch (error) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
      if (error.name === 'AbortError') {
        throw new Error('–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ');
      }

      throw error;
    }
  } catch (error) {
    console.error(`‚ùå Raffles API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error);

    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    _requestCounter.errors++;

    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if (!options.hideLoader && WinixRaffles && WinixRaffles.loader) {
      WinixRaffles.loader.hide(`raffles-api-${cleanEndpoint}`);
    }
    delete _activeRequests[cleanEndpoint];

    // –û–±—Ä–æ–±–∫–∞ 401 –ø–æ–º–∏–ª–∫–∏ - —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
    if (error.status === 401 ||
      (error.message && error.message.includes('401')) ||
      (error.message && error.message.includes('Unauthorized'))) {

      console.warn("üîÑ Raffles API: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–º–∏–ª–∫—É 401, —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω");

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –≤–∂–µ —Å–ø—Ä–æ–±–æ–≤–∞–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
      if (!options.after401) {
        try {
          const refreshed = await refreshToken();

          if (refreshed) {
            console.log("üîÑ Raffles API: –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç");

            // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
            return await apiRequest(endpoint, method, data, {
              ...options,
              after401: true  // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó
            });
          } else {
            console.warn("‚ö†Ô∏è Raffles API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω");
          }
        } catch (refreshError) {
          console.error("‚ùå Raffles API: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", refreshError);
        }
      } else {
        console.warn("‚ö†Ô∏è Raffles API: –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ 401 –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");
      }
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É API
    if (WinixRaffles && WinixRaffles.events) {
      WinixRaffles.events.emit('api-error', {
        error: error,
        endpoint: endpoint,
        method: method
      });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    const cacheKey = getCacheKeyFromEndpoint(cleanEndpoint);
    if (cacheKey && _cache[cacheKey] && _cache[cacheKey].data) {
      console.log(`üîå Raffles API: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${cleanEndpoint} –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø–∏—Ç—É`);

      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
      delete _activeRequests[cleanEndpoint];

      return {
        status: 'success',
        data: _cache[cacheKey].data,
        source: 'cache_after_error'
      };
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
    delete _activeRequests[cleanEndpoint];

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é
    return {
      status: 'error',
      message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
      source: 'raffles_api',
      error: error
    };
  }
}

/**
 * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
 * @param {string} [cacheKey] - –ö–ª—é—á –∫–µ—à—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –æ—á–∏—â—É—î—Ç—å—Å—è –≤–µ—Å—å –∫–µ—à)
 */
function clearCache(cacheKey) {
  if (cacheKey && _cache[cacheKey]) {
    _cache[cacheKey].data = null;
    _cache[cacheKey].timestamp = 0;
    console.log(`üîå Raffles API: –ö–µ—à ${cacheKey} –æ—á–∏—â–µ–Ω–æ`);
  } else {
    for (const key in _cache) {
      _cache[key].data = null;
      _cache[key].timestamp = 0;
    }
    console.log("üîå Raffles API: –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω–æ");
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
 * @returns {Promise<Object>} –ü—Ä–æ–º—ñ—Å –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function getUserData(forceRefresh = false) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
  if (typeof navigator.onLine !== 'undefined' && !navigator.onLine && !forceRefresh) {
    console.warn("üîå Raffles API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

    // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.userData && _cache.userData.data) {
      return {
        status: 'success',
        data: _cache.userData.data,
        source: 'cache_offline'
      };
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
    return {
      status: 'success',
      data: {
        telegram_id: getUserId() || 'unknown',
        balance: parseFloat(localStorage.getItem('userTokens') || '0'),
        coins: parseInt(localStorage.getItem('userCoins') || '0')
      },
      source: 'localStorage_offline'
    };
  }

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (hasMainApi()) {
    try {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
      await refreshToken();

      const result = await window.WinixAPI.getUserData(forceRefresh);

      // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –∑–º—ñ–Ω–µ–Ω–æ resultData –Ω–∞ result.data
      if (result && result.status === 'success' && result.data) {
        // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
        if (result.data.balance !== undefined) {
          // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —á–∏—Å–ª–æ, —è–∫—â–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –æ–±'—î–∫—Ç
          const balance = typeof result.data.balance === 'object'
            ? parseFloat(result.data.balance.toString())
            : parseFloat(result.data.balance);

          localStorage.setItem('userTokens', balance.toString());
          localStorage.setItem('winix_balance', balance.toString());
        }

        // –¢–µ —Å–∞–º–µ –¥–ª—è –∂–µ—Ç–æ–Ω—ñ–≤
        if (result.data.coins !== undefined) {
          const coins = typeof result.data.coins === 'object'
            ? parseInt(result.data.coins.toString())
            : parseInt(result.data.coins);

          localStorage.setItem('userCoins', coins.toString());
          localStorage.setItem('winix_coins', coins.toString());
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –Ω–∞–ø—Ä—è–º—É
        setTimeout(() => {
          try {
            // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ ID
            const tokensElement = document.getElementById('user-tokens');
            const coinsElement = document.getElementById('user-coins');

            if (tokensElement && result.data.balance !== undefined) {
              tokensElement.textContent = result.data.balance;
            }

            if (coinsElement && result.data.coins !== undefined) {
              coinsElement.textContent = result.data.coins;
            }
          } catch (uiError) {
            console.error("‚ùå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:", uiError);
          }
        }, 100);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
        document.dispatchEvent(new CustomEvent('balance-updated', {
          detail: {
            balance: result.data.balance,
            coins: result.data.coins,
            source: 'raffles-api'
          }
        }));
      }

      // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result.status === 'success' && result.data) {
        _cache.userData = {
          data: result.data,
          timestamp: Date.now(),
          ttl: _cache.userData?.ttl || API_CONFIG.CACHE_TTL.USER_DATA
        };
      }

      return result;
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API:", e);

      // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
      if (_cache.userData && _cache.userData.data) {
        return {
          status: 'success',
          data: _cache.userData.data,
          source: 'cache_after_error'
        };
      }
    }
  }

  try {
    const userId = getUserId();
    if (!userId) {
      return {
        status: 'error',
        message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      };
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (!forceRefresh && _cache.userData && _cache.userData.data &&
      (Date.now() - _cache.userData.timestamp) < _cache.userData.ttl) {
      return {
        status: 'success',
        data: _cache.userData.data,
        source: 'cache'
      };
    }

    return await apiRequest(`user/${userId}`, 'GET', null, {
      useMainAPI: false, // –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π API –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó
      bypassThrottle: forceRefresh, // –Ü–≥–Ω–æ—Ä—É—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      timeout: 5000 // –ö–æ—Ä–æ—Ç—à–∏–π —Ç–∞–π–º–∞—É—Ç
    });
  } catch (error) {
    console.error("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);

    // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.userData && _cache.userData.data) {
      return {
        status: 'success',
        data: _cache.userData.data,
        source: 'cache_after_error'
      };
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
    return {
      status: 'success',
      data: {
        telegram_id: getUserId() || 'unknown',
        balance: parseFloat(localStorage.getItem('userTokens') || '0'),
        coins: parseInt(localStorage.getItem('userCoins') || '0')
      },
      source: 'localStorage_fallback',
      message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' + error.message
    };
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
 * @returns {Promise<Object>} –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function getBalance(forceRefresh = false) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
  if (typeof navigator.onLine !== 'undefined' && !navigator.onLine && !forceRefresh) {
    console.warn("üîå Raffles API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É");

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
    return {
      status: 'success',
      data: {
        balance: parseFloat(localStorage.getItem('userTokens') || '0'),
        coins: parseInt(localStorage.getItem('userCoins') || '0')
      },
      source: 'localStorage_offline'
    };
  }

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π API, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
  if (hasMainApi()) {
    try {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
      await refreshToken();

      return await window.WinixAPI.getBalance(forceRefresh);
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API:", e);
    }
  }

  try {
    const userId = getUserId();
    if (!userId) {
      return {
        status: 'error',
        message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      };
    }

    return await apiRequest(`user/${userId}/balance`, 'GET', null, {
      useMainAPI: false, // –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π API –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó
      bypassThrottle: forceRefresh,
      timeout: 5000 // –ö–æ—Ä–æ—Ç—à–∏–π —Ç–∞–π–º–∞—É—Ç
    });
  } catch (error) {
    console.error("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ localStorage –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    return {
      status: 'success',
      data: {
        balance: parseFloat(localStorage.getItem('userTokens') || '0'),
        coins: parseInt(localStorage.getItem('userCoins') || '0')
      },
      source: 'localStorage_fallback',
      message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: ' + error.message
    };
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */
async function getActiveRaffles(forceRefresh = false) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
  if (typeof navigator.onLine !== 'undefined' && !navigator.onLine && !forceRefresh) {
    console.warn("üîå Raffles API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

    // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.activeRaffles && _cache.activeRaffles.data) {
      return _cache.activeRaffles.data;
    }

    // –Ø–∫—â–æ –∫–µ—à—É –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
    return [];
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  if (!forceRefresh && _cache.activeRaffles && _cache.activeRaffles.data &&
    (Date.now() - _cache.activeRaffles.timestamp) < _cache.activeRaffles.ttl) {
    console.log("üìã Raffles API: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");
    return _cache.activeRaffles.data;
  }

  try {
    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
    await refreshToken();

    const response = await apiRequest('raffles', 'GET', null, {
      timeout: 10000, // –ó–º–µ–Ω—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
      loaderMessage: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...',
      bypassThrottle: forceRefresh
    });

    if (response && response.status === 'success') {
      const resultData = Array.isArray(response.data) ? response.data : [];

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
      _cache.activeRaffles = {
        data: resultData,
        timestamp: Date.now(),
        ttl: _cache.activeRaffles?.ttl || API_CONFIG.CACHE_TTL.ACTIVE_RAFFLES
      };

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø—É
      try {
        localStorage.setItem('winix_active_raffles', JSON.stringify(resultData));
      } catch (e) {
        console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –≤ localStorage:", e);
      }

      return resultData;
    }

    // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.activeRaffles && _cache.activeRaffles.data) {
      console.warn("üîå Raffles API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏");
      return _cache.activeRaffles.data;
    }

    // –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
    return [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);

    // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.activeRaffles && _cache.activeRaffles.data) {
      console.warn("üîå Raffles API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏");
      return _cache.activeRaffles.data;
    }

    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
    try {
      const storedRaffles = localStorage.getItem('winix_active_raffles');
      if (storedRaffles) {
        const parsedRaffles = JSON.parse(storedRaffles);
        if (Array.isArray(parsedRaffles)) {
          return parsedRaffles;
        }
      }
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ localStorage:", e);
    }

    return [];
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * @param {Object} filters - –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */
async function getRafflesHistory(filters = {}, forceRefresh = false) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
  if (typeof navigator.onLine !== 'undefined' && !navigator.onLine && !forceRefresh) {
    console.warn("üîå Raffles API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó");

    // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.history && _cache.history.data) {
      return _cache.history.data;
    }

    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
    try {
      const storedHistory = localStorage.getItem('winix_raffles_history');
      if (storedHistory) {
        const parsedHistory = JSON.parse(storedHistory);
        if (Array.isArray(parsedHistory)) {
          return parsedHistory;
        }
      }
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑ localStorage:", e);
    }

    // –Ø–∫—â–æ –∫–µ—à—É –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
    return [];
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ –Ω–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  if (!forceRefresh && !Object.keys(filters).length && _cache.history && _cache.history.data &&
    (Date.now() - _cache.history.timestamp) < _cache.history.ttl) {
    return _cache.history.data;
  }

  try {
    const userId = getUserId();
    if (!userId) {
      throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º —ñ—Å—Ç–æ—Ä—ñ—ó
    console.log("üîÑ Raffles API: –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º —ñ—Å—Ç–æ—Ä—ñ—ó");
    await refreshToken();

    // –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
    let queryParams = '';
    if (filters.type && filters.type !== 'all') {
      queryParams += `&type=${filters.type}`;
    }
    if (filters.status && filters.status !== 'all') {
      queryParams += `&status=${filters.status}`;
    }
    if (filters.period && filters.period !== 'all') {
      queryParams += `&period=${filters.period}`;
    }

    // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–æ URL, —è–∫—â–æ –≤–æ–Ω–∏ —î
    const url = queryParams
      ? `user/${userId}/raffles-history?${queryParams.substring(1)}`
      : `user/${userId}/raffles-history`;

    const response = await apiRequest(url, 'GET', null, {
      timeout: 15000, // –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
      loaderMessage: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...',
      bypassThrottle: forceRefresh,
      after401: false // –î–æ–∑–≤–æ–ª—è—î–º–æ –æ–±—Ä–æ–±–∫—É 401 –ø–æ–º–∏–ª–∫–∏
    });

    if (response && response.status === 'success') {
      const resultData = Array.isArray(response.data) ? response.data : [];

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∞–±–æ —Ü–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      if (!Object.keys(filters).length || forceRefresh) {
        _cache.history = {
          data: resultData,
          timestamp: Date.now(),
          ttl: _cache.history?.ttl || API_CONFIG.CACHE_TTL.HISTORY
        };
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø—É
      try {
        localStorage.setItem('winix_raffles_history', JSON.stringify(resultData));
      } catch (e) {
        console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤ localStorage:", e);
      }

      return resultData;
    }

    // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.history && _cache.history.data) {
      console.warn("üîå Raffles API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏");
      return _cache.history.data;
    }

    return [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);

    // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (_cache.history && _cache.history.data) {
      console.warn("üîå Raffles API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏");
      return _cache.history.data;
    }

    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
    try {
      const storedHistory = localStorage.getItem('winix_raffles_history');
      if (storedHistory) {
        const parsedHistory = JSON.parse(storedHistory);
        if (Array.isArray(parsedHistory)) {
          return parsedHistory;
        }
      }
    } catch (e) {
      console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑ localStorage:", e);
    }

    return [];
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID
 * @param {string} uuid - UUID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 */
function isValidUUID(uuid) {
  if (!uuid || typeof uuid !== 'string') return false;

  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
}

/**
 * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
 * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
 * @param {number} entryCount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
 */
async function participateInRaffle(raffleId, entryCount = 1) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω–∏–π UUID
    if (!isValidUUID(raffleId)) {
      console.error(`‚ùå Raffles API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID: ${raffleId}`);
      return {
        status: 'error',
        message: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É',
        code: 'invalid_uuid'
      };
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
    if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
      return {
        status: 'error',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å: –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω',
        code: 'offline'
      };
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å entryCount
    if (isNaN(entryCount) || entryCount <= 0) {
      return {
        status: 'error',
        message: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å',
        code: 'invalid_entry_count'
      };
    }

    const userId = getUserId();
    if (!userId) {
      throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –ª–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
    const userCoins = parseInt(localStorage.getItem('userCoins') || '0');
    if (userCoins < entryCount) {
      return {
        status: 'error',
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ',
        code: 'insufficient_coins'
      };
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
    await refreshToken();

    // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ 429
    await new Promise(resolve => setTimeout(resolve, 500));

    // –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
    const timestamp = Date.now();
    const uniqueSuffix = Math.floor(Math.random() * 1000000);

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
    const participationData = {
      raffle_id: raffleId,
      entry_count: entryCount,
      timestamp
    };

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
    if (typeof participationData.raffle_id !== 'string') {
      participationData.raffle_id = String(participationData.raffle_id);
    }

    if (!isValidUUID(participationData.raffle_id)) {
      return {
        status: 'error',
        message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É',
        code: 'invalid_uuid'
      };
    }

    const response = await apiRequest(`user/${userId}/participate-raffle?t=${timestamp}&uid=${uniqueSuffix}`, 'POST',
      participationData,
      {
        timeout: 20000,
        loaderMessage: '–ë–µ—Ä–µ–º–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ...',
        bypassThrottle: true // –í–∞–∂–ª–∏–≤–æ: –¥–æ–∑–≤–æ–ª—è—î–º–æ –æ–±—ñ–π—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏
      }
    );

    if (response && response.status === 'success') {
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –æ–¥—Ä–∞–∑—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–≥—É–∫—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
      const newCoins = Math.max(0, userCoins - entryCount);
      localStorage.setItem('userCoins', newCoins.toString());
      localStorage.setItem('winix_coins', newCoins.toString());

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
      const coinsElement = document.getElementById('user-coins');
      if (coinsElement) {
        coinsElement.textContent = newCoins.toString();
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —É—á–∞—Å—Ç—å
      if (WinixRaffles && WinixRaffles.events) {
        WinixRaffles.events.emit('raffle-participated', {
          raffleId,
          entryCount,
          timestamp: Date.now()
        });
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
      if (typeof showToast === 'function') {
        showToast('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!', 'success');
      }

      return {
        status: 'success',
        message: '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
        data: response.data
      };
    }

    // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞
    if (response && response.status === 'error') {
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      if (response.message && typeof showToast === 'function') {
        showToast(response.message, 'error');
      }

      return response;
    }

    throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ');
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}:`, error);

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (typeof showToast === 'function') {
      showToast('–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error');
    }

    return {
      status: 'error',
      message: error.message || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
      code: 'participation_error'
    };
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
 */
async function claimNewbieBonus() {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
    if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
      return {
        status: 'error',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å: –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω',
        source: 'offline'
      };
    }

    const userId = getUserId();
    if (!userId) {
      throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –≤–∞–∂–ª–∏–≤–∏–º –∑–∞–ø–∏—Ç–æ–º
    await refreshToken();

    const response = await apiRequest(`user/${userId}/claim-newbie-bonus`, 'POST', null, {
      timeout: 10000,
      loaderMessage: '–û—Ç—Ä–∏–º—É—î–º–æ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞...'
    });

    if (response && (response.status === 'success' || response.status === 'already_claimed')) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      if (hasMainApi()) {
        try {
          await window.WinixAPI.getBalance(true);
        } catch (e) {
          console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É:", e);
        }
      } else {
        // –ê–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –≤–ª–∞—Å–Ω–∏–π API
        await getBalance(true);
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
      try {
        localStorage.setItem('newbie_bonus_claimed', 'true');
      } catch (e) {
        console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±–æ–Ω—É—Å—É:", e);
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      clearCache('userData');

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
      if (typeof showToast === 'function') {
        if (response.status === 'success') {
          showToast('–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!', 'success');
        } else {
          showToast('–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞', 'info');
        }
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
      if (WinixRaffles && WinixRaffles.events) {
        WinixRaffles.events.emit('display-bonus-claimed', {
          timestamp: Date.now()
        });
      }

      return {
        status: response.status,
        message: response.message || '–ë–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ',
        data: response.data
      };
    }

    throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞:', error);

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if (typeof showToast === 'function') {
      showToast('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error');
    }

    return {
      status: 'error',
      message: error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞'
    };
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è API —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è –∫—Ä–∞—â–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —Å–∏—Å—Ç–µ–º–æ—é
const apiService = {
  // –í—Å—ñ –º–µ—Ç–æ–¥–∏ –∑ —Ñ–∞–π–ª—É –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ –æ–±'—î–∫—Ç
  getUserId,
  getAuthToken,
  getApiBaseUrl,
  refreshToken,
  clearCache,
  forceCleanupRequests,
  apiRequest,
  getUserData,
  getBalance,
  getActiveRaffles,
  getRafflesHistory,
  participateInRaffle,
  claimNewbieBonus,
  isValidUUID,

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é
  /**
   * –û–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é
   */
  init: async function() {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL API –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    const baseUrl = WinixRaffles.config?.apiBaseUrl || getApiBaseUrl();

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if (WinixRaffles.config?.requestTimeout) {
      API_CONFIG.TIMEOUT = WinixRaffles.config.requestTimeout;
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è TTL –∫–µ—à—É
    if (WinixRaffles.config?.defaultTTL) {
      API_CONFIG.CACHE_TTL.USER_DATA = WinixRaffles.config.defaultTTL;
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –¥–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–º—ñ–Ω
    this._setupEventListeners();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –º–µ—Ä–µ–∂—ñ
    const isOnline = typeof navigator.onLine !== 'undefined' ? navigator.onLine : true;

    // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    await this._ensureAuthentication();

    WinixRaffles.logger.log("API —Å–µ—Ä–≤—ñ—Å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    return this;
  },

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
   * @private
   */
  _setupEventListeners: function() {
    // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –º–µ—Ä–µ–∂—ñ
    window.addEventListener('online', () => {
      console.log("üîå Raffles API: –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");

      // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
      window._blockApiRequests = false;

      // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
      _requestCounter = {
        total: 0,
        errors: 0,
        lastReset: Date.now()
      };

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
      setTimeout(() => {
        this.getActiveRaffles(true).then(() => {
          console.log("üîå Raffles API: –ö–µ—à —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è");
        }).catch(e => {
          console.warn("üîå Raffles API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", e);
        });
      }, 2000);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –≤ —Å–∏—Å—Ç–µ–º—É
      if (WinixRaffles && WinixRaffles.events) {
        WinixRaffles.events.emit('network-status-changed', {
          online: true,
          timestamp: Date.now()
        });
      }
    });

    window.addEventListener('offline', () => {
      console.warn("üîå Raffles API: –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ—é –≤—Ç—Ä–∞—á–µ–Ω–æ");

      // –°–∫–∏–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏
      for (const endpoint in _activeRequests) {
        delete _activeRequests[endpoint];
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –≤ —Å–∏—Å—Ç–µ–º—É
      if (WinixRaffles && WinixRaffles.events) {
        WinixRaffles.events.emit('network-status-changed', {
          online: false,
          timestamp: Date.now()
        });
      }
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞—Ü–∏–∫–ª—é–≤–∞–Ω–Ω—è
    window.addEventListener('error', function(event) {
      if (event.message && (
        event.message.includes('API') ||
        event.message.includes('–∑–∞–ø–∏—Ç') ||
        event.message.includes('request'))) {

        console.error("üõë –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API:", event.message);

        // –¢–∏–º—á–∞—Å–æ–≤–æ –±–ª–æ–∫—É—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
        window._blockApiRequests = true;
        _requestCounter.errors++;

        // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          window._blockApiRequests = false;
          console.log("üîå Raffles API: –†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç–∏ –ø—ñ—Å–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏");
        }, 10000);
      }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö Promise-–ø–æ–º–∏–ª–æ–∫
    window.addEventListener('unhandledrejection', function(event) {
      if (event.reason && (
        event.reason.message && (
          event.reason.message.includes('API') ||
          event.reason.message.includes('–∑–∞–ø–∏—Ç') ||
          event.reason.message.includes('request')))) {

        console.error("üõë –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ Promise-–ø–æ–º–∏–ª–∫–∞ API:", event.reason.message);

        // –¢–∏–º—á–∞—Å–æ–≤–æ –±–ª–æ–∫—É—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
        window._blockApiRequests = true;
        _requestCounter.errors++;

        // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          window._blockApiRequests = false;
          console.log("üîå Raffles API: –†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç–∏ –ø—ñ—Å–ª—è –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–æ—ó Promise-–ø–æ–º–∏–ª–∫–∏");
        }, 10000);
      }
    });
  },

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   * @private
   */
  async _ensureAuthentication() {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É
      const token = getAuthToken();
      if (!token) {
        // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
        await refreshToken();
      }
      return true;
    } catch (error) {
      WinixRaffles.logger.warn("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:", error);
      return false;
    }
  },

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {boolean} [forceRefresh=false] –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   * @returns {Promise<Object>} –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async refresh(forceRefresh = false) {
    try {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
      await refreshToken();

      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      return await getUserData(forceRefresh);
    } catch (error) {
      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
      throw error;
    }
  },

  /**
   * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
   */
  destroy: function() {
    // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏
    forceCleanupRequests();

    // –û—á–∏—â–∞—î–º–æ –∫–µ—à
    clearCache();

    // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π
    window.removeEventListener('online', () => {});
    window.removeEventListener('offline', () => {});

    WinixRaffles.logger.log("API —Å–µ—Ä–≤—ñ—Å –∑–Ω–∏—â–µ–Ω–æ");
  },

  // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
  config: {
    baseUrl: getApiBaseUrl(),
    throttle: REQUEST_THROTTLE,
    cacheTTL: API_CONFIG.CACHE_TTL,
    version: '1.3.0'
  }
};

// –†–µ—î—Å—Ç—Ä—É—î–º–æ API –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –æ–±'—î–∫—Ç—ñ
WinixRaffles.api = apiService;

// –û–±—Ä–æ–±–Ω–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞—Ü–∏–∫–ª—é–≤–∞–Ω–Ω—è
window.addEventListener('error', function(event) {
  if (event.message && (
    event.message.includes('API') ||
    event.message.includes('–∑–∞–ø–∏—Ç') ||
    event.message.includes('request'))) {

    console.error("üõë –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API:", event.message);

    // –¢–∏–º—á–∞—Å–æ–≤–æ –±–ª–æ–∫—É—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
    window._blockApiRequests = true;
    _requestCounter.errors++;

    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      window._blockApiRequests = false;
      console.log("üîå Raffles API: –†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç–∏ –ø—ñ—Å–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏");
    }, 10000);
  }
});

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
export default apiService;