/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö WINIX
 */

import WinixRaffles from '../globals.js';
import { showLoading, hideLoading, showToast, copyToClipboard } from '../utils/ui-helpers.js';
import api from '../services/api.js';
import { formatDate } from '../utils/formatters.js';

// –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let _isParticipating = false;
let _participationTimeoutId = null;
let _raffleDetailsCache = {};
let _activeRaffleIds = []; // –î–æ–¥–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö ID —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤

/**
 * –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —É—á–∞—Å—Ç—é –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
 */
class ParticipationModule {
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log("üéÆ Participation: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö");

        try {
            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó
            this._setupEventListeners();

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ localStorage
            try {
                const storedIds = localStorage.getItem('activeRaffleIds');
                if (storedIds) {
                    _activeRaffleIds = JSON.parse(storedIds);
                    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${_activeRaffleIds.length} ID –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ –∫–µ—à—É`);
                }
            } catch (e) {
                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ localStorage:", e);
            }

            console.log("‚úÖ Participation: –ú–æ–¥—É–ª—å —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö:", error);
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     * @private
     */
    _setupEventListeners() {
        try {
            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            if (WinixRaffles && WinixRaffles.events) {
                WinixRaffles.events.on('open-raffle-details', (data) => {
                    if (data && data.raffleId) {
                        this.openRaffleDetails(data.raffleId, data.raffleType);
                    }
                });

                // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é –ø–æ—à–∏—Ä–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                WinixRaffles.events.on('share-raffle', (data) => {
                    if (data && data.raffleId) {
                        this.shareRaffle(data.raffleId);
                    }
                });

                // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
                WinixRaffles.events.on('claim-newbie-bonus', (data) => {
                    this.claimNewbieBonus(data && data.element, data && data.container);
                });

                // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                WinixRaffles.events.on('refresh-raffles', (data) => {
                    const forceRefresh = data && data.force === true;
                    this.refreshActiveRaffles(forceRefresh);
                });
            }

            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó –ø–æ–º–∏–ª–æ–∫ API
            document.addEventListener('api-error', (event) => {
                const error = event.detail;

                // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if (error && error.endpoint && error.endpoint.includes('raffles')) {
                    console.warn("–í–∏—è–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É API –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                    setTimeout(() => this.refreshActiveRaffles(true), 1000);

                    // –û—á–∏—â—É—î–º–æ –∫–µ—à
                    this.clearInvalidRaffleIds();
                }
            });
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π:", error);
        }
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     * @private
     */
    _removeEventListeners() {
        // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ –ø–æ–¥—ñ–π
        // –ù–∞—Ä–∞–∑—ñ —Ü–µ–π –º–µ—Ç–æ–¥ —î –∑–∞–≥–ª—É—à–∫–æ—é –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    clearInvalidRaffleIds() {
        // –í–∏–¥–∞–ª—è—î–º–æ –∫–µ—à —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        _raffleDetailsCache = {};

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –æ—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
        try {
            localStorage.removeItem('lastRaffleId');
            localStorage.removeItem('activeRaffleIds');
            _activeRaffleIds = [];
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", e);
        }

        console.log("‚úÖ –ö–µ—à —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –æ—á–∏—â–µ–Ω–æ");
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    isValidRaffleId(raffleId) {
        if (!raffleId) return false;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
        if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(raffleId)) {
            console.error(`‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç UUID –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${raffleId}`);
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        if (_activeRaffleIds.length > 0 && !_activeRaffleIds.includes(raffleId)) {
            console.warn(`‚ö†Ô∏è ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ –∫–µ—à—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤`);
            return false;
        }

        return true;
    }

    /**
     * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ ID –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    async refreshActiveRaffles(forceRefresh = false) {
        try {
            showLoading('–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...', 'refresh-raffles');

            // –û—á–∏—â—É—î–º–æ –∫–µ—à, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            if (forceRefresh) {
                _raffleDetailsCache = {};
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            const response = await api.apiRequest('/api/raffles', 'GET', null, {
                forceRefresh: true,
                timeout: 10000,
                suppressErrors: true
            });

            hideLoading('refresh-raffles');

            if (response && response.status === 'success' && response.data) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                _activeRaffleIds = response.data.map(raffle => raffle.id);
                try {
                    localStorage.setItem('activeRaffleIds', JSON.stringify(_activeRaffleIds));
                } catch (e) {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", e);
                }

                console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${_activeRaffleIds.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤`);

                // –û–ø–æ–≤—ñ—â–∞—î–º–æ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if (WinixRaffles && WinixRaffles.events) {
                    WinixRaffles.events.emit('raffles-updated', {
                        count: _activeRaffleIds.length,
                        timestamp: Date.now()
                    });
                }

                showToast(`–°–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ (${_activeRaffleIds.length})`, 'success');
                return _activeRaffleIds;
            }

            return [];
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
            hideLoading('refresh-raffles');
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤', 'error');
            return [];
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @returns {Promise<Object>} –î–∞–Ω—ñ –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
     */
    async getRaffleDetails(raffleId) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
            if (!this.isValidRaffleId(raffleId)) {
                return {
                    status: "error",
                    message: "ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –º–∞—î –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç",
                    errorCode: "invalid_uuid"
                };
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            if (_raffleDetailsCache[raffleId]) {
                console.log(`üìã Raffles: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}`);
                return _raffleDetailsCache[raffleId];
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–∞–¥–µ—Ä–∞
            showLoading('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É...', `raffle-details-${raffleId}`);

            // –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const response = await api.apiRequest(`/api/raffles/${raffleId}`, 'GET', null, {
                timeout: 10000,
                suppressErrors: true,
                forceCleanup: true
            });

            // –ó–∞–≤–∂–¥–∏ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ª–æ–∞–¥–µ—Ä
            hideLoading(`raffle-details-${raffleId}`);

            if (response && response.status === 'success') {
                // –ö–µ—à—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
                if (response.data) {
                    _raffleDetailsCache[raffleId] = response.data;

                    // –î–æ–¥–∞—î–º–æ ID –¥–æ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
                    if (response.data.status === 'active' && !_activeRaffleIds.includes(raffleId)) {
                        _activeRaffleIds.push(raffleId);
                        try {
                            localStorage.setItem('activeRaffleIds', JSON.stringify(_activeRaffleIds));
                        } catch (e) {}
                    }
                }
                return response.data;
            } else {
                // –Ø–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
                if (_activeRaffleIds.includes(raffleId)) {
                    _activeRaffleIds = _activeRaffleIds.filter(id => id !== raffleId);
                    try {
                        localStorage.setItem('activeRaffleIds', JSON.stringify(_activeRaffleIds));
                    } catch (e) {}
                }

                throw new Error((response && response.message) || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            // –ó–∞–≤–∂–¥–∏ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ª–æ–∞–¥–µ—Ä
            hideLoading(`raffle-details-${raffleId}`);
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error');
            return null;
        }
    }

    /**
     * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {number} entryCount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
     */
    async participateInRaffle(raffleId, entryCount = 1) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

             // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω–∏–π UUID
        if (!raffleId || !/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(raffleId)) {
            console.error(`‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID: ${raffleId}`);
            return {
                status: 'error',
                message: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É'
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å entryCount
        if (isNaN(entryCount) || entryCount <= 0) {
            return {
                status: 'error',
                message: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å'
            };
        }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è –∑–∞–≤–∏—Å–∞—é—á–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            const now = Date.now();
            if (_isParticipating && _participationTimeoutId === null) {
                console.warn("‚ö†Ô∏è Raffles: –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∑–∞–≤–∏—Å–∞—é—á–∏–π –∑–∞–ø–∏—Ç —É—á–∞—Å—Ç—ñ, —Å–∫–∏–¥–∞—î–º–æ");
                _isParticipating = false;
            }

            if (_isParticipating) {
                console.log("‚è≥ Raffles: –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
                return { status: 'error', message: '–£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è' };
            }

            _isParticipating = true;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è
            if (_participationTimeoutId) {
                clearTimeout(_participationTimeoutId);
            }
            _participationTimeoutId = setTimeout(() => {
                if (_isParticipating) {
                    console.warn("‚ö†Ô∏è Raffles: –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç—Ä–∏–≤–∞—î –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω");
                    _isParticipating = false;
                    _participationTimeoutId = null;
                }
            }, 30000); // 30 —Å–µ–∫—É–Ω–¥

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–∞–¥–µ—Ä–∞
            showLoading('–ë–µ—Ä–µ–º–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ...', `participate-${raffleId}`);

            const userId = api.getUserId();
            if (!userId) {
                throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const response = await api.apiRequest(`/api/user/${userId}/participate-raffle`, 'POST', {
                raffle_id: raffleId,
                entry_count: entryCount
            }, {
                timeout: 15000,
                suppressErrors: true,
                forceCleanup: true
            });

            // –ó–ê–í–ñ–î–ò –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ª–æ–∞–¥–µ—Ä —ñ —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
            hideLoading(`participate-${raffleId}`);
            _isParticipating = false;

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            if (_participationTimeoutId) {
                clearTimeout(_participationTimeoutId);
                _participationTimeoutId = null;
            }

            if (response && response.status === 'success') {
                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await this.updateUserBalance();

                // –û–ø–æ–≤—ñ—â–∞—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —É—á–∞—Å—Ç—å
                if (WinixRaffles && WinixRaffles.events) {
                    WinixRaffles.events.emit('raffle-participated', {
                        raffleId: raffleId,
                        entryCount: entryCount,
                        timestamp: Date.now()
                    });
                }

                return {
                    status: 'success',
                    message: response.data?.message || '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                    data: response.data
                };
            } else {
                throw new Error((response && response.message) || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}:`, error);

            // –ó–ê–í–ñ–î–ò —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ —Ç–∞ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ª–æ–∞–¥–µ—Ä
            hideLoading(`participate-${raffleId}`);
            _isParticipating = false;

            if (_participationTimeoutId) {
                clearTimeout(_participationTimeoutId);
                _participationTimeoutId = null;
            }

            return { status: 'error', message: error.message || '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ' };
        }
    }

    /**
     * –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –¥–µ—Ç–∞–ª—è–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleType - –¢–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async openRaffleDetails(raffleId, raffleType) {
        if (!raffleId) {
            showToast('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 'error');
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        if (!this.isValidRaffleId(raffleId)) {
            console.error(`‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${raffleId}`);
            showToast('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É', 'error');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            this.refreshActiveRaffles(true);
            return;
        }

        // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        raffleType = raffleType || 'main';

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
            let userData;
            try {
                userData = await api.getUserData();
            } catch (userError) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userError);
                userData = { data: { coins: 0 } };
            }

            const coinsBalance = userData && userData.data ? (userData.data.coins || 0) : 0;

            if (coinsBalance < 1) {
                showToast('–î–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —â–æ–Ω–∞–π–º–µ–Ω—à–µ 1 –∂–µ—Ç–æ–Ω', 'warning');
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            if (_raffleDetailsCache[raffleId]) {
                console.log(`üìã Raffles: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}`);
                this.processRaffleDetails(_raffleDetailsCache[raffleId], raffleType);
                return;
            }

            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ä–æ–∑—ñ–≥—Ä–∞—à
            showLoading('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É...', 'check-raffle');
            const raffleCheck = await api.apiRequest(`/api/raffles/${raffleId}`, 'GET', null, {
                suppressErrors: true,
                timeout: 5000
            });
            hideLoading('check-raffle');

            // –Ø–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π
            if (!raffleCheck || raffleCheck.status === 'error' ||
                (raffleCheck.data && raffleCheck.data.status !== 'active')) {
                showToast('–¶–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π', 'warning');

                // –û—á–∏—â—É—î–º–æ –∫–µ—à —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
                this.clearInvalidRaffleIds();
                this.refreshActiveRaffles(true);
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            const raffleData = await this.getRaffleDetails(raffleId);
            if (!raffleData) {
                showToast('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—É', 'error');
                return;
            }

            // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            this.processRaffleDetails(raffleData, raffleType);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É:', error);
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error');
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {Object} raffleData - –î–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleType - –¢–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async processRaffleDetails(raffleData, raffleType) {
        if (!raffleData) {
            showToast('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—É', 'error');
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        if (raffleData.status !== 'active') {
            showToast('–¶–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ', 'warning');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            this.refreshActiveRaffles(true);
            return;
        }

        // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        raffleType = raffleType || 'main';

        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modalId = (raffleType === 'daily') ? 'daily-raffle-modal' : 'main-raffle-modal';
        const modal = document.getElementById(modalId);

        if (!modal) {
            console.error(`–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ id ${modalId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            showToast('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É', 'error');
            return;
        }

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
            let userData;
            try {
                userData = await api.getUserData();
            } catch (userError) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userError);
                userData = { data: { coins: 0 } };
            }

            const coinsBalance = userData && userData.data ? (userData.data.coins || 0) : 0;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const inputId = (raffleType === 'daily') ? 'daily-token-amount' : 'main-token-amount';
            const input = document.getElementById(inputId);

            if (input) {
                input.value = '1';

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω–µ –±–∞–ª–∞–Ω—Å—É –∂–µ—Ç–æ–Ω—ñ–≤
                const tokenCost = (raffleType === 'daily') ? 1 : 3;
                const maxTickets = Math.floor(coinsBalance / tokenCost);
                input.max = maxTickets;

                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–í–°–Ü", —è–∫—â–æ –±–∞–ª–∞–Ω—Å –±—ñ–ª—å—à–µ 1
                const allButtonId = (raffleType === 'daily') ? 'daily-all-tokens-btn' : 'main-all-tokens-btn';
                const allButton = document.getElementById(allButtonId);

                if (allButton) {
                    if (coinsBalance > tokenCost) {
                        allButton.style.display = 'block';

                        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–°–Ü"
                        allButton.onclick = function() {
                            if (input) {
                                input.value = maxTickets;
                            }
                        };
                    } else {
                        allButton.style.display = 'none';
                    }
                }
            }

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç—ñ
            const btnId = (raffleType === 'daily') ? 'daily-join-btn' : 'main-join-btn';
            const joinBtn = document.getElementById(btnId);

            if (joinBtn) {
                joinBtn.setAttribute('data-raffle-id', raffleData.id || 'unknown');
                joinBtn.setAttribute('data-raffle-type', raffleType);

                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
                joinBtn.onclick = () => {
                    const raffleId = joinBtn.getAttribute('data-raffle-id');
                    if (!raffleId) {
                        console.error("ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                        return;
                    }

                    const raffleType = joinBtn.getAttribute('data-raffle-type') || 'main';
                    const inputId = (raffleType === 'daily') ? 'daily-token-amount' : 'main-token-amount';

                    this.participateInRaffleUI(raffleId, raffleType, inputId);
                };
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
            if (raffleType === 'daily') {
                this._updateDailyRaffleModal(raffleData);
            } else {
                this._updateMainRaffleModal(raffleData);
            }

            // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            modal.classList.add('open');

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            const closeButtons = modal.querySelectorAll('.modal-close, .cancel-btn');
            if (closeButtons && closeButtons.length > 0) {
                closeButtons.forEach(btn => {
                    if (btn) {
                        btn.addEventListener('click', function() {
                            modal.classList.remove('open');
                        });
                    }
                });
            } else {
                console.warn(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ ${modalId}`);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É:', error);
            showToast('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É', 'error');
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {Object} raffleData - –î–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @private
     */
    _updateDailyRaffleModal(raffleData) {
        if (!raffleData) return;

        try {
            const titleElement = document.getElementById('daily-modal-title');
            if (titleElement) {
                titleElement.textContent = raffleData.title || '–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à';
            }

            const prizeElement = document.getElementById('daily-prize-value');
            if (prizeElement) {
                const prizeAmount = raffleData.prize_amount || 0;
                const prizeCurrency = raffleData.prize_currency || 'WINIX';
                const winnersCount = raffleData.winners_count || 1;
                prizeElement.textContent = `${prizeAmount} ${prizeCurrency} (${winnersCount} –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤)`;
            }

            const participantsElement = document.getElementById('daily-participants');
            if (participantsElement) {
                participantsElement.textContent = raffleData.participants_count || '0';
            }

            const endDateElement = document.getElementById('daily-end-time');
            if (endDateElement && raffleData.end_time) {
                try {
                    endDateElement.textContent = formatDate(raffleData.end_time);
                } catch (dateError) {
                    console.error("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:", dateError);
                    endDateElement.textContent = '–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
                }
            }

            const descriptionElement = document.getElementById('daily-description');
            if (descriptionElement) {
                descriptionElement.textContent = raffleData.description ||
                    '–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑ –ø—Ä–∏–∑–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ.';
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —î
            const imageElement = document.getElementById('daily-prize-image');
            if (imageElement && raffleData.image_url) {
                imageElement.src = raffleData.image_url;
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:", error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {Object} raffleData - –î–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @private
     */
    _updateMainRaffleModal(raffleData) {
        if (!raffleData) return;

        try {
            const titleElement = document.getElementById('main-modal-title');
            if (titleElement) {
                titleElement.textContent = raffleData.title || '–ì—Ä–∞–Ω–¥ –†–æ–∑—ñ–≥—Ä–∞—à';
            }

            const prizeElement = document.getElementById('main-prize-value');
            if (prizeElement) {
                const prizeAmount = raffleData.prize_amount || 0;
                const prizeCurrency = raffleData.prize_currency || 'WINIX';
                const winnersCount = raffleData.winners_count || 1;
                prizeElement.textContent = `${prizeAmount} ${prizeCurrency} (${winnersCount} –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤)`;
            }

            const participantsElement = document.getElementById('main-participants');
            if (participantsElement) {
                participantsElement.textContent = raffleData.participants_count || '0';
            }

            const endDateElement = document.getElementById('main-end-time');
            if (endDateElement && raffleData.end_time) {
                try {
                    endDateElement.textContent = formatDate(raffleData.end_time);
                } catch (dateError) {
                    console.error("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:", dateError);
                    endDateElement.textContent = '–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
                }
            }

            const descriptionElement = document.getElementById('main-description');
            if (descriptionElement) {
                descriptionElement.textContent = raffleData.description ||
                    '–ì—Ä–∞–Ω–¥—ñ–æ–∑–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑ —á—É–¥–æ–≤–∏–º–∏ –ø—Ä–∏–∑–∞–º–∏! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ —Ç–∞ –∑–±—ñ–ª—å—à—ñ—Ç—å —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É.';
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —î
            const imageElement = document.getElementById('main-prize-image');
            if (imageElement && raffleData.image_url) {
                imageElement.src = raffleData.image_url;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤, —è–∫—â–æ —î
            const prizeDistributionElement = document.getElementById('main-prize-distribution');
            if (prizeDistributionElement) {
                if (raffleData.prize_distribution && typeof raffleData.prize_distribution === 'object' &&
                    WinixRaffles && WinixRaffles.utils && typeof WinixRaffles.utils.generatePrizeDistributionHTML === 'function') {
                    try {
                        prizeDistributionElement.innerHTML = WinixRaffles.utils.generatePrizeDistributionHTML(raffleData.prize_distribution);
                    } catch (prizeError) {
                        console.error("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–∏–∑—ñ–≤:", prizeError);
                        prizeDistributionElement.innerHTML = '<div class="prize-item"><span class="prize-place">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è</span></div>';
                    }
                } else {
                    prizeDistributionElement.innerHTML = '<div class="prize-item"><span class="prize-place">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è</span></div>';
                }
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:", error);
        }
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleType - –¢–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} inputId - ID –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∂–µ—Ç–æ–Ω—ñ–≤
     */
    async participateInRaffleUI(raffleId, raffleType, inputId) {
        if (!raffleId) {
            showToast('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 'error');
            return;
        }

        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ä–æ–∑—ñ–≥—Ä–∞—à
            showLoading('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É...', 'check-raffle');
            const raffleCheck = await api.apiRequest(`/api/raffles/${raffleId}`, 'GET', null, {
                suppressErrors: true,
                timeout: 5000
            });
            hideLoading('check-raffle');

            // –Ø–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π
            if (!raffleCheck || raffleCheck.status === 'error' ||
                (raffleCheck.data && raffleCheck.data.status !== 'active')) {
                showToast('–¶–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π', 'warning');

                // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                const modalId = (raffleType === 'daily') ? 'daily-raffle-modal' : 'main-raffle-modal';
                const modal = document.getElementById(modalId);
                if (modal) modal.classList.remove('open');

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if (WinixRaffles && WinixRaffles.events) {
                    WinixRaffles.events.emit('refresh-raffles', {
                        force: true,
                        timestamp: Date.now()
                    });
                }

                // –û—á–∏—â—É—î–º–æ –∫–µ—à
                this.clearInvalidRaffleIds();
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
            const input = document.getElementById(inputId);
            let entryCount = 1;

            if (input) {
                // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —á–∏—Å–ª–æ
                entryCount = parseInt(input.value || '1');
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è —î —á–∏—Å–ª–æ–º
                if (isNaN(entryCount) || entryCount <= 0) {
                    showToast('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è', 'warning');
                    return;
                }
            } else {
                console.warn(`–ï–ª–µ–º–µ–Ω—Ç –≤–≤–æ–¥—É –∑ ID ${inputId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            const modalId = (raffleType === 'daily') ? 'daily-raffle-modal' : 'main-raffle-modal';
            const modal = document.getElementById(modalId);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤
            let userData;
            try {
                userData = await api.getUserData();
            } catch (userError) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userError);
                userData = { data: { coins: 0 } };
            }

            const coinsBalance = userData && userData.data ? (userData.data.coins || 0) : 0;
            const tokenCost = (raffleType === 'daily') ? 1 : 3;
            const totalCost = entryCount * tokenCost;

            if (coinsBalance < totalCost) {
                showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ ${totalCost}, —É –≤–∞—Å ${coinsBalance}`, 'warning');
                return;
            }

            // –ë–µ—Ä–µ–º–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            const result = await this.participateInRaffle(raffleId, entryCount);

            if (result && result.status === 'success') {
                // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                if (modal) {
                    modal.classList.remove('open');
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                await this.updateUserBalance();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                showToast(result.message || '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ', 'success');

                // –Ø–∫—â–æ —î –±–æ–Ω—É—Å, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω—å–æ–≥–æ
                if (result.data && result.data.bonus_amount) {
                    setTimeout(() => {
                        showToast(`–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ${result.data.bonus_amount} WINIX —è–∫ –±–æ–Ω—É—Å!`, 'success');
                    }, 3000);
                }
            } else {
                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                showToast(result && result.message ? result.message : '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ', 'error');

                // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –Ω–µ—ñ—Å–Ω—É—é—á–∏–º —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–º
                if (result && result.message &&
                    (result.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ') ||
                     result.message.includes('–Ω–µ —ñ—Å–Ω—É—î') ||
                     result.message.includes('–Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π'))) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                    this.refreshActiveRaffles(true);

                    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                    if (modal) {
                        modal.classList.remove('open');
                    }
                }
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:', error);
            showToast('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     * @param {HTMLElement} [button] - –ö–Ω–æ–ø–∫–∞ –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     * @param {HTMLElement} [container] - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ–ª–µ–º–µ–Ω—Ç—É –±–æ–Ω—É—Å—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
     */
    async claimNewbieBonus(button, container) {
        try {
            showLoading('–û—Ç—Ä–∏–º—É—î–º–æ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞...', 'newbie-bonus');

            const userId = api.getUserId();
            if (!userId) {
                throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const response = await api.apiRequest(`/api/user/${userId}/claim-newbie-bonus`, 'POST', null, {
                timeout: 10000,
                suppressErrors: true
            });

            hideLoading('newbie-bonus');

            if (response && (response.status === 'success' || response.status === 'already_claimed')) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å WINIX —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await this.updateUserBalance();

                if (response.status === 'success') {
                    showToast(`–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ${response.data && response.data.amount ? response.data.amount : 500} WINIX —è–∫ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞!`, 'success');

                    // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
                    if (button) {
                        button.textContent = '–û—Ç—Ä–∏–º–∞–Ω–æ';
                        button.disabled = true;
                        button.style.opacity = '0.6';
                        button.style.cursor = 'default';
                    }

                    // –î–æ–¥–∞—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫, —è–∫—â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω–∏–π
                    if (container && WinixRaffles && WinixRaffles.utils &&
                        typeof WinixRaffles.utils.markElement === 'function') {
                        WinixRaffles.utils.markElement(container);
                    }
                } else if (response.status === 'already_claimed') {
                    showToast('–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞', 'info');

                    // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
                    if (button) {
                        button.textContent = '–û—Ç—Ä–∏–º–∞–Ω–æ';
                        button.disabled = true;
                        button.style.opacity = '0.6';
                        button.style.cursor = 'default';
                    }

                    // –î–æ–¥–∞—î–º–æ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫, —è–∫—â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω–∏–π
                    if (container && WinixRaffles && WinixRaffles.utils &&
                        typeof WinixRaffles.utils.markElement === 'function') {
                        WinixRaffles.utils.markElement(container);
                    }
                }

                return {
                    status: response.status,
                    message: response.message || '–ë–æ–Ω—É—Å –Ω–æ–≤–∞—á–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ',
                    data: response.data
                };
            } else {
                throw new Error((response && response.message) || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞:', error);
            hideLoading('newbie-bonus');
            showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞', 'error');
            return { status: 'error', message: error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞' };
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async updateUserBalance() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
            if (api && typeof api.getBalance === 'function') {
                await api.getBalance();
                return true;
            } else {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                const userData = await api.getUserData(true);

                if (userData && userData.data) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                    const coinsElement = document.getElementById('user-coins');
                    const tokensElement = document.getElementById('user-tokens');

                    if (coinsElement) {
                        coinsElement.textContent = userData.data.coins || 0;
                    }

                    if (tokensElement) {
                        tokensElement.textContent = userData.data.balance || 0;
                    }
                }

                return true;
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
            return false;
        } finally {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            if (WinixRaffles && WinixRaffles.events) {
                WinixRaffles.events.emit('balance-updated', {
                    timestamp: Date.now()
                });
            }
        }
    }

    /**
     * –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–º
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async shareRaffle(raffleId) {
        if (!raffleId) {
            showToast('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 'error');
            return;
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            if (!this.isValidRaffleId(raffleId)) {
                this.refreshActiveRaffles(true);
                showToast('–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è - —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'error');
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            const raffleData = await this.getRaffleDetails(raffleId);
            if (!raffleData) {
                showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É', 'error');
                return;
            }

            // –ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            const title = raffleData.title || '–†–æ–∑—ñ–≥—Ä–∞—à';
            const prizeAmount = raffleData.prize_amount || 0;
            const prizeCurrency = raffleData.prize_currency || 'WINIX';
            const winnersCount = raffleData.winners_count || 1;

            // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è
            const shareText = `üéÆ –†–æ–∑—ñ–≥—Ä–∞—à WINIX: ${title}\n\n` +
                            `üí∞ –ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: ${prizeAmount} ${prizeCurrency}\n` +
                            `üèÜ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: ${winnersCount}\n\n` +
                            `–ë–µ—Ä–∏ —É—á–∞—Å—Ç—å —ñ –≤–∏–≥—Ä–∞–≤–∞–π –ø—Ä–∏–∑–∏! üöÄ`;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ Telegram –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è
                    if (typeof window.Telegram.WebApp.switchInlineQuery === 'function') {
                        window.Telegram.WebApp.switchInlineQuery(shareText, ['users', 'groups']);
                        return;
                    }
                } catch (telegramError) {
                    console.warn('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Telegram WebApp:', telegramError);
                }
            }

            // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - Web Share API
            if (navigator.share) {
                try {
                    await navigator.share({
                        title: `–†–æ–∑—ñ–≥—Ä–∞—à WINIX: ${title}`,
                        text: shareText
                    });
                    showToast('–†–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ –ø–æ—à–∏—Ä–µ–Ω–æ', 'success');
                    return;
                } catch (shareError) {
                    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º—ñ–Ω–∏–≤ –ø–æ—à–∏—Ä–µ–Ω–Ω—è –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞
                    if (shareError.name !== 'AbortError') {
                        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à–∏—Ä–µ–Ω–Ω—è:', shareError);
                    }
                }
            }

            // –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
            if (typeof copyToClipboard === 'function') {
                await copyToClipboard(shareText);
                showToast('–¢–µ–∫—Å—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—É —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É', 'success');
            } else {
                // –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
                const textarea = document.createElement('textarea');
                textarea.value = shareText;
                textarea.style.position = 'fixed';
                textarea.style.left = '-9999px';
                document.body.appendChild(textarea);
                textarea.select();

                try {
                    document.execCommand('copy');
                    showToast('–¢–µ–∫—Å—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—É —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É', 'success');
                } catch (copyError) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', copyError);
                    showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç', 'error');
                }

                document.body.removeChild(textarea);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à–∏—Ä–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É:', error);
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–º', 'error');
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ —ñ –∫–µ—à—É –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
     */
    destroy() {
        try {
            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç–∏
            if (_participationTimeoutId) {
                clearTimeout(_participationTimeoutId);
                _participationTimeoutId = null;
            }

            // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
            _isParticipating = false;

            // –û—á–∏—â–∞—î–º–æ –∫–µ—à
            _raffleDetailsCache = {};

            // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            this._removeEventListeners();

            console.log("üö´ Participation: –ú–æ–¥—É–ª—å —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö –∑–∞–∫—Ä–∏—Ç–æ");
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö:", error);
        }
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É
const participationModule = new ParticipationModule();

// –î–æ–¥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
if (WinixRaffles) {
    WinixRaffles.participation = participationModule;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => participationModule.init());
} else {
    setTimeout(() => participationModule.init(), 100);
}

export default participationModule;