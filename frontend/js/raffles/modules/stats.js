/**
 * stats.js - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */

import { formatCurrency, formatNumber } from './formatters.js';
import { showToast } from '../../ui.js';
import WinixAPI from '../../api.js';

class RaffleStats {
    constructor() {
        this._statsData = null;
        this._charts = {};
        this._isLoading = false;
        this._lastUpdate = 0;
        this._updateInterval = 300000; // 5 —Ö–≤–∏–ª–∏–Ω
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     * @returns {Promise<Object>} - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async getUserRaffleStats(forceRefresh = false) {
        try {
            const now = Date.now();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            if (!forceRefresh && this._statsData && (now - this._lastUpdate < this._updateInterval)) {
                console.log("üìã Raffles Stats: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
                return this._statsData;
            }

            if (this._isLoading) {
                console.log("‚è≥ Raffles Stats: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
                return this._statsData;
            }

            this._isLoading = true;
            this._showStatsLoader();

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = await WinixAPI.getUserId();
            if (!userId) {
                throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ API
            const response = await WinixAPI.apiRequest(`/api/user/${userId}/stats/raffles`, 'GET');

            this._hideStatsLoader();
            this._isLoading = false;
            this._lastUpdate = now;

            if (response.status === 'success') {
                this._statsData = response.data || {};
                console.log(`‚úÖ Raffle Stats: –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`, this._statsData);
                return this._statsData;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
            this._hideStatsLoader();
            this._isLoading = false;
            showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message);
            return null;
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    async displayUserStats(containerId = 'user-stats-container', forceRefresh = false) {
        const container = document.getElementById(containerId);
        if (!container) {
            console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ ID '${containerId}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            return;
        }

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const stats = await this.getUserRaffleStats(forceRefresh);

            if (!stats) {
                container.innerHTML = this._createErrorMessageHTML(containerId);
                return;
            }

            // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            container.innerHTML = this._createUserStatsHTML(stats);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            this._addUserStatsEventListeners(containerId);

            // –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ó—Ö
            if (typeof Chart !== 'undefined') {
                this._initUserCharts(stats);
            } else {
                console.warn("Chart.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≥—Ä–∞—Ñ—ñ–∫–∏ –Ω–µ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ");
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            container.innerHTML = this._createErrorMessageHTML(containerId);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥
     * @param {string} period - –ü–µ—Ä—ñ–æ–¥ (week, month, year, all)
     * @returns {Promise<Object>} - –î–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
     */
    async getRaffleHistory(period = 'month') {
        try {
            this._showStatsLoader();

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = await WinixAPI.getUserId();
            if (!userId) {
                throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ API
            const response = await WinixAPI.apiRequest(`/api/user/${userId}/stats/raffles/history?period=${period}`, 'GET');

            this._hideStatsLoader();

            if (response.status === 'success') {
                console.log(`‚úÖ Raffle Stats: –û—Ç—Ä–∏–º–∞–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ ${period}`, response.data);
                return response.data || {};
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ ${period}:`, error);
            this._hideStatsLoader();
            showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: ' + error.message);
            return null;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    async refreshStats(containerId = 'user-stats-container') {
        await this.displayUserStats(containerId, true);
    }

    /**
     * –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async exportStatsData() {
        if (!this._statsData) {
            showToast('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É');
            return;
        }

        try {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è CSV
            let csvContent = "data:text/csv;charset=utf-8,";

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ CSV –∑ —á–∞—Å–æ–º –µ–∫—Å–ø–æ—Ä—Ç—É
            const now = new Date();
            csvContent += `WINIX Raffle Stats - Export Date: ${now.toLocaleString()}\r\n\r\n`;

            // –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
            csvContent += "Metric,Value\r\n";

            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑—ñ statsData
            Object.entries(this._statsData).forEach(([key, value]) => {
                // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ –æ–±'—î–∫—Ç–∏
                if (typeof value !== 'object') {
                    csvContent += `${key},${value}\r\n`;
                }
            });

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", `raffle_stats_${now.toISOString().split('T')[0]}.csv`);
            document.body.appendChild(link);

            // –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            link.click();

            // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            document.body.removeChild(link);

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            showToast('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {string} - HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
     */
    _createUserStatsHTML(stats) {
        return `
            <div class="stats-dashboard user-stats">
                <div class="stats-header">
                    <h2 class="stats-title">–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</h2>
                    <button class="stats-refresh-btn" id="refresh-stats-btn">
                        <span class="refresh-icon">üîÑ</span> –û–Ω–æ–≤–∏—Ç–∏
                    </button>
                </div>
                
                <div class="stats-summary">
                    <div class="stats-card">
                        <div class="stats-card-value">${stats.total_participated || 0}</div>
                        <div class="stats-card-label">–í—Å—å–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</div>
                        <div class="stats-card-icon">üéÆ</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-card-value">${stats.wins_count || 0}</div>
                        <div class="stats-card-label">–ü–µ—Ä–µ–º–æ–≥</div>
                        <div class="stats-card-icon">üèÜ</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-card-value">${formatCurrency(stats.total_winix_won || 0)}</div>
                        <div class="stats-card-label">WINIX –≤–∏–≥—Ä–∞–Ω–æ</div>
                        <div class="stats-card-icon">üí∞</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-card-value">${stats.total_tokens_spent || 0}</div>
                        <div class="stats-card-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤</div>
                        <div class="stats-card-icon">üéüÔ∏è</div>
                    </div>
                </div>
                
                <div class="stats-section">
                    <h3 class="stats-section-title">–†–æ–∑–ø–æ–¥—ñ–ª —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö</h3>
                    <div class="stats-charts">
                        <div class="stats-chart-container">
                            <canvas id="raffle-types-chart"></canvas>
                        </div>
                        <div class="stats-chart-container">
                            <canvas id="raffle-status-chart"></canvas>
                        </div>
                    </div>
                </div>
                
                <div class="stats-section">
                    <h3 class="stats-section-title">–Ü—Å—Ç–æ—Ä—ñ—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö</h3>
                    <div class="stats-period-selector" id="history-period-selector">
                        <button class="period-btn" data-period="week">–¢–∏–∂–¥–µ–Ω—å</button>
                        <button class="period-btn active" data-period="month">–ú—ñ—Å—è—Ü—å</button>
                        <button class="period-btn" data-period="year">–†—ñ–∫</button>
                        <button class="period-btn" data-period="all">–í—Å—ñ</button>
                    </div>
                    <div class="stats-chart-container large-chart">
                        <canvas id="participation-history-chart"></canvas>
                    </div>
                </div>
                
                <div class="stats-insights">
                    <h3 class="stats-section-title">–°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏</h3>
                    <div class="insights-container" id="user-insights-container">
                        <div class="insight-item">
                            <div class="insight-icon">üèÜ</div>
                            <div class="insight-content">
                                <div class="insight-title">–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ</div>
                                <div class="insight-value">${this._calculateWinRate(stats)}%</div>
                                <div class="insight-description">–ø–µ—Ä–µ–º–æ–≥ –≤—ñ–¥ —É—Å—ñ—Ö —É—á–∞—Å—Ç–µ–π</div>
                            </div>
                        </div>
                        <div class="insight-item">
                            <div class="insight-icon">üìà</div>
                            <div class="insight-content">
                                <div class="insight-title">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤</div>
                                <div class="insight-value">${this._calculateTokenEfficiency(stats)}</div>
                                <div class="insight-description">WINIX –∑–∞ 1 –∂–µ—Ç–æ–Ω</div>
                            </div>
                        </div>
                        <div class="insight-item">
                            <div class="insight-icon">üéüÔ∏è</div>
                            <div class="insight-content">
                                <div class="insight-title">–°–µ—Ä–µ–¥–Ω—è —É—á–∞—Å—Ç—å</div>
                                <div class="insight-value">${this._calculateAvgTokensPerRaffle(stats)}</div>
                                <div class="insight-description">–∂–µ—Ç–æ–Ω—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à</div>
                            </div>
                        </div>
                        <div class="insight-item">
                            <div class="insight-icon">‚≠ê</div>
                            <div class="insight-content">
                                <div class="insight-title">–ù–∞–π–∫—Ä–∞—â–µ –º—ñ—Å—Ü–µ</div>
                                <div class="insight-value">${stats.best_place || '-'}</div>
                                <div class="insight-description">–Ω–∞–π–≤–∏—â–∞ –ø–æ–∑–∏—Ü—ñ—è</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="stats-achievements">
                    <h3 class="stats-section-title">–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è</h3>
                    <div class="achievements-grid">
                        ${this._generateAchievementsHTML(stats.achievements || {})}
                    </div>
                </div>

                <div class="stats-footer">
                    <button class="stats-export-btn" id="export-stats-btn">
                        <span class="export-icon">üìä</span> –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     * @returns {string} - HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
     */
    _createErrorMessageHTML(containerId) {
        return `
            <div class="stats-error">
                <div class="stats-error-icon">‚ùå</div>
                <div class="stats-error-message">–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</div>
                <button class="stats-retry-btn" onclick="window.rafflesModule.stats.refreshStats('${containerId}')">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑</button>
            </div>
        `;
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    _addUserStatsEventListeners(containerId) {
        // –û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        document.getElementById('refresh-stats-btn')?.addEventListener('click', () => {
            this.refreshStats(containerId);
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        document.getElementById('export-stats-btn')?.addEventListener('click', () => {
            this.exportStatsData();
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä—ñ–æ–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó
        document.querySelectorAll('#history-period-selector .period-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                // –ó–Ω—ñ–º–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
                document.querySelectorAll('#history-period-selector .period-btn').forEach(b => {
                    b.classList.remove('active');
                });

                // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
                btn.classList.add('active');

                // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
                const period = btn.getAttribute('data-period');

                // –û–Ω–æ–≤–ª—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó
                await this._updateHistoryChart(period);
            });
        });
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è –ø–∞–Ω–µ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    _initUserCharts(stats) {
        if (typeof Chart === 'undefined') {
            console.warn("Chart.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≥—Ä–∞—Ñ—ñ–∫–∏ –Ω–µ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ");
            return;
        }

        // –ì—Ä–∞—Ñ—ñ–∫ —Ç–∏–ø—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (–ø–æ–Ω—á–∏–∫)
        this._initRaffleTypesChart(stats);

        // –ì—Ä–∞—Ñ—ñ–∫ —Å—Ç–∞—Ç—É—Å—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (–ø–æ–Ω—á–∏–∫)
        this._initRaffleStatusChart(stats);

        // –ì—Ä–∞—Ñ—ñ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó —É—á–∞—Å—Ç—ñ (–ª—ñ–Ω—ñ–π–Ω–∏–π)
        // –ü–æ—á–∞—Ç–∫–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –º—ñ—Å—è—Ü—å
        this._updateHistoryChart('month');
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Ç–∏–ø—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    _initRaffleTypesChart(stats) {
        const ctx = document.getElementById('raffle-types-chart');
        if (!ctx) return;

        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        const typeData = {
            labels: ['–©–æ–¥–µ–Ω–Ω—ñ', '–î–∂–µ–∫–ø–æ—Ç'],
            datasets: [{
                data: [
                    stats.daily_participated || 0,
                    stats.jackpot_participated || 0
                ],
                backgroundColor: [
                    'rgba(33, 150, 243, 1)',
                    'rgba(0, 201, 167, 1)'
                ],
                borderWidth: 0,
                hoverOffset: 4
            }]
        };

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
        const config = {
            type: 'doughnut',
            data: typeData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            color: 'white',
                            font: {
                                size: 12
                            },
                            padding: 20
                        }
                    },
                    title: {
                        display: true,
                        text: '–¢–∏–ø–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤',
                        color: 'white',
                        font: {
                            size: 16
                        },
                        padding: {
                            top: 10,
                            bottom: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw || 0;
                                const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                },
                cutout: '60%'
            }
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        if (this._charts.typeChart) {
            this._charts.typeChart.destroy();
        }

        this._charts.typeChart = new Chart(ctx, config);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    _initRaffleStatusChart(stats) {
        const ctx = document.getElementById('raffle-status-chart');
        if (!ctx) return;

        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        const statusData = {
            labels: ['–ü–µ—Ä–µ–º–æ–≥–∏', '–£—á–∞—Å—Ç—å –±–µ–∑ –ø–µ—Ä–µ–º–æ–≥–∏'],
            datasets: [{
                data: [
                    stats.wins_count || 0,
                    (stats.total_participated || 0) - (stats.wins_count || 0)
                ],
                backgroundColor: [
                    'rgba(255, 215, 0, 1)',
                    'rgba(78, 181, 247, 1)'
                ],
                borderWidth: 0,
                hoverOffset: 4
            }]
        };

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
        const config = {
            type: 'doughnut',
            data: statusData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            color: 'white',
                            font: {
                                size: 12
                            },
                            padding: 20
                        }
                    },
                    title: {
                        display: true,
                        text: '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—á–∞—Å—Ç—ñ',
                        color: 'white',
                        font: {
                            size: 16
                        },
                        padding: {
                            top: 10,
                            bottom: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw || 0;
                                const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                },
                cutout: '60%'
            }
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        if (this._charts.statusChart) {
            this._charts.statusChart.destroy();
        }

        this._charts.statusChart = new Chart(ctx, config);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó —É—á–∞—Å—Ç—ñ
     * @param {string} period - –ü–µ—Ä—ñ–æ–¥ (week, month, year, all)
     */
    async _updateHistoryChart(period = 'month') {
        const ctx = document.getElementById('participation-history-chart');
        if (!ctx) return;

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
        const historyData = await this.getRaffleHistory(period);
        if (!historyData || !historyData.dates || !historyData.participation) {
            return;
        }

        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
        const chartData = {
            labels: historyData.dates,
            datasets: [
                {
                    label: '–í—Å—å–æ–≥–æ —É—á–∞—Å—Ç–µ–π',
                    data: historyData.participation,
                    borderColor: 'rgba(33, 150, 243, 1)',
                    backgroundColor: function(context) {
                        const chart = context.chart;
                        const {ctx, chartArea} = chart;

                        if (!chartArea) {
                            return 'rgba(33, 150, 243, 1)';
                        }

                        // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç
                        const gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
                        gradient.addColorStop(0, 'rgba(33, 150, 243, 0.1)');
                        gradient.addColorStop(1, 'rgba(33, 150, 243, 0.4)');

                        return gradient;
                    },
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 3,
                    pointHoverRadius: 5,
                    yAxisID: 'y'
                },
                {
                    label: '–ü–µ—Ä–µ–º–æ–≥–∏',
                    data: historyData.wins || [],
                    borderColor: 'rgba(255, 215, 0, 1)',
                    backgroundColor: 'rgba(255, 215, 0, 1)',
                    borderWidth: 2,
                    fill: false,
                    tension: 0.4,
                    pointStyle: 'rect',
                    pointRadius: 4,
                    pointHoverRadius: 6,
                    yAxisID: 'y1'
                }
            ]
        };

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
        const config = {
            type: 'line',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            color: 'white',
                            font: {
                                size: 12
                            },
                            padding: 20,
                            usePointStyle: true
                        }
                    },
                    title: {
                        display: true,
                        text: `–Ü—Å—Ç–æ—Ä—ñ—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö (${this._getPeriodName(period)})`,
                        color: 'white',
                        font: {
                            size: 16
                        },
                        padding: {
                            top: 10,
                            bottom: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            title: function(tooltipItems) {
                                return tooltipItems[0].label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.7)'
                        }
                    },
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å—Ç–µ–π',
                            color: 'rgba(255, 255, 255, 0.7)'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.7)'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥',
                            color: 'rgba(255, 255, 255, 0.7)'
                        },
                        grid: {
                            drawOnChartArea: false,
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.7)'
                        }
                    }
                }
            }
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        if (this._charts.historyChart) {
            this._charts.historyChart.destroy();
        }

        this._charts.historyChart = new Chart(ctx, config);
    }

    /**
     * –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è HTML –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} achievements - –û–±'—î–∫—Ç –∑ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏
     * @returns {string} - HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
     */
    _generateAchievementsHTML(achievements) {
        if (Object.keys(achievements).length === 0) {
            return `
                <div class="empty-achievements">
                    <div class="empty-icon">üèÜ</div>
                    <p>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–æ–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö, —â–æ–± —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è!</p>
                </div>
            `;
        }

        return Object.entries(achievements).map(([id, achievement]) => {
            const isUnlocked = achievement.unlocked;
            const progressText = achievement.progress_type === 'count'
                ? `${achievement.current_progress}/${achievement.required_progress}`
                : `${achievement.current_progress}%`;

            const progressWidth = Math.min(100, Math.max(0,
                achievement.progress_type === 'count'
                    ? (achievement.current_progress / achievement.required_progress) * 100
                    : achievement.current_progress
            ));

            return `
                <div class="achievement-card ${isUnlocked ? 'unlocked' : 'locked'}">
                    <div class="achievement-icon">${achievement.icon}</div>
                    <div class="achievement-info">
                        <div class="achievement-title">
                            ${achievement.title}
                            ${!isUnlocked ? '<span class="lock-icon">üîí</span>' : ''}
                        </div>
                        <div class="achievement-description">${achievement.description}</div>
                        <div class="achievement-progress-bar">
                            <div class="achievement-progress" style="width: ${progressWidth}%"></div>
                        </div>
                        <div class="achievement-progress-text">${progressText}</div>
                    </div>
                    <div class="achievement-reward">
                        <div class="reward-label">–ù–∞–≥–æ—Ä–æ–¥–∞:</div>
                        <div class="reward-value">${achievement.reward}</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    /**
     * –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–æ–≥
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {number} - –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥
     */
    _calculateWinRate(stats) {
        const totalParticipated = stats.total_participated || 0;
        const winsCount = stats.wins_count || 0;

        if (totalParticipated === 0) return 0;
        return Math.round((winsCount / totalParticipated) * 100);
    }

    /**
     * –û–±—á–∏—Å–ª–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∂–µ—Ç–æ–Ω—ñ–≤ (WINIX –Ω–∞ 1 –∂–µ—Ç–æ–Ω)
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {string} - –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
     */
    _calculateTokenEfficiency(stats) {
        const totalWinixWon = stats.total_winix_won || 0;
        const totalTokensSpent = stats.total_tokens_spent || 0;

        if (totalTokensSpent === 0) return '0';
        return (totalWinixWon / totalTokensSpent).toFixed(2);
    }

    /**
     * –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∂–µ—Ç–æ–Ω—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {string} - –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
     */
    _calculateAvgTokensPerRaffle(stats) {
        const totalTokensSpent = stats.total_tokens_spent || 0;
        const totalParticipated = stats.total_participated || 0;

        if (totalParticipated === 0) return '0';
        return (totalTokensSpent / totalParticipated).toFixed(1);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–µ—Ä—ñ–æ–¥—É
     * @param {string} period - –ö–æ–¥ –ø–µ—Ä—ñ–æ–¥—É
     * @returns {string} - –ù–∞–∑–≤–∞ –ø–µ—Ä—ñ–æ–¥—É
     */
    _getPeriodName(period) {
        switch (period) {
            case 'week': return '—Ç–∏–∂–¥–µ–Ω—å';
            case 'month': return '–º—ñ—Å—è—Ü—å';
            case 'year': return '—Ä—ñ–∫';
            case 'all': return '–≤–µ—Å—å —á–∞—Å';
            default: return period;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    _showStatsLoader() {
        if (typeof window.showLoading === 'function') {
            window.showLoading('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            return;
        }

        // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –≥–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è
        let loader = document.getElementById('stats-loader');

        if (!loader) {
            loader = document.createElement('div');
            loader.id = 'stats-loader';
            loader.className = 'stats-loader';
            loader.innerHTML = `
                <div class="loader-spinner"></div>
                <div class="loader-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
            `;
            document.body.appendChild(loader);
        }

        loader.style.display = 'flex';
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    _hideStatsLoader() {
        if (typeof window.hideLoading === 'function') {
            window.hideLoading();
            return;
        }

        // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –≥–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è
        const loader = document.getElementById('stats-loader');
        if (loader) {
            loader.style.display = 'none';
        }
    }
}

export default new RaffleStats();