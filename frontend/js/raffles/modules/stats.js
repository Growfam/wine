/**
 * stats.js - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∑–±—ñ—Ä, —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.
 */

import WinixRaffles from '../globals.js';
import api from '../services/api.js';
import { showLoading, hideLoading, showToast } from '../utils/ui-helpers.js';
import { formatCurrency, formatNumber } from '../utils/formatters.js';

// –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let _currentStats = null;
let _isUpdating = false;
let _lastUpdateTime = 0;
let _eventListeners = [];

// –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏)
const STATS_UPDATE_INTERVAL = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ UI –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
const UI_ELEMENTS = {
    totalParticipated: 'total-participated',
    totalWins: 'total-wins',
    totalWinixWon: 'total-winix-won',
    totalTokensSpent: 'total-tokens-spent'
};

// –ö–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
const CACHE_KEY = 'winix_user_statistics';

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
 * @returns {boolean} –°—Ç–∞–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
 */
function isOnline() {
    return typeof navigator.onLine === 'undefined' || navigator.onLine;
}

/**
 * –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */
class StatisticsModule {
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    init() {
        console.log("üìä Stats: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");

        try {
            // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
            _currentStats = this._getStatsFromCache();

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            if (_currentStats) {
                this.updateStatisticsDisplay(_currentStats);
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
            this.updateStatistics().then(stats => {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                _currentStats = stats;
                this.updateStatisticsDisplay(stats);
            });

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            this._setupEventListeners();

            console.log("‚úÖ Stats: –ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        } catch (error) {
            console.error("‚ùå Stats: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     * @private
     */
    _setupEventListeners() {
        // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        const historyUpdateHandler = (event) => {
            if (event.detail && Array.isArray(event.detail.data)) {
                this.updateStatsFromHistory(event.detail.data);
            }
        };

        document.addEventListener('history-updated', historyUpdateHandler);
        _eventListeners.push({
            element: document,
            event: 'history-updated',
            handler: historyUpdateHandler
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
        const participationHandler = (event) => {
            if (event.detail) {
                this.updateParticipationStats(event.detail.entryCount || 0);
            }
        };

        document.addEventListener('raffle-participated', participationHandler);
        _eventListeners.push({
            element: document,
            event: 'raffle-participated',
            handler: participationHandler
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è –≤–∏–≥—Ä–∞—à—ñ–≤
        const winHandler = (event) => {
            if (event.detail) {
                this.updateWinStats(
                    event.detail.winixAmount || 0,
                    event.detail.raffleId,
                    event.detail.details
                );
            }
        };

        document.addEventListener('raffle-win', winHandler);
        _eventListeners.push({
            element: document,
            event: 'raffle-win',
            handler: winHandler
        });
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     * @private
     */
    _removeEventListeners() {
        _eventListeners.forEach(listener => {
            if (listener.element && listener.event && listener.handler) {
                listener.element.removeEventListener(listener.event, listener.handler);
            }
        });

        _eventListeners = [];
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM
     * @param {string} id - ID –µ–ª–µ–º–µ–Ω—Ç–∞
     * @returns {HTMLElement|null} - –ï–ª–µ–º–µ–Ω—Ç DOM –∞–±–æ null, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
     * @private
     */
    _getElement(id) {
        return document.getElementById(id);
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–º—ñ—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç–∞
     * @param {string} id - ID –µ–ª–µ–º–µ–Ω—Ç–∞
     * @param {string|number} value - –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
     * @param {Function} formatter - –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
     * @private
     */
    _updateElementText(id, value, formatter = null) {
        const element = this._getElement(id);
        if (element) {
            const formattedValue = formatter ? formatter(value) : value;
            element.textContent = formattedValue;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∫–µ—à—É
     * @returns {Object|null} –û–±'—î–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–±–æ null
     * @private
     */
    _getStatsFromCache() {
        try {
            const cachedData = localStorage.getItem(CACHE_KEY);
            if (!cachedData) return null;

            const parsedData = JSON.parse(cachedData);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞–Ω—ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏ (30 –¥–Ω—ñ–≤)
            const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω—ñ–≤
            if (parsedData.timestamp && Date.now() - parsedData.timestamp > maxAge) {
                console.log('üìä Stats: –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏, –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö');
                localStorage.removeItem(CACHE_KEY);
                return null;
            }

            return parsedData.data;
        } catch (e) {
            console.warn("‚ö†Ô∏è Stats: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–µ—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", e);
            return null;
        }
    }

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–µ—à
     * @param {Object} stats - –û–±'—î–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @private
     */
    _saveStatsToCache(stats) {
        try {
            const cacheData = {
                data: stats,
                timestamp: Date.now()
            };

            localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
        } catch (e) {
            console.warn("‚ö†Ô∏è Stats: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–µ—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", e);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} –ü—Ä–æ–º—ñ—Å –∑ –¥–∞–Ω–∏–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async fetchStatistics(forceRefresh = false) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (_isUpdating) {
            console.log("‚è≥ Stats: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
            return _currentStats || this._getStatsFromCache() || this.getDefaultStats();
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ
        const now = Date.now();
        if (!forceRefresh && _lastUpdateTime > 0 && (now - _lastUpdateTime) < STATS_UPDATE_INTERVAL) {
            console.log("‚è≥ Stats: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            return _currentStats || this._getStatsFromCache() || this.getDefaultStats();
        }

        _isUpdating = true;

        try {
            // –û—Å–∫—ñ–ª—å–∫–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–º–∞—î - –æ–±—á–∏—Å–ª—é—î–º–æ —ó—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            showLoading('–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...', 'stats-update');

            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            let history = [];

            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const userId = api.getUserId();
                if (!userId) {
                    throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø–∏—Ç–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                const response = await api.getRafflesHistory({}, true);

                if (Array.isArray(response)) {
                    history = response;
                } else if (response && response.data && Array.isArray(response.data)) {
                    history = response.data;
                }
            } catch (historyError) {
                console.warn("‚ö†Ô∏è Stats: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", historyError.message);

                // –Ø–∫—â–æ —î –¥–æ—Å—Ç—É–ø –¥–æ –º–æ–¥—É–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –Ω—å–æ–≥–æ
                if (WinixRaffles && WinixRaffles.history && typeof WinixRaffles.history.getRafflesHistory === 'function') {
                    try {
                        history = await WinixRaffles.history.getRafflesHistory({}, false);
                    } catch (moduleError) {
                        console.warn("‚ö†Ô∏è Stats: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑ –º–æ–¥—É–ª—è:", moduleError);
                    }
                }
            }

            // –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
            const stats = this.calculateStatsFromHistory(history);

            // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            _lastUpdateTime = now;

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            this._saveStatsToCache(stats);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ª–æ–∞–¥–µ—Ä
            hideLoading('stats-update');
            _isUpdating = false;

            // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            WinixRaffles.events.emit('statistics-updated', {
                data: stats,
                source: 'history'
            });

            return stats;
        } catch (error) {
            console.warn("‚ö†Ô∏è Stats: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error.message);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ª–æ–∞–¥–µ—Ä —ñ —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
            hideLoading('stats-update');
            _isUpdating = false;

            // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
            const cachedStats = this._getStatsFromCache();
            if (cachedStats) {
                console.log("üìã Stats: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏");
                return cachedStats;
            }

            // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–µ—à—É - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            return this.getDefaultStats();
        }
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Array} history - –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @returns {Object} –û–±'—î–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    calculateStatsFromHistory(history = []) {
        // –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const stats = this.getDefaultStats();

        if (!Array.isArray(history) || history.length === 0) {
            return stats;
        }

        try {
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
            const safeHistory = history.filter(item => item && typeof item === 'object');

            // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å—Ç–µ–π
            stats.totalParticipated = safeHistory.length;

            // –û–±—á–∏—Å–ª—é—î–º–æ —Ä–µ—à—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            safeHistory.forEach(item => {
                // –†–∞—Ö—É—î–º–æ –≤–∏—Ç—Ä–∞—á–µ–Ω—ñ –∂–µ—Ç–æ–Ω–∏
                if (item.tokensSpent || item.entry_count) {
                    const tokens = parseInt(item.tokensSpent || item.entry_count || 0);
                    if (!isNaN(tokens)) {
                        stats.totalTokensSpent += tokens;
                    }
                }

                // –†–∞—Ö—É—î–º–æ –ø–µ—Ä–µ–º–æ–≥–∏ —Ç–∞ –≤–∏–≥—Ä–∞—à—ñ
                if (item.status === 'won' || item.won) {
                    stats.totalWins++;

                    // –û–±—á–∏—Å–ª—é—î–º–æ —Å—É–º—É –≤–∏–≥—Ä–∞—à—É
                    if (item.prize) {
                        const match = item.prize.match(/(\d+(?:\.\d+)?)\s*WINIX/i);
                        if (match) {
                            const winAmount = parseFloat(match[1]);
                            if (!isNaN(winAmount)) {
                                stats.totalWinixWon += winAmount;
                            }
                        }
                    }

                    // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–≥—Ä–∞—à
                    if (!stats.lastWin || (item.date && new Date(item.date) > new Date(stats.lastWin.date))) {
                        stats.lastWin = {
                            date: item.date,
                            amount: item.prize,
                            raffleId: item.raffle_id
                        };
                    }
                }

                // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —É—á–∞—Å—Ç—å
                if (!stats.lastRaffle || (item.date && new Date(item.date) > new Date(stats.lastRaffle.date))) {
                    stats.lastRaffle = {
                        date: item.date,
                        raffleId: item.raffle_id,
                        title: item.title
                    };
                }
            });

            // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
            const extendedStats = this.calculateExtendedStats(stats);

            return extendedStats;
        } catch (error) {
            console.error("‚ùå Stats: –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
            return this.getDefaultStats();
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     * @returns {Object} –û–±'—î–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –Ω—É–ª—å–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
     */
    getDefaultStats() {
        return {
            totalParticipated: 0,
            totalWins: 0,
            totalWinixWon: 0,
            totalTokensSpent: 0,
            winRate: 0,
            lastRaffle: null,
            lastWin: null
        };
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {Object} basicStats - –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     * @returns {Object} –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    calculateExtendedStats(basicStats) {
        const stats = { ...basicStats };

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–∞ –≤–∏–≥—Ä–∞—à—ñ–≤
        if (stats.totalParticipated > 0) {
            stats.winRate = (stats.totalWins / stats.totalParticipated) * 100;
        } else {
            stats.winRate = 0;
        }

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏–≥—Ä–∞—à—É
        if (stats.totalWins > 0) {
            stats.averageWin = stats.totalWinixWon / stats.totalWins;
        } else {
            stats.averageWin = 0;
        }

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–∏—Ç—Ä–∞—Ç –∂–µ—Ç–æ–Ω—ñ–≤
        if (stats.totalTokensSpent > 0) {
            stats.tokenEfficiency = stats.totalWinixWon / stats.totalTokensSpent;
        } else {
            stats.tokenEfficiency = 0;
        }

        return stats;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {Object} stats - –û–±'—î–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatisticsDisplay(stats) {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        const data = stats || this.getDefaultStats();

        // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        this._updateElementText(UI_ELEMENTS.totalParticipated, data.totalParticipated, formatNumber);
        this._updateElementText(UI_ELEMENTS.totalWins, data.totalWins, formatNumber);
        this._updateElementText(UI_ELEMENTS.totalWinixWon, data.totalWinixWon, formatCurrency);
        this._updateElementText(UI_ELEMENTS.totalTokensSpent, data.totalTokensSpent, formatNumber);

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        WinixRaffles.events.emit('statistics-displayed', {
            data
        });
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    async displayUserStats(containerId = 'user-stats-container', forceRefresh = false) {
        const container = document.getElementById(containerId);
        if (!container) {
            console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ ID '${containerId}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            return;
        }

        try {
            // –î–æ–¥–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container.innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-spinner"></div>
                    <div class="loading-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
                </div>
            `;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            if (!isOnline() && !forceRefresh) {
                // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
                const cachedStats = this._getStatsFromCache();
                if (cachedStats) {
                    this.updateStatisticsDisplay(cachedStats);
                    this._renderStatsUI(container, cachedStats);
                    return;
                } else {
                    container.innerHTML = `
                        <div class="empty-stats">
                            <div class="empty-stats-icon">üìä</div>
                            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ</h3>
                            <p>–ü—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</p>
                        </div>
                    `;
                    return;
                }
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const stats = await this.updateStatistics(forceRefresh);

            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this._renderStatsUI(container, stats);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            this.updateStatisticsDisplay(stats);

            // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            WinixRaffles.events.emit('statistics-displayed', {
                containerId,
                data: stats
            });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
            container.innerHTML = `
                <div class="empty-stats">
                    <div class="empty-stats-icon">üìä</div>
                    <h3>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</h3>
                    <p>–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É –ø—ñ–∑–Ω—ñ—à–µ.</p>
                </div>
            `;
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä—ñ–Ω–≥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     * @param {Object} stats - –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @private
     */
    _renderStatsUI(container, stats) {
        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const formatWithDecimals = (value) => {
            return Math.round(value * 100) / 100;
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const html = `
            <div class="stats-container">
                <div class="stats-header">
                    <h2>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</h2>
                    <button id="refresh-stats-btn" class="refresh-btn">
                        <span class="refresh-icon">üîÑ</span>
                    </button>
                </div>
                
                <div class="stats-grid">
                    <div class="stats-card">
                        <div class="stats-card-title">–í—Å—å–æ–≥–æ —É—á–∞—Å—Ç–µ–π</div>
                        <div class="stats-card-value" id="total-participated">${formatNumber(stats.totalParticipated)}</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-card-title">–ü–µ—Ä–µ–º–æ–≥–∏</div>
                        <div class="stats-card-value" id="total-wins">${formatNumber(stats.totalWins)}</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-card-title">–í–∏–≥—Ä–∞–Ω–æ WINIX</div>
                        <div class="stats-card-value" id="total-winix-won">${formatCurrency(stats.totalWinixWon)}</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-card-title">–í–∏—Ç—Ä–∞—á–µ–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤</div>
                        <div class="stats-card-value" id="total-tokens-spent">${formatNumber(stats.totalTokensSpent)}</div>
                    </div>
                </div>
                
                <div class="stats-extended">
                    <div class="stats-item">
                        <div class="stats-item-label">–í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–≥—Ä–∞—à—ñ–≤:</div>
                        <div class="stats-item-value">${formatWithDecimals(stats.winRate)}%</div>
                    </div>
                    <div class="stats-item">
                        <div class="stats-item-label">–°–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–≥—Ä–∞—à:</div>
                        <div class="stats-item-value">${formatWithDecimals(stats.averageWin)} WINIX</div>
                    </div>
                    <div class="stats-item">
                        <div class="stats-item-label">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤:</div>
                        <div class="stats-item-value">${formatWithDecimals(stats.tokenEfficiency)} WINIX/–∂–µ—Ç–æ–Ω</div>
                    </div>
                </div>
                
                ${stats.lastWin ? `
                <div class="stats-last-win">
                    <h3>–û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–≥—Ä–∞—à</h3>
                    <div class="last-win-details">
                        <div class="win-date">${stats.lastWin.date}</div>
                        <div class="win-amount">${stats.lastWin.amount}</div>
                    </div>
                </div>` : ''}
            </div>
        `;

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = html;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        const refreshButton = document.getElementById('refresh-stats-btn');
        if (refreshButton) {
            refreshButton.addEventListener('click', () => {
                this.updateStatistics(true).then(updatedStats => {
                    this._renderStatsUI(container, updatedStats);
                    this.updateStatisticsDisplay(updatedStats);
                }).catch(error => {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
                    showToast("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "error");
                });
            });
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {number} tokensSpent - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∂–µ—Ç–æ–Ω—ñ–≤
     */
    updateParticipationStats(tokensSpent) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if (isNaN(tokensSpent) || tokensSpent < 0) {
            console.warn('‚ö†Ô∏è Stats: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∂–µ—Ç–æ–Ω—ñ–≤:', tokensSpent);
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = _currentStats || this._getStatsFromCache() || this.getDefaultStats();

        // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
        stats.totalParticipated = (stats.totalParticipated || 0) + 1;
        stats.totalTokensSpent = (stats.totalTokensSpent || 0) + tokensSpent;

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const updatedStats = this.calculateExtendedStats(stats);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        _currentStats = updatedStats;
        this._saveStatsToCache(updatedStats);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        this.updateStatisticsDisplay(updatedStats);

        console.log(`üìä Stats: –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç—ñ, +${tokensSpent} –∂–µ—Ç–æ–Ω—ñ–≤`);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–≥—Ä–∞—à—É –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {number} winixAmount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–≥—Ä–∞–Ω–∏—Ö WINIX
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {Object} raffleDetails - –î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    updateWinStats(winixAmount, raffleId, raffleDetails = {}) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if (isNaN(winixAmount) || winixAmount < 0) {
            console.warn('‚ö†Ô∏è Stats: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–≥—Ä–∞—à—É WINIX:', winixAmount);
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = _currentStats || this._getStatsFromCache() || this.getDefaultStats();

        // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
        stats.totalWins = (stats.totalWins || 0) + 1;
        stats.totalWinixWon = (stats.totalWinixWon || 0) + winixAmount;
        stats.lastWin = {
            date: new Date().toISOString(),
            amount: winixAmount,
            raffleId: raffleId,
            details: raffleDetails
        };

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const updatedStats = this.calculateExtendedStats(stats);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        _currentStats = updatedStats;
        this._saveStatsToCache(updatedStats);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        this.updateStatisticsDisplay(updatedStats);

        console.log(`üìä Stats: –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–≥—Ä–∞—à—ñ–≤, +${winixAmount} WINIX`);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Array} history - –ú–∞—Å–∏–≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    updateStatsFromHistory(history) {
        if (!Array.isArray(history) || history.length === 0) {
            return;
        }

        console.log(`üìä Stats: –ê–Ω–∞–ª—ñ–∑ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, ${history.length} –∑–∞–ø–∏—Å—ñ–≤`);

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
        const calculatedStats = this.calculateStatsFromHistory(history);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        _currentStats = calculatedStats;
        this._saveStatsToCache(calculatedStats);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        this.updateStatisticsDisplay(calculatedStats);

        console.log(`üìä Stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó, ${calculatedStats.totalWins} –ø–µ—Ä–µ–º–æ–≥, ${calculatedStats.totalWinixWon} WINIX`);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {boolean} [forceRefresh=true] - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<Object>} –û–±'—î–∫—Ç –∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
     */
    async updateStatistics(forceRefresh = true) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞/—ñ—Å—Ç–æ—Ä—ñ—ó
            const stats = await this.fetchStatistics(forceRefresh);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            this.updateStatisticsDisplay(stats);

            return stats;
        } catch (error) {
            console.warn("‚ö†Ô∏è Stats: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
            return _currentStats || this.getDefaultStats();
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –º–æ–¥—É–ª—è
     */
    destroy() {
        // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this._removeEventListeners();

        // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
        _isUpdating = false;

        console.log("üö´ Stats: –ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä–∏—Ç–æ");
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É
const statisticsModule = new StatisticsModule();

// –î–æ–¥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
WinixRaffles.stats = statisticsModule;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => statisticsModule.init());
} else {
    setTimeout(() => statisticsModule.init(), 100);
}

export default statisticsModule;