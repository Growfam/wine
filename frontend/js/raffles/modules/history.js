/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX
 */

import WinixRaffles from '../globals.js';
import { showLoading, hideLoading, showToast } from '../utils/ui-helpers.js';
import api from '../services/api.js';
import { formatDate } from '../utils/formatters.js';

// –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let _historyData = [];
let _isLoading = false;
let _failedAttempts = 0;
let _lastRequestTime = 0;
let _requestInProgress = false;
let _requestTimeoutId = null;
let _historyCache = {
    data: null,
    timestamp: 0,
    ttl: 300000 // 5 —Ö–≤–∏–ª–∏–Ω
};
let _raffleDetailsCache = {};
const RETRY_DELAYS = [2000, 5000, 10000, 15000];
const MIN_REQUEST_INTERVAL = 15000;

/**
 * –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */
class HistoryModule {
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    init() {
        console.log("üìã –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        const historyContainer = document.getElementById('history-container');
        if (historyContainer) {
            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –µ–∫—Å–ø–æ—Ä—Ç—É
            const exportButton = document.createElement('button');
            exportButton.className = 'export-history-btn';
            exportButton.innerHTML = '<span>üìä</span> –ï–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó';
            exportButton.addEventListener('click', this.exportHistoryToCSV.bind(this));

            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
            historyContainer.parentNode.insertBefore(exportButton, historyContainer);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
            this.displayHistory('history-container');
        }

        console.log("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Object} filters - –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    async getRafflesHistory(filters = {}) {
        try {
            const now = Date.now();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—Ü—è, —è–∫—â–æ –∑–∞–ø–∏—Ç —Ç—Ä–∏–≤–∞–≤ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
            if (_requestInProgress && now - _lastRequestTime > 30000) {
                console.warn("‚ö†Ô∏è Raffle History: –í–∏—è–≤–ª–µ–Ω–æ –∑–∞–≤–∏—Å–∞—é—á–∏–π –∑–∞–ø–∏—Ç, –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω");
                _requestInProgress = false;
                if (_requestTimeoutId) {
                    clearTimeout(_requestTimeoutId);
                    _requestTimeoutId = null;
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ
            if (_requestInProgress) {
                console.log("‚è≥ Raffle History: –ó–∞–ø–∏—Ç —É–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à");
                // –Ø–∫—â–æ –∫–µ—à —î - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
                if (_historyCache.data && now - _historyCache.timestamp < _historyCache.ttl) {
                    return Promise.resolve(_historyCache.data);
                }
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
                return Promise.resolve(_historyData);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            const timeSinceLastRequest = now - _lastRequestTime;
            if (timeSinceLastRequest < MIN_REQUEST_INTERVAL && _historyData.length > 0) {
                console.log(`‚è≥ Raffle History: –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç, –º–∏–Ω—É–ª–æ ${Math.floor(timeSinceLastRequest/1000)}—Å`);
                return Promise.resolve(_historyData);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
            if (_historyCache.data && now - _historyCache.timestamp < _historyCache.ttl) {
                console.log("üìã Raffle History: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ");
                return Promise.resolve(_historyCache.data);
            }

            if (_isLoading) {
                console.log("‚è≥ Raffle History: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
                return Promise.resolve(_historyData);
            }

            _isLoading = true;
            _requestInProgress = true;
            _lastRequestTime = now;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—Ü—è
            if (_requestTimeoutId) {
                clearTimeout(_requestTimeoutId);
            }
            _requestTimeoutId = setTimeout(() => {
                if (_requestInProgress) {
                    console.warn("‚ö†Ô∏è Raffle History: –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ, —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å");
                    _requestInProgress = false;
                    _isLoading = false;
                }
            }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É

            showLoading('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤...');

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ API
            const userId = api.getUserId();
            if (!userId) {
                throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            let queryParams = '';
            if (filters.type && filters.type !== 'all') {
                queryParams += `&type=${filters.type}`;
            }
            if (filters.status && filters.status !== 'all') {
                queryParams += `&status=${filters.status}`;
            }
            if (filters.period && filters.period !== 'all') {
                queryParams += `&period=${filters.period}`;
            }

            // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–æ URL, —è–∫—â–æ –≤–æ–Ω–∏ —î
            const url = queryParams
                ? `/api/user/${userId}/raffles-history?${queryParams.substring(1)}`
                : `/api/user/${userId}/raffles-history`;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø–∏—Ç—É
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É')), 15000);
            });

            // –ü–æ–∫—Ä–∞—â–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const fetchPromise = api.apiRequest(url, 'GET', null, {
                timeout: 15000,
                allowParallel: false,
                suppressErrors: true,
                forceCleanup: _failedAttempts > 0
            });

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
            const response = await Promise.race([fetchPromise, timeoutPromise]);

            // –ó–ê–í–ñ–î–ò —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
            hideLoading();
            _isLoading = false;
            _requestInProgress = false;
            _failedAttempts = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ —É—Å–ø—ñ—Ö—É

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            if (_requestTimeoutId) {
                clearTimeout(_requestTimeoutId);
                _requestTimeoutId = null;
            }

            if (response && response.status === 'success') {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ - —Ü–µ –º–∞—Å–∏–≤
                if (!Array.isArray(response.data)) {
                    // –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –º–∞—Å–∏–≤, –∞–ª–µ —É—Å–ø—ñ—à–Ω–∏–π —Å—Ç–∞—Ç—É—Å - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
                    console.warn("–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó (–Ω–µ –º–∞—Å–∏–≤):", response.data);
                    _historyData = [];
                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –ø—É—Å—Ç–∏–º–∏ –¥–∞–Ω–∏–º–∏
                    _historyCache = {
                        data: [],
                        timestamp: now,
                        ttl: _historyCache.ttl
                    };
                    return _historyData;
                }

                _historyData = response.data;
                console.log(`‚úÖ Raffle History: –û—Ç—Ä–∏–º–∞–Ω–æ ${_historyData.length} –∑–∞–ø–∏—Å—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó`);

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                _historyCache = {
                    data: _historyData,
                    timestamp: now,
                    ttl: _historyCache.ttl
                };

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
                document.dispatchEvent(new CustomEvent('winix:history-updated', {
                    detail: { data: _historyData }
                }));

                return _historyData;
            } else {
                // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å–ø—ñ—Ö, –∞–ª–µ —î –¥–∞–Ω—ñ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∂–µ—Ä–µ–ª–æ
                if (response && response.source && response.source.includes('fallback')) {
                    // –¶–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ —Ñ–æ–ª–±–µ–∫–∞ –≤ API
                    console.warn(`Raffle History: –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ–ª–±–µ–∫-–≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.source}`);

                    if (Array.isArray(response.data)) {
                        _historyData = response.data;
                        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                        _historyCache = {
                            data: _historyData,
                            timestamp: now,
                            ttl: 60000 // –ö–æ—Ä–æ—Ç—à–∏–π TTL –¥–ª—è —Ñ–æ–ª–±–µ–∫—É
                        };
                        return _historyData;
                    }
                }

                throw new Error((response && response.message) || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);

            // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
            _failedAttempts++;

            // –û–ë–û–í'–Ø–ó–ö–û–í–û —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
            hideLoading();
            _isLoading = false;
            _requestInProgress = false;

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            if (_requestTimeoutId) {
                clearTimeout(_requestTimeoutId);
                _requestTimeoutId = null;
            }

            // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏ 500 –∞–±–æ 404, —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
            if (error.status === 500 || error.status === 404 ||
                error.source === 'parallel' || error.message.includes('already') ||
                error.message.includes('—Ç–∞–π–º–∞—É—Ç')) {
                console.warn("‚ö†Ô∏è Raffle History: –û—Ç—Ä–∏–º–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤");

                // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ –ø–µ—Ä—à—ñ–π —Å–ø—Ä–æ–±—ñ
                if (_failedAttempts > 1) {
                    showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
                }

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ, —è–∫—â–æ —î
                if (_historyData.length > 0) {
                    return _historyData;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
                if (_historyCache.data) {
                    console.log("üìã Raffle History: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏");
                    return _historyCache.data;
                }

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
                _historyData = [];
                return _historyData;
            }

            // –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
            if (_failedAttempts <= RETRY_DELAYS.length) {
                const retryDelay = RETRY_DELAYS[_failedAttempts - 1];
                console.log(`üîÑ Raffle History: –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ ${retryDelay/1000}—Å`);

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –∑ —Ç–∞–π–º–∞—É—Ç–æ–º —ñ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
                return new Promise(resolve => {
                    setTimeout(() => {
                        this.getRafflesHistory(filters).then(resolve).catch(err => {
                            // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —Å–ø—Ä–æ–±—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
                            console.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É:", err);
                            resolve([]);
                        });
                    }, retryDelay);
                });
            }

            // –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
            // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            _historyData = [];
            return _historyData;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @returns {Promise<Object>} - –î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async getRaffleHistoryDetails(raffleId) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–µ—Ç–∞–ª–µ–π
            if (_raffleDetailsCache[raffleId]) {
                console.log(`üìã Raffle History: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}`);
                return _raffleDetailsCache[raffleId];
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            const localRaffleData = _historyData.find(item => item && item.raffle_id === raffleId);
            if (localRaffleData && localRaffleData.winners) {
                console.log("üìã Raffle History: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É");

                // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                _raffleDetailsCache[raffleId] = localRaffleData;

                return localRaffleData;
            }

            const userId = api.getUserId();
            if (!userId) {
                throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç
            const now = Date.now();
            const timeSinceLastRequest = now - _lastRequestTime;
            if (timeSinceLastRequest < 3000) { // 3 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 3000 - timeSinceLastRequest));
            }

            showLoading('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É...');

            try {
                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–º—ñ–Ω–µ–Ω–æ URL —à–ª—è—Ö –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
                const response = await api.apiRequest(
                    `/api/user/${userId}/raffles-history/${raffleId}`,
                    'GET',
                    null,
                    {
                        timeout: 8000,
                        suppressErrors: true,
                        forceCleanup: true
                    }
                );

                hideLoading();
                _lastRequestTime = Date.now();

                if (response && response.status === 'success') {
                    // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if (response.data) {
                        _raffleDetailsCache[raffleId] = response.data;
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ
                    if (response.data && localRaffleData) {
                        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                        const updatedHistoryData = _historyData.map(item => {
                            if (item && item.raffle_id === raffleId) {
                                return { ...item, ...response.data };
                            }
                            return item;
                        });
                        _historyData = updatedHistoryData;
                    }
                    return response.data;
                } else {
                    throw new Error((response && response.message) || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
                }
            } catch (apiError) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É API –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, apiError);

                // –Ø–∫—â–æ —î –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
                if (localRaffleData) {
                    console.log("üìã Raffle History: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ API");

                    // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    _raffleDetailsCache[raffleId] = localRaffleData;

                    return localRaffleData;
                }

                throw apiError;
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            hideLoading();

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω—ñ—è–∫–∏—Ö –¥–∞–Ω–∏—Ö
            if (!_historyData.find(item => item && item.raffle_id === raffleId)) {
                showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            const fallbackData = {
                raffle_id: raffleId,
                title: "–î–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ",
                winners: [],
                status: "unknown"
            };

            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            _raffleDetailsCache[raffleId] = fallbackData;

            return fallbackData;
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    async displayHistory(containerId = 'history-container') {
        const container = document.getElementById(containerId);
        if (!container) {
            console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ ID '${containerId}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            return;
        }

        // –î–æ–¥–∞—î–º–æ —Å—ñ—Ç–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this._addStatsGrid(container);

        // –ü–µ—Ä—à –Ω—ñ–∂ —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç, –≤—ñ–¥–æ–±—Ä–∞–∑–∏–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (!_historyData.length) {
            container.innerHTML = `
                <div class="history-loader">
                    <div class="loader-spinner"></div>
                    <div class="loader-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó...</div>
                </div>
            `;
        }

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
            const history = await this.getRafflesHistory();

            // –Ø–∫—â–æ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ
            if (!history || !Array.isArray(history) || history.length === 0) {
                container.innerHTML = this._createEmptyHistoryHTML();
                return;
            }

            // –†–æ–∑–¥—ñ–ª—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞ –≤–∏–≥—Ä–∞—à–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∑–≤–∏—á–∞–π–Ω—ñ —É—á–∞—Å—Ç—ñ
            let wonRaffles = [];
            let participatedRaffles = [];

            try {
                wonRaffles = history.filter(item => item && item.status === 'won');
                participatedRaffles = history.filter(item => item && item.status !== 'won');
            } catch (error) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
                container.innerHTML = this._createEmptyHistoryHTML('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
                return;
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            let historyHTML = `
                <div class="history-filters">
                    <div class="filter-group">
                        <label>–¢–∏–ø:</label>
                        <select id="history-type-filter">
                            <option value="all" selected>–£—Å—ñ —Ç–∏–ø–∏</option>
                            <option value="daily">–©–æ–¥–µ–Ω–Ω—ñ</option>
                            <option value="main">–î–∂–µ–∫–ø–æ—Ç–∏</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>–°—Ç–∞—Ç—É—Å:</label>
                        <select id="history-status-filter">
                            <option value="all" selected>–£—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
                            <option value="won">–ü–µ—Ä–µ–º–æ–≥–∏</option>
                            <option value="participated">–£—á–∞—Å—Ç—å</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>–ü–µ—Ä—ñ–æ–¥:</label>
                        <select id="history-period-filter">
                            <option value="all" selected>–í–µ—Å—å —á–∞—Å</option>
                            <option value="week">–¢–∏–∂–¥–µ–Ω—å</option>
                            <option value="month">–ú—ñ—Å—è—Ü—å</option>
                            <option value="year">–†—ñ–∫</option>
                        </select>
                    </div>
                </div>

                <div class="history-stats">
                    <div class="stats-item">
                        <div class="stats-value">${history.length}</div>
                        <div class="stats-label">–í—Å—å–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</div>
                    </div>
                    <div class="stats-item">
                        <div class="stats-value">${wonRaffles.length}</div>
                        <div class="stats-label">–ü–µ—Ä–µ–º–æ–≥</div>
                    </div>
                    <div class="stats-item">
                        <div class="stats-value">${this._getTotalPrizeAmount(wonRaffles)}</div>
                        <div class="stats-label">WINIX –≤–∏–≥—Ä–∞–Ω–æ</div>
                    </div>
                </div>
            `;

            // –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é "–ú–æ—ó –ø–µ—Ä–µ–º–æ–≥–∏" —è–∫—â–æ —î –≤–∏–≥—Ä–∞—à—ñ
            if (wonRaffles.length > 0) {
                historyHTML += `
                    <div class="history-section">
                        <h3 class="section-title">–ú–æ—ó –ø–µ—Ä–µ–º–æ–≥–∏</h3>
                        <div class="history-cards">
                            ${wonRaffles.map(raffle => this._createHistoryCardHTML(raffle)).join('')}
                        </div>
                    </div>
                `;
            }

            // –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é —É—á–∞—Å—Ç—ñ
            historyHTML += `
                <div class="history-section">
                    <h3 class="section-title">–Ü—Å—Ç–æ—Ä—ñ—è —É—á–∞—Å—Ç—ñ</h3>
                    <div class="history-cards">
                        ${participatedRaffles.length > 0 
                            ? participatedRaffles.map(raffle => this._createHistoryCardHTML(raffle)).join('')
                            : '<div class="empty-history-section">–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö</div>'}
                    </div>
                </div>
            `;

            // –í—Å—Ç–∞–≤–ª—è—î–º–æ HTML –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container.innerHTML = historyHTML;

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            document.getElementById('history-type-filter')?.addEventListener('change', () => {
                this._applyHistoryFilters(containerId);
            });

            document.getElementById('history-status-filter')?.addEventListener('change', () => {
                this._applyHistoryFilters(containerId);
            });

            document.getElementById('history-period-filter')?.addEventListener('change', () => {
                this._applyHistoryFilters(containerId);
            });

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–∞—Ä—Ç–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó
            this._addHistoryCardEventListeners();

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (WinixRaffles.stats && typeof WinixRaffles.stats.updateHistoryStats === 'function') {
                WinixRaffles.stats.updateHistoryStats(history);
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
            container.innerHTML = this._createEmptyHistoryHTML('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
     * @param {Object} raffleData - –î–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    showRaffleHistoryDetails(raffleData) {
        if (!raffleData) {
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            return;
        }

        // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, —è–∫—â–æ –≤–æ–Ω–æ —î
        const existingModal = document.getElementById('raffle-history-modal');
        if (existingModal) {
            existingModal.remove();
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.id = 'raffle-history-modal';
        modal.className = 'raffle-modal';

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ —î
        let winnersHTML = '';
        if (raffleData.winners && Array.isArray(raffleData.winners) && raffleData.winners.length > 0) {
            winnersHTML = this._generateWinnersListHTML(raffleData.winners);
        } else {
            winnersHTML = '<div class="no-winners">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—è</div>';
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ –∫–ª–∞—Å —Å—Ç–∞—Ç—É—Å—É
        const statusClass = raffleData.status === 'won' ? 'win-status' : 'participated-status';
        const statusText = raffleData.status === 'won' ? '–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏' : '–£—á–∞—Å—Ç—å –±–µ–∑ –ø–µ—Ä–µ–º–æ–≥–∏';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        const raffleType = raffleData.is_daily ? '–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à' : '–ì—Ä–∞–Ω–¥ —Ä–æ–∑—ñ–≥—Ä–∞—à';

        // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">${raffleData.title || '–î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É'}</h2>
                    <span class="modal-close">√ó</span>
                </div>
                
                <div class="prize-details">
                    <div class="detail-item">
                        <div class="detail-label">–î–∞—Ç–∞:</div>
                        <div class="detail-value">${raffleData.date || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–¢–∏–ø:</div>
                        <div class="detail-value">${raffleType}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥:</div>
                        <div class="detail-value prize-value">${raffleData.prize || '0 WINIX'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</div>
                        <div class="detail-value ${statusClass}">${statusText}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤:</div>
                        <div class="detail-value">${raffleData.entry_count || 0}</div>
                    </div>
                    ${raffleData.status === 'won' ? `
                    <div class="detail-item">
                        <div class="detail-label">–í–∞—à–µ –º—ñ—Å—Ü–µ:</div>
                        <div class="detail-value winner-place-value">${raffleData.place || '-'}</div>
                    </div>
                    ` : ''}
                </div>
                
                <div class="winners-container">
                    <h3>–ü–µ—Ä–µ–º–æ–∂—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h3>
                    <div class="winners-list">
                        ${winnersHTML}
                    </div>
                </div>
                
                <button class="join-button" id="close-history-btn">–ó–ê–ö–†–ò–¢–ò</button>
            </div>
        `;

        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        document.body.appendChild(modal);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        const closeButton = modal.querySelector('.modal-close');
        if (closeButton) {
            closeButton.addEventListener('click', function() {
                modal.classList.remove('open');
                setTimeout(() => modal.remove(), 300);
            });
        }

        const closeActionButton = modal.querySelector('#close-history-btn');
        if (closeActionButton) {
            closeActionButton.addEventListener('click', function() {
                modal.classList.remove('open');
                setTimeout(() => modal.remove(), 300);
            });
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        requestAnimationFrame(() => {
            modal.classList.add('open');
        });

        return modal;
    }

    /**
     * –ï–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É CSV
     */
    exportHistoryToCSV() {
        if (!_historyData || !Array.isArray(_historyData) || _historyData.length === 0) {
            showToast('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É');
            return;
        }

        try {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = [
                '–î–∞—Ç–∞',
                '–ù–∞–∑–≤–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É',
                '–¢–∏–ø',
                '–ü—Ä–∏–∑',
                '–í–∏—Ç—Ä–∞—á–µ–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤',
                '–†–µ–∑—É–ª—å—Ç–∞—Ç',
                '–°—Ç–∞—Ç—É—Å'
            ];

            // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–∫–∏ –¥–∞–Ω–∏—Ö
            const rows = _historyData.map(item => {
                if (!item) return ['-', '-', '-', '-', '-', '-', '-'];

                return [
                    item.date || '-',
                    item.title || '–†–æ–∑—ñ–≥—Ä–∞—à',
                    item.is_daily ? '–©–æ–¥–µ–Ω–Ω–∏–π' : '–î–∂–µ–∫–ø–æ—Ç',
                    item.prize || '0 WINIX',
                    item.entry_count || 0,
                    item.result || '-',
                    item.status === 'won' ? '–ü–µ—Ä–µ–º–æ–≥–∞' : '–£—á–∞—Å—Ç—å'
                ];
            });

            // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å–µ –≤ CSV
            const csvContent = [
                headers.join(','),
                ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
            ].join('\n');

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const encodedUri = encodeURI('data:text/csv;charset=utf-8,' + csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'winix_raffle_history.csv');
            document.body.appendChild(link);

            // –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            link.click();

            // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            document.body.removeChild(link);

            showToast('–Ü—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
            showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é');
        }
    }

    /**
     * –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Ç—ñ–≤
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    resetRequestState() {
        _requestInProgress = false;
        _isLoading = false;

        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç–∏
        if (_requestTimeoutId) {
            clearTimeout(_requestTimeoutId);
            _requestTimeoutId = null;
        }

        console.log("üîÑ Raffle History: –ü—Ä–∏–º—É—Å–æ–≤–µ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Ç—ñ–≤");
        return true;
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
     */
    clearCache() {
        _historyCache = {
            data: null,
            timestamp: 0,
            ttl: _historyCache.ttl
        };
        _historyData = [];
        _isLoading = false;
        _requestInProgress = false;
        _failedAttempts = 0;
        _raffleDetailsCache = {};

        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç–∏
        if (_requestTimeoutId) {
            clearTimeout(_requestTimeoutId);
            _requestTimeoutId = null;
        }

        console.log("üßπ Raffle History: –ö–µ—à –æ—á–∏—â–µ–Ω–æ");
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è TTL –∫–µ—à—É
     * @param {number} ttl - –ß–∞—Å –∂–∏—Ç—Ç—è –∫–µ—à—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    setCacheTTL(ttl) {
        if (typeof ttl === 'number' && ttl > 0) {
            _historyCache.ttl = ttl;
            console.log(`üîÑ Raffle History: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ TTL –∫–µ—à—É: ${ttl}ms`);
        }
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
     * @private
     */
    _addStatsGrid(container) {
        // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        if (!document.querySelector('.stats-grid') && container) {
            const statsGrid = document.createElement('div');
            statsGrid.className = 'stats-grid';
            statsGrid.innerHTML = `
                <div class="stats-card">
                    <div class="stats-card-title">–í—Å—å–æ–≥–æ —É—á–∞—Å—Ç–µ–π</div>
                    <div class="stats-card-value" id="total-participated">-</div>
                </div>
                <div class="stats-card">
                    <div class="stats-card-title">–ü–µ—Ä–µ–º–æ–≥–∏</div>
                    <div class="stats-card-value" id="total-wins">-</div>
                </div>
                <div class="stats-card">
                    <div class="stats-card-title">–í–∏–≥—Ä–∞–Ω–æ WINIX</div>
                    <div class="stats-card-value" id="total-winix-won">-</div>
                </div>
                <div class="stats-card">
                    <div class="stats-card-title">–í–∏—Ç—Ä–∞—á–µ–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤</div>
                    <div class="stats-card-value" id="total-tokens-spent">-</div>
                </div>
            `;

            // –î–æ–¥–∞—î–º–æ —Å—ñ—Ç–∫—É –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —ñ—Å—Ç–æ—Ä—ñ—ó
            if (container.parentNode) {
                container.parentNode.insertBefore(statsGrid, container);
            }
        }
    }

    /**
     * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     * @private
     */
    _applyHistoryFilters(containerId) {
        const typeFilter = document.getElementById('history-type-filter')?.value || 'all';
        const statusFilter = document.getElementById('history-status-filter')?.value || 'all';
        const periodFilter = document.getElementById('history-period-filter')?.value || 'all';

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
        this.getRafflesHistory({
            type: typeFilter,
            status: statusFilter,
            period: periodFilter
        }).then(() => {
            this.displayHistory(containerId);
        }).catch(error => {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤:", error);
            showToast('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤');
        });
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è –∫–∞—Ä—Ç–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
     * @param {Object} item - –î–∞–Ω—ñ –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
     * @returns {string} HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
     * @private
     */
    _createHistoryCardHTML(item) {
        if (!item) return '';

        const statusClass = item.status === 'won' ? 'won' : 'participated';
        const statusText = item.status === 'won' ? '–í–∏–≥—Ä–∞–Ω–æ' : '–£—á–∞—Å—Ç—å';

        return `
            <div class="history-card" data-raffle-id="${item.raffle_id}">
                <div class="history-date">${item.date || '–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'}</div>
                <div class="history-title">${item.title || '–†–æ–∑—ñ–≥—Ä–∞—à'}</div>
                <div class="history-prize">${item.prize || '0 WINIX'}</div>
                <div class="history-details">
                    <div class="history-entry">–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤: ${item.entry_count || 0}</div>
                    <div class="history-status ${statusClass}">${statusText}</div>
                </div>
                <div class="history-result">${item.result || '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–≤—ñ–¥–æ–º–∏–π'}</div>
                <div class="view-details-hint">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</div>
            </div>
        `;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è –ø—É—Å—Ç–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
     * @param {string} customMessage - –í–ª–∞—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @returns {string} HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
     * @private
     */
    _createEmptyHistoryHTML(customMessage) {
        const message = customMessage || '–í–∏ —â–µ –Ω–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö WINIX. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ!';

        return `
            <div class="empty-history">
                <div class="empty-history-icon">üéÆ</div>
                <h3>–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è</h3>
                <p>${message}</p>
                <button class="join-raffle-btn" onclick="window.WinixRaffles.active.switchTab('active')">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</button>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è HTML –¥–ª—è —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
     * @param {Array} winners - –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
     * @returns {string} HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
     * @private
     */
    _generateWinnersListHTML(winners) {
        if (!winners || !Array.isArray(winners) || winners.length === 0) {
            return '<div class="no-winners">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—è</div>';
        }

        return winners.map(winner => {
            if (!winner) return '';

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –º—ñ—Å—Ü—è (top-1, top-2, top-3)
            const placeClass = winner.place <= 3 ? `place-${winner.place}` : 'default-place';

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            const currentUserClass = winner.isCurrentUser ? 'current-user' : '';

            // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
            return `
                <div class="winner-item ${currentUserClass}" ${winner.isCurrentUser ? 'title="–¶–µ –≤–∏!"' : ''}>
                    <div class="winner-place ${placeClass}">
                        <span>${winner.place}</span>
                    </div>
                    <div class="winner-info">
                        <div class="winner-name">${winner.username || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}</div>
                        <div class="winner-id">ID: ${winner.userId || '–Ω–µ–≤—ñ–¥–æ–º–æ'}</div>
                    </div>
                    <div class="winner-prize">${winner.prize || '0 WINIX'}</div>
                </div>
            `;
        }).join('');
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –∫–∞—Ä—Ç–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó
     * @private
     */
    _addHistoryCardEventListeners() {
        try {
            document.querySelectorAll('.history-card').forEach(card => {
                card.addEventListener('click', () => {
                    const raffleId = card.getAttribute('data-raffle-id');
                    if (!raffleId) return;

                    const historyItem = _historyData.find(item => item && item.raffle_id === raffleId);

                    if (historyItem) {
                        this.showRaffleHistoryDetails(historyItem);
                    } else {
                        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞—Å–∏–≤—ñ, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ API
                        this.getRaffleHistoryDetails(raffleId).then(details => {
                            if (details) {
                                this.showRaffleHistoryDetails(details);
                            } else {
                                showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
                            }
                        }).catch(error => {
                            console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É:", error);
                            showToast('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
                        });
                    }
                });
            });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –∫–∞—Ä—Ç–æ–∫:", error);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –≤–∏–≥—Ä–∞—à—ñ–≤
     * @param {Array} wonRaffles - –°–ø–∏—Å–æ–∫ –≤–∏–≥—Ä–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—É–º–∞
     * @private
     */
    _getTotalPrizeAmount(wonRaffles) {
        if (!wonRaffles || !Array.isArray(wonRaffles)) {
            return '0';
        }

        let total = 0;

        try {
            wonRaffles.forEach(raffle => {
                if (!raffle || !raffle.prize) return;

                // –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ–≤—É —Å—É–º—É –∑ —Ä—è–¥–∫–∞ –ø—Ä–∏–∑—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è WINIX)
                const match = raffle.prize.match(/(\d+(?:\.\d+)?)\s*WINIX/i);
                if (match) {
                    total += parseFloat(match[1]);
                }
            });

            return total.toLocaleString('uk-UA');
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –≤–∏–≥—Ä–∞—à—ñ–≤:", error);
            return '0';
        }
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É
const historyModule = new HistoryModule();

// –î–æ–¥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
WinixRaffles.history = historyModule;

export default historyModule;