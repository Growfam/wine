/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é, –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–æ—é –≤–∑–∞—î–º–æ–¥—ñ—î—é –∑ API
 */

import WinixRaffles from '../globals.js';
import api from '../services/api.js';
import { CONFIG } from '../config.js';


// –õ–æ–∫–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≥–ª–æ–±–∞–ª—å–Ω–æ—ó
const HISTORY_CONFIG = {
  // –†–æ–∑–º—ñ—Ä –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
  PAGE_SIZE: CONFIG?.UI?.DEFAULT_PAGE_SIZE || 10,

  // –ß–∞—Å –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –∫–µ—à—ñ (–º—Å)
  CACHE_TTL: {
    HISTORY: CONFIG?.API?.CACHE_TTL?.HISTORY || 5 * 60 * 1000,      // 5 —Ö–≤–∏–ª–∏–Ω –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
    DETAILS: CONFIG?.API?.CACHE_TTL?.HISTORY_DETAILS || 10 * 60 * 1000,     // 10 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    STATS: CONFIG?.API?.CACHE_TTL?.STATISTICS || 15 * 60 * 1000       // 15 —Ö–≤–∏–ª–∏–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  },

  // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (–º—Å)
  MIN_REQUEST_INTERVAL: CONFIG?.API?.MIN_REQUEST_INTERVAL || 3 * 1000, // 3 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏

  // –ß–∞—Å –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ 429 (–º—Å)
  RATE_LIMIT_COOLDOWN: CONFIG?.API?.RATE_LIMIT_COOLDOWN || 60 * 1000  // 1 —Ö–≤–∏–ª–∏–Ω–∞ –ø—ñ—Å–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
};

// –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
class HistoryModule {
  constructor() {
    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    this.state = {
      loading: false,
      error: null,
      history: [],
      currentPage: 1,
      totalPages: 1,
      hasMore: false,
      filters: {
        type: 'all',
        status: 'all',
        period: 'all'
      },
      lastRequestTime: 0,
      detailsMap: new Map()
    };
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
   */
  init() {
    WinixRaffles.logger.log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    this._loadCachedData();

    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—ó
    this._setupEventListeners();

    WinixRaffles.logger.log("–ú–æ–¥—É–ª—å —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    return this;
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   * @private
   */
  _setupEventListeners() {
    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é –∑–∞–ø–∏—Ç—É –≤–∫–ª–∞–¥–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
    WinixRaffles.events.on('history-tab-requested', () => {
      this.displayHistory('history-container');
    });

    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é –∑–∞–ø–∏—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
    WinixRaffles.events.on('refresh-history', (data) => {
      const containerId = data && data.containerId ? data.containerId : 'history-container';
      this.displayHistory(containerId, true);
    });

    // –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–º—ñ–Ω—É –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    window.addEventListener('online', () => {
      WinixRaffles.logger.log("–ú–µ—Ä–µ–∂–µ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ, —ñ—Å—Ç–æ—Ä—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞");
    });

    window.addEventListener('offline', () => {
      WinixRaffles.logger.warn("–ú–µ—Ä–µ–∂–µ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ, —ñ—Å—Ç–æ—Ä—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
    });
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   * @private
   */
  _loadCachedData() {
    // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∑ –∫–µ—à—É —Å–∏—Å—Ç–µ–º–∏
    const cachedHistory = WinixRaffles.cache.get('history_data');
    if (cachedHistory) {
      this.state.history = cachedHistory;
      WinixRaffles.logger.log(`–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ${cachedHistory.length} –∑–∞–ø–∏—Å—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó –∑ –∫–µ—à—É`);
    } else {
      // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∫–µ—à—ñ, –ø—Ä–æ–±—É—î–º–æ –∑ localStorage (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
      try {
        const localStorageHistory = localStorage.getItem('winix_raffles_history');
        if (localStorageHistory) {
          const parsedHistory = JSON.parse(localStorageHistory);
          if (Array.isArray(parsedHistory) && parsedHistory.length > 0) {
            this.state.history = parsedHistory;
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –Ω–æ–≤–∏–π –∫–µ—à
            WinixRaffles.cache.set('history_data', parsedHistory, CONFIG.CACHE_TTL.HISTORY);
            WinixRaffles.logger.log(`–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ${parsedHistory.length} –∑–∞–ø–∏—Å—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó –∑ localStorage`);
          }
        }
      } catch (error) {
        WinixRaffles.logger.warn("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑ localStorage:", error);
      }
    }

    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (—è–∫—â–æ —î)
    const cachedDetails = WinixRaffles.cache.get('history_details_map');
    if (cachedDetails) {
      this.state.detailsMap = new Map(cachedDetails);
      WinixRaffles.logger.log(`–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—ñ –¥–ª—è ${this.state.detailsMap.size} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ –∫–µ—à—É`);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ –∫–µ—à
   * @param {Array} history - –î–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
   * @private
   */
  _cacheData(history) {
    if (!Array.isArray(history)) return;

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–∏–π –∫–µ—à
    WinixRaffles.cache.set('history_data', history, CONFIG.CACHE_TTL.HISTORY);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–∫–æ–∂ —É localStorage –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    try {
      localStorage.setItem('winix_raffles_history', JSON.stringify(history));
    } catch (error) {
      WinixRaffles.logger.warn("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤ localStorage:", error);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É –≤ –∫–µ—à
   * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
   * @param {Object} details - –î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
   * @private
   */
  _cacheRaffleDetails(raffleId, details) {
    if (!raffleId || !details) return;

    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É Map
    this.state.detailsMap.set(raffleId, {
      data: details,
      timestamp: Date.now()
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Map –≤ –∫–µ—à
    WinixRaffles.cache.set(
      'history_details_map',
      Array.from(this.state.detailsMap.entries()),
      CONFIG.CACHE_TTL.DETAILS
    );
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç (–æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏)
   * @returns {boolean} –ß–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç
   * @private
   */
  _canMakeRequest() {
    const now = Date.now();
    return (now - this.state.lastRequestTime) >= CONFIG.MIN_REQUEST_INTERVAL;
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
   * @private
   */
  _updateRequestTime() {
    this.state.lastRequestTime = Date.now();
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ (429)
   * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   * @private
   */
  _handleRateLimitError(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;

    WinixRaffles.logger.warn("–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API —ñ—Å—Ç–æ—Ä—ñ—ó");

    // –ë–ª–æ–∫—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –ø–µ–≤–Ω–∏–π —á–∞—Å
    this.state.lastRequestTime = Date.now() + CONFIG.RATE_LIMIT_COOLDOWN;

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    container.innerHTML = `
      <div class="rate-limit-message">
        <div class="rate-limit-icon">‚è±Ô∏è</div>
        <h3>–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞</h3>
        <p>–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É.</p>
        <div class="retry-timer">–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: <span id="retry-countdown">60</span> —Å–µ–∫—É–Ω–¥</div>
      </div>
    `;

    // –î–æ–¥–∞—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫
    let countdown = 60;
    const countdownElement = document.getElementById('retry-countdown');

    if (countdownElement) {
      const timer = setInterval(() => {
        countdown--;
        if (countdownElement) countdownElement.textContent = countdown;

        if (countdown <= 0) {
          clearInterval(timer);
          // –î–æ–∑–≤–æ–ª—è—î–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
          if (container) {
            container.innerHTML = `
              <div class="empty-history">
                <div class="empty-history-icon">üìã</div>
                <h3>–ì–æ—Ç–æ–≤–æ –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</h3>
                <p>–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–Ω–æ–≤—É</p>
                <button class="refresh-history-btn" onclick="WinixRaffles.history.displayHistory('${containerId}', true)">
                  <span class="refresh-icon">üîÑ</span> –û–Ω–æ–≤–∏—Ç–∏
                </button>
              </div>
            `;
          }
        }
      }, 1000);
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    WinixRaffles.utils.showToast(
      "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
      "warning",
      5000
    );
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
   * @param {Object} options - –û–ø—Ü—ñ—ó –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
   */
  async getHistory(options = {}) {
    const page = options.page || 1;
    const pageSize = options.pageSize || CONFIG.PAGE_SIZE;
    const filters = options.filters || {};
    const forceRefresh = options.forceRefresh || false;

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
      if (!WinixRaffles.network.isOnline()) {
        WinixRaffles.logger.warn("–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó");
        return {
          data: this.state.history || [],
          page: 1,
          totalPages: 1,
          hasMore: false,
          isOffline: true
        };
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
      if (!this._canMakeRequest() && !forceRefresh) {
        WinixRaffles.logger.warn("–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç —ñ—Å—Ç–æ—Ä—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ");
        return {
          data: this.state.history || [],
          page,
          totalPages: Math.ceil((this.state.history?.length || 0) / pageSize),
          hasMore: page * pageSize < (this.state.history?.length || 0),
          fromCache: true
        };
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
      this._updateRequestTime();

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      this.state.loading = true;

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      WinixRaffles.loader.show("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó...", "history-fetch");

      // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API
      const userId = api.getUserId();
      if (!userId) {
        throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      }

      // –ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
      if (typeof api.refreshToken === 'function') {
        await api.refreshToken().catch(e => {
          WinixRaffles.logger.warn("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
        });
      }

      // –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
      const queryParams = [];
      if (filters.type && filters.type !== 'all') {
        queryParams.push(`type=${filters.type}`);
      }

      if (filters.status && filters.status !== 'all') {
        queryParams.push(`status=${filters.status}`);
      }

      if (filters.period && filters.period !== 'all') {
        queryParams.push(`period=${filters.period}`);
      }

      // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
      queryParams.push(`page=${page}`);
      queryParams.push(`page_size=${pageSize}`);

      // –§–æ—Ä–º—É—î–º–æ URL
      const url = `user/${userId}/raffles-history${queryParams.length ? '?' + queryParams.join('&') : ''}`;

      // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
      const response = await api.apiRequest(url, 'GET', null, {
        timeout: 15000,
        suppressErrors: true
      });

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      WinixRaffles.loader.hide("history-fetch");

      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      this.state.loading = false;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      if (response.status === 'success') {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
        let historyData = [];
        let pagination = {
          page: page,
          totalPages: 1,
          hasMore: false
        };

        // –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - API –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –¥–∞–Ω—ñ —É —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        if (Array.isArray(response.data)) {
          // –ü—Ä–æ—Å—Ç–∏–π –º–∞—Å–∏–≤ –∑–∞–ø–∏—Å—ñ–≤
          historyData = response.data;
        } else if (response.data && typeof response.data === 'object') {
          // –û–±'—î–∫—Ç –∑ –º–∞—Å–∏–≤–æ–º –¥–∞–Ω–∏—Ö —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
          if (Array.isArray(response.data.items || response.data.data)) {
            historyData = response.data.items || response.data.data;

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
            if (response.data.pagination) {
              pagination = {
                page: response.data.pagination.current_page || page,
                totalPages: response.data.pagination.total_pages || 1,
                hasMore: response.data.pagination.has_more === true
              };
            } else if (response.data.meta) {
              pagination = {
                page: response.data.meta.current_page || page,
                totalPages: response.data.meta.total_pages || 1,
                hasMore: response.data.meta.has_more === true ||
                         (response.data.meta.current_page < response.data.meta.total_pages)
              };
            }
          } else {
            // –Ø–∫—â–æ –Ω–µ–º–∞—î items –∞–±–æ data, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∞–º –æ–±'—î–∫—Ç response.data
            historyData = [response.data];
          }
        }

        // –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–º—ñ–Ω—é—î–º–æ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é
        if (page === 1 && forceRefresh) {
          this.state.history = historyData;
        }
        // –Ü–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó (–¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
        else if (page > 1) {
          // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑–∞ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
          const existingIds = new Set(this.state.history.map(item => item.raffle_id));
          const newItems = historyData.filter(item => !existingIds.has(item.raffle_id));

          this.state.history = [...this.state.history, ...newItems];
        } else if (page === 1 && this.state.history.length === 0) {
          // –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è
          this.state.history = historyData;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        this.state.currentPage = pagination.page;
        this.state.totalPages = pagination.totalPages;
        this.state.hasMore = pagination.hasMore;

        // –ö–µ—à—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
        if (this.state.history.length > 0) {
          this._cacheData(this.state.history);
        }

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
        WinixRaffles.events.emit('history-updated', {
          count: this.state.history.length,
          page: pagination.page,
          totalPages: pagination.totalPages,
          hasMore: pagination.hasMore
        });

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
          data: page === 1 ? historyData : this.state.history,
          page: pagination.page,
          totalPages: pagination.totalPages,
          hasMore: pagination.hasMore
        };
      } else if (response.status === 'error') {
        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
        if (response.code === 429 || (response.message && response.message.includes('many requests'))) {
          this._handleRateLimitError('history-container');

          // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
          return {
            data: this.state.history || [],
            page,
            totalPages: Math.ceil((this.state.history?.length || 0) / pageSize),
            hasMore: false,
            fromCache: true,
            rateLimited: true
          };
        }

        throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó');
      }

      throw new Error('–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó');
    } catch (error) {
      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      WinixRaffles.loader.hide("history-fetch");

      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      this.state.loading = false;

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ —Å—Ç–∞–Ω—ñ
      this.state.error = error.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó';

      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);

      // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
      return {
        data: this.state.history || [],
        page,
        totalPages: Math.ceil((this.state.history?.length || 0) / pageSize),
        hasMore: false,
        fromCache: true,
        error: this.state.error
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
   * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
   * @returns {Promise<Object>} –î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
   */
  async getRaffleDetails(raffleId) {
    if (!raffleId) {
      throw new Error("ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ");
    }

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
      if (!WinixRaffles.network.isOnline()) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–µ—Ç–∞–ª–µ–π
        if (this.state.detailsMap.has(raffleId)) {
          const cachedDetails = this.state.detailsMap.get(raffleId);
          return cachedDetails.data;
        }

        // –®—É–∫–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
        const raffleFromHistory = this.state.history.find(item => item.raffle_id === raffleId);
        if (raffleFromHistory) {
          return raffleFromHistory;
        }

        throw new Error("–î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –≤ —Ä–µ–∂–∏–º—ñ –æ—Ñ–ª–∞–π–Ω");
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–µ—Ç–∞–ª–µ–π
      if (this.state.detailsMap.has(raffleId)) {
        const cachedDetails = this.state.detailsMap.get(raffleId);
        const now = Date.now();

        // –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
        if (now - cachedDetails.timestamp < CONFIG.CACHE_TTL.DETAILS) {
          return cachedDetails.data;
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
      if (!this._canMakeRequest()) {
        // –Ø–∫—â–æ —î –≤ –∫–µ—à—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TTL
        if (this.state.detailsMap.has(raffleId)) {
          return this.state.detailsMap.get(raffleId).data;
        }

        // –®—É–∫–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
        const raffleFromHistory = this.state.history.find(item => item.raffle_id === raffleId);
        if (raffleFromHistory) {
          return raffleFromHistory;
        }

        throw new Error("–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
      this._updateRequestTime();

      // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API
      const userId = api.getUserId();
      if (!userId) {
        throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      }

      // –ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
      if (typeof api.refreshToken === 'function') {
        await api.refreshToken().catch(e => {
          WinixRaffles.logger.warn("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
        });
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      WinixRaffles.loader.show("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É...", `raffle-details-${raffleId}`);

      // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
      const response = await api.apiRequest(`user/${userId}/raffles-history/${raffleId}`, 'GET', null, {
        timeout: 10000,
        suppressErrors: true
      });

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      WinixRaffles.loader.hide(`raffle-details-${raffleId}`);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      if (response.status === 'success') {
        const details = response.data;

        // –ö–µ—à—É—î–º–æ –¥–µ—Ç–∞–ª—ñ
        this._cacheRaffleDetails(raffleId, details);

        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é, —è–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à —î –≤ –Ω—ñ–π
        this.state.history = this.state.history.map(item => {
          if (item.raffle_id === raffleId) {
            return { ...item, ...details };
          }
          return item;
        });

        // –ö–µ—à—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
        this._cacheData(this.state.history);

        return details;
      } else if (response.status === 'error') {
        throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
      }

      throw new Error('–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
    } catch (error) {
      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      WinixRaffles.loader.hide(`raffle-details-${raffleId}`);

      WinixRaffles.logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);

      // –®—É–∫–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
      const raffleFromHistory = this.state.history.find(item => item.raffle_id === raffleId);
      if (raffleFromHistory) {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à, —â–æ–± –Ω–µ —Ä–æ–±–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
        this._cacheRaffleDetails(raffleId, raffleFromHistory);
        return raffleFromHistory;
      }

      // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      return {
        raffle_id: raffleId,
        title: "–î–µ—Ç–∞–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ",
        status: "unknown",
        error: error.message
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
   * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç—ñ
   */
  async getStatistics(forceRefresh) {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
      const cachedStats = WinixRaffles.cache.get('history_statistics');
      if (!forceRefresh && cachedStats) {
        return cachedStats;
      }

      // –Ø–∫—â–æ –æ—Ñ–ª–∞–π–Ω, —Ä–∞—Ö—É—î–º–æ –∑ –∫–µ—à–æ–≤–∞–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
      if (!WinixRaffles.network.isOnline()) {
        return this._calculateStatsFromHistory(this.state.history);
      }

      // –Ø–∫—â–æ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—É —ñ—Å—Ç–æ—Ä—ñ—é
      if (forceRefresh) {
        await this.getHistory({ forceRefresh: true });
      } else if (this.state.history.length === 0) {
        // –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ó—ó
        await this.getHistory();
      }

      // –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
      const stats = this._calculateStatsFromHistory(this.state.history);

      // –ö–µ—à—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      WinixRaffles.cache.set('history_statistics', stats, CONFIG.CACHE_TTL.STATS);

      return stats;
    } catch (error) {
      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);

      // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      return {
        totalParticipations: this.state.history.length || 0,
        totalWins: this.state.history.filter(item => item.status === 'won').length || 0,
        totalTokensSpent: 0,
        totalPrizeAmount: 0,
        error: error.message
      };
    }
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
   * @param {Array} history - –î–∞–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
   * @returns {Object} –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   * @private
   */
  _calculateStatsFromHistory(history) {
    if (!Array.isArray(history) || history.length === 0) {
      return {
        totalParticipations: 0,
        totalWins: 0,
        totalTokensSpent: 0,
        totalPrizeAmount: 0
      };
    }

    try {
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–∏–≥—Ä–∞—à–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
      const wonRaffles = history.filter(item => item && item.status === 'won');

      // –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∂–µ—Ç–æ–Ω—ñ–≤
      let totalTokensSpent = 0;
      history.forEach(item => {
        if (item && item.entry_count) {
          totalTokensSpent += parseInt(item.entry_count) || 0;
        }
      });

      // –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –≤–∏–≥—Ä–∞—à—ñ–≤
      let totalPrizeAmount = 0;
      wonRaffles.forEach(item => {
        if (item && item.prize) {
          // –°–ø—Ä–æ–±–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ä—è–¥–∫–∞ –ø—Ä–∏–∑—É
          const prizeMatch = item.prize.match(/(\d+(?:\.\d+)?)/);
          if (prizeMatch && prizeMatch[1]) {
            totalPrizeAmount += parseFloat(prizeMatch[1]) || 0;
          }
        }
      });

      return {
        totalParticipations: history.length,
        totalWins: wonRaffles.length,
        totalTokensSpent,
        totalPrizeAmount
      };
    } catch (error) {
      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);

      return {
        totalParticipations: history.length,
        totalWins: history.filter(item => item.status === 'won').length,
        totalTokensSpent: 0,
        totalPrizeAmount: 0,
        error: error.message
      };
    }
  }

  /**
   * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
   * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  async displayHistory(containerId, forceRefresh) {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    containerId = containerId || 'history-container';
    forceRefresh = !!forceRefresh;

    const container = document.getElementById(containerId);
    if (!container) {
      WinixRaffles.logger.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ ID '${containerId}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      return;
    }

    try {
      // –î–æ–¥–∞—î–º–æ —Å—ñ—Ç–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this._addStatsGrid(container);

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      if (this.state.history.length === 0 || forceRefresh) {
        container.innerHTML = `
          <div class="loading-placeholder">
            <div class="loading-spinner"></div>
            <div class="loading-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó...</div>
            <div class="loading-subtext">–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞</div>
          </div>
        `;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      const result = await this.getHistory({
        page: 1,
        filters: this.state.filters,
        forceRefresh
      });

      // –Ø–∫—â–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω —ñ –Ω–µ–º–∞—î –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      if (result.isOffline && result.data.length === 0) {
        container.innerHTML = this._createEmptyHistoryHTML("–ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.");
        return;
      }

      // –Ø–∫—â–æ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ
      if (result.data.length === 0) {
        container.innerHTML = this._createEmptyHistoryHTML();

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –Ω—É–ª—è–º–∏
        this._updateStatistics({
          totalParticipations: 0,
          totalWins: 0,
          totalTokensSpent: 0,
          totalPrizeAmount: 0
        });
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await this.getStatistics(forceRefresh);

      // –†–æ–∑–¥—ñ–ª—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞ –≤–∏–≥—Ä–∞—à–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∑–≤–∏—á–∞–π–Ω—ñ —É—á–∞—Å—Ç—ñ
      const wonRaffles = result.data.filter(item => item && item.status === 'won');
      const participatedRaffles = result.data.filter(item => item && item.status !== 'won');

      // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      let historyHTML = `
        <div class="history-filters">
          <div class="filter-group">
            <label>–¢–∏–ø:</label>
            <select id="history-type-filter">
              <option value="all"${this.state.filters.type === 'all' ? ' selected' : ''}>–£—Å—ñ —Ç–∏–ø–∏</option>
              <option value="daily"${this.state.filters.type === 'daily' ? ' selected' : ''}>–©–æ–¥–µ–Ω–Ω—ñ</option>
              <option value="main"${this.state.filters.type === 'main' ? ' selected' : ''}>–î–∂–µ–∫–ø–æ—Ç–∏</option>
            </select>
          </div>
          <div class="filter-group">
            <label>–°—Ç–∞—Ç—É—Å:</label>
            <select id="history-status-filter">
              <option value="all"${this.state.filters.status === 'all' ? ' selected' : ''}>–£—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
              <option value="won"${this.state.filters.status === 'won' ? ' selected' : ''}>–ü–µ—Ä–µ–º–æ–≥–∏</option>
              <option value="participated"${this.state.filters.status === 'participated' ? ' selected' : ''}>–£—á–∞—Å—Ç—å</option>
            </select>
          </div>
          <div class="filter-group">
            <label>–ü–µ—Ä—ñ–æ–¥:</label>
            <select id="history-period-filter">
              <option value="all"${this.state.filters.period === 'all' ? ' selected' : ''}>–í–µ—Å—å —á–∞—Å</option>
              <option value="week"${this.state.filters.period === 'week' ? ' selected' : ''}>–¢–∏–∂–¥–µ–Ω—å</option>
              <option value="month"${this.state.filters.period === 'month' ? ' selected' : ''}>–ú—ñ—Å—è—Ü—å</option>
              <option value="year"${this.state.filters.period === 'year' ? ' selected' : ''}>–†—ñ–∫</option>
            </select>
          </div>
          <button id="refresh-history-btn" class="refresh-btn">
            <span class="refresh-icon">üîÑ</span>
          </button>
        </div>

        <div class="history-stats">
          <div class="stats-item">
            <div class="stats-value">${stats.totalParticipations}</div>
            <div class="stats-label">–í—Å—å–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</div>
          </div>
          <div class="stats-item">
            <div class="stats-value">${stats.totalWins}</div>
            <div class="stats-label">–ü–µ—Ä–µ–º–æ–≥</div>
          </div>
          <div class="stats-item">
            <div class="stats-value">${stats.totalPrizeAmount.toFixed(2)} WINIX</div>
            <div class="stats-label">WINIX –≤–∏–≥—Ä–∞–Ω–æ</div>
          </div>
        </div>
      `;

      // –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é "–ú–æ—ó –ø–µ—Ä–µ–º–æ–≥–∏" —è–∫—â–æ —î –≤–∏–≥—Ä–∞—à—ñ
      if (wonRaffles.length > 0) {
        historyHTML += `
          <div class="history-section">
            <h3 class="section-title">–ú–æ—ó –ø–µ—Ä–µ–º–æ–≥–∏</h3>
            <div class="history-cards">
              ${wonRaffles.map(raffle => this._createHistoryCardHTML(raffle)).join('')}
            </div>
          </div>
        `;
      }

      // –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é —É—á–∞—Å—Ç—ñ
      historyHTML += `
        <div class="history-section">
          <h3 class="section-title">–Ü—Å—Ç–æ—Ä—ñ—è —É—á–∞—Å—Ç—ñ</h3>
          <div class="history-cards">
            ${participatedRaffles.length > 0 
              ? participatedRaffles.map(raffle => this._createHistoryCardHTML(raffle)).join('')
              : '<div class="empty-history-section">–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö</div>'}
          </div>
        </div>
      `;

      // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±—ñ–ª—å—à–µ", —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      if (result.hasMore) {
        historyHTML += `
          <div class="load-more-container">
            <button id="load-more-history" class="load-more-btn">
              –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ
            </button>
          </div>
        `;
      }

      // –í—Å—Ç–∞–≤–ª—è—î–º–æ HTML –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      container.innerHTML = historyHTML;

      // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
      this._setupFilterEventListeners(containerId);

      // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±—ñ–ª—å—à–µ"
      const loadMoreBtn = document.getElementById('load-more-history');
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => {
          this._loadMoreHistory(containerId);
        });
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this._updateStatistics(stats);

      // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–∞—Ä—Ç–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó
      this._setupHistoryCardEventListeners(container);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
      WinixRaffles.events.emit('history-displayed', {
        total: result.data.length,
        wins: wonRaffles.length,
        participated: participatedRaffles.length
      });
    } catch (error) {
      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      let errorMessage = !WinixRaffles.network.isOnline()
        ? "–ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
        : "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.";

      container.innerHTML = this._createEmptyHistoryHTML(errorMessage);
    }
  }

  /**
 * –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ—Å—Ç–æ—Ä—ñ—ó
 * @param {boolean} [forceRefresh=false] –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
 * @returns {Promise<Array>} –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 */
async refresh(forceRefresh = false) {
  try {
    WinixRaffles.logger.log("–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

    // –û—á–∏—â—É—î–º–æ –∫–µ—à —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (forceRefresh) {
      this.clearCache();
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
    const history = await this.getRafflesHistory({}, forceRefresh);

    // –Ø–∫—â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
    const historyContainer = document.getElementById('history-container');
    if (historyContainer && historyContainer.offsetParent !== null) {
      await this.displayHistory('history-container', forceRefresh);
    }

    return history;
  } catch (error) {
    WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);
    throw error;
  }
}

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
   * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   * @private
   */
  async _loadMoreHistory(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;

    try {
      // –ó–∞–º—ñ–Ω—é—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ" –Ω–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const loadMoreContainer = container.querySelector('.load-more-container');
      if (loadMoreContainer) {
        loadMoreContainer.innerHTML = `
          <div class="loading-spinner-small"></div>
          <div class="loading-text-small">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
        `;
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
      const nextPage = this.state.currentPage + 1;
      const result = await this.getHistory({
        page: nextPage,
        filters: this.state.filters
      });

      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∫–∞—Ä—Ç–æ–∫
      const historyCards = container.querySelectorAll('.history-cards');

      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏
      if (result.data.length > 0) {
        // –†–æ–∑–¥—ñ–ª—è—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –≤–∏–≥—Ä–∞—à–Ω—ñ —Ç–∞ –∑–≤–∏—á–∞–π–Ω—ñ
        const newWonRaffles = result.data.filter(item =>
          item && item.status === 'won' &&
          !document.querySelector(`.history-card[data-raffle-id="${item.raffle_id}"]`)
        );

        const newParticipatedRaffles = result.data.filter(item =>
          item && item.status !== 'won' &&
          !document.querySelector(`.history-card[data-raffle-id="${item.raffle_id}"]`)
        );

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –≤–∏–≥—Ä–∞—à—ñ –≤ –ø–µ—Ä—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (newWonRaffles.length > 0 && historyCards.length > 0) {
          const wonContainer = historyCards[0];
          newWonRaffles.forEach(raffle => {
            const cardHTML = this._createHistoryCardHTML(raffle);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = cardHTML;
            const card = tempDiv.firstElementChild;
            wonContainer.appendChild(card);
          });
        }

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —É—á–∞—Å—Ç—ñ –≤ –¥—Ä—É–≥–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (newParticipatedRaffles.length > 0) {
          const participatedContainer = historyCards[historyCards.length - 1];

          // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö", —è–∫—â–æ –≤–æ–Ω–æ —î
          const emptySection = participatedContainer.querySelector('.empty-history-section');
          if (emptySection) {
            emptySection.remove();
          }

          newParticipatedRaffles.forEach(raffle => {
            const cardHTML = this._createHistoryCardHTML(raffle);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = cardHTML;
            const card = tempDiv.firstElementChild;
            participatedContainer.appendChild(card);
          });
        }
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ"
      if (loadMoreContainer) {
        if (result.hasMore) {
          loadMoreContainer.innerHTML = `
            <button id="load-more-history" class="load-more-btn">
              –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ
            </button>
          `;

          // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏
          const loadMoreBtn = document.getElementById('load-more-history');
          if (loadMoreBtn) {
            loadMoreBtn.addEventListener('click', () => {
              this._loadMoreHistory(containerId);
            });
          }
        } else {
          // –Ø–∫—â–æ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö, –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          loadMoreContainer.remove();
        }
      }

      // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –Ω–æ–≤–∏—Ö –∫–∞—Ä—Ç–æ–∫
      this._setupHistoryCardEventListeners(container);
    } catch (error) {
      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó:", error);

      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ"
      const loadMoreContainer = container.querySelector('.load-more-container');
      if (loadMoreContainer) {
        loadMoreContainer.innerHTML = `
          <button id="load-more-history" class="load-more-btn">
            –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ
          </button>
          <div class="error-text">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</div>
        `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const loadMoreBtn = document.getElementById('load-more-history');
        if (loadMoreBtn) {
          loadMoreBtn.addEventListener('click', () => {
            this._loadMoreHistory(containerId);
          });
        }
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      WinixRaffles.utils.showToast(
        "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        "error"
      );
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
   * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   * @private
   */
  _setupFilterEventListeners(containerId) {
    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const typeFilter = document.getElementById('history-type-filter');
    const statusFilter = document.getElementById('history-status-filter');
    const periodFilter = document.getElementById('history-period-filter');
    const refreshBtn = document.getElementById('refresh-history-btn');

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    const applyFilters = async () => {
      if (!WinixRaffles.network.isOnline()) {
        WinixRaffles.utils.showToast(
          "–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º—ñ –æ—Ñ–ª–∞–π–Ω",
          "warning"
        );
        return;
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –≤ —Å—Ç–∞–Ω—ñ
      this.state.filters = {
        type: typeFilter?.value || 'all',
        status: statusFilter?.value || 'all',
        period: periodFilter?.value || 'all'
      };

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      await this.displayHistory(containerId, true);
    };

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    if (typeFilter) typeFilter.addEventListener('change', applyFilters);
    if (statusFilter) statusFilter.addEventListener('change', applyFilters);
    if (periodFilter) periodFilter.addEventListener('change', applyFilters);

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (refreshBtn) {
      refreshBtn.addEventListener('click', async () => {
        if (!WinixRaffles.network.isOnline()) {
          WinixRaffles.utils.showToast(
            "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –æ—Ñ–ª–∞–π–Ω",
            "warning"
          );
          return;
        }

        await this.displayHistory(containerId, true);
      });
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –∫–∞—Ä—Ç–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó
   * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –∫–∞—Ä—Ç–∫–∞–º–∏
   * @private
   */
  _setupHistoryCardEventListeners(container) {
    const historyCards = container.querySelectorAll('.history-card');

    historyCards.forEach(card => {
      card.addEventListener('click', async () => {
        const raffleId = card.getAttribute('data-raffle-id');
        if (!raffleId) return;

        try {
          // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
          WinixRaffles.loader.show("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π...", `card-${raffleId}`);

          // –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
          const details = await this.getRaffleDetails(raffleId);

          // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
          WinixRaffles.loader.hide(`card-${raffleId}`);

          // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
          WinixRaffles.events.emit('show-history-details', { raffleData: details });
        } catch (error) {
          // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
          WinixRaffles.loader.hide(`card-${raffleId}`);

          WinixRaffles.logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);

          // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
          WinixRaffles.utils.showToast(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É",
            "error"
          );
        }
      });
    });
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è –∫–∞—Ä—Ç–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
   * @param {Object} raffle - –î–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
   * @returns {string} HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞ –∫–∞—Ä—Ç–∫–∏
   * @private
   */
  _createHistoryCardHTML(raffle) {
    if (!raffle) return '';

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    const raffleId = raffle.raffle_id || raffle.id || 'unknown';
    const title = raffle.title || '–†–æ–∑—ñ–≥—Ä–∞—à';
    const date = raffle.date || raffle.created_at || '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞';
    const prize = raffle.prize || '0 WINIX';
    const isWon = raffle.status === 'won';
    const statusClass = isWon ? 'win-status' : 'participated-status';
    const statusText = isWon ? '–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏' : '–£—á–∞—Å—Ç—å –±–µ–∑ –ø–µ—Ä–µ–º–æ–≥–∏';
    const raffleType = raffle.is_daily ? '–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à' : '–ì—Ä–∞–Ω–¥ —Ä–æ–∑—ñ–≥—Ä–∞—à';
    const entryCount = raffle.entry_count || 0;

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    const wonInfoHTML = isWon ? `
      <div class="raffle-history-place">
        <span class="place-label">–ú—ñ—Å—Ü–µ:</span>
        <span class="place-value">${raffle.place || '-'}</span>
      </div>
    ` : '';

    return `
      <div class="history-card ${isWon ? 'won-card' : ''}" data-raffle-id="${raffleId}">
        <div class="raffle-history-header">
          <div class="raffle-history-title">${title}</div>
          <div class="raffle-history-date">${date}</div>
        </div>
        <div class="raffle-history-info">
          <div class="raffle-history-type">${raffleType}</div>
          <div class="raffle-history-prize">${prize}</div>
          <div class="raffle-history-status ${statusClass}">${statusText}</div>
          <div class="raffle-history-entries">
            <span class="entries-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤:</span>
            <span class="entries-value">${entryCount}</span>
          </div>
          ${wonInfoHTML}
        </div>
        <div class="raffle-history-footer">
          <span class="raffle-history-detail-label">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</span>
        </div>
      </div>
    `;
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
   * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   * @returns {string} HTML –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
   * @private
   */
  _createEmptyHistoryHTML(message) {
    message = message || '–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤';

    return `
      <div class="empty-history">
        <div class="empty-history-icon">üìã</div>
        <h3>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è</h3>
        <p>${message}</p>
        <button class="refresh-history-btn" onclick="WinixRaffles.history.displayHistory('history-container', true)">
          <span class="refresh-icon">üîÑ</span> –û–Ω–æ–≤–∏—Ç–∏
        </button>
      </div>
    `;
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
   * @private
   */
  _addStatsGrid(container) {
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    if (!document.querySelector('.stats-grid') && container) {
      const statsGrid = document.createElement('div');
      statsGrid.className = 'stats-grid';
      statsGrid.innerHTML = `
        <div class="stats-card">
          <div class="stats-card-title">–í—Å—å–æ–≥–æ —É—á–∞—Å—Ç–µ–π</div>
          <div class="stats-card-value" id="total-participated">-</div>
        </div>
        <div class="stats-card">
          <div class="stats-card-title">–ü–µ—Ä–µ–º–æ–≥–∏</div>
          <div class="stats-card-value" id="total-wins">-</div>
        </div>
        <div class="stats-card">
          <div class="stats-card-title">–í–∏–≥—Ä–∞–Ω–æ WINIX</div>
          <div class="stats-card-value" id="total-winix-won">-</div>
        </div>
        <div class="stats-card">
          <div class="stats-card-title">–í–∏—Ç—Ä–∞—á–µ–Ω–æ –∂–µ—Ç–æ–Ω—ñ–≤</div>
          <div class="stats-card-value" id="total-tokens-spent">-</div>
        </div>
      `;

      // –î–æ–¥–∞—î–º–æ —Å—ñ—Ç–∫—É –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —ñ—Å—Ç–æ—Ä—ñ—ó
      if (container.parentNode) {
        container.parentNode.insertBefore(statsGrid, container);
      }
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param {Object} stats - –û–±'—î–∫—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
   * @private
   */
  _updateStatistics(stats) {
    try {
      // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
      const totalParticipated = document.getElementById('total-participated');
      const totalWins = document.getElementById('total-wins');
      const totalWinixWon = document.getElementById('total-winix-won');
      const totalTokensSpent = document.getElementById('total-tokens-spent');

      if (totalParticipated) {
        totalParticipated.textContent = stats.totalParticipations || 0;
      }

      if (totalWins) {
        totalWins.textContent = stats.totalWins || 0;
      }

      if (totalWinixWon) {
        totalWinixWon.textContent = stats.totalPrizeAmount
          ? stats.totalPrizeAmount.toFixed(2)
          : '0';
      }

      if (totalTokensSpent) {
        totalTokensSpent.textContent = stats.totalTokensSpent || 0;
      }
    } catch (error) {
      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    }
  }

  /**
   * –ï–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É CSV
   */
  exportHistoryToCSV() {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
      if (this.state.history.length === 0) {
        WinixRaffles.utils.showToast('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É', 'warning');
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
      const headers = [
        'ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É',
        '–ù–∞–∑–≤–∞',
        '–î–∞—Ç–∞',
        '–¢–∏–ø',
        '–°—Ç–∞—Ç—É—Å',
        '–ü—Ä–∏–∑',
        '–ñ–µ—Ç–æ–Ω—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ',
        '–ú—ñ—Å—Ü–µ'
      ];

      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö
      const rows = this.state.history.map(raffle => [
        raffle.raffle_id || raffle.id || '',
        raffle.title || '–†–æ–∑—ñ–≥—Ä–∞—à',
        raffle.date || raffle.created_at || '',
        raffle.is_daily ? '–©–æ–¥–µ–Ω–Ω–∏–π' : '–ì—Ä–∞–Ω–¥',
        raffle.status === 'won' ? '–ü–µ—Ä–µ–º–æ–≥–∞' : '–£—á–∞—Å—Ç—å',
        raffle.prize || '0 WINIX',
        raffle.entry_count || '0',
        raffle.status === 'won' ? (raffle.place || '-') : '-'
      ]);

      // –§–æ—Ä–º—É—î–º–æ CSV
      const csvContent = [
        headers.join(','),
        ...rows.map(row => row.join(','))
      ].join('\n');

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');

      link.setAttribute('href', url);
      link.setAttribute('download', `winix_raffles_history_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      WinixRaffles.utils.showToast('–Ü—Å—Ç–æ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ', 'success');
    } catch (error) {
      WinixRaffles.logger.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
      WinixRaffles.utils.showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é', 'error');
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É —ñ—Å—Ç–æ—Ä—ñ—ó
   */
  clearCache() {
    // –û—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    this.state.history = [];
    this.state.detailsMap = new Map();
    this.state.currentPage = 1;
    this.state.totalPages = 1;
    this.state.hasMore = false;
    this.state.lastRequestTime = 0;

    // –û—á–∏—â–∞—î–º–æ –∫–µ—à —Å–∏—Å—Ç–µ–º–∏
    WinixRaffles.cache.remove('history_data');
    WinixRaffles.cache.remove('history_details_map');
    WinixRaffles.cache.remove('history_statistics');

    // –û—á–∏—â–∞—î–º–æ localStorage
    try {
      localStorage.removeItem('winix_raffles_history');
    } catch (error) {
      WinixRaffles.logger.warn("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è localStorage:", error);
    }

    WinixRaffles.logger.log("–ö–µ—à —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –æ—á–∏—â–µ–Ω–æ");
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Ç—ñ–≤
   */
  resetRequestState() {
    this.state.loading = false;
    this.state.error = null;
    this.state.lastRequestTime = 0;

    WinixRaffles.logger.log("–°—Ç–∞–Ω –∑–∞–ø–∏—Ç—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∫–∏–Ω—É—Ç–æ");
  }

  /**
   * –ó–Ω–∏—â–µ–Ω–Ω—è –º–æ–¥—É–ª—è
   */
  destroy() {
    // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    window.removeEventListener('online', () => {});
    window.removeEventListener('offline', () => {});

    WinixRaffles.logger.log("–ú–æ–¥—É–ª—å —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑–Ω–∏—â–µ–Ω–æ");
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
const historyModule = new HistoryModule();

// –û–Ω–æ–≤–ª—é—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç –¥–ª—è —î–¥–∏–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
export default {
  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
   */
  init: async function() {
    try {
      await historyModule.init();

      // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
      WinixRaffles.history = historyModule;

      // –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–æ–¥—É–ª—å –≤ —Å–∏—Å—Ç–µ–º—ñ WinixRaffles (–¥–ª—è –Ω–æ–≤–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏)
      if (typeof WinixRaffles.registerModule === 'function') {
        WinixRaffles.registerModule('history', {
          init: historyModule.init.bind(historyModule),
          refresh: historyModule.refresh.bind(historyModule),
          getRafflesHistory: historyModule.getRafflesHistory.bind(historyModule),
          displayHistory: historyModule.displayHistory.bind(historyModule),
          getStatistics: historyModule.getStatistics.bind(historyModule),
          destroy: historyModule.destroy.bind(historyModule)
        });
      }

      return historyModule;
    } catch (error) {
      WinixRaffles.logger.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
      throw error;
    }
  },

  /**
   * –ú–µ—Ç–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
   * @param {boolean} [forceRefresh=false] –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   * @returns {Promise<Array>} –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
   */
  refresh: function(forceRefresh = false) {
    return historyModule.refresh(forceRefresh);
  },

  /**
   * –ó–Ω–∏—â–µ–Ω–Ω—è –º–æ–¥—É–ª—è
   */
  destroy: function() {
    historyModule.destroy();
  }
};