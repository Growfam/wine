/**
 * formatters.js - –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
 */

import WinixRaffles from '../globals.js';

// –§–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç–∏
const dateTimeFormat = new Intl.DateTimeFormat('uk-UA', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
});

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —É –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç
 * @param {string|Date} timestamp - –í—ñ–¥–º—ñ—Ç–∫–∞ —á–∞—Å—É –∞–±–æ –æ–±'—î–∫—Ç Date
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞
 */
export function formatDate(timestamp) {
    if (!timestamp) return '';

    try {
        const date = new Date(timestamp);
        if (isNaN(date.getTime())) {
            return '';
        }
        return dateTimeFormat.format(date);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:', error);
        return '';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
 * @param {number} amount - –°—É–º–∞
 * @param {string} currency - –í–∞–ª—é—Ç–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'WINIX')
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—É–º–∞ –∑ –≤–∞–ª—é—Ç–æ—é
 */
export function formatCurrency(amount, currency = 'WINIX') {
    return new Intl.NumberFormat('uk-UA').format(amount) + ' ' + currency;
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–µ–¥—É—á–æ–≥–æ –Ω—É–ª—è –¥–æ —á–∏—Å–ª–∞ (–¥–ª—è –≥–æ–¥–∏–Ω, —Ö–≤–∏–ª–∏–Ω —Ç–æ—â–æ)
 * @param {number} num - –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
 * @returns {string} –ß–∏—Å–ª–æ –∑ –≤–µ–¥—É—á–∏–º –Ω—É–ª–µ–º (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
 */
export function padZero(num) {
    return num.toString().padStart(2, '0');
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º—ñ—Å—Ü—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {Array<number>} places - –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ü—å
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –º—ñ—Å—Ü—å
 */
export function formatPlaces(places) {
    if (!places || !Array.isArray(places) || places.length === 0) {
        return "–ù–µ–≤—ñ–¥–æ–º–æ";
    }

    if (places.length === 1) {
        return `${places[0]} –º—ñ—Å—Ü–µ`;
    }

    // –®—É–∫–∞—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –º—ñ—Å—Ü—è
    places.sort((a, b) => a - b);

    const ranges = [];
    let start = places[0];
    let end = places[0];

    for (let i = 1; i < places.length; i++) {
        if (places[i] === end + 1) {
            end = places[i];
        } else {
            if (start === end) {
                ranges.push(`${start}`);
            } else {
                ranges.push(`${start}-${end}`);
            }
            start = end = places[i];
        }
    }

    if (start === end) {
        ranges.push(`${start}`);
    } else {
        ranges.push(`${start}-${end}`);
    }

    return ranges.join(', ') + ' –º—ñ—Å—Ü—è';
}

// –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
WinixRaffles.utils.formatters = {
    formatDate,
    formatCurrency,
    padZero,
    formatPlaces
};

// –î–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∏ –¥–æ utils
WinixRaffles.utils.formatDate = formatDate;
WinixRaffles.utils.formatCurrency = formatCurrency;
WinixRaffles.utils.padZero = padZero;
WinixRaffles.utils.formatPlaces = formatPlaces;

console.log("üéÆ WINIX Raffles: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É—Ç–∏–ª—ñ—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è");

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
export default {
    formatDate,
    formatCurrency,
    padZero,
    formatPlaces
};