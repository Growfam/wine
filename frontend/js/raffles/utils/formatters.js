/**
 * formatters.js - –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
 */

import WinixRaffles from '../globals.js';

// –§–æ—Ä–º–∞—Ç–∏ –¥–∞—Ç–∏
const dateTimeFormat = new Intl.DateTimeFormat('uk-UA', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
});

const dateOnlyFormat = new Intl.DateTimeFormat('uk-UA', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
});

const timeOnlyFormat = new Intl.DateTimeFormat('uk-UA', {
    hour: '2-digit',
    minute: '2-digit'
});

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —É –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç
 * @param {string|Date} timestamp - –í—ñ–¥–º—ñ—Ç–∫–∞ —á–∞—Å—É –∞–±–æ –æ–±'—î–∫—Ç Date
 * @param {string} format - –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ ('full', 'date', 'time')
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞
 */
export function formatDate(timestamp, format = 'full') {
    if (!timestamp) return '';

    try {
        const date = new Date(timestamp);
        if (isNaN(date.getTime())) {
            return '';
        }

        switch (format) {
            case 'date':
                return dateOnlyFormat.format(date);
            case 'time':
                return timeOnlyFormat.format(date);
            case 'full':
            default:
                return dateTimeFormat.format(date);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:', error);
        return '';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
 * @param {number} amount - –°—É–º–∞
 * @param {string} currency - –í–∞–ª—é—Ç–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'WINIX')
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—É–º–∞ –∑ –≤–∞–ª—é—Ç–æ—é
 */
export function formatCurrency(amount, currency = 'WINIX') {
    if (isNaN(amount)) {
        return '0 ' + currency;
    }
    return new Intl.NumberFormat('uk-UA').format(amount) + ' ' + currency;
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤
 * @param {number} num - –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —á–∏—Å–ª–æ
 */
export function formatNumber(num) {
    if (isNaN(num)) {
        return '0';
    }
    return new Intl.NumberFormat('uk-UA').format(num);
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–µ–¥—É—á–æ–≥–æ –Ω—É–ª—è –¥–æ —á–∏—Å–ª–∞ (–¥–ª—è –≥–æ–¥–∏–Ω, —Ö–≤–∏–ª–∏–Ω —Ç–æ—â–æ)
 * @param {number} num - –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
 * @returns {string} –ß–∏—Å–ª–æ –∑ –≤–µ–¥—É—á–∏–º –Ω—É–ª–µ–º (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
 */
export function padZero(num) {
    if (isNaN(num)) {
        return '00';
    }
    return num.toString().padStart(2, '0');
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º—ñ—Å—Ü—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {Array<number>} places - –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ü—å
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –º—ñ—Å—Ü—å
 */
export function formatPlaces(places) {
    if (!places || !Array.isArray(places) || places.length === 0) {
        return "–ù–µ–≤—ñ–¥–æ–º–æ";
    }

    if (places.length === 1) {
        return `${places[0]} –º—ñ—Å—Ü–µ`;
    }

    // –®—É–∫–∞—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –º—ñ—Å—Ü—è
    places.sort((a, b) => a - b);

    const ranges = [];
    let start = places[0];
    let end = places[0];

    for (let i = 1; i < places.length; i++) {
        if (places[i] === end + 1) {
            end = places[i];
        } else {
            if (start === end) {
                ranges.push(`${start}`);
            } else {
                ranges.push(`${start}-${end}`);
            }
            start = end = places[i];
        }
    }

    if (start === end) {
        ranges.push(`${start}`);
    } else {
        ranges.push(`${start}-${end}`);
    }

    return ranges.join(', ') + ' –º—ñ—Å—Ü—è';
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è (–¥–ª—è —Ç–∞–π–º–µ—Ä—ñ–≤)
 * @param {number} timeLeftMs - –ß–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {string} format - –§–æ—Ä–º–∞—Ç ('short', 'full')
 * @returns {Object} –û–±'—î–∫—Ç –∑ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
 */
export function formatTimeLeft(timeLeftMs, format = 'full') {
    if (timeLeftMs <= 0) {
        return {
            days: '00',
            hours: '00',
            minutes: '00',
            seconds: '00',
            text: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        };
    }

    const days = Math.floor(timeLeftMs / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeftMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeftMs % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeftMs % (1000 * 60)) / 1000);

    let text = '';
    if (format === 'short') {
        if (days > 0) {
            text = `${days}–¥ ${hours}–≥`;
        } else {
            text = `${hours}–≥ ${minutes}—Ö–≤`;
        }
    } else {
        if (days > 0) {
            text = `${days} –¥–Ω—ñ–≤ ${padZero(hours)}:${padZero(minutes)}`;
        } else {
            text = `${padZero(hours)}:${padZero(minutes)}:${padZero(seconds)}`;
        }
    }

    return {
        days: padZero(days),
        hours: padZero(hours),
        minutes: padZero(minutes),
        seconds: padZero(seconds),
        text
    };
}

/**
 * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞ —á–∞—Å–æ–º
 * @param {Date|string} startTime - –ß–∞—Å –ø–æ—á–∞—Ç–∫—É
 * @param {Date|string} endTime - –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
 * @returns {number} –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—É (0-100)
 */
export function calculateProgressByTime(startTime, endTime) {
    if (!startTime || !endTime) {
        return 0;
    }

    try {
        const now = Date.now();
        const start = new Date(startTime).getTime();
        const end = new Date(endTime).getTime();

        if (isNaN(start) || isNaN(end)) {
            return 0;
        }

        const totalDuration = end - start;
        if (totalDuration <= 0) {
            return 0;
        }

        const elapsed = now - start;
        return Math.min(100, Math.max(0, (elapsed / totalDuration) * 100));
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—É:", error);
        return 0;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–∏–∑—ñ–≤
 * @param {Object} prizeDistribution - –û–±'—î–∫—Ç –∑ —Ä–æ–∑–ø–æ–¥—ñ–ª–æ–º –ø—Ä–∏–∑—ñ–≤
 * @returns {string} - HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
 */
export function generatePrizeDistributionHTML(prizeDistribution) {
    if (!prizeDistribution || typeof prizeDistribution !== 'object' || Object.keys(prizeDistribution).length === 0) {
        return '<div class="prize-item"><span class="prize-place">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è</span></div>';
    }

    let html = '';
    const places = Object.keys(prizeDistribution).sort((a, b) => parseInt(a) - parseInt(b));

    // –ì—Ä—É–ø—É—î–º–æ –º—ñ—Å—Ü—è –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –ø—Ä–∏–∑–∞–º–∏
    const groupedPrizes = {};

    places.forEach(place => {
        const prize = prizeDistribution[place];
        if (!prize) return;

        const key = `${prize.amount}-${prize.currency}`;

        if (!groupedPrizes[key]) {
            groupedPrizes[key] = {
                amount: prize.amount,
                currency: prize.currency,
                places: []
            };
        }

        groupedPrizes[key].places.push(parseInt(place));
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏ –ø—Ä–∏–∑—ñ–≤
    for (const key in groupedPrizes) {
        const group = groupedPrizes[key];
        const placesText = formatPlaces(group.places);

        html += `
            <div class="prize-item">
                <span class="prize-place">${placesText}:</span>
                <span class="prize-value">${group.amount} ${group.currency}</span>
            </div>
        `;
    }

    return html;
}

// –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
WinixRaffles.utils.formatters = {
    formatDate,
    formatCurrency,
    formatNumber,
    padZero,
    formatPlaces,
    formatTimeLeft,
    calculateProgressByTime,
    generatePrizeDistributionHTML
};

// –î–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∏ –¥–æ utils
Object.assign(WinixRaffles.utils, WinixRaffles.utils.formatters);

console.log("üéÆ WINIX Raffles: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É—Ç–∏–ª—ñ—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è");

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
export default {
    formatDate,
    formatCurrency,
    formatNumber,
    padZero,
    formatPlaces,
    formatTimeLeft,
    calculateProgressByTime,
    generatePrizeDistributionHTML
};