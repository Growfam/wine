/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π —Ñ–∞–π–ª –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è core.js
 * –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –∫–æ–¥ –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É core.js
 */

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó startCountdown
// –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞–π–º–µ—Ä–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —ó—Ö –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
WinixRaffles.startCountdown = function(raffleId, endTime) {
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ —î
    if (this.state.refreshTimers[`countdown_${raffleId}`]) {
        clearInterval(this.state.refreshTimers[`countdown_${raffleId}`]);
    }

    const updateTimer = () => {
        const now = new Date().getTime();
        const timeLeft = endTime.getTime() - now;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –Ω–∏—Ö
        const days = document.getElementById(`days-${raffleId}`);
        const hours = document.getElementById(`hours-${raffleId}`);
        const minutes = document.getElementById(`minutes-${raffleId}`);
        const seconds = document.getElementById(`seconds-${raffleId}`);

        // –Ø–∫—â–æ —á–∞—Å –≤–∏–π—à–æ–≤ –∞–±–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
        if (timeLeft <= 0 || !days || !hours || !minutes || !seconds) {
            clearInterval(this.state.refreshTimers[`countdown_${raffleId}`]);

            // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–∞–π–º–µ—Ä–∞, —è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
            if (days) days.textContent = '00';
            if (hours) hours.textContent = '00';
            if (minutes) minutes.textContent = '00';
            if (seconds) seconds.textContent = '00';

            // –Ø–∫—â–æ —á–∞—Å –≤–∏–π—à–æ–≤, –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
            if (timeLeft <= 0) {
                setTimeout(() => this.loadActiveRaffles(), 2000);
            }
            return;
        }

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–Ω—ñ–≤, –≥–æ–¥–∏–Ω, —Ö–≤–∏–ª–∏–Ω, —Å–µ–∫—É–Ω–¥
        const daysValue = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hoursValue = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutesValue = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const secondsValue = Math.floor((timeLeft % (1000 * 60)) / 1000);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞–π–º–µ—Ä–∞
        days.textContent = daysValue.toString().padStart(2, '0');
        hours.textContent = hoursValue.toString().padStart(2, '0');
        minutes.textContent = minutesValue.toString().padStart(2, '0');
        seconds.textContent = secondsValue.toString().padStart(2, '0');
    };

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
    updateTimer();

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ (—â–æ—Å–µ–∫—É–Ω–¥–∏)
    this.state.refreshTimers[`countdown_${raffleId}`] = setInterval(updateTimer, 1000);
};

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó updateParticipationButtons
// –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–¥ —ó—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
if (WinixRaffles.participation) {
    const originalUpdateButtons = WinixRaffles.participation.updateParticipationButtons;

    WinixRaffles.participation.updateParticipationButtons = function() {
        try {
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É –≤–µ—Ä—Å—ñ—é
            if (typeof originalUpdateButtons === 'function') {
                originalUpdateButtons.call(this);
            } else {
                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                document.querySelectorAll('.join-button').forEach(button => {
                    if (!button) return;

                    const raffleId = button.getAttribute('data-raffle-id');
                    if (!raffleId) return;

                    // –î–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å, –∑–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                    if (this.participatingRaffles && this.participatingRaffles.has(raffleId)) {
                        const ticketCount = this.userRaffleTickets ? (this.userRaffleTickets[raffleId] || 1) : 1;
                        button.textContent = `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (—É –≤–∞—Å: ${ticketCount})`;

                        // –ó–º—ñ–Ω—é—î–º–æ –∫–ª–∞—Å, –∞–ª–µ –Ω–µ –¥–æ–¥–∞—î–º–æ disabled
                        button.classList.add('participating');
                        button.disabled = false;
                    }

                    if (this.invalidRaffleIds && this.invalidRaffleIds.has(raffleId)) {
                        button.textContent = '–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ';
                        button.classList.add('disabled');
                        button.disabled = true;
                    }
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –º—ñ–Ω—ñ-—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                document.querySelectorAll('.mini-raffle-button').forEach(button => {
                    if (!button) return;

                    const raffleId = button.getAttribute('data-raffle-id');
                    if (!raffleId) return;

                    // –î–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å, –∑–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                    if (this.participatingRaffles && this.participatingRaffles.has(raffleId)) {
                        const ticketCount = this.userRaffleTickets ? (this.userRaffleTickets[raffleId] || 1) : 1;
                        button.textContent = `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (${ticketCount})`;

                        // –ó–º—ñ–Ω—é—î–º–æ –∫–ª–∞—Å, –∞–ª–µ –Ω–µ –¥–æ–¥–∞—î–º–æ disabled
                        button.classList.add('participating');
                        button.disabled = false;
                    }

                    if (this.invalidRaffleIds && this.invalidRaffleIds.has(raffleId)) {
                        button.textContent = '–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ';
                        button.classList.add('disabled');
                        button.disabled = true;
                    }
                });
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ:", error);
        }
    };
}

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞–ø–∏—Ç—É API
// –î–æ–¥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
if (WinixAPI) {
    // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
    const originalApiRequest = WinixAPI.apiRequest;

    // –û–±–≥–æ—Ä—Ç–∫–∞ –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
    WinixAPI.apiRequest = async function(endpoint, method = 'GET', data = null, options = {}, retries = 3) {
        let lastError;

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        for (let attempt = 0; attempt < retries; attempt++) {
            try {
                // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é (–∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó)
                if (attempt > 0) {
                    const delay = Math.pow(2, attempt) * 500; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                    console.log(`üîÑ API: –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ #${attempt} —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }

                // –í–∏–∫–æ–Ω—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç
                return await originalApiRequest.call(this, endpoint, method, data, options);
            } catch (error) {
                lastError = error;

                // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ 429 (Too Many Requests), –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —Ä–æ–±–∏–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
                if (error.status === 429) {
                    const retryAfter = error.headers?.get('Retry-After') || 10;
                    const delay = parseInt(retryAfter) * 1000;
                    console.warn(`üîÑ API: –û—Ç—Ä–∏–º–∞–Ω–æ 429 (Too Many Requests), —á–µ–∫–∞—î–º–æ ${delay/1000}—Å...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }

                // –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞, –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
                if (attempt === retries - 1) {
                    if (options.suppressErrors) {
                        return {
                            status: 'error',
                            message: error.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –ø—ñ—Å–ª—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±',
                            source: 'api_error_retry'
                        };
                    }
                    throw error;
                }
            }
        }

        // –¶–µ–π –∫–æ–¥ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è, –∞–ª–µ –¥–ª—è –ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
        throw lastError;
    };
}

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è DOM
// –î–æ–¥–∞—î–º–æ –±–µ–∑–ø–µ—á–Ω—ñ –æ–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
WinixRaffles.safeUpdateDOM = function(elementId, updateFn) {
    try {
        const element = document.getElementById(elementId);
        if (element) {
            updateFn(element);
            return true;
        }
        return false;
    } catch (error) {
        console.warn(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ ${elementId}:`, error);
        return false;
    }
};

// –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞
WinixRaffles.safeUpdateValue = function(elementId, value) {
    return this.safeUpdateDOM(elementId, element => {
        element.textContent = value;
    });
};

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
WinixRaffles.updateUserBalance = function(userData) {
    if (!userData) return;

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
    if (userData.coins !== undefined) {
        this.safeUpdateDOM('user-coins', element => {
            element.textContent = userData.coins;
        });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    if (userData.balance !== undefined) {
        this.safeUpdateDOM('user-tokens', element => {
            element.textContent = userData.balance;
        });
    }
};

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
window.addEventListener('error', function(event) {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ JavaScript:', event.error);

    // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏
    if (WinixRaffles) {
        if (WinixRaffles.state && WinixRaffles.state.isLoading) {
            WinixRaffles.state.isLoading = false;
        }

        if (typeof window.hideLoading === 'function') {
            window.hideLoading();
        }
    }
});

// –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
if (typeof window.showToast !== 'function') {
    window.showToast = function(message, type = 'info') {
        const toast = document.getElementById('toast-message');
        if (!toast) {
            console.log(`[${type}] ${message}`);
            return;
        }

        toast.textContent = message;
        toast.className = 'toast-message';

        if (type === 'success') {
            toast.classList.add('success');
        } else if (type === 'error') {
            toast.classList.add('error');
        }

        toast.classList.add('show');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            toast.classList.remove('show');
        }, 5000);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
        toast.addEventListener('click', () => {
            toast.classList.remove('show');
        });
    };
}

if (typeof window.showLoading !== 'function') {
    window.showLoading = function() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) {
            spinner.style.display = 'flex';
        }
    };
}

if (typeof window.hideLoading !== 'function') {
    window.hideLoading = function() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) {
            spinner.style.display = 'none';
        }
    };
}