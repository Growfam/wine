/**
 * WINIX - –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (core.js)
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫, –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –∑–∞–≤–∏—Å–∞–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
 * @version 1.4.2
 */

(function() {
    'use strict';

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
    if (typeof window.WinixRaffles === 'undefined') {
        console.error('‚ùå WinixRaffles –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ init.js –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –ø–µ—Ä–µ–¥ core.js');
        return;
    }

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø–∏—Ç—ñ–≤
    let _requestCounter = {
        total: 0,
        errors: 0,
        lastReset: Date.now()
    };

    // –°–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö ID —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    if (!WinixRaffles.state.invalidRaffleIds) {
        WinixRaffles.state.invalidRaffleIds = new Set();
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    let _lastLoadTime = 0;
    let _loadingLock = false;
    let _globalRefreshInterval = null;
    let _globalCountdownTimer = null;
    let _buttonsInitialized = false;
    let _particlesCreated = false;

    // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    let _lastRequestTime = Date.now();
    const MIN_REQUEST_INTERVAL = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (debounce)
    function debounce(func, wait) {
        let timeout;
        return function() {
            const context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(context, args), wait);
        };
    }

    // ===== –ö–õ–Æ–ß–û–í–Ü –§–£–ù–ö–¶–Ü–á –°–ò–°–¢–ï–ú–ò –†–û–ó–Ü–ì–†–ê–®–Ü–í =====
    
/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –∫–µ—à
 * @param {number} limit - –õ—ñ–º—ñ—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50)
 * @param {number} offset - –ó–º—ñ—â–µ–Ω–Ω—è –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
WinixRaffles.loadActiveRaffles = async function(forceRefresh = false, limit = 50, offset = 0) {
    console.log("üëâ core.js: loadActiveRaffles –≤–∏–∫–ª–∏–∫–∞–Ω–æ");

    // –Ø–∫—â–æ –º–æ–¥—É–ª—å active –¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ –º–µ—Ç–æ–¥
    if (this.active && typeof this.active.loadActiveRaffles === 'function') {
        console.log("üëâ –î–µ–ª–µ–≥—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ WinixRaffles.active.loadActiveRaffles");
        return await this.active.loadActiveRaffles(forceRefresh);
    }

    // –®–≤–∏–¥–∫–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
    if (this.state.activeRaffles.length > 0 && !forceRefresh) {
        this.renderActiveRaffles();
    }

    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
    if (this.state.isLoading && !forceRefresh) {
        console.log("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");

        // –Ø–∫—â–æ —É –Ω–∞—Å —î –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏
        if (this.state.activeRaffles.length > 0) {
            console.log("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (–∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è)");
            return {
                success: true,
                source: 'cache_parallel',
                data: this.state.activeRaffles,
                message: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ (–∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è)"
            };
        }

        return { success: false, message: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è" };
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    const now = Date.now();
    const timeSinceLastLoad = now - _lastLoadTime;
    if (!forceRefresh && timeSinceLastLoad < 3000 && this.state.activeRaffles.length > 0) {
        console.log(`‚è≥ –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç (–º–∏–Ω—É–ª–æ ${Math.floor(timeSinceLastLoad/1000)}—Å), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à`);
        return {
            success: true,
            source: 'cache_throttle',
            data: this.state.activeRaffles,
            message: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ (–æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏)"
        };
    }

    this.state.isLoading = true;

    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–∏—à–µ —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–±–æ —Ü–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const showLoader = !this.skipLoader &&
        (this.state.activeRaffles.length === 0 || forceRefresh);

    if (showLoader && typeof window.showLoading === 'function') {
        window.showLoading();
    }

    try {
        console.log("üîÑ –†–æ–∑–ø–æ—á–∞—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

        // –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ø–∏—Ç—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const queryParams = new URLSearchParams({
            limit: limit,
            offset: offset,
            t: now // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
        });

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é API
        let response;
        const apiEndpoint = `${this.config.activeRafflesEndpoint}?${queryParams.toString()}`;

        if (typeof WinixAPI !== 'undefined' && typeof WinixAPI.apiRequest === 'function') {
            response = await WinixAPI.apiRequest(apiEndpoint, 'GET', null, {
                timeout: 15000, // –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç
                suppressErrors: true, // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Ç—É—Ç
                retries: 2, // –î–æ–∑–≤–æ–ª—è—î–º–æ 2 –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏
                bypassThrottle: forceRefresh // –û–±—Ö—ñ–¥ –æ–±–º–µ–∂–µ–Ω—å –ø—Ä–∏ –ø—Ä–∏–º—É—Å–æ–≤–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
            });
        } else {
            // –ó–∞–ø–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
            const fetchResponse = await fetch(`${apiEndpoint}`);
            response = await fetchResponse.json();
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (response && response.status === 'success' && Array.isArray(response.data)) {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            this.state.activeRaffles = response.data;

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –≤ —è–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–º –∑–∞–ø–∏—Ç–∞–º
            setTimeout(() => {
                this.loadUserParticipation().catch(err => {
                    console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —É—á–∞—Å—Ç—ñ:", err);
                });
            }, 1000);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            this.renderActiveRaffles();

            console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.state.activeRaffles.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤`);

            // –Ø–∫—â–æ —î –º–æ–¥—É–ª—å participation, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            if (this.participation && typeof this.participation.updateParticipationButtons === 'function') {
                this.participation.updateParticipationButtons();
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            _lastLoadTime = now;

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            document.dispatchEvent(new CustomEvent('raffles-loaded', {
                detail: { count: this.state.activeRaffles.length }
            }));

            return {
                success: true,
                data: this.state.activeRaffles,
                message: `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.state.activeRaffles.length} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤`
            };
        } else {
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ response –∑–∞–º—ñ—Å—Ç—å –Ω–µ—ñ—Å–Ω—É—é—á–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
            throw new Error(response?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);

        // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
        if (this.state.activeRaffles.length > 0) {
            console.log("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");
            return {
                success: true,
                source: 'cache',
                data: this.state.activeRaffles,
                message: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"
            };
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –Ω–µ–º–∞—î –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        this.renderError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ', '–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É');

        return {
            success: false,
            message: error.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤'
        };
    } finally {
        // –ó–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        this.state.isLoading = false;

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (showLoader && typeof window.hideLoading === 'function') {
            window.hideLoading();
        }

        // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        this.skipLoader = false;
    }
};

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    WinixRaffles.loadUserParticipation = async function() {
        try {
            // –ü–æ–ø–µ—Ä–µ–¥–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!this.state.telegramId) {
                this.state.telegramId = WinixAPI.getUserId();
                if (!this.state.telegramId) {
                    console.warn("‚ö†Ô∏è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –Ω–µ –º–æ–∂–µ–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É—á–∞—Å—Ç—å");
                    return { success: false, message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π" };
                }
            }

            console.log("üîÑ –†–æ–∑–ø–æ—á–∞—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

            let response;
            const apiEndpoint = this.config.userRafflesEndpoint.replace('{userId}', this.state.telegramId);

            if (typeof WinixAPI !== 'undefined' && typeof WinixAPI.apiRequest === 'function') {
                response = await WinixAPI.apiRequest(apiEndpoint, 'GET', null, {
                    timeout: 10000,
                    suppressErrors: true, // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Ç—É—Ç
                    bypassThrottle: true, // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                    hideLoader: true, // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    allowParallel: true // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                });
            } else {
                // –ó–∞–ø–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
                const fetchResponse = await fetch(apiEndpoint);
                response = await fetchResponse.json();
            }

            if (response && response.status === 'success' && Array.isArray(response.data)) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                this.state.userRaffles = response.data;

                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —É—á–∞—Å—Ç—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if (!this.participation) {
                    this.participation = {
                        participatingRaffles: new Set(),
                        userRaffleTickets: {},
                        invalidRaffleIds: new Set(),
                        lastParticipationTime: 0 // –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–∫—ñ–Ω–≥ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —É—á–∞—Å—Ç—ñ
                    };
                } else if (!this.participation.participatingRaffles) {
                    this.participation.participatingRaffles = new Set();
                    this.participation.userRaffleTickets = {};
                    this.participation.lastParticipationTime = 0;
                }

                // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ —É—á–∞—Å—Ç—ñ
                this.participation.participatingRaffles.clear();
                this.participation.userRaffleTickets = {};

                // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ —É—á–∞—Å—Ç—ñ
                for (const raffle of this.state.userRaffles) {
                    const raffleId = raffle.raffle_id || raffle.id;

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ID
                    if (raffleId && typeof raffleId === 'string' && raffleId.length > 10) {
                        this.participation.participatingRaffles.add(raffleId);
                        this.participation.userRaffleTickets[raffleId] = raffle.entry_count || 1;
                    }
                }

                console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—á–∞—Å—Ç—å —É ${this.state.userRaffles.length} —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö`);

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç—ñ –Ω–µ–≥–∞–π–Ω–æ
                if (this.participation && typeof this.participation.updateParticipationButtons === 'function') {
                    this.participation.updateParticipationButtons();
                }

                return {
                    success: true,
                    data: this.state.userRaffles
                };
            } else {
                console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —É—á–∞—Å—Ç—ñ:", response?.message);
                return {
                    success: false,
                    message: response?.message || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É—á–∞—Å—Ç—ñ"
                };
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
            };
        }
    };

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
     */
    WinixRaffles.updateParticipationButtons = function() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –º–æ–¥—É–ª—å participation
        if (!this.participation) {
            this.participation = {
                participatingRaffles: new Set(),
                userRaffleTickets: {},
                invalidRaffleIds: new Set(),
                lastParticipationTime: 0
            };
        } else if (!this.participation.participatingRaffles) {
            this.participation.participatingRaffles = new Set();
            this.participation.userRaffleTickets = {};
            this.participation.lastParticipationTime = 0;
        }

        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            const buttons = document.querySelectorAll('.join-button, .mini-raffle-button');
            if (!buttons.length) return;

            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
            const participatingMap = {};
            const invalidMap = {};

            // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –∫–µ—à
            buttons.forEach(button => {
                const raffleId = button.getAttribute('data-raffle-id');
                if (!raffleId) return;

                // –ü–∏—à–µ–º–æ –≤ –∫–µ—à –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ raffleId
                if (participatingMap[raffleId] === undefined) {
                    participatingMap[raffleId] = this.participation.participatingRaffles.has(raffleId);
                }

                if (invalidMap[raffleId] === undefined) {
                    invalidMap[raffleId] = (this.participation.invalidRaffleIds && this.participation.invalidRaffleIds.has(raffleId)) ||
                                          (this.state.invalidRaffleIds && this.state.invalidRaffleIds.has(raffleId));
                }
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö—ñ–¥
            buttons.forEach(button => {
                const raffleId = button.getAttribute('data-raffle-id');
                if (!raffleId) return;

                // –î–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å, –∑–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                if (participatingMap[raffleId]) {
                    const ticketCount = this.participation.userRaffleTickets ?
                                      (this.participation.userRaffleTickets[raffleId] || 1) : 1;

                    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ª–∏—à–µ —è–∫—â–æ –≤—ñ–Ω –Ω–µ –±—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ (–¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó DOM)
                    if (!button.classList.contains('participating')) {
                        const isMini = button.classList.contains('mini-raffle-button');
                        button.textContent = isMini ?
                            `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (${ticketCount})` :
                            `–î–æ–¥–∞—Ç–∏ —â–µ –±—ñ–ª–µ—Ç (—É –≤–∞—Å: ${ticketCount})`;

                        // –ó–º—ñ–Ω—é—î–º–æ –∫–ª–∞—Å, –∞–ª–µ –Ω–µ –¥–æ–¥–∞—î–º–æ disabled
                        button.classList.add('participating');
                        button.disabled = false;

                        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
                        button.removeAttribute('data-processing');
                        button.classList.remove('processing');
                    }
                }

                // –î–ª—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if (invalidMap[raffleId] && !button.classList.contains('disabled')) {
                    button.textContent = '–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ';
                    button.classList.add('disabled');
                    button.disabled = true;
                }
            });
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ:", error);
        }
    };

    /**
     * –í—ñ–¥–º–∞–ª—é–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    WinixRaffles.renderActiveRaffles = function() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            const container = document.getElementById('active-raffles-container');
            if (!container) {
                console.warn("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                return false;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            if (!this.state.activeRaffles || this.state.activeRaffles.length === 0) {
                container.innerHTML = `
                    <div class="no-raffles">
                        <p>–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–µ–º–∞—î.</p>
                        <p>–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∫–ª–∞–¥–∫—É "–Ü—Å—Ç–æ—Ä—ñ—è".</p>
                    </div>
                `;
                return false;
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DocumentFragment –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            const fragment = document.createDocumentFragment();

            // –†–µ–Ω–¥–µ—Ä–∏–º–æ –∫–æ–∂–µ–Ω —Ä–æ–∑—ñ–≥—Ä–∞—à
            this.state.activeRaffles.forEach(raffle => {
                const isDaily = raffle.is_daily || false;

                // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                const raffleElement = document.createElement('div');
                raffleElement.className = isDaily ? 'raffle-card daily-raffle' : 'raffle-card main-raffle';
                raffleElement.dataset.raffleId = raffle.id;
                raffleElement.dataset.isDaily = isDaily;

                // –ó–∞–ø–æ–≤–Ω—é—î–º–æ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
                raffleElement.innerHTML = this.createRaffleCardHtml(raffle, isDaily);

                // –î–æ–¥–∞—î–º–æ –¥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
                fragment.appendChild(raffleElement);
            });

            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–¥–Ω–∏–º —Ä–∞–∑–æ–º
            container.innerHTML = '';
            container.appendChild(fragment);

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–π–º–µ—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É
            setTimeout(() => {
                this.initializeCountdownTimers();
            }, 100);

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç—ñ –Ω–µ–≥–∞–π–Ω–æ
            if (this.participation && typeof this.participation.updateParticipationButtons === 'function') {
                setTimeout(() => {
                    this.participation.updateParticipationButtons();
                }, 200);
            }

            return true;
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–º–∞–ª—é–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", error);

            // –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            this.renderError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤', '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É');

            return false;
        }
    };

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML-–∫–æ–¥—É –∫–∞—Ä—Ç–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {Object} raffle - –î–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {boolean} isDaily - –ß–∏ —Ü–µ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
     * @returns {string} HTML-–∫–æ–¥ –∫–∞—Ä—Ç–∫–∏
     */
    WinixRaffles.createRaffleCardHtml = function(raffle, isDaily = false) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
        if (!raffle || !raffle.id) return '';

        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —ñ —á–∞—Å—É
        const endTime = new Date(raffle.end_time);
        const dateFormatted = endTime.toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });

        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞ –æ–ø–∏—Å—É (–∑ –±–µ–∑–ø–µ—á–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é)
        const title = raffle.title || '–†–æ–∑—ñ–≥—Ä–∞—à';
        const description = raffle.description || '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π';

        // –í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ —Ç–∞ –ø—Ä–∏–∑–∏
        const entryFee = raffle.entry_fee || 1;
        const prizeAmount = raffle.prize_amount || 0;
        const prizeCurrency = raffle.prize_currency || 'WINIX';
        const winnersCount = raffle.winners_count || 1;

        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
        const cardClass = isDaily ? 'raffle-card daily-raffle' : 'raffle-card main-raffle';

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∑—É
        const imageUrl = raffle.image_url || 'assets/prize-default.png';

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è ID –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞–π–º–µ—Ä–∞
        const timerPrefix = `${raffle.id}`;

        return `
        <div class="raffle-header">
            <h3 class="raffle-title">${title}</h3>
            <div class="raffle-badge ${isDaily ? 'daily' : 'main'}">${isDaily ? '–©–æ–¥–µ–Ω–Ω–∏–π' : '–ì–æ–ª–æ–≤–Ω–∏–π'}</div>
        </div>
        
        <div class="raffle-content">
            <div class="raffle-info">
                <div class="raffle-description">${description}</div>
                
                <div class="raffle-details">
                    <div class="raffle-prize">
                        <span class="label">–ü—Ä–∏–∑:</span>
                        <span class="value">${prizeAmount} ${prizeCurrency}</span>
                    </div>
                    <div class="raffle-winners">
                        <span class="label">–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤:</span>
                        <span class="value">${winnersCount}</span>
                    </div>
                    <div class="raffle-entry-fee">
                        <span class="label">–í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ:</span>
                        <span class="value">${entryFee} –∂–µ—Ç–æ–Ω${entryFee > 1 ? '–∏' : ''}</span>
                    </div>
                </div>
                
                <div class="raffle-countdown">
                    <div class="countdown-label">–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</div>
                    <div class="countdown-timer">
                        <div class="countdown-block">
                            <div class="countdown-value" id="days-${timerPrefix}">00</div>
                            <div class="countdown-label">–î–Ω—ñ</div>
                        </div>
                        <div class="countdown-block">
                            <div class="countdown-value" id="hours-${timerPrefix}">00</div>
                            <div class="countdown-label">–ì–æ–¥</div>
                        </div>
                        <div class="countdown-block">
                            <div class="countdown-value" id="minutes-${timerPrefix}">00</div>
                            <div class="countdown-label">–•–≤</div>
                        </div>
                        <div class="countdown-block">
                            <div class="countdown-value" id="seconds-${timerPrefix}">00</div>
                            <div class="countdown-label">–°–µ–∫</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="raffle-image">
                <img src="${imageUrl}" alt="${title}" onerror="this.src='assets/prize-default.png'">
            </div>
        </div>
        
        <div class="raffle-footer">
            <button class="join-button" data-raffle-id="${raffle.id}" data-entry-fee="${entryFee}">
                –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å –∑–∞ ${entryFee} –∂–µ—Ç–æ–Ω${entryFee > 1 ? '–∏' : ''}
            </button>
            <div class="participants-count">
                <span class="icon">üë•</span>
                <span class="count">${raffle.participants_count || 0}</span>
            </div>
        </div>`;
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–π–º–µ—Ä—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –∑–Ω–∞—á–Ω–æ —Å–ø—Ä–æ—â–µ–Ω–æ, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ª–∏—à–µ –∑–∞–ª–∏—à–æ–∫ —á–∞—Å—É –±–µ–∑ –∞–Ω—ñ–º–∞—Ü—ñ—ó
     */
    WinixRaffles.initializeCountdownTimers = function() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ç–∞–π–º–µ—Ä–∏
            if (_globalCountdownTimer) {
                clearInterval(_globalCountdownTimer);
                _globalCountdownTimer = null;
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –∑ –¥–∞—Ç–∞–º–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            const rafflesWithTimers = this.state.activeRaffles
                .filter(raffle => raffle.end_time)
                .map(raffle => ({
                    id: raffle.id,
                    endTime: new Date(raffle.end_time)
                }));

            if (rafflesWithTimers.length === 0) return;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–∞–π–º–µ—Ä—ñ–≤ –±–µ–∑ –∑–∞–ø—É—Å–∫—É –∞–Ω—ñ–º–∞—Ü—ñ—ó
            rafflesWithTimers.forEach(raffle => {
                const timeLeft = raffle.endTime.getTime() - new Date().getTime();

                // –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à —É–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
                if (timeLeft <= 0) {
                    this.state.invalidRaffleIds.add(raffle.id);
                    if (this.participation && this.participation.invalidRaffleIds) {
                        this.participation.invalidRaffleIds.add(raffle.id);
                    }
                    return;
                }

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

                // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–∞–π–º–µ—Ä–∞, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
                const daysElement = document.getElementById(`days-${raffle.id}`);
                const hoursElement = document.getElementById(`hours-${raffle.id}`);
                const minutesElement = document.getElementById(`minutes-${raffle.id}`);
                const secondsElement = document.getElementById(`seconds-${raffle.id}`);

                if (daysElement) daysElement.textContent = days.toString().padStart(2, '0');
                if (hoursElement) hoursElement.textContent = hours.toString().padStart(2, '0');
                if (minutesElement) minutesElement.textContent = minutes.toString().padStart(2, '0');
                if (secondsElement) secondsElement.textContent = seconds.toString().padStart(2, '0');
            });

            // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–¥–∏–Ω —Å–ø—ñ–ª—å–Ω–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            _globalCountdownTimer = setInterval(() => {
                rafflesWithTimers.forEach(raffle => {
                    const timeLeft = raffle.endTime.getTime() - new Date().getTime();

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
                    if (timeLeft <= 0) {
                        // –î–æ–¥–∞—î–º–æ –¥–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö
                        this.state.invalidRaffleIds.add(raffle.id);
                        if (this.participation && this.participation.invalidRaffleIds) {
                            this.participation.invalidRaffleIds.add(raffle.id);
                        }

                        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç—ñ
                        if (this.participation && typeof this.participation.updateParticipationButtons === 'function') {
                            this.participation.updateParticipationButtons();
                        }

                        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω—É–ª—ñ –≤ —Ç–∞–π–º–µ—Ä—ñ
                        const daysElement = document.getElementById(`days-${raffle.id}`);
                        const hoursElement = document.getElementById(`hours-${raffle.id}`);
                        const minutesElement = document.getElementById(`minutes-${raffle.id}`);
                        const secondsElement = document.getElementById(`seconds-${raffle.id}`);

                        if (daysElement) daysElement.textContent = '00';
                        if (hoursElement) hoursElement.textContent = '00';
                        if (minutesElement) minutesElement.textContent = '00';
                        if (secondsElement) secondsElement.textContent = '00';
                        return;
                    }

                    // –û–±—á–∏—Å–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É
                    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

                    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó —Ä–µ—Å—É—Ä—Å—ñ–≤
                    const secondsElement = document.getElementById(`seconds-${raffle.id}`);
                    if (secondsElement) secondsElement.textContent = seconds.toString().padStart(2, '0');

                    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑–Ω–∞—á–µ–Ω—å
                    if (seconds === 59) {
                        const minutesElement = document.getElementById(`minutes-${raffle.id}`);
                        if (minutesElement) minutesElement.textContent = minutes.toString().padStart(2, '0');

                        if (minutes === 59) {
                            const hoursElement = document.getElementById(`hours-${raffle.id}`);
                            if (hoursElement) hoursElement.textContent = hours.toString().padStart(2, '0');

                            if (hours === 23) {
                                const daysElement = document.getElementById(`days-${raffle.id}`);
                                if (daysElement) daysElement.textContent = days.toString().padStart(2, '0');
                            }
                        }
                    }
                });
            }, 1000);

            console.log("‚è±Ô∏è –ó–∞–ø—É—â–µ–Ω–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–∞–π–º–µ—Ä –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É");

        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞–π–º–µ—Ä—ñ–≤:", error);
        }
    };

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM
     * @param {string} elementId - ID –µ–ª–µ–º–µ–Ω—Ç–∞
     * @param {string|number} value - –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    WinixRaffles.safeUpdateValue = function(elementId, value) {
        try {
            const element = document.getElementById(elementId);
            if (element) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ª–∏—à–µ —è–∫—â–æ –≤–æ–Ω–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è
                if (element.textContent !== String(value)) {
                    element.textContent = value;
                }
                return true;
            }
            return false;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ ${elementId}:`, error);
            return false;
        }
    };

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
     * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –∑–∞–º—ñ—Å—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
     */
    WinixRaffles.setupParticipationButtons = function() {
        try {
            // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            if (_buttonsInitialized) return;

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥—É–ª—å —É—á–∞—Å—Ç—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (!this.participation) {
                this.participation = {
                    participatingRaffles: new Set(),
                    userRaffleTickets: {},
                    invalidRaffleIds: new Set(),
                    lastParticipationTime: 0,

                    /**
                     * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É –¥–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö
                     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                     */
                    addInvalidRaffleId: function(raffleId) {
                        if (raffleId && typeof raffleId === 'string') {
                            this.invalidRaffleIds.add(raffleId);
                            if (WinixRaffles.state.invalidRaffleIds) {
                                WinixRaffles.state.invalidRaffleIds.add(raffleId);
                            }
                        }
                    },

                    /**
                     * –û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                     */
                    clearInvalidRaffleIds: function() {
                        this.invalidRaffleIds.clear();
                        if (WinixRaffles.state.invalidRaffleIds) {
                            WinixRaffles.state.invalidRaffleIds.clear();
                        }
                    },

                    /**
                     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∞–ª—ñ–¥–Ω–∏–π
                     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                     */
                    isValidRaffle: function(raffleId) {
                        if (!raffleId || typeof raffleId !== 'string') return false;

                        if (this.invalidRaffleIds.has(raffleId)) return false;
                        if (WinixRaffles.state.invalidRaffleIds && WinixRaffles.state.invalidRaffleIds.has(raffleId)) return false;

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å UUID
                        return WinixRaffles.validators && typeof WinixRaffles.validators.isValidUUID === 'function'
                            ? WinixRaffles.validators.isValidUUID(raffleId)
                            : true;
                    },

                    /**
                     * –£—á–∞—Å—Ç—å –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
                     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                     * @param {number} entryCount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
                     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
                     */
                    participateInRaffle: async function(raffleId, entryCount = 1) {
                        if (!this.isValidRaffle(raffleId)) {
                            return {
                                success: false,
                                message: "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É"
                            };
                        }

                        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        if (!WinixRaffles.state.telegramId) {
                            WinixRaffles.state.telegramId = WinixAPI.getUserId();
                            if (!WinixRaffles.state.telegramId) {
                                return {
                                    success: false,
                                    message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
                                };
                            }
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —É—á–∞—Å—Ç—ñ (–º—ñ–Ω—ñ–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏)
                        const now = Date.now();
                        if (now - this.lastParticipationTime < 5000) {
                            return {
                                success: false,
                                message: "–ù–∞–¥—Ç–æ —á–∞—Å—Ç–∞ —Å–ø—Ä–æ–±–∞ —É—á–∞—Å—Ç—ñ, –∑–∞—á–µ–∫–∞–π—Ç–µ"
                            };
                        }

                        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —É—á–∞—Å—Ç—ñ
                        this.lastParticipationTime = now;

                        try {
                            if (typeof window.showLoading === 'function') {
                                window.showLoading();
                            }

                            // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
                            const requestData = {
                                raffle_id: raffleId,
                                entry_count: entryCount
                            };

                            // –ó–∞–ø–∏—Ç –¥–æ API
                            const telegramId = WinixRaffles.state.telegramId;
                            const endpoint = `api/user/${telegramId}/participate-raffle`;

                            let response;
                            if (typeof WinixAPI !== 'undefined' && typeof WinixAPI.apiRequest === 'function') {
                                response = await WinixAPI.apiRequest(endpoint, 'POST', requestData, {
                                    timeout: 15000,
                                    bypassThrottle: true // –í–∞–∂–ª–∏–≤–æ –æ–±—ñ–π—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è —É—á–∞—Å—Ç—ñ
                                });
                            } else {
                                const fetchResponse = await fetch(`/${endpoint}`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(requestData)
                                });
                                response = await fetchResponse.json();
                            }

                            if (response && response.status === 'success' && response.data) {
                                // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                                this.participatingRaffles.add(raffleId);

                                // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
                                const totalEntries = response.data.total_entries || response.data.entry_count || 1;
                                this.userRaffleTickets[raffleId] = totalEntries;

                                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤
                                const newCoinsBalance = response.data.new_coins_balance || 0;
                                if (typeof window.updateCoinsDisplay === 'function') {
                                    window.updateCoinsDisplay(newCoinsBalance);
                                } else {
                                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
                                    const userCoinsElement = document.getElementById('user-coins');
                                    if (userCoinsElement) {
                                        userCoinsElement.textContent = newCoinsBalance;
                                    }
                                }

                                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
                                this.updateParticipationButtons();

                                // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —É—á–∞—Å—Ç—å
                                if (typeof window.showToast === 'function') {
                                    window.showToast(`–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${entryCount} –∂–µ—Ç–æ–Ω${entryCount > 1 ? '–∏' : ''}.`, 'success');
                                }

                                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                                const participantsCountElement = document.querySelector(`.raffle-card[data-raffle-id="${raffleId}"] .participants-count .count`);
                                if (participantsCountElement) {
                                    const currentCount = parseInt(participantsCountElement.textContent) || 0;
                                    participantsCountElement.textContent = currentCount + 1;
                                }

                                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —É—á–∞—Å—Ç—å
                                document.dispatchEvent(new CustomEvent('raffle-participation', {
                                    detail: {
                                        successful: true,
                                        raffleId: raffleId,
                                        ticketCount: totalEntries
                                    }
                                }));

                                return {
                                    success: true,
                                    data: response.data,
                                    message: "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ"
                                };
                            } else {
                                throw new Error(response?.message || "–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ");
                            }
                        } catch (error) {
                            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ ${raffleId}:`, error);

                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∂–µ—Ç–æ–Ω—ñ–≤
                            const errorMessage = error.message || "";
                            if (errorMessage.toLowerCase().includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ') ||
                                errorMessage.toLowerCase().includes('–∂–µ—Ç–æ–Ω')) {
                                if (typeof window.showToast === 'function') {
                                    window.showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ", 'error');
                                }
                            } else {
                                if (typeof window.showToast === 'function') {
                                    window.showToast(errorMessage || "–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ", 'error');
                                }
                            }

                            return {
                                success: false,
                                message: errorMessage || "–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ"
                            };
                        } finally {
                            if (typeof window.hideLoading === 'function') {
                                window.hideLoading();
                            }
                        }
                    },

                    /**
                     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ
                     */
                    updateParticipationButtons: WinixRaffles.updateParticipationButtons
                };
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
            const container = document.getElementById('active-raffles-container');
            if (!container) return;

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –∑–∞–º—ñ—Å—Ç—å –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
            container.addEventListener('click', (event) => {
                const button = event.target.closest('.join-button, .mini-raffle-button');
                if (!button) return;

                // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –∫–ª—ñ–∫–∞–º
                if (button.getAttribute('data-processing') === 'true' || button.disabled) return;

                // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                const raffleId = button.getAttribute('data-raffle-id');
                if (!raffleId) {
                    if (typeof window.showToast === 'function') {
                        window.showToast("–ü–æ–º–∏–ª–∫–∞: ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", 'error');
                    }
                    return;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∞–ª—ñ–¥–Ω–∏–π
                if (this.participation.invalidRaffleIds.has(raffleId) ||
                    this.state.invalidRaffleIds.has(raffleId)) {
                    if (typeof window.showToast === 'function') {
                        window.showToast("–†–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 'warning');
                    }
                    return;
                }

                // –ü–æ–º—ñ—á–∞—î–º–æ –∫–Ω–æ–ø–∫—É —è–∫ —Ç–∞–∫—É, —â–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —ñ –±–ª–æ–∫—É—î–º–æ —ó—ó
                button.setAttribute('data-processing', 'true');
                button.classList.add('processing');
                button.disabled = true;

                // –ë–µ—Ä–µ–º–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
                this.participation.participateInRaffle(raffleId, 1)
                    .then(result => {
                        if (result.success) {
                            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, –≤ —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                            setTimeout(() => {
                                this.loadUserParticipation().catch(err => {
                                    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É—á–∞—Å—Ç—ñ:", err);
                                });
                            }, 3000); // –í—ñ–¥–∫–ª–∞–¥–∞—î–º–æ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥–∏
                        }
                    })
                    .catch(err => {
                        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:", err);
                        if (typeof window.showToast === 'function') {
                            window.showToast("–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ", 'error');
                        }
                    })
                    .finally(() => {
                        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏
                        button.removeAttribute('data-processing');
                        button.classList.remove('processing');

                        // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –±—É–≤ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç —É—á–∞—Å—Ç—ñ
                        // –î–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —É—á–∞—Å—Ç—ñ –∫–Ω–æ–ø–∫—É –æ–Ω–æ–≤–∏—Ç—å updateParticipationButtons()
                        if (!this.participation.participatingRaffles.has(raffleId)) {
                            button.disabled = false;
                        }
                    });
            });

            _buttonsInitialized = true;
            console.log("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É—á–∞—Å—Ç—ñ:", error);
        }
    };

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–º–∏–ª–∫–∏
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    WinixRaffles.renderError = function(title, message) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            const container = document.getElementById('active-raffles-container');
            if (!container) return;

            // –î–æ–¥–∞—î–º–æ HTML –¥–ª—è –ø–æ–º–∏–ª–∫–∏
            container.innerHTML = `
                <div class="error-container">
                    <div class="error-icon">‚ùå</div>
                    <h3 class="error-title">${title}</h3>
                    <p class="error-message">${message}</p>
                    <button class="retry-button" onclick="WinixRaffles.loadActiveRaffles(true)">
                        –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
                    </button>
                </div>
            `;
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:", error);
        }
    };

    /**
     * –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
     */
    WinixRaffles.reloadRafflesTab = function() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
            const activeTab = this.state.activeTab;

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
            if (activeTab === 'active') {
                this.loadActiveRaffles(true);
            } else if (activeTab === 'history') {
                if (typeof this.loadRaffleHistory === 'function') {
                    this.loadRaffleHistory(true);
                } else if (this.history && typeof this.history.loadRaffleHistory === 'function') {
                    this.history.loadRaffleHistory(true);
                }
            } else if (activeTab === 'statistics' || activeTab === 'stats') {
                if (typeof this.loadStatistics === 'function') {
                    this.loadStatistics(true);
                } else if (this.statistics && typeof this.statistics.loadStatistics === 'function') {
                    this.statistics.loadStatistics(true);
                }
            }
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏:", error);
        }
    };

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –∑–±—ñ–ª—å—à–µ–Ω–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞ –¥–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —á–∞—Å—Ç–∏–º –∑–∞–ø–∏—Ç–∞–º
     */
    WinixRaffles.startAutoRefresh = function() {
        // –ó—É–ø–∏–Ω—è—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —è–∫—â–æ —î
        if (_globalRefreshInterval) {
            clearInterval(_globalRefreshInterval);
            _globalRefreshInterval = null;
        }

        // –ó–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ 3 —Ö–≤–∏–ª–∏–Ω (180 —Å–µ–∫—É–Ω–¥)
        const refreshInterval = 180000;

        _globalRefreshInterval = setInterval(() => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ —É–º–æ–≤–∏ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º:
            // 1. –ù–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            // 2. –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
            // 3. –ú–∏–Ω—É–ª–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 30 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            // 4. –ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ - –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            if (!this.state.isLoading &&
                navigator.onLine !== false &&
                Date.now() - _lastLoadTime > 30000 &&
                this.state.activeTab === 'active') {

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                this.skipLoader = true;

                // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –±–µ–∑ —Ñ–æ—Ä—Å—É–≤–∞–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à, —è–∫—â–æ –º–∏–Ω—É–ª–æ –º–∞–ª–æ —á–∞—Å—É)
                this.loadActiveRaffles(false).catch(err => {
                    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:", err);
                });
            }
        }, refreshInterval);

        console.log(`üîÑ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${refreshInterval / 1000}—Å)`);
    };

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    WinixRaffles.stopAutoRefresh = function() {
        if (_globalRefreshInterval) {
            clearInterval(_globalRefreshInterval);
            _globalRefreshInterval = null;
            console.log("‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");
        }
    };

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–π–º–µ—Ä—ñ–≤ —ñ —Ä–µ—Å—É—Ä—Å—ñ–≤
     * –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º'—è—Ç—ñ
     */
    WinixRaffles.cleanup = function() {
        // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (_globalRefreshInterval) {
            clearInterval(_globalRefreshInterval);
            _globalRefreshInterval = null;
        }

        // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É
        if (_globalCountdownTimer) {
            clearInterval(_globalCountdownTimer);
            _globalCountdownTimer = null;
        }

        // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
        _buttonsInitialized = false;
        _particlesCreated = false;
        _loadingLock = false;

        console.log("üßπ –í—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –æ—á–∏—â–µ–Ω–æ");
    };

    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
    window.addEventListener('error', function(event) {
        console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ JavaScript:', event.error);

        // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏
        if (WinixRaffles) {
            if (WinixRaffles.state && WinixRaffles.state.isLoading) {
                WinixRaffles.state.isLoading = false;
                _loadingLock = false;
            }

            if (typeof window.hideLoading === 'function') {
                window.hideLoading();
            }
        }
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤–∫–ª–∞–¥–∫–∏
    window.addEventListener('beforeunload', function() {
        if (WinixRaffles && typeof WinixRaffles.cleanup === 'function') {
            WinixRaffles.cleanup();
        }
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö
    window.addEventListener('resize', debounce(function() {
        // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–æ–∫ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –µ–∫—Ä–∞–Ω—É
        _particlesCreated = false;

        // –û–Ω–æ–≤–ª—é—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
        if (WinixRaffles.animations && typeof WinixRaffles.animations.createParticles === 'function') {
            WinixRaffles.animations.createParticles();
        }
    }, 500));

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –º–µ—Ä–µ–∂—ñ
    window.addEventListener('online', function() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        if (WinixRaffles && !WinixRaffles.state.isLoading) {
            setTimeout(() => {
                WinixRaffles.reloadRafflesTab();
            }, 2000);
        }
    });

    // –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if (typeof window.showToast !== 'function') {
        window.showToast = function(message, type = 'info') {
            const toast = document.getElementById('toast-message');
            if (!toast) {
                console.log(`[${type}] ${message}`);
                return;
            }

            toast.textContent = message;
            toast.className = 'toast-message';

            if (type === 'success') {
                toast.classList.add('success');
            } else if (type === 'error') {
                toast.classList.add('error');
            } else if (type === 'warning') {
                toast.classList.add('warning');
            }

            toast.classList.add('show');

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                toast.classList.remove('show');
            }, 5000);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
            toast.addEventListener('click', () => {
                toast.classList.remove('show');
            });
        };
    }

    if (typeof window.showLoading !== 'function') {
        window.showLoading = function() {
            const spinner = document.getElementById('loading-spinner');
            if (spinner) {
                spinner.style.display = 'flex';
            }
        };
    }

    if (typeof window.hideLoading !== 'function') {
        window.hideLoading = function() {
            const spinner = document.getElementById('loading-spinner');
            if (spinner) {
                spinner.style.display = 'none';
            }
        };
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    document.addEventListener('DOMContentLoaded', () => {
        if (WinixRaffles.state.isInitialized) {
            WinixRaffles.startAutoRefresh();
        } else {
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è
            document.addEventListener('winix-raffles-initialized', () => {
                WinixRaffles.startAutoRefresh();
            }, { once: true });
        }
    });

    // –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞—Ä–∞–∑
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        setTimeout(() => {
            if (WinixRaffles.state.isInitialized) {
                WinixRaffles.startAutoRefresh();
            }
        }, 1000);
    }

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞');
})();