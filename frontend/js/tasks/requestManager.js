/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —á–µ—Ä–≥–∞–º–∏, rate limiting —Ç–∞ –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤
 */

window.RequestManager = (function() {
    'use strict';

    console.log('üåê [RequestManager] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –ó–ê–ü–ò–¢–Ü–í =====');

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        maxConcurrent: 3,              // –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        requestTimeout: 30000,         // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        retryAttempts: 3,             // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        retryDelay: 1000,             // –ë–∞–∑–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
        rateLimitDelay: 1000,         // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        backoffMultiplier: 1.5,       // –ú–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ backoff
        maxDelay: 60000,              // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
        deduplicationWindow: 5000     // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
    };

    // –°—Ç–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const state = {
        activeRequests: new Map(),    // –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏
        pendingQueue: [],             // –ß–µ—Ä–≥–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        rateLimiter: {
            lastRequestTime: 0,
            currentDelay: config.rateLimitDelay,
            tokens: config.maxConcurrent,
            lastRefill: Date.now()
        },
        deduplicationCache: new Map(), // –ö–µ—à –¥–ª—è –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
        metrics: {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            retriedRequests: 0,
            deduplicatedRequests: 0,
            averageResponseTime: 0
        }
    };

    /**
     * –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º —á–µ—Ä–≥–æ—é —Ç–∞ rate limiting
     */
    async function execute(requestId, requestFn, options = {}) {
        const requestOptions = {
            priority: options.priority || 'normal',
            retries: options.retries !== undefined ? options.retries : config.retryAttempts,
            timeout: options.timeout || config.requestTimeout,
            deduplicate: options.deduplicate !== false,
            namespace: options.namespace || 'default'
        };

        console.log(`üì§ [RequestManager] –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç: ${requestId}`, requestOptions);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
        if (requestOptions.deduplicate) {
            const cached = checkDeduplication(requestId);
            if (cached) {
                state.metrics.deduplicatedRequests++;
                console.log(`üì¶ [RequestManager] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ–¥—É–ø–ª—ñ–∫–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${requestId}`);
                return cached;
            }
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑–∞–ø–∏—Ç—É
        const request = {
            id: requestId,
            fn: requestFn,
            options: requestOptions,
            promise: null,
            resolve: null,
            reject: null,
            startTime: null,
            attempts: 0,
            status: 'pending'
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ promise –¥–ª—è –∑–∞–ø–∏—Ç—É
        request.promise = new Promise((resolve, reject) => {
            request.resolve = resolve;
            request.reject = reject;
        });

        // –î–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
        addToQueue(request);

        // –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–≥—É
        processQueue();

        return request.promise;
    }

    /**
     * –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –≤ —á–µ—Ä–≥—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
     */
    function addToQueue(request) {
        const priorities = { high: 3, normal: 2, low: 1 };
        const priority = priorities[request.options.priority] || 2;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        let insertIndex = state.pendingQueue.length;

        for (let i = 0; i < state.pendingQueue.length; i++) {
            const itemPriority = priorities[state.pendingQueue[i].options.priority] || 2;
            if (priority > itemPriority) {
                insertIndex = i;
                break;
            }
        }

        state.pendingQueue.splice(insertIndex, 0, request);
        console.log(`üì• [RequestManager] –î–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é ${insertIndex}: ${request.id}`);
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –∑–∞–ø–∏—Ç—ñ–≤
     */
    async function processQueue() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ –≤–∑—è—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
        if (state.activeRequests.size >= config.maxConcurrent || state.pendingQueue.length === 0) {
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ rate limit
        if (!checkRateLimit()) {
            // –ü–ª–∞–Ω—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É
            setTimeout(() => processQueue(), state.rateLimiter.currentDelay);
            return;
        }

        // –ë–µ—Ä–µ–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç –∑ —á–µ—Ä–≥–∏
        const request = state.pendingQueue.shift();
        if (!request) return;

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        executeRequest(request);

        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏
        if (state.pendingQueue.length > 0) {
            queueMicrotask(() => processQueue());
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limit –∑ token bucket –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
     */
    function checkRateLimit() {
        const now = Date.now();

        // –ü–æ–ø–æ–≤–Ω—é—î–º–æ —Ç–æ–∫–µ–Ω–∏
        const timeSinceRefill = now - state.rateLimiter.lastRefill;
        const tokensToAdd = Math.floor(timeSinceRefill / state.rateLimiter.currentDelay);

        if (tokensToAdd > 0) {
            state.rateLimiter.tokens = Math.min(
                state.rateLimiter.tokens + tokensToAdd,
                config.maxConcurrent
            );
            state.rateLimiter.lastRefill = now;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–æ–∫–µ–Ω–∏
        if (state.rateLimiter.tokens > 0) {
            state.rateLimiter.tokens--;
            state.rateLimiter.lastRequestTime = now;
            return true;
        }

        return false;
    }

    /**
     * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
     */
    async function executeRequest(request) {
        request.status = 'active';
        request.startTime = Date.now();
        request.attempts++;

        state.activeRequests.set(request.id, request);
        state.metrics.totalRequests++;

        console.log(`üöÄ [RequestManager] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: ${request.id} (—Å–ø—Ä–æ–±–∞ ${request.attempts})`);

        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ AbortController –¥–ª—è timeout
            const controller = new AbortController();
            const timeoutId = setTimeout(() => {
                controller.abort();
            }, request.options.timeout);

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const result = await Promise.race([
                request.fn({ signal: controller.signal }),
                new Promise((_, reject) => {
                    controller.signal.addEventListener('abort', () => {
                        reject(new Error('Request timeout'));
                    });
                })
            ]);

            clearTimeout(timeoutId);

            // –£—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            handleSuccess(request, result);

        } catch (error) {
            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
            await handleError(request, error);
        } finally {
            // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
            state.activeRequests.delete(request.id);

            // –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç –∑ —á–µ—Ä–≥–∏
            processQueue();
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
     */
    function handleSuccess(request, result) {
        const responseTime = Date.now() - request.startTime;

        // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        state.metrics.successfulRequests++;
        updateAverageResponseTime(responseTime);

        // –°–∫–∏–¥–∞—î–º–æ rate limit delay –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
        state.rateLimiter.currentDelay = config.rateLimitDelay;

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
        if (request.options.deduplicate) {
            saveToDeduplicationCache(request.id, result);
        }

        request.status = 'completed';
        request.resolve(result);

        console.log(`‚úÖ [RequestManager] –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π: ${request.id} (${responseTime}ms)`);

        // –õ–æ–≥—É—î–º–æ –≤ CacheManager —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (window.CacheManager && request.options.namespace) {
            window.CacheManager.set(request.options.namespace, request.id, result);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø–∏—Ç—É
     */
    async function handleError(request, error) {
        console.error(`‚ùå [RequestManager] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${request.id}:`, error);

        state.metrics.failedRequests++;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏
        const shouldRetry = request.attempts < request.options.retries &&
                          !error.message.includes('abort') &&
                          error.status !== 401 &&
                          error.status !== 403;

        if (shouldRetry) {
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–º backoff
            const delay = Math.min(
                config.retryDelay * Math.pow(config.backoffMultiplier, request.attempts - 1),
                config.maxDelay
            );

            console.log(`üîÑ [RequestManager] –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ${delay}ms`);

            state.metrics.retriedRequests++;

            // –Ø–∫—â–æ 429 - –∑–±—ñ–ª—å—à—É—î–º–æ rate limit delay
            if (error.status === 429) {
                increaseRateLimitDelay();
            }

            // –ß–µ–∫–∞—î–º–æ —ñ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ
            await new Promise(resolve => setTimeout(resolve, delay));

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ —á–µ—Ä–≥—É –∑ –≤–∏—Å–æ–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
            request.options.priority = 'high';
            request.status = 'pending';
            addToQueue(request);

        } else {
            // –û—Å—Ç–∞—Ç–æ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
            request.status = 'failed';
            request.reject(error);
        }
    }

    /**
     * –ó–±—ñ–ª—å—à–µ–Ω–Ω—è rate limit delay –ø—Ä–∏ 429
     */
    function increaseRateLimitDelay() {
        const newDelay = Math.min(
            state.rateLimiter.currentDelay * config.backoffMultiplier,
            config.maxDelay
        );

        console.warn(`‚ö†Ô∏è [RequestManager] Rate limit hit! –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É: ${state.rateLimiter.currentDelay}ms ‚Üí ${newDelay}ms`);

        state.rateLimiter.currentDelay = newDelay;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É
        setTimeout(() => {
            if (state.rateLimiter.currentDelay > config.rateLimitDelay) {
                state.rateLimiter.currentDelay = Math.max(
                    config.rateLimitDelay,
                    state.rateLimiter.currentDelay / config.backoffMultiplier
                );
                console.log(`üìâ [RequestManager] –ó–º–µ–Ω—à—É—î–º–æ rate limit delay –¥–æ ${state.rateLimiter.currentDelay}ms`);
            }
        }, 60000);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
     */
    function checkDeduplication(requestId) {
        const cached = state.deduplicationCache.get(requestId);

        if (cached && Date.now() - cached.timestamp < config.deduplicationWindow) {
            console.log(`üì¶ [RequestManager] –ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–¥—É–ø–ª—ñ–∫–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${requestId}`);
            return cached.data;
        }

        return null;
    }

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
     */
    function saveToDeduplicationCache(requestId, data) {
        state.deduplicationCache.set(requestId, {
            data: data,
            timestamp: Date.now()
        });

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
        setTimeout(() => {
            state.deduplicationCache.delete(requestId);
        }, config.deduplicationWindow);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
     */
    function updateAverageResponseTime(responseTime) {
        const total = state.metrics.successfulRequests;
        const current = state.metrics.averageResponseTime;

        state.metrics.averageResponseTime = ((current * (total - 1)) + responseTime) / total;
    }

    /**
     * –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç
     */
    function cancel(requestId) {
        // –®—É–∫–∞—î–º–æ –≤ —á–µ—Ä–∑—ñ
        const queueIndex = state.pendingQueue.findIndex(r => r.id === requestId);
        if (queueIndex !== -1) {
            const request = state.pendingQueue.splice(queueIndex, 1)[0];
            request.reject(new Error('Request cancelled'));
            console.log(`üö´ [RequestManager] –°–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç –≤ —á–µ—Ä–∑—ñ: ${requestId}`);
            return true;
        }

        // –®—É–∫–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        const activeRequest = state.activeRequests.get(requestId);
        if (activeRequest) {
            activeRequest.reject(new Error('Request cancelled'));
            state.activeRequests.delete(requestId);
            console.log(`üö´ [RequestManager] –°–∫–∞—Å–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç: ${requestId}`);
            return true;
        }

        return false;
    }

    /**
     * –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏
     */
    function cancelAll(namespace) {
        let cancelled = 0;

        // –°–∫–∞—Å–æ–≤—É—î–º–æ –≤ —á–µ—Ä–∑—ñ
        if (namespace) {
            state.pendingQueue = state.pendingQueue.filter(request => {
                if (request.options.namespace === namespace) {
                    request.reject(new Error('Request cancelled'));
                    cancelled++;
                    return false;
                }
                return true;
            });
        } else {
            state.pendingQueue.forEach(request => {
                request.reject(new Error('Request cancelled'));
                cancelled++;
            });
            state.pendingQueue = [];
        }

        // –°–∫–∞—Å–æ–≤—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ
        state.activeRequests.forEach((request, id) => {
            if (!namespace || request.options.namespace === namespace) {
                request.reject(new Error('Request cancelled'));
                state.activeRequests.delete(id);
                cancelled++;
            }
        });

        console.log(`üö´ [RequestManager] –°–∫–∞—Å–æ–≤–∞–Ω–æ ${cancelled} –∑–∞–ø–∏—Ç—ñ–≤`);
        return cancelled;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    function getStatus() {
        return {
            activeRequests: state.activeRequests.size,
            pendingRequests: state.pendingQueue.length,
            currentDelay: state.rateLimiter.currentDelay,
            tokens: state.rateLimiter.tokens,
            metrics: { ...state.metrics },
            config: { ...config }
        };
    }

    /**
     * Batch –∑–∞–ø–∏—Ç–∏
     */
    function batch(requests) {
        console.log(`üì¶ [RequestManager] Batch –∑–∞–ø–∏—Ç –∑ ${requests.length} –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏`);

        return Promise.all(
            requests.map(req =>
                execute(req.id, req.fn, { ...req.options, priority: 'high' })
            )
        );
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è namespace
     */
    function createClient(namespace, defaultOptions = {}) {
        return {
            execute: (id, fn, options = {}) =>
                execute(id, fn, { ...defaultOptions, ...options, namespace }),

            cancel: (id) => cancel(id),

            cancelAll: () => cancelAll(namespace),

            batch: (requests) =>
                batch(requests.map(r => ({ ...r, options: { ...r.options, namespace } })))
        };
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ
     */
    function clear() {
        // –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏
        cancelAll();

        // –û—á–∏—â–∞—î–º–æ –∫–µ—à—ñ
        state.deduplicationCache.clear();

        // –°–∫–∏–¥–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        state.metrics = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            retriedRequests: 0,
            deduplicatedRequests: 0,
            averageResponseTime: 0
        };

        console.log('‚úÖ [RequestManager] –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [RequestManager] –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø–∏—Ç—ñ–≤ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        execute,
        cancel,
        cancelAll,
        getStatus,
        batch,
        createClient,
        clear,

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        configure: (newConfig) => {
            Object.assign(config, newConfig);
            console.log('‚öôÔ∏è [RequestManager] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞:', config);
        }
    };
})();

console.log('‚úÖ [RequestManager] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');