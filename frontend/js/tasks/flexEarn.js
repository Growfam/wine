/**
 * –ú–æ–¥—É–ª—å Flex Earn –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç this —Ç–∞ –¥–æ–¥–∞–Ω–æ –∫–µ—à—É–≤–∞–Ω–Ω—è
 */

window.FlexEarnManager = (function() {
    'use strict';

    console.log('üíé [FlexEarn] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø FLEX EARN (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô) =====');

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Flex –∑–∞–≤–¥–∞–Ω—å (–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
    const FLEX_LEVELS = window.TasksConstants?.FLEX_LEVELS || {};

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    let state = {
        walletConnected: false,
        walletAddress: null,
        flexBalance: 0,
        claimedToday: {},
        lastClaimTime: {},
        userId: null,
        isLoading: false,
        autoCheckInterval: null,
        walletChecker: null,
        lastBalanceCheck: 0,
        balanceCache: null,
        cacheTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –∫–µ—à
        isCheckingBalance: false,
        unsubscribeStore: null // –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–ø–∏—Å–∫–∏
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    function init(userId) {
        console.log('üöÄ [FlexEarn] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è');
        console.log('üë§ [FlexEarn] User ID:', userId);
        console.log('üìä [FlexEarn] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤:', FLEX_LEVELS);

        state.userId = userId;

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
        loadState();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WalletChecker —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (window.WalletChecker) {
            state.walletChecker = window.WalletChecker;
            state.walletChecker.init().catch(error => {
                console.error('‚ùå [FlexEarn] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WalletChecker:', error);
            });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—à–µ–ª—å–∫–∞
        checkWalletConnection();

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
        setupAutoCheck();

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        setupEventHandlers();

        console.log('‚úÖ [FlexEarn] –ú–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        return {
            checkWalletConnection,
            checkFlexBalance,
            claimReward,
            getState: () => state,
            destroy
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—à–µ–ª—å–∫–∞
     */
    async function checkWalletConnection() {
        console.log('üîç [FlexEarn] === –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ö–û–®–ï–õ–¨–ö–ê ===');
        console.log('üìä [FlexEarn] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:', {
            walletConnected: state.walletConnected,
            walletAddress: state.walletAddress
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showLoadingState();

        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ WalletChecker —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (state.walletChecker) {
                const isConnected = await state.walletChecker.checkWalletConnection();
                console.log('üé≤ [FlexEarn] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ WalletChecker:', isConnected);

                if (isConnected) {
                    const walletStatus = state.walletChecker.getStatus();
                    // –î–∞–Ω—ñ –±—É–¥—É—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—ñ —á–µ—Ä–µ–∑ Store
                    return;
                }
            }

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
            const response = await window.TasksAPI.wallet.checkStatus(state.userId);
            console.log('üìä [FlexEarn] –í—ñ–¥–ø–æ–≤—ñ–¥—å API:', response);

            if (response.connected) {
                state.walletConnected = true;
                state.walletAddress = response.address;
                console.log('‚úÖ [FlexEarn] –ö–æ—à–µ–ª–µ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                console.log('üìç [FlexEarn] –ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:', state.walletAddress);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å FLEX
                await checkFlexBalance();

                // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
                showFlexTasks();
            } else {
                state.walletConnected = false;
                state.walletAddress = null;
                console.log('‚ùå [FlexEarn] –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                console.log('üí° [FlexEarn] –ü–æ–∫–∞–∑—É—î–º–æ –±–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—à–µ–ª—å–∫–∞');

                // –ü–æ–∫–∞–∑—É—î–º–æ –±–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                showWalletConnect();
            }

        } catch (error) {
            console.error('‚ùå [FlexEarn] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
            state.walletConnected = false;
            showWalletConnect();
        } finally {
            hideLoadingState();
            saveState();
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
     */
    async function checkFlexBalance(forceRefresh = false) {
        console.log('üí∞ [FlexEarn] === –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–õ–ê–ù–°–£ FLEX ===');
        console.log('üìç [FlexEarn] –ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', state.walletAddress);
        console.log('üîÑ [FlexEarn] –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', forceRefresh);

        if (!state.walletConnected || !state.walletAddress) {
            console.warn('‚ö†Ô∏è [FlexEarn] –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –±–∞–ª–∞–Ω—Å—É');
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        if (state.isCheckingBalance) {
            console.log('‚è≥ [FlexEarn] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        const now = Date.now();
        const timeSinceLastCheck = now - state.lastBalanceCheck;

        if (!forceRefresh && state.balanceCache !== null && timeSinceLastCheck < state.cacheTimeout) {
            console.log('üì¶ [FlexEarn] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å:', formatNumber(state.balanceCache));
            console.log('‚è∞ [FlexEarn] –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', Math.floor(timeSinceLastCheck / 1000), '—Å–µ–∫');

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å
            state.flexBalance = state.balanceCache;
            updateFlexTasksUI();
            return;
        }

        state.isCheckingBalance = true;

        try {
            const oldBalance = state.flexBalance;

            // –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∑ API
            const response = await window.TasksAPI.flex.getBalance(state.userId, state.walletAddress);

            state.flexBalance = parseInt(response.balance) || 0;
            state.balanceCache = state.flexBalance;
            state.lastBalanceCheck = now;

            console.log('üíé [FlexEarn] –ë–∞–ª–∞–Ω—Å FLEX –æ–Ω–æ–≤–ª–µ–Ω–æ');
            console.log('  üìä –°—Ç–∞—Ä–∏–π –±–∞–ª–∞–Ω—Å:', formatNumber(oldBalance));
            console.log('  üìä –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å:', formatNumber(state.flexBalance));
            console.log('  üìà –ó–º—ñ–Ω–∞:', formatNumber(state.flexBalance - oldBalance));

            // –û–Ω–æ–≤–ª—é—î–º–æ Store
            window.TasksStore.actions.setFlexBalance(state.flexBalance);

            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            updateFlexTasksUI();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            await checkAvailableRewards();

            saveState();

            console.log('‚úÖ [FlexEarn] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå [FlexEarn] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É:', error);

            // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –Ω–µ 429, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (!error.message?.includes('429')) {
                window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É FLEX', 'error');
            }
        } finally {
            state.isCheckingBalance = false;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
     */
    async function checkAvailableRewards() {
        console.log('üéÅ [FlexEarn] === –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–ò–• –í–ò–ù–ê–ì–û–†–û–î ===');
        console.log('üíé [FlexEarn] –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å FLEX:', formatNumber(state.flexBalance));

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–Ω—ñ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
            const response = await window.TasksAPI.flex.checkLevels(state.userId, state.flexBalance);

            let availableCount = 0;
            let totalPotentialWinix = 0;
            let totalPotentialTickets = 0;

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Ä—ñ–≤–Ω—ñ–≤ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
            Object.entries(response.levels).forEach(([level, levelData]) => {
                const levelConfig = FLEX_LEVELS[level];
                if (!levelConfig) return;

                const hasEnough = levelData.hasEnough;
                const claimedToday = levelData.claimedToday;

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
                state.claimedToday[level] = claimedToday;

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                window.TasksStore.actions.setFlexLevelAvailable(level, hasEnough);

                console.log(`üìä [FlexEarn] ${level}:`, {
                    required: formatNumber(levelConfig.required),
                    hasEnough: hasEnough,
                    claimedToday: claimedToday,
                    canClaim: hasEnough && !claimedToday
                });

                if (hasEnough && !claimedToday) {
                    availableCount++;
                    totalPotentialWinix += levelConfig.rewards.winix;
                    totalPotentialTickets += levelConfig.rewards.tickets;
                }
            });

            console.log('üéØ [FlexEarn] –ü—ñ–¥—Å—É–º–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥:', {
                –¥–æ—Å—Ç—É–ø–Ω–æ–†—ñ–≤–Ω—ñ–≤: availableCount,
                –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñWinix: totalPotentialWinix,
                –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñTickets: totalPotentialTickets
            });

            if (availableCount > 0) {
                window.TasksUtils.showToast(
                    `–î–æ—Å—Ç—É–ø–Ω–æ ${availableCount} ${availableCount === 1 ? '–≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞' : '–≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'}!`,
                    'success'
                );
            }

        } catch (error) {
            console.error('‚ùå [FlexEarn] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä—ñ–≤–Ω—ñ–≤:', error);
        }
    }

   /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—à–µ–ª—å–∫–∞
     */
    function showWalletConnect() {
        console.log('üîå [FlexEarn] –ü–æ–∫–∞–∑—É—î–º–æ –±–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—à–µ–ª—å–∫–∞');

        const statusContainer = document.querySelector('.wallet-status-container');
        const tasksContainer = document.getElementById('flex-tasks');
        const connectedStatus = document.getElementById('wallet-connected-status');

        if (statusContainer) {
            statusContainer.style.display = 'block';
            console.log('‚úÖ [FlexEarn] –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å—É –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–æ');
        } else {
            console.error('‚ùå [FlexEarn] –ï–ª–µ–º–µ–Ω—Ç .wallet-status-container –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        if (tasksContainer) {
            tasksContainer.style.display = 'none';
            console.log('‚úÖ [FlexEarn] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–¥–∞–Ω—å –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ');
        }

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
        if (connectedStatus) {
            connectedStatus.style.display = 'none';
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        const statusText = document.getElementById('wallet-connection-status');
        if (statusText) {
            statusText.textContent = '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ Flex –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function showFlexTasks() {
        console.log('üìã [FlexEarn] –ü–æ–∫–∞–∑—É—î–º–æ Flex –∑–∞–≤–¥–∞–Ω–Ω—è');

        const statusContainer = document.querySelector('.wallet-status-container');
        const tasksContainer = document.getElementById('flex-tasks');

        if (statusContainer) {
            statusContainer.style.display = 'none';
            console.log('‚úÖ [FlexEarn] –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å—É –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ');
        }

        if (tasksContainer) {
            tasksContainer.style.display = 'block';
            console.log('‚úÖ [FlexEarn] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–¥–∞–Ω—å –ø–æ–∫–∞–∑–∞–Ω–æ');
        } else {
            console.error('‚ùå [FlexEarn] –ï–ª–µ–º–µ–Ω—Ç #flex-tasks –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è —è–∫—â–æ —î –∞–¥—Ä–µ—Å–∞
        if (state.walletAddress) {
            const connectedStatus = document.getElementById('wallet-connected-status');
            if (connectedStatus) {
                connectedStatus.style.display = 'block';

                const addressDisplay = document.getElementById('wallet-address-display');
                if (addressDisplay) {
                    const formattedAddress = `${state.walletAddress.slice(0, 8)}...${state.walletAddress.slice(-6)}`;
                    addressDisplay.textContent = formattedAddress;
                }
            }
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –∑–∞–≤–¥–∞–Ω—å
     */
    function updateFlexTasksUI() {
        console.log('üîÑ [FlexEarn] === –û–ù–û–í–õ–ï–ù–ù–Ø UI –ó–ê–í–î–ê–ù–¨ ===');

        Object.keys(FLEX_LEVELS).forEach(level => {
            const levelData = FLEX_LEVELS[level];
            const card = document.querySelector(`.flex-task-card[data-level="${level.toLowerCase()}"]`);

            if (!card) {
                console.warn(`‚ö†Ô∏è [FlexEarn] –ö–∞—Ä—Ç–∫–∞ –¥–ª—è —Ä—ñ–≤–Ω—è ${level} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            const progress = Math.min((state.flexBalance / levelData.required) * 100, 100);
            const progressFill = card.querySelector(`.progress-fill`);
            const progressText = card.querySelector('.progress-text');

            console.log(`üìä [FlexEarn] –û–Ω–æ–≤–ª–µ–Ω–Ω—è ${level}:`, {
                –ø—Ä–æ–≥—Ä–µ—Å: progress.toFixed(2) + '%',
                –±–∞–ª–∞–Ω—Å: formatNumber(state.flexBalance),
                –ø–æ—Ç—Ä—ñ–±–Ω–æ: formatNumber(levelData.required)
            });

            if (progressFill) {
                progressFill.style.width = `${progress}%`;
            }

            if (progressText) {
                progressText.textContent = `${formatNumber(state.flexBalance)} / ${formatNumber(levelData.required)} FLEX`;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            const claimButton = card.querySelector('.claim-button');
            if (claimButton) {
                updateClaimButton(claimButton, level, state.flexBalance >= levelData.required);
            }
        });

        console.log('‚úÖ [FlexEarn] UI –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
     */
    function updateClaimButton(button, level, hasEnoughFlex) {
        const claimedToday = state.claimedToday[level];
        const canClaim = hasEnoughFlex && !claimedToday;

        console.log(`üîò [FlexEarn] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ ${level}:`, {
            hasEnoughFlex,
            claimedToday,
            canClaim
        });

        button.disabled = !canClaim;

        if (!hasEnoughFlex) {
            button.innerHTML = '<span class="button-text">–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ FLEX</span>';
            button.className = 'claim-button ' + level.toLowerCase() + '-claim';
        } else if (claimedToday) {
            const nextClaimTime = getNextClaimTime(level);
            button.innerHTML = `<span class="button-text">–û—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ (${nextClaimTime})</span>`;
            button.className = 'claim-button ' + level.toLowerCase() + '-claim claimed';
        } else {
            button.innerHTML = '<span class="button-text">–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É</span>';
            button.className = 'claim-button ' + level.toLowerCase() + '-claim available';
        }

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
        if (canClaim && !button.hasAttribute('data-handler')) {
            button.setAttribute('data-handler', 'true');
            button.addEventListener('click', () => claimReward(level));
            console.log(`‚úÖ [FlexEarn] –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è ${level}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑ –¥–µ–±–∞—É–Ω—Å–æ–º
     */
    const claimReward = window.TasksUtils.debounce(async function(level) {
        console.log('üéÅ [FlexEarn] === –û–¢–†–ò–ú–ê–ù–ù–Ø –í–ò–ù–ê–ì–û–†–û–î–ò ===');
        console.log('üìä [FlexEarn] –†—ñ–≤–µ–Ω—å:', level);

        const levelData = FLEX_LEVELS[level];
        console.log('üìã [FlexEarn] –î–∞–Ω—ñ —Ä—ñ–≤–Ω—è:', levelData);

        if (!levelData) {
            console.error('‚ùå [FlexEarn] –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å:', level);
            return;
        }

        if (state.flexBalance < levelData.required) {
            console.error('‚ùå [FlexEarn] –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ FLEX –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏');
            console.log('  üíé –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:', formatNumber(state.flexBalance));
            console.log('  üìä –ü–æ—Ç—Ä—ñ–±–Ω–æ:', formatNumber(levelData.required));
            window.TasksUtils.showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ FLEX —Ç–æ–∫–µ–Ω—ñ–≤', 'error');
            return;
        }

        if (state.claimedToday[level]) {
            console.warn('‚ö†Ô∏è [FlexEarn] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ');
            window.TasksUtils.showToast('–í–∏–Ω–∞–≥–æ—Ä–æ–¥—É –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ', 'warning');
            return;
        }

        console.log('üîÑ [FlexEarn] –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏...');

        // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É
        const card = document.querySelector(`.flex-task-card[data-level="${level.toLowerCase()}"]`);
        const button = card?.querySelector('.claim-button');
        if (button) {
            button.disabled = true;
            button.innerHTML = '<span class="button-text">–û–±—Ä–æ–±–∫–∞...</span>';
            console.log('üîí [FlexEarn] –ö–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞');
        }

        try {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await window.TasksAPI.flex.claimReward(state.userId, level);

            console.log('üí∞ [FlexEarn] –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', response);

            if (response.success) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
                state.claimedToday[level] = true;
                state.lastClaimTime[level] = Date.now();

                console.log('üìù [FlexEarn] –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ:', {
                    level,
                    claimedToday: true,
                    lastClaimTime: new Date(state.lastClaimTime[level]).toLocaleString()
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                window.TasksStore.actions.setFlexLevelClaimed(level);

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏
                updateBalances(response.reward.winix, response.reward.tickets);

                // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                showRewardAnimation(levelData);

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                updateClaimButton(button, level, true);

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
                saveState();

                console.log('‚úÖ [FlexEarn] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞!');

                // –õ–æ–≥—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logClaimStatistics();
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏');
            }

        } catch (error) {
            console.error('‚ùå [FlexEarn] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', error);
            window.TasksUtils.showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏', 'error');

            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            if (button) {
                updateClaimButton(button, level, true);
            }
        }
    }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–µ–±–∞—É–Ω—Å

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å–∏
     */
    function updateBalances(winix, tickets) {
        console.log('üí∞ [FlexEarn] === –û–ù–û–í–õ–ï–ù–ù–Ø –ë–ê–õ–ê–ù–°–Ü–í ===');

        const currentBalance = window.TasksStore.selectors.getUserBalance();
        const newBalance = {
            winix: currentBalance.winix + winix,
            tickets: currentBalance.tickets + tickets
        };

        console.log('üíé [FlexEarn] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤:', {
            –±—É–ª–æ: currentBalance,
            –¥–æ–¥–∞–Ω–æ: { winix, tickets },
            —Å—Ç–∞–ª–æ: newBalance
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ Store
        window.TasksStore.actions.updateBalance(newBalance);

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        const winixElement = document.getElementById('user-winix');
        const ticketsElement = document.getElementById('user-tickets');

        if (winixElement) {
            winixElement.textContent = newBalance.winix;
            winixElement.classList.add('updating');
            setTimeout(() => {
                winixElement.classList.remove('updating');
            }, 800);
        }

        if (ticketsElement) {
            ticketsElement.textContent = newBalance.tickets;
            ticketsElement.classList.add('updating');
            setTimeout(() => {
                ticketsElement.classList.remove('updating');
            }, 800);
        }

        console.log('‚úÖ [FlexEarn] –ë–∞–ª–∞–Ω—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function showRewardAnimation(levelData) {
        console.log('üéä [FlexEarn] –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –¥–ª—è —Ä—ñ–≤–Ω—è:', levelData.name);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó
        const animDiv = document.createElement('div');
        animDiv.className = 'reward-claimed';

        // SVG —ñ–∫–æ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä—ñ–≤–Ω—è
        const iconSvg = getRewardIconSvg(levelData.name);

        animDiv.innerHTML = `
            <div class="reward-icon-large">${iconSvg}</div>
            <div>+${levelData.rewards.winix} WINIX</div>
            <div>+${levelData.rewards.tickets} TICKETS</div>
        `;

        document.body.appendChild(animDiv);
        console.log('‚úÖ [FlexEarn] –ï–ª–µ–º–µ–Ω—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–æ–¥–∞–Ω–æ –¥–æ DOM');

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        setTimeout(() => {
            animDiv.classList.add('show');
        }, 10);

        // –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            animDiv.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(animDiv);
                console.log('‚úÖ [FlexEarn] –ï–ª–µ–º–µ–Ω—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ –∑ DOM');
            }, 500);
        }, 2000);

        // –ü–æ–∫–∞–∑—É—î–º–æ toast
        window.TasksUtils.showToast(
            `–û—Ç—Ä–∏–º–∞–Ω–æ ${levelData.rewards.winix} WINIX —Ç–∞ ${levelData.rewards.tickets} tickets!`,
            'success'
        );
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ SVG —ñ–∫–æ–Ω–∫—É –¥–ª—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function getRewardIconSvg(level) {
        const svgIcons = {
            'Bronze': '<svg width="48" height="48" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="12" r="10" stroke="white" stroke-width="1.5"/><path d="M12 7V12L15 15" stroke="white" stroke-width="1.5" stroke-linecap="round"/><circle cx="12" cy="12" r="2" fill="white"/></svg>',
            'Silver': '<svg width="48" height="48" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="12" r="10" stroke="white" stroke-width="1.5"/><path d="M12 2L14.5 8.5L21 9L16 14L17.5 21L12 17.5L6.5 21L8 14L3 9L9.5 8.5L12 2Z" stroke="white" stroke-width="1.5" stroke-linejoin="round"/></svg>',
            'Gold': '<svg width="48" height="48" viewBox="0 0 24 24" fill="none"><path d="M12 2L4 8V14C4 18.42 7.16 22.21 12 23C16.84 22.21 20 18.42 20 14V8L12 2Z" stroke="white" stroke-width="1.5" stroke-linejoin="round"/><path d="M9 12L11 14L15 10" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
            'Platinum': '<svg width="48" height="48" viewBox="0 0 24 24" fill="none"><path d="M5 16L3 9L9 11L12 6L15 11L21 9L19 16H5Z" stroke="white" stroke-width="1.5" stroke-linejoin="round"/><path d="M5 16L6 20H18L19 16" stroke="white" stroke-width="1.5" stroke-linejoin="round"/></svg>',
            'Diamond': '<svg width="48" height="48" viewBox="0 0 24 24" fill="none"><path d="M6 3L3 9L12 21L21 9L18 3H6Z" stroke="white" stroke-width="1.5" stroke-linejoin="round"/><path d="M3 9H21" stroke="white" stroke-width="1.5"/><path d="M12 3L8 9L12 21L16 9L12 3Z" stroke="white" stroke-width="1.5" stroke-linejoin="round"/></svg>'
        };

        return svgIcons[level] || svgIcons['Bronze'];
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
     */
    function setupAutoCheck() {
        console.log('‚è∞ [FlexEarn] === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–á –ü–ï–†–ï–í–Ü–†–ö–ò ===');

        // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if (state.autoCheckInterval) {
            clearInterval(state.autoCheckInterval);
            console.log('üßπ [FlexEarn] –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–µ–Ω–æ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
        const intervalMs = window.TasksConstants.TIMERS.AUTO_CHECK_INTERVAL;

        console.log(`‚è±Ô∏è [FlexEarn] –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMs / 60 / 1000} —Ö–≤–∏–ª–∏–Ω`);

        state.autoCheckInterval = setInterval(() => {
            if (state.walletConnected) {
                console.log('üîÑ [FlexEarn] === –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê ===');
                console.log('üïê [FlexEarn] –ß–∞—Å:', new Date().toISOString());
                checkFlexBalance();
            } else {
                console.log('‚è∏Ô∏è [FlexEarn] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            }
        }, intervalMs);

        console.log('‚úÖ [FlexEarn] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞');
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    function setupEventHandlers() {
        console.log('üéØ [FlexEarn] === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í –ü–û–î–Ü–ô ===');

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ Flex
        const flexTab = document.querySelector('.tab-button[data-tab="flex"]');
        if (flexTab) {
            flexTab.addEventListener('click', () => {
                console.log('üìë [FlexEarn] –ö–ª—ñ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Flex Earn');
                if (state.walletConnected) {
                    console.log('üîÑ [FlexEarn] –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É');
                    checkFlexBalance();
                }
            });
            console.log('‚úÖ [FlexEarn] –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ Flex –¥–æ–¥–∞–Ω–æ');
        } else {
            console.warn('‚ö†Ô∏è [FlexEarn] –í–∫–ª–∞–¥–∫–∞ Flex –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
        }

        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—à–µ–ª—å–∫–∞
        const connectButton = document.querySelector('.connect-wallet-redirect');
        if (connectButton) {
            connectButton.addEventListener('click', (e) => {
                console.log('üîå [FlexEarn] –ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—à–µ–ª—å–∫–∞');
                console.log('üöÄ [FlexEarn] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ wallet.html');
            });
            console.log('‚úÖ [FlexEarn] –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ');
        }

        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ arrow function –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É this
        if (window.TasksStore) {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–ø–∏—Å–∫–∏
            state.unsubscribeStore = window.TasksStore.subscribe((storeState, prevState) => {
                // –¢–µ–ø–µ—Ä 'state' –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—É—Ç —á–µ—Ä–µ–∑ –∑–∞–º–∏–∫–∞–Ω–Ω—è
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—à–µ–ª—å–∫–∞
                if (storeState.wallet.connected !== prevState.wallet.connected) {
                    console.log('üîÑ [FlexEarn] –°—Ç–∞—Ç—É—Å –∫–æ—à–µ–ª—å–∫–∞ –∑–º—ñ–Ω–∏–≤—Å—è:', storeState.wallet.connected);
                    if (storeState.wallet.connected) {
                        state.walletConnected = true;
                        state.walletAddress = storeState.wallet.address;
                        showFlexTasks();
                        checkFlexBalance();
                    } else {
                        state.walletConnected = false;
                        state.walletAddress = null;
                        showWalletConnect();
                    }
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É FLEX
                if (storeState.flexEarn.flexBalance !== prevState.flexEarn.flexBalance) {
                    console.log('üíé [FlexEarn] –ë–∞–ª–∞–Ω—Å FLEX –∑–º—ñ–Ω–∏–≤—Å—è –≤ Store:', storeState.flexEarn.flexBalance);
                    state.flexBalance = storeState.flexEarn.flexBalance;
                    updateFlexTasksUI();
                }
            });

            console.log('‚úÖ [FlexEarn] –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ Store –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }

        console.log('‚úÖ [FlexEarn] –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
     */
    function getNextClaimTime(level) {
        const lastClaim = state.lastClaimTime[level];
        if (!lastClaim) return '00:00';

        const now = Date.now();
        const midnight = new Date();
        midnight.setHours(24, 0, 0, 0);

        const timeUntilMidnight = midnight.getTime() - now;
        const hours = Math.floor(timeUntilMidnight / (1000 * 60 * 60));
        const minutes = Math.floor((timeUntilMidnight % (1000 * 60 * 60)) / (1000 * 60));

        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function showLoadingState() {
        console.log('‚è≥ [FlexEarn] –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        state.isLoading = true;
        window.TasksStore?.actions.setFlexChecking(true);
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function hideLoadingState() {
        console.log('‚úÖ [FlexEarn] –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        state.isLoading = false;
        window.TasksStore?.actions.setFlexChecking(false);
    }

    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω
     */
    function saveState() {
        console.log('üíæ [FlexEarn] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É...');
        try {
            const stateToSave = {
                walletConnected: state.walletConnected,
                walletAddress: state.walletAddress,
                flexBalance: state.flexBalance,
                claimedToday: state.claimedToday,
                lastClaimTime: state.lastClaimTime,
                userId: state.userId,
                lastBalanceCheck: state.lastBalanceCheck,
                balanceCache: state.balanceCache
            };

            window.TasksUtils.storage.set('flexEarnState', stateToSave);
            console.log('‚úÖ [FlexEarn] –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', stateToSave);
        } catch (error) {
            console.error('‚ùå [FlexEarn] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞–Ω
     */
    function loadState() {
        console.log('üìÇ [FlexEarn] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É...');
        try {
            const savedState = window.TasksUtils.storage.get('flexEarnState');
            if (savedState) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if (savedState.userId === state.userId) {
                    Object.assign(state, savedState);
                    console.log('‚úÖ [FlexEarn] –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', savedState);

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –±—É–ª–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ
                    checkDailyReset();
                } else {
                    console.log('üîÑ [FlexEarn] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —ñ–≥–Ω–æ—Ä—É—î–º–æ');
                }
            } else {
                console.log('üì≠ [FlexEarn] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå [FlexEarn] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –¥–∞–Ω—ñ
     */
    function checkDailyReset() {
        console.log('üìÖ [FlexEarn] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è...');

        const now = new Date();
        const today = now.toDateString();
        const lastResetDate = window.TasksUtils.storage.get('flexEarnLastReset');

        console.log('üìä [FlexEarn] –î–∞—Ç–∏:', {
            —Å—å–æ–≥–æ–¥–Ω—ñ: today,
            –æ—Å—Ç–∞–Ω–Ω—ñ–π–°–∫–∏–¥: lastResetDate
        });

        if (lastResetDate !== today) {
            console.log('üîÑ [FlexEarn] –ù–æ–≤–∏–π –¥–µ–Ω—å, —Å–∫–∏–¥–∞—î–º–æ —â–æ–¥–µ–Ω–Ω—ñ –¥–∞–Ω—ñ');
            state.claimedToday = {};
            window.TasksUtils.storage.set('flexEarnLastReset', today);

            // –û–Ω–æ–≤–ª—é—î–º–æ Store
            window.TasksStore?.actions.resetFlexDaily();

            saveState();
        } else {
            console.log('‚úÖ [FlexEarn] –¶–µ —Ç–æ–π —Å–∞–º–∏–π –¥–µ–Ω—å, –¥–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ');
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —á–∏—Å–ª–æ
     */
    function formatNumber(num) {
        return window.TasksUtils?.formatNumber(num) || num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
     */
    function logClaimStatistics() {
        console.log('üìä [FlexEarn] === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–†–ò–ú–ê–ù–ù–Ø –í–ò–ù–ê–ì–û–†–û–î ===');

        let totalClaimedToday = 0;
        let totalWinixToday = 0;
        let totalTicketsToday = 0;

        Object.keys(state.claimedToday).forEach(level => {
            if (state.claimedToday[level]) {
                totalClaimedToday++;
                const levelData = FLEX_LEVELS[level];
                totalWinixToday += levelData.rewards.winix;
                totalTicketsToday += levelData.rewards.tickets;
            }
        });

        console.log('üìà [FlexEarn] –°—å–æ–≥–æ–¥–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            —Ä—ñ–≤–Ω—ñ–≤: totalClaimedToday,
            winix: totalWinixToday,
            tickets: totalTicketsToday
        });
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [FlexEarn] === –ó–ù–ò–©–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ===');

        if (state.autoCheckInterval) {
            clearInterval(state.autoCheckInterval);
            console.log('‚úÖ [FlexEarn] –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—á–∏—â–µ–Ω–æ');
        }

        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –≤—ñ–¥ Store
        if (state.unsubscribeStore) {
            state.unsubscribeStore();
            console.log('‚úÖ [FlexEarn] –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ Store –≤–∏–∫–æ–Ω–∞–Ω–∞');
        }

        saveState();
        console.log('‚úÖ [FlexEarn] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        checkWalletConnection,
        checkFlexBalance,
        claimReward,
        getState: () => state,
        destroy
    };
})();

console.log('‚úÖ [FlexEarn] –ú–æ–¥—É–ª—å FlexEarnManager –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô)');