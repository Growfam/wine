/**
 * –ú–æ–¥—É–ª—å Flex Earn –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø V3 - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
 */

window.FlexEarnManager = (function() {
    'use strict';

    console.log('üíé [FlexEarn-V3] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
    const { CacheManager, RequestManager, EventBus } = window;

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Flex —Ä—ñ–≤–Ω—ñ–≤
    const FLEX_LEVELS = window.TasksConstants?.FLEX_LEVELS || {};

    // Namespace –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
    const CACHE_NAMESPACE = CacheManager.NAMESPACES.FLEX;

    // RequestManager –∫–ª—ñ—î–Ω—Ç
    const apiClient = RequestManager.createClient('flexEarn');

    // EventBus namespace
    const eventBus = EventBus.createNamespace('flexEarn');

    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    const state = {
        userId: null,
        isInitialized: false,
        walletChecker: null,
        unsubscribeCallbacks: []
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    async function init(userId) {
        console.log('üöÄ [FlexEarn-V3] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');

        if (state.isInitialized) {
            console.log('‚úÖ [FlexEarn-V3] –í–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }

        state.userId = userId;

        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WalletChecker —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (window.WalletChecker) {
                state.walletChecker = window.WalletChecker;
                await state.walletChecker.init();
            }

            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –ø–æ–¥—ñ—ó
            setupEventSubscriptions();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
            await checkInitialState();

            state.isInitialized = true;

            // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
            EventBus.emit('manager.flex.ready', { userId });

            console.log('‚úÖ [FlexEarn-V3] –ú–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [FlexEarn-V3] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
     */
    async function checkInitialState() {
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –≥–∞–º–∞–Ω—Ü—è –∑—ñ Store
        const store = window.TasksStore;
        const isWalletConnected = store?.selectors.isWalletConnected();
        const walletAddress = store?.selectors.getWalletAddress();

        if (isWalletConnected && walletAddress) {
            console.log('‚úÖ [FlexEarn-V3] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', walletAddress);
            await checkFlexBalance();
            showFlexTasks();
        } else {
            console.log('‚ùå [FlexEarn-V3] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            showWalletConnect();
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX
     */
    async function checkFlexBalance(forceRefresh = false) {
        console.log('üí∞ [FlexEarn-V3] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX');

        const walletAddress = window.TasksStore?.selectors.getWalletAddress();
        if (!walletAddress) {
            console.warn('‚ö†Ô∏è [FlexEarn-V3] –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –≤—ñ–¥—Å—É—Ç–Ω—è');
            return;
        }

        const cacheKey = `balance_${walletAddress}`;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        if (!forceRefresh) {
            const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);
            if (cached !== null) {
                updateFlexUI(cached);
                return cached;
            }
        }

        try {
            // API –≤–∏–∫–ª–∏–∫ —á–µ—Ä–µ–∑ RequestManager
            const response = await apiClient.execute(
                cacheKey,
                () => window.TasksAPI.flex.getBalance(state.userId, walletAddress),
                { priority: 'normal', deduplicate: !forceRefresh }
            );

            if (response?.balance !== undefined) {
                const balance = parseInt(response.balance) || 0;

                // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                CacheManager.set(CACHE_NAMESPACE, cacheKey, balance);

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                window.TasksStore.actions.setFlexBalance(balance);

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                updateFlexUI(balance);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                checkAvailableRewards(balance);

                return balance;
            }

        } catch (error) {
            console.error('‚ùå [FlexEarn-V3] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É:', error);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            const fallback = CacheManager.get(CACHE_NAMESPACE, cacheKey);
            if (fallback !== null) {
                updateFlexUI(fallback);
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
     */
    async function checkAvailableRewards(flexBalance) {
        console.log('üéÅ [FlexEarn-V3] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥');

        const cacheKey = `levels_${state.userId}_${flexBalance}`;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);
        if (cached) {
            updateLevelsUI(cached);
            return;
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–Ω—ñ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
            const response = await apiClient.execute(
                `check_levels_${flexBalance}`,
                () => window.TasksAPI.flex.checkLevels(state.userId, flexBalance),
                { priority: 'low' }
            );

            if (response?.levels) {
                // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                CacheManager.set(CACHE_NAMESPACE, cacheKey, response.levels);

                // –û–Ω–æ–≤–ª—é—î–º–æ Store –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
                Object.entries(response.levels).forEach(([level, levelData]) => {
                    window.TasksStore.actions.setFlexLevelAvailable(level, levelData.hasEnough);
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                updateLevelsUI(response.levels);

                // –†–∞—Ö—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                const availableCount = Object.values(response.levels)
                    .filter(l => l.hasEnough && !l.claimedToday).length;

                if (availableCount > 0) {
                    EventBus.emit('rewards.available', { count: availableCount });
                }
            }

        } catch (error) {
            console.error('‚ùå [FlexEarn-V3] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä—ñ–≤–Ω—ñ–≤:', error);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
     */
    const claimReward = window.TasksUtils.debounce(async function(level) {
        console.log('üéÅ [FlexEarn-V3] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', level);

        const levelData = FLEX_LEVELS[level];
        if (!levelData) {
            console.error('‚ùå [FlexEarn-V3] –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å:', level);
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ Store
        const flexBalance = window.TasksStore.selectors.getFlexBalance();
        const isClaimed = window.TasksStore.selectors.isFlexLevelClaimed(level);

        if (flexBalance < levelData.required) {
            window.TasksUtils.showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ FLEX —Ç–æ–∫–µ–Ω—ñ–≤', 'error');
            return;
        }

        if (isClaimed) {
            window.TasksUtils.showToast('–í–∏–Ω–∞–≥–æ—Ä–æ–¥—É –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ', 'warning');
            return;
        }

        // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ EventBus
        eventBus.emit('claim.started', { level });

        try {
            // API –≤–∏–∫–ª–∏–∫
            const response = await apiClient.execute(
                `claim_${level}`,
                () => window.TasksAPI.flex.claimReward(state.userId, level),
                { priority: 'high', deduplicate: false }
            );

            if (response?.success) {
                // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à—ñ
                CacheManager.invalidateNamespace(CACHE_NAMESPACE);

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                window.TasksStore.actions.setFlexLevelClaimed(level);

                // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é —É—Å–ø—ñ—Ö—É
                EventBus.emit(EventBus.EVENTS.FLEX_LEVEL_CLAIMED, {
                    level,
                    reward: response.reward
                });

                // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
                eventBus.emit('showRewardAnimation', {
                    level,
                    reward: levelData.rewards
                });

                console.log('‚úÖ [FlexEarn-V3] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞');

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
                setTimeout(() => checkFlexBalance(true), 2000);

            } else {
                throw new Error(response?.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏');
            }

        } catch (error) {
            console.error('‚ùå [FlexEarn-V3] –ü–æ–º–∏–ª–∫–∞:', error);
            window.TasksUtils.showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏', 'error');

        } finally {
            eventBus.emit('claim.completed', { level });
        }
    }, 1000);

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI Flex –∑–∞–≤–¥–∞–Ω—å
     */
    function updateFlexUI(flexBalance) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ EventBus –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        EventBus.emit(EventBus.EVENTS.UI_UPDATE, {
            component: 'flexEarn',
            data: { flexBalance }
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
        Object.entries(FLEX_LEVELS).forEach(([level, levelData]) => {
            const progress = Math.min((flexBalance / levelData.required) * 100, 100);

            eventBus.emit('level.progressUpdate', {
                level,
                progress,
                current: flexBalance,
                required: levelData.required
            });
        });
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI —Ä—ñ–≤–Ω—ñ–≤
     */
    function updateLevelsUI(levelsData) {
        Object.entries(levelsData).forEach(([level, data]) => {
            eventBus.emit('level.statusUpdate', {
                level,
                hasEnough: data.hasEnough,
                claimedToday: data.claimedToday
            });
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    function showWalletConnect() {
        EventBus.emit('ui.showWalletConnect');

        // –ü—Ä–æ—Å—Ç—ñ—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è DOM
        const statusContainer = document.querySelector('.wallet-status-container');
        const tasksContainer = document.getElementById('flex-tasks');

        if (statusContainer) statusContainer.style.display = 'block';
        if (tasksContainer) tasksContainer.style.display = 'none';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ Flex –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function showFlexTasks() {
        EventBus.emit('ui.showFlexTasks');

        // –ü—Ä–æ—Å—Ç—ñ—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è DOM
        const statusContainer = document.querySelector('.wallet-status-container');
        const tasksContainer = document.getElementById('flex-tasks');

        if (statusContainer) statusContainer.style.display = 'none';
        if (tasksContainer) tasksContainer.style.display = 'block';
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–¥—ñ—ó
     */
    function setupEventSubscriptions() {
        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
        const unsubWalletConnected = EventBus.on(EventBus.EVENTS.WALLET_CONNECTED, async () => {
            console.log('üëõ [FlexEarn-V3] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            showFlexTasks();
            await checkFlexBalance(true);
        });

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
        const unsubWalletDisconnected = EventBus.on(EventBus.EVENTS.WALLET_DISCONNECTED, () => {
            console.log('üëõ [FlexEarn-V3] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            showWalletConnect();
            CacheManager.invalidateNamespace(CACHE_NAMESPACE);
        });

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX
        const unsubFlexUpdate = EventBus.on(EventBus.EVENTS.FLEX_BALANCE_UPDATED, (data) => {
            console.log('üíé [FlexEarn-V3] –ë–∞–ª–∞–Ω—Å FLEX –æ–Ω–æ–≤–ª–µ–Ω–æ:', data.newBalance);
            updateFlexUI(data.newBalance);
            checkAvailableRewards(data.newBalance);
        });

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É –≤–∫–ª–∞–¥–∫–∏
        const unsubTabChange = EventBus.on(EventBus.EVENTS.TAB_CHANGED, (data) => {
            if (data.newTab === 'flex' && window.TasksStore?.selectors.isWalletConnected()) {
                checkFlexBalance();
            }
        });

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–ø–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        const unsubRefresh = EventBus.on('flex.refresh', () => {
            checkFlexBalance(true);
        });

        // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ claim
        document.addEventListener('click', handleClaimClick);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ callbacks –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏
        state.unsubscribeCallbacks.push(
            unsubWalletConnected,
            unsubWalletDisconnected,
            unsubFlexUpdate,
            unsubTabChange,
            unsubRefresh,
            () => document.removeEventListener('click', handleClaimClick)
        );
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ claim
     */
    function handleClaimClick(e) {
        const claimButton = e.target.closest('.claim-button');
        if (!claimButton) return;

        const card = claimButton.closest('.flex-task-card');
        if (!card) return;

        const level = card.getAttribute('data-level')?.toUpperCase();
        if (level && FLEX_LEVELS[level]) {
            claimReward(level);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    function getStatistics() {
        const flexBalance = window.TasksStore?.selectors.getFlexBalance() || 0;
        let totalClaimedToday = 0;
        let totalPotentialRewards = { winix: 0, tickets: 0 };

        Object.entries(FLEX_LEVELS).forEach(([level, levelData]) => {
            const isClaimed = window.TasksStore?.selectors.isFlexLevelClaimed(level);
            const isAvailable = flexBalance >= levelData.required;

            if (isClaimed) {
                totalClaimedToday++;
            } else if (isAvailable) {
                totalPotentialRewards.winix += levelData.rewards.winix;
                totalPotentialRewards.tickets += levelData.rewards.tickets;
            }
        });

        return {
            flexBalance,
            totalClaimedToday,
            totalPotentialRewards,
            levelsUnlocked: Object.values(FLEX_LEVELS).filter(l => flexBalance >= l.required).length
        };
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [FlexEarn-V3] –ó–Ω–∏—â–µ–Ω–Ω—è –º–æ–¥—É–ª—è');

        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –≤—ñ–¥ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π
        state.unsubscribeCallbacks.forEach(unsubscribe => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        state.isInitialized = false;
        state.unsubscribeCallbacks = [];

        console.log('‚úÖ [FlexEarn-V3] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [FlexEarn-V3] –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π (–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        checkFlexBalance,
        claimReward,
        getStatistics,
        destroy,

        // –î–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        getState: () => ({
            isInitialized: state.isInitialized,
            flexBalance: window.TasksStore?.selectors.getFlexBalance() || 0,
            walletConnected: window.TasksStore?.selectors.isWalletConnected() || false
        })
    };

})();

console.log('‚úÖ [FlexEarn-V3] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');