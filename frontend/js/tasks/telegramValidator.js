/**
 * –ú–æ–¥—É–ª—å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó Telegram –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ WINIX
 * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø V3 - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
 */

window.TelegramValidator = (function() {
    'use strict';

    console.log('üîê [TelegramValidator-V3] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
    const { CacheManager, RequestManager, EventBus } = window;

    // Namespace –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
    const CACHE_NAMESPACE = CacheManager.NAMESPACES.VALIDATION;

    // RequestManager –∫–ª—ñ—î–Ω—Ç
    const apiClient = RequestManager.createClient('telegramValidator', {
        retries: 3,
        timeout: 30000
    });

    // EventBus namespace
    const eventBus = EventBus.createNamespace('telegram');

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π)
    const state = {
        isInitialized: false,
        telegramWebApp: null,
        validationPromise: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        maxAuthAge: 86400, // 24 –≥–æ–¥–∏–Ω–∏
        tokenRefreshBuffer: 5 * 60 * 1000, // 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
        storageKey: window.TasksConstants?.STORAGE_KEYS?.AUTH_TOKEN || 'winix_auth_token'
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
     */
    async function checkApiAvailability(force = false) {
        const cacheKey = 'api_health';

        if (!force) {
            const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);
            if (cached !== null) return cached;
        }

        try {
            const response = await apiClient.execute(
                'api_ping',
                () => fetch('/api/ping', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    signal: AbortSignal.timeout(5000)
                }),
                { priority: 'low' }
            );

            const isAvailable = response.ok;

            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            CacheManager.set(CACHE_NAMESPACE, cacheKey, isAvailable, 30000);

            console.log(`${isAvailable ? '‚úÖ' : '‚ùå'} [TelegramValidator-V3] API –¥–æ—Å—Ç—É–ø–Ω–∏–π: ${isAvailable}`);
            return isAvailable;

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V3] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error);
            CacheManager.set(CACHE_NAMESPACE, cacheKey, false, 10000);
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Telegram WebApp
     */
    function checkTelegramAvailability() {
        // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –≤–µ—Å—å —Å–µ–∞–Ω—Å
        const cacheKey = 'telegram_available';
        const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);

        if (cached !== null) {
            if (!cached) {
                throw new Error('–î–æ–¥–∞—Ç–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —á–µ—Ä–µ–∑ Telegram');
            }
            return cached;
        }

        console.log('üîç [TelegramValidator-V3] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram WebApp');

        try {
            if (!window.Telegram?.WebApp) {
                throw new Error('–î–æ–¥–∞—Ç–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —á–µ—Ä–µ–∑ Telegram');
            }

            const webApp = window.Telegram.WebApp;

            if (!webApp.initData || !webApp.initDataUnsafe?.user) {
                throw new Error('–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
            }

            state.telegramWebApp = webApp;

            // –ö–µ—à—É—î–º–æ –Ω–∞ –≤–µ—Å—å —Å–µ–∞–Ω—Å
            CacheManager.set(CACHE_NAMESPACE, cacheKey, true, Infinity);

            console.log('‚úÖ [TelegramValidator-V3] Telegram WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return true;

        } catch (error) {
            CacheManager.set(CACHE_NAMESPACE, cacheKey, false, Infinity);
            console.error('‚ùå [TelegramValidator-V3] –ü–æ–º–∏–ª–∫–∞:', error.message);
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ Telegram –¥–∞–Ω—ñ
     */
    function getTelegramData() {
        const cacheKey = 'telegram_data';

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à (10 —Ö–≤–∏–ª–∏–Ω)
        const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);
        if (cached) {
            console.log('üì¶ [TelegramValidator-V3] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ Telegram –¥–∞–Ω—ñ');
            return cached;
        }

        console.log('üì± [TelegramValidator-V3] –û—Ç—Ä–∏–º–∞–Ω–Ω—è Telegram –¥–∞–Ω–∏—Ö');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
        checkTelegramAvailability();

        const webApp = state.telegramWebApp || window.Telegram.WebApp;
        const user = webApp.initDataUnsafe.user;

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        validateUserData(user);

        const telegramData = {
            initData: webApp.initData,
            initDataUnsafe: webApp.initDataUnsafe,
            user: user,
            auth_date: webApp.initDataUnsafe.auth_date || null,
            hash: webApp.initDataUnsafe.hash || null
        };

        // –ö–µ—à—É—î–º–æ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
        CacheManager.set(CACHE_NAMESPACE, cacheKey, telegramData, 10 * 60 * 1000);

        console.log('‚úÖ [TelegramValidator-V3] Telegram –¥–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ');
        return telegramData;
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function validateUserData(userData) {
        if (!userData) {
            throw new Error('–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
        }

        if (!userData.id || typeof userData.id !== 'number' || userData.id <= 0) {
            throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–≤–Ω—ñ—Å—Ç—å auth_date
        const authDate = parseInt(userData.auth_date || 0);
        if (authDate) {
            const age = Math.floor(Date.now() / 1000) - authDate;

            if (age > config.maxAuthAge) {
                throw new Error('–î–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É');
            }

            if (age < 0) {
                throw new Error('–ù–µ–≤—ñ—Ä–Ω–∞ –º—ñ—Ç–∫–∞ —á–∞—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ID –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        const rules = window.TasksConstants?.VALIDATION_RULES?.TELEGRAM_ID;
        if (rules && (userData.id < rules.MIN || userData.id > rules.MAX)) {
            throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }

        return true;
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
     */
    async function validateOnServer(telegramData) {
        console.log('üåê [TelegramValidator-V3] –°–µ—Ä–≤–µ—Ä–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è');

        if (!telegramData?.initData) {
            throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API
        const apiAvailable = await checkApiAvailability();
        if (!apiAvailable) {
            throw new Error('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }

        try {
            const response = await apiClient.execute(
                'validate_telegram',
                () => window.TasksAPI.auth.validateTelegram(telegramData),
                { priority: 'high', deduplicate: false }
            );

            if (response.valid) {
                console.log('‚úÖ [TelegramValidator-V3] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞');

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω
                if (response.token) {
                    saveToken(response.token);
                    scheduleTokenRefresh(response.token);
                }

                return {
                    valid: true,
                    user: response.user,
                    token: response.token
                };
            } else {
                throw new Error(response.error || '–í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V3] –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', error);

            // –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
            if (error.status === 401) {
                throw new Error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫');
            } else if (error.status === 403) {
                throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ');
            } else if (error.status >= 500) {
                throw new Error('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            }

            throw error;
        }
    }

    /**
     * –ü–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
     */
    async function validateTelegramAuth() {
        console.log('üîê [TelegramValidator-V3] === –ü–û–í–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø ===');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        const cacheKey = 'validation_result';
        const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);

        if (cached) {
            console.log('‚úÖ [TelegramValidator-V3] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é');

            // –û–Ω–æ–≤–ª—é—î–º–æ Store —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            updateUserInStore(cached.user);

            return cached;
        }

        // –£–Ω–∏–∫–∞—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –≤–∞–ª—ñ–¥–∞—Ü—ñ–π
        if (state.validationPromise) {
            console.log('‚è∏Ô∏è [TelegramValidator-V3] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
            return state.validationPromise;
        }

        state.validationPromise = performValidation();

        try {
            const result = await state.validationPromise;
            return result;
        } finally {
            state.validationPromise = null;
        }
    }

    /**
     * –í–∏–∫–æ–Ω–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
     */
    async function performValidation() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
            const telegramData = getTelegramData();

            // –°–µ—Ä–≤–µ—Ä–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            const serverValidation = await validateOnServer(telegramData);

            if (serverValidation.valid) {
                const validationResult = {
                    valid: true,
                    user: {
                        ...serverValidation.user,
                        telegram_id: serverValidation.user.telegram_id || telegramData.user.id
                    },
                    timestamp: Date.now()
                };

                // –ö–µ—à—É—î–º–æ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
                CacheManager.set(CACHE_NAMESPACE, cacheKey, validationResult, 5 * 60 * 1000);

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                updateUserInStore(validationResult.user);

                // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
                EventBus.emit(EventBus.EVENTS.USER_LOGGED_IN, {
                    userId: validationResult.user.id,
                    user: validationResult.user
                });

                return validationResult;
            }

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V3] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error);

            if (window.TasksUtils?.showToast) {
                window.TasksUtils.showToast(error.message, 'error');
            }

            return {
                valid: false,
                error: error.message
            };
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Store
     */
    function updateUserInStore(user) {
        if (!window.TasksStore) return;

        window.TasksStore.actions.setUser({
            id: user.id,
            telegramId: user.telegram_id || user.id,
            username: user.username,
            firstName: user.first_name,
            lastName: user.last_name,
            photoUrl: user.photo_url,
            languageCode: user.language_code,
            balance: user.balance || { winix: 0, tickets: 0, flex: 0 }
        });

        console.log('‚úÖ [TelegramValidator-V3] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ Store');
    }

    /**
     * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞–º–∏ (—Å–ø—Ä–æ—â–µ–Ω–µ)
     */
    function saveToken(token) {
        sessionStorage.setItem(config.storageKey, token);
        console.log('üíæ [TelegramValidator-V3] –¢–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    }

    function getAuthToken() {
        const token = sessionStorage.getItem(config.storageKey);

        if (!token) return null;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π
            const [, payloadBase64] = token.split('.');
            const payload = JSON.parse(atob(payloadBase64));

            if (payload.exp * 1000 <= Date.now()) {
                clearAuthToken();
                return null;
            }

            return token;
        } catch {
            return null;
        }
    }

    function clearAuthToken() {
        sessionStorage.removeItem(config.storageKey);
        CacheManager.invalidateNamespace(CACHE_NAMESPACE);

        if (window.TasksStore) {
            window.TasksStore.actions.clearUser();
        }

        console.log('üóëÔ∏è [TelegramValidator-V3] –¢–æ–∫–µ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ');
    }

    /**
     * –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
     */
    function scheduleTokenRefresh(token) {
        try {
            const [, payloadBase64] = token.split('.');
            const payload = JSON.parse(atob(payloadBase64));
            const timeToExpiry = payload.exp * 1000 - Date.now();

            if (timeToExpiry > config.tokenRefreshBuffer) {
                const refreshTime = timeToExpiry - config.tokenRefreshBuffer;

                setTimeout(async () => {
                    console.log('üîÑ [TelegramValidator-V3] –ß–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω');
                    await refreshToken();
                }, Math.min(refreshTime, 30 * 60 * 1000)); // –ú–∞–∫—Å–∏–º—É–º 30 —Ö–≤–∏–ª–∏–Ω

                console.log(`‚è∞ [TelegramValidator-V3] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ ${Math.round(refreshTime / 1000 / 60)} —Ö–≤`);
            }
        } catch (error) {
            console.error('‚ùå [TelegramValidator-V3] –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
     */
    async function refreshToken() {
        console.log('üîÑ [TelegramValidator-V3] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');

        try {
            // –°–ø–æ—á–∞—Ç–∫—É —á–µ—Ä–µ–∑ TasksAPI
            if (window.TasksAPI?.auth?.refreshToken) {
                const response = await apiClient.execute(
                    'refresh_token',
                    () => window.TasksAPI.auth.refreshToken(),
                    { priority: 'high' }
                );

                if (response.token) {
                    saveToken(response.token);
                    scheduleTokenRefresh(response.token);

                    // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
                    CacheManager.invalidate(CACHE_NAMESPACE, 'validation_result');

                    return true;
                }
            }

            console.warn('‚ö†Ô∏è [TelegramValidator-V3] –ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω');
            return false;

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V3] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);

            if (error.status === 401) {
                clearAuthToken();
                window.TasksUtils?.showToast('–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', 'error');
                setTimeout(() => window.location.reload(), 2000);
            }

            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
     */
    function isAuthenticated() {
        // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
        if (!getAuthToken()) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
        const cached = CacheManager.get(CACHE_NAMESPACE, 'validation_result');
        if (cached?.valid) {
            return true;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram
        try {
            checkTelegramAvailability();
            return true;
        } catch {
            return false;
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebApp
     */
    function setupWebApp() {
        const cacheKey = 'webapp_setup';

        if (CacheManager.get(CACHE_NAMESPACE, cacheKey)) {
            return;
        }

        console.log('üì± [TelegramValidator-V3] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebApp');

        try {
            checkTelegramAvailability();

            const webApp = state.telegramWebApp || window.Telegram.WebApp;

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            webApp.setHeaderColor?.('#1a1a2e');
            webApp.setBackgroundColor?.('#0f0f1e');
            webApp.expand?.();
            webApp.ready?.();

            CacheManager.set(CACHE_NAMESPACE, cacheKey, true, Infinity);

            console.log('‚úÖ [TelegramValidator-V3] WebApp –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V3] –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:', error);
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
     */
    function init() {
        if (state.isInitialized) {
            return;
        }

        console.log('üöÄ [TelegramValidator-V3] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è');

        try {
            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ WebApp
            setupWebApp();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
            const telegramData = getTelegramData();
            if (telegramData) {
                console.log('‚úÖ [TelegramValidator-V3] Telegram –¥–∞–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
            const token = getAuthToken();
            if (token) {
                console.log('üîë [TelegramValidator-V3] –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω');
                scheduleTokenRefresh(token);
            }

            // –°–ª—É—Ö–∞—á –≤–∏–¥–∏–º–æ—Å—Ç—ñ
            document.addEventListener('visibilitychange', () => {
                if (!document.hidden && getAuthToken()) {
                    // –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
                    const token = getAuthToken();
                    if (token) {
                        try {
                            const [, payloadBase64] = token.split('.');
                            const payload = JSON.parse(atob(payloadBase64));
                            const timeToExpiry = payload.exp * 1000 - Date.now();

                            if (timeToExpiry < config.tokenRefreshBuffer) {
                                refreshToken().catch(console.error);
                            }
                        } catch {}
                    }
                }
            });

            state.isInitialized = true;

            // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
            EventBus.emit('validator.telegram.ready');

            console.log('‚úÖ [TelegramValidator-V3] –ú–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V3] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            showInitError(error);
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    function showInitError(error) {
        // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –ø–æ–º–∏–ª–∫–∏
        EventBus.emit(EventBus.EVENTS.APP_ERROR, {
            module: 'telegramValidator',
            error: error.message,
            critical: true
        });

        // –ü—Ä–æ—Å—Ç–∏–π UI –¥–ª—è –ø–æ–º–∏–ª–∫–∏
        const container = document.querySelector('.container') || document.body;
        if (!container) return;

        const errorDiv = document.createElement('div');
        errorDiv.className = 'telegram-init-error';
        errorDiv.innerHTML = `
            <h2>‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó</h2>
            <p>${error.message}</p>
            <p>–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –¥–æ–¥–∞—Ç–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ Telegram</p>
            <button onclick="window.location.reload()">–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É</button>
        `;

        container.appendChild(errorDiv);
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [TelegramValidator-V3] –ó–Ω–∏—â–µ–Ω–Ω—è –º–æ–¥—É–ª—è');

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        state.isInitialized = false;
        state.telegramWebApp = null;
        state.validationPromise = null;

        console.log('‚úÖ [TelegramValidator-V3] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => setTimeout(init, 100));
    } else {
        setTimeout(init, 100);
    }

    console.log('‚úÖ [TelegramValidator-V3] –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π (–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        getTelegramData,
        validateTelegramAuth,
        isAuthenticated,
        getAuthToken,
        clearAuthToken,
        refreshToken,
        setupWebApp,
        checkTelegramAvailability,
        checkApiAvailability,
        destroy,
        init
    };

})();

console.log('‚úÖ [TelegramValidator-V3] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');