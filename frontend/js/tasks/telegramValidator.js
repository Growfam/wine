/**
 * –ú–æ–¥—É–ª—å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó Telegram –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ WINIX - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è V2
 * Smart –∫–µ—à—É–≤–∞–Ω–Ω—è, –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ç–∞ —É—Å—É–Ω–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
 */

window.TelegramValidator = (function() {
    'use strict';

    console.log('üîê [TelegramValidator-V2] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    // –ö–µ—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    const ValidationCache = {
        cache: new Map(),
        ttl: {
            validation: 5 * 60 * 1000,    // 5 —Ö–≤–∏–ª–∏–Ω
            apiHealth: 30 * 1000,         // 30 —Å–µ–∫—É–Ω–¥
            telegramData: 10 * 60 * 1000, // 10 —Ö–≤–∏–ª–∏–Ω
            tokenInfo: 60 * 1000          // 1 —Ö–≤–∏–ª–∏–Ω–∞
        },

        set(key, data, customTTL) {
            const ttl = customTTL || this.ttl[key.split('_')[0]] || 60000;

            this.cache.set(key, {
                data,
                timestamp: Date.now(),
                ttl
            });

            // –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è
            setTimeout(() => this.invalidate(key), ttl);
        },

        get(key) {
            const cached = this.cache.get(key);
            if (!cached) return null;

            const age = Date.now() - cached.timestamp;
            if (age > cached.ttl) {
                this.invalidate(key);
                return null;
            }

            return cached.data;
        },

        invalidate(key) {
            this.cache.delete(key);
        },

        clear() {
            this.cache.clear();
        }
    };

    // Token Manager –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞–º–∏
    const TokenManager = {
        tokenInfo: null,
        refreshPromise: null,
        refreshScheduled: false,

        getTokenInfo() {
            // –ö–µ—à–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            const cached = ValidationCache.get('tokenInfo');
            if (cached) return cached;

            const token = this.getRawToken();
            if (!token) return null;

            try {
                const [, payloadBase64] = token.split('.');
                const payload = JSON.parse(atob(payloadBase64));

                const info = {
                    token,
                    exp: payload.exp * 1000,
                    iat: payload.iat * 1000,
                    userId: payload.sub || payload.user_id,
                    timeToExpiry: payload.exp * 1000 - Date.now(),
                    isExpired: payload.exp * 1000 <= Date.now(),
                    needsRefresh: payload.exp * 1000 - Date.now() < 5 * 60 * 1000
                };

                // –ö–µ—à—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                ValidationCache.set('tokenInfo', info);
                this.tokenInfo = info;

                return info;

            } catch (error) {
                console.error('‚ùå [TokenManager] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–∫–µ–Ω—É:', error);
                return null;
            }
        },

        getRawToken() {
            const storageKey = window.TasksConstants?.STORAGE_KEYS?.AUTH_TOKEN || 'winix_auth_token';
            return sessionStorage.getItem(storageKey);
        },

        saveToken(token) {
            const storageKey = window.TasksConstants?.STORAGE_KEYS?.AUTH_TOKEN || 'winix_auth_token';
            sessionStorage.setItem(storageKey, token);
            ValidationCache.invalidate('tokenInfo');
            this.tokenInfo = null;
        },

        clearToken() {
            const storageKey = window.TasksConstants?.STORAGE_KEYS?.AUTH_TOKEN || 'winix_auth_token';
            sessionStorage.removeItem(storageKey);
            ValidationCache.invalidate('tokenInfo');
            this.tokenInfo = null;
        },

        async refreshToken() {
            // –£–Ω–∏–∫–∞—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
            if (this.refreshPromise) {
                console.log('‚è∏Ô∏è [TokenManager] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π refresh promise');
                return this.refreshPromise;
            }

            this.refreshPromise = this._refreshTokenInternal();

            try {
                const result = await this.refreshPromise;
                return result;
            } finally {
                this.refreshPromise = null;
            }
        },

        async _refreshTokenInternal() {
            console.log('üîÑ [TokenManager] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É...');

            try {
                // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 1: WinixAPI
                if (window.WinixAPI?.refreshToken) {
                    const newToken = await window.WinixAPI.refreshToken();
                    if (newToken) {
                        this.saveToken(newToken);
                        console.log('‚úÖ [TokenManager] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WinixAPI');
                        return true;
                    }
                }

                // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 2: TasksAPI
                if (window.TasksAPI?.auth?.refreshToken) {
                    const response = await window.TasksAPI.auth.refreshToken();
                    if (response.token) {
                        this.saveToken(response.token);
                        console.log('‚úÖ [TokenManager] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ TasksAPI');
                        return true;
                    }
                }

                console.warn('‚ö†Ô∏è [TokenManager] –ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω');
                return false;

            } catch (error) {
                console.error('‚ùå [TokenManager] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:', error);

                if (error.status === 401 || error.message?.includes('401')) {
                    this.clearToken();
                }

                throw error;
            }
        },

        scheduleRefresh() {
            if (this.refreshScheduled) return;

            const info = this.getTokenInfo();
            if (!info || info.isExpired) return;

            // –ü–ª–∞–Ω–∏—Ä—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
            const timeUntilRefresh = info.timeToExpiry - 5 * 60 * 1000;

            if (timeUntilRefresh > 0) {
                this.refreshScheduled = true;

                setTimeout(async () => {
                    this.refreshScheduled = false;

                    try {
                        await this.refreshToken();
                        // –ü–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                        this.scheduleRefresh();
                    } catch (error) {
                        console.error('‚ùå [TokenManager] –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
                    }
                }, Math.min(timeUntilRefresh, 30 * 60 * 1000)); // –ú–∞–∫—Å–∏–º—É–º 30 —Ö–≤–∏–ª–∏–Ω

                console.log(`‚è∞ [TokenManager] –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${Math.round(timeUntilRefresh / 1000 / 60)} —Ö–≤–∏–ª–∏–Ω`);
            }
        }
    };

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const moduleState = {
        isInitialized: false,
        apiAvailable: false,
        lastApiCheck: 0,
        retryCount: 0,
        maxRetries: 3,
        telegramDataCache: null,
        validationPromise: null
    };

    // Request Queue –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    const RequestQueue = {
        pending: new Map(),

        async enqueue(key, requestFn) {
            if (this.pending.has(key)) {
                console.log(`üì¶ [RequestQueue] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Ç: ${key}`);
                return this.pending.get(key);
            }

            const promise = requestFn().finally(() => {
                this.pending.delete(key);
            });

            this.pending.set(key, promise);
            return promise;
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function checkApiAvailability(force = false) {
        const cacheKey = 'apiHealth';

        if (!force) {
            const cached = ValidationCache.get(cacheKey);
            if (cached !== null) {
                moduleState.apiAvailable = cached;
                return cached;
            }
        }

        console.log('üîç [TelegramValidator-V2] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API...');

        try {
            const response = await fetch('/api/ping', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                signal: AbortSignal.timeout(5000)
            });

            const isAvailable = response.ok;
            moduleState.apiAvailable = isAvailable;

            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            ValidationCache.set(cacheKey, isAvailable);

            console.log(`${isAvailable ? '‚úÖ' : '‚ùå'} [TelegramValidator-V2] API —Å—Ç–∞—Ç—É—Å:`, response.status);
            return isAvailable;

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V2] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
            moduleState.apiAvailable = false;
            ValidationCache.set(cacheKey, false, 10000); // –ö–æ—Ä–æ—Ç—à–∏–π TTL –¥–ª—è –ø–æ–º–∏–ª–æ–∫
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Telegram WebApp - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    const checkTelegramAvailability = (() => {
        let lastCheck = null;

        return function() {
            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –≤–µ—Å—å —Å–µ–∞–Ω—Å
            if (lastCheck !== null) {
                if (!lastCheck) {
                    throw new Error('–î–æ–¥–∞—Ç–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —á–µ—Ä–µ–∑ Telegram');
                }
                return lastCheck;
            }

            console.log('üîç [TelegramValidator-V2] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Telegram WebApp...');

            try {
                if (!window.Telegram?.WebApp) {
                    lastCheck = false;
                    throw new Error('–î–æ–¥–∞—Ç–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —á–µ—Ä–µ–∑ Telegram');
                }

                const webApp = window.Telegram.WebApp;

                if (!webApp.initData) {
                    lastCheck = false;
                    throw new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ Telegram WebApp');
                }

                if (!webApp.initDataUnsafe) {
                    lastCheck = false;
                    throw new Error('–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
                }

                console.log('‚úÖ [TelegramValidator-V2] Telegram WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π');
                lastCheck = true;
                return true;

            } catch (error) {
                console.error('‚ùå [TelegramValidator-V2] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error.message);
                throw error;
            }
        };
    })();

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞ –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ Telegram –¥–∞–Ω—ñ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    function getTelegramData() {
        // –ö–µ—à–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è
        if (moduleState.telegramDataCache) {
            const age = Date.now() - moduleState.telegramDataCache.timestamp;
            if (age < 10 * 60 * 1000) { // 10 —Ö–≤–∏–ª–∏–Ω
                console.log('üì¶ [TelegramValidator-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ Telegram –¥–∞–Ω—ñ');
                return moduleState.telegramDataCache.data;
            }
        }

        console.log('üì± [TelegramValidator-V2] –û—Ç—Ä–∏–º–∞–Ω–Ω—è Telegram –¥–∞–Ω–∏—Ö...');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
        checkTelegramAvailability();

        const webApp = window.Telegram.WebApp;
        const initData = webApp.initData;
        const initDataUnsafe = webApp.initDataUnsafe;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!initDataUnsafe.user) {
            throw new Error('–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        const user = initDataUnsafe.user;
        if (!user.id || typeof user.id !== 'number') {
            throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }

        const telegramData = {
            initData: initData,
            initDataUnsafe: initDataUnsafe,
            user: user,
            auth_date: initDataUnsafe.auth_date || null,
            hash: initDataUnsafe.hash || null,
            chat_instance: initDataUnsafe.chat_instance || null,
            chat_type: initDataUnsafe.chat_type || null,
            start_param: initDataUnsafe.start_param || null
        };

        // –ö–µ—à—É—î–º–æ –¥–∞–Ω—ñ
        moduleState.telegramDataCache = {
            data: telegramData,
            timestamp: Date.now()
        };

        console.log('‚úÖ [TelegramValidator-V2] Telegram –¥–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –∑–∞–∫–µ—à–æ–≤–∞–Ω–æ');

        return telegramData;
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function validateOnServer(telegramData) {
        console.log('üåê [TelegramValidator-V2] === –°–ï–†–í–ï–†–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø ===');

        if (!telegramData?.initData) {
            throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó');
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ RequestQueue –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
        return RequestQueue.enqueue('validation', async () => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API
            const apiAvailable = await checkApiAvailability();
            if (!apiAvailable) {
                moduleState.retryCount++;

                if (moduleState.retryCount >= moduleState.maxRetries) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É');
                } else {
                    throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±–∞ ${moduleState.retryCount}/${moduleState.maxRetries}`);
                }
            }

            try {
                console.log('üì§ [TelegramValidator-V2] –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

                if (!window.TasksAPI?.auth?.validateTelegram) {
                    throw new Error('API –º–æ–¥—É–ª—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                }

                const response = await window.TasksAPI.auth.validateTelegram(telegramData.initData);

                console.log('üìä [TelegramValidator-V2] –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞');

                if (response.valid) {
                    console.log('‚úÖ [TelegramValidator-V2] –°–µ—Ä–≤–µ—Ä–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞');

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω
                    if (response.token) {
                        TokenManager.saveToken(response.token);
                        TokenManager.scheduleRefresh();
                        console.log('üíæ [TelegramValidator-V2] –¢–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
                    }

                    // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
                    moduleState.retryCount = 0;

                    return {
                        valid: true,
                        user: response.user,
                        token: response.token
                    };
                } else {
                    throw new Error(response.error || '–í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
                }

            } catch (error) {
                console.error('‚ùå [TelegramValidator-V2] –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', error);

                // –ú–∞–ø—ñ–Ω–≥ –ø–æ–º–∏–ª–æ–∫
                if (error.status === 401) {
                    throw new Error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram');
                } else if (error.status === 403) {
                    throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É');
                } else if (error.status >= 500) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
                } else if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
                    throw new Error('–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
                }

                throw error;
            }
        });
    }

    /**
     * –ü–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –ó –ö–ï–®–£–í–ê–ù–ù–Ø–ú
     */
    async function validateTelegramAuth() {
        console.log('üîê [TelegramValidator-V2] === –ü–û–í–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø ===');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        const cachedValidation = ValidationCache.get('validation_result');
        if (cachedValidation) {
            console.log('‚úÖ [TelegramValidator-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é');

            // –û–Ω–æ–≤–ª—é—î–º–æ Store —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (cachedValidation.valid && window.TasksStore) {
                const currentUserId = window.TasksStore.selectors?.getUserId?.();
                if (!currentUserId) {
                    updateUserInStore(cachedValidation.user);
                }
            }

            return cachedValidation;
        }

        // –£–Ω–∏–∫–∞—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –≤–∞–ª—ñ–¥–∞—Ü—ñ–π
        if (moduleState.validationPromise) {
            console.log('‚è∏Ô∏è [TelegramValidator-V2] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —á–µ–∫–∞—î–º–æ...');
            return moduleState.validationPromise;
        }

        moduleState.validationPromise = performValidation();

        try {
            const result = await moduleState.validationPromise;
            return result;
        } finally {
            moduleState.validationPromise = null;
        }
    }

    /**
     * –í–∏–∫–æ–Ω–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
     */
    async function performValidation() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
            const telegramData = getTelegramData();

            // –õ–æ–∫–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            validateUserLocally(telegramData.user);

            // –°–µ—Ä–≤–µ—Ä–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            console.log('üîÑ [TelegramValidator-V2] –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó...');

            const serverValidation = await validateOnServer(telegramData);

            if (serverValidation.valid) {
                console.log('‚úÖ [TelegramValidator-V2] –í–∞–ª—ñ–¥–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');

                // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const validationResult = {
                    valid: true,
                    user: {
                        ...serverValidation.user,
                        telegram_id: serverValidation.user.telegram_id || telegramData.user.id
                    },
                    timestamp: Date.now()
                };

                ValidationCache.set('validation_result', validationResult);

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                updateUserInStore(validationResult.user);

                return validationResult;
            } else {
                throw new Error(serverValidation.error || '–í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V2] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error.message);

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
            if (window.TasksUtils?.showToast) {
                window.TasksUtils.showToast(error.message, 'error');
            }

            return {
                valid: false,
                error: error.message
            };
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Store
     */
    function updateUserInStore(user) {
        if (!window.TasksStore) return;

        console.log('üìù [TelegramValidator-V2] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ Store...');

        window.TasksStore.actions.setUser({
            id: user.id,
            telegramId: user.telegram_id || user.id,
            username: user.username,
            firstName: user.first_name,
            lastName: user.last_name,
            photoUrl: user.photo_url,
            languageCode: user.language_code,
            balance: user.balance || { winix: 0, tickets: 0, flex: 0 }
        });

        console.log('‚úÖ [TelegramValidator-V2] –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ Store');
    }

    /**
     * –õ–æ–∫–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function validateUserLocally(userData) {
        console.log('üîç [TelegramValidator-V2] –õ–æ–∫–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');

        if (!userData) {
            throw new Error('–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        if (!userData.id || typeof userData.id !== 'number' || userData.id <= 0) {
            throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É username
        if (userData.username && (userData.username.length < 5 || userData.username.length > 32)) {
            console.warn('‚ö†Ô∏è [TelegramValidator-V2] –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π username:', userData.username);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–≤–Ω—ñ—Å—Ç—å auth_date
        const authDate = parseInt(userData.auth_date || 0);
        if (authDate) {
            const currentTime = Math.floor(Date.now() / 1000);
            const maxAge = 86400; // 24 –≥–æ–¥–∏–Ω–∏
            const age = currentTime - authDate;

            console.log('‚è∞ [TelegramValidator-V2] –í—ñ–∫ –¥–∞–Ω–∏—Ö:', age, '—Å–µ–∫—É–Ω–¥');

            if (age > maxAge) {
                throw new Error('–î–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É');
            }

            if (age < 0) {
                throw new Error('–ù–µ–≤—ñ—Ä–Ω–∞ –º—ñ—Ç–∫–∞ —á–∞—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ID –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º
        const validation = window.TasksConstants?.VALIDATION_RULES?.TELEGRAM_ID;
        if (validation) {
            if (userData.id < validation.MIN || userData.id > validation.MAX) {
                throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
            }
        }

        console.log('‚úÖ [TelegramValidator-V2] –õ–æ–∫–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞');
        return true;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
     */
    function getAuthToken() {
        const tokenInfo = TokenManager.getTokenInfo();

        if (!tokenInfo) {
            console.log('üîë [TelegramValidator-V2] –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            return null;
        }

        if (tokenInfo.isExpired) {
            console.warn('‚ö†Ô∏è [TelegramValidator-V2] –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π');
            TokenManager.clearToken();
            return null;
        }

        console.log('üîë [TelegramValidator-V2] –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π');
        return tokenInfo.token;
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–∫–µ–Ω
     */
    function clearAuthToken() {
        console.log('üóëÔ∏è [TelegramValidator-V2] –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');

        TokenManager.clearToken();
        ValidationCache.clear();

        // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ Store
        if (window.TasksStore) {
            window.TasksStore.actions.clearUser();
        }

        console.log('‚úÖ [TelegramValidator-V2] –¢–æ–∫–µ–Ω —Ç–∞ –∫–µ—à –≤–∏–¥–∞–ª–µ–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    function isAuthenticated() {
        // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
        const tokenInfo = TokenManager.getTokenInfo();

        if (!tokenInfo || tokenInfo.isExpired) {
            console.log('üîê [TelegramValidator-V2] –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π');
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
        const cachedValidation = ValidationCache.get('validation_result');
        if (cachedValidation && cachedValidation.valid) {
            console.log('üîê [TelegramValidator-V2] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (–∫–µ—à)');
            return true;
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram –¥–∞–Ω–∏—Ö
            checkTelegramAvailability();
            console.log('üîê [TelegramValidator-V2] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return true;

        } catch (error) {
            console.log('üîê [TelegramValidator-V2] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π:', error.message);
            return false;
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function refreshToken() {
        console.log('üîÑ [TelegramValidator-V2] –ó–∞–ø–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');

        const tokenInfo = TokenManager.getTokenInfo();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (tokenInfo && !tokenInfo.needsRefresh) {
            console.log('‚úÖ [TelegramValidator-V2] –¢–æ–∫–µ–Ω —â–µ –≤–∞–ª—ñ–¥–Ω–∏–π, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ');
            return true;
        }

        try {
            const result = await TokenManager.refreshToken();

            if (result) {
                // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω—É
                ValidationCache.invalidate('validation_result');
            }

            return result;

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V2] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:', error);

            // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö - –æ—á–∏—â–∞—î–º–æ –≤—Å–µ
            if (error.status === 401 || error.message?.includes('401')) {
                clearAuthToken();

                if (window.TasksUtils?.showToast) {
                    window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', 'error');
                }

                setTimeout(() => window.location.reload(), 2000);
            }

            throw error;
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebApp - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    const setupWebApp = (() => {
        let isSetup = false;

        return function() {
            if (isSetup) return;

            console.log('üì± [TelegramValidator-V2] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram WebApp');

            try {
                checkTelegramAvailability();

                const webApp = window.Telegram.WebApp;

                // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤
                if (webApp.setHeaderColor) {
                    webApp.setHeaderColor('#1a1a2e');
                }

                if (webApp.setBackgroundColor) {
                    webApp.setBackgroundColor('#0f0f1e');
                }

                // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
                if (webApp.expand) {
                    webApp.expand();
                }

                // –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
                if (webApp.ready) {
                    webApp.ready();
                }

                isSetup = true;
                console.log('‚úÖ [TelegramValidator-V2] WebApp –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');

            } catch (error) {
                console.error('‚ùå [TelegramValidator-V2] –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WebApp:', error);
                throw error;
            }
        };
    })();

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    function init() {
        if (moduleState.isInitialized) {
            console.log('‚úÖ [TelegramValidator-V2] –ú–æ–¥—É–ª—å –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }

        console.log('üöÄ [TelegramValidator-V2] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è');

        try {
            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ WebApp
            setupWebApp();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
            const telegramData = getTelegramData();
            if (telegramData) {
                console.log('‚úÖ [TelegramValidator-V2] Telegram –¥–∞–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ç–æ–∫–µ–Ω
            const tokenInfo = TokenManager.getTokenInfo();
            if (tokenInfo && !tokenInfo.isExpired) {
                console.log('üîë [TelegramValidator-V2] –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω');

                // –ü–ª–∞–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if (tokenInfo.needsRefresh) {
                    TokenManager.scheduleRefresh();
                }
            }

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–ª—É—Ö–∞—á—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            document.addEventListener('visibilitychange', () => {
                if (!document.hidden) {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                    const info = TokenManager.getTokenInfo();
                    if (info && info.needsRefresh) {
                        TokenManager.refreshToken().catch(console.error);
                    }
                }
            });

            moduleState.isInitialized = true;
            console.log('‚úÖ [TelegramValidator-V2] –ú–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TelegramValidator-V2] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);

            // –ü–æ–∫–∞–∑—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
            showInitError(error);

            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    function showInitError(error) {
        const container = document.querySelector('.container') || document.body;
        if (!container) return;

        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #1a1a2e;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
            z-index: 10000;
        `;

        errorDiv.innerHTML = `
            <h2 style="color: #e74c3c; margin-bottom: 20px;">‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó</h2>
            <p style="margin-bottom: 20px; font-size: 16px;">${error.message}</p>
            <p style="color: #95a5a6; font-size: 14px;">
                –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –¥–æ–¥–∞—Ç–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ Telegram, <br>
                —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            </p>
            <button onclick="window.location.reload()" 
                    style="margin-top: 20px; padding: 10px 20px; background: #b366ff; color: white; border: none; border-radius: 8px; cursor: pointer;">
                –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            </button>
        `;

        container.appendChild(errorDiv);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    function showServerUnavailableError() {
        const container = document.querySelector('.container') || document.body;
        if (!container) return;

        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #1a1a2e;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
            z-index: 10000;
        `;

        errorDiv.innerHTML = `
            <h2 style="color: #e74c3c; margin-bottom: 20px;">üö´ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</h2>
            <p style="margin-bottom: 20px; font-size: 16px;">
                –°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.<br>
                –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.
            </p>
            <p style="color: #95a5a6; font-size: 14px; margin-bottom: 20px;">
                –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∑–Ω–∏–∫–∞—î, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
            </p>
            <button onclick="window.location.reload()" 
                    style="margin-top: 20px; padding: 10px 20px; background: #b366ff; color: white; border: none; border-radius: 8px; cursor: pointer;">
                –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            </button>
        `;

        container.appendChild(errorDiv);
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [TelegramValidator-V2] –ó–Ω–∏—â–µ–Ω–Ω—è –º–æ–¥—É–ª—è');

        // –û—á–∏—â–∞—î–º–æ –∫–µ—à
        ValidationCache.clear();

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        moduleState.telegramDataCache = null;
        moduleState.validationPromise = null;

        console.log('‚úÖ [TelegramValidator-V2] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(init, 100);
        });
    } else {
        setTimeout(init, 100);
    }

    console.log('‚úÖ [TelegramValidator-V2] –ú–æ–¥—É–ª—å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó Telegram –≥–æ—Ç–æ–≤–∏–π (Optimized)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        getTelegramData,
        validateTelegramAuth,
        isAuthenticated,
        getAuthToken,
        clearAuthToken,
        refreshToken,
        setupWebApp,
        checkTelegramAvailability,
        checkApiAvailability,
        showServerUnavailableError,
        destroy,

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        _cache: ValidationCache,
        _tokenManager: TokenManager,
        _queue: RequestQueue
    };

})();

console.log('‚úÖ [TelegramValidator-V2] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ (Optimized)');