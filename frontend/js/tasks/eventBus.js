/**
 * Event Bus –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—ñ–π –¥–ª—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –º—ñ–∂ –º–æ–¥—É–ª—è–º–∏
 */

window.EventBus = (function() {
    'use strict';

    console.log('üì¢ [EventBus] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò –ü–û–î–Ü–ô =====');

    // –°—Ö–æ–≤–∏—â–µ —Å–ª—É—Ö–∞—á—ñ–≤
    const listeners = new Map();
    const onceListeners = new Map();

    // –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    const eventHistory = [];
    const maxHistorySize = 100;

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        asyncEvents: true,           // –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Å–ª—É—Ö–∞—á—ñ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        errorHandling: true,         // –õ–æ–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –≤ —Å–ª—É—Ö–∞—á–∞—Ö
        wildcardSupport: true,       // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ wildcard –ø–æ–¥—ñ–π (*)
        debugging: false,            // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏
        performanceTracking: true    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    };

    // –ú–µ—Ç—Ä–∏–∫–∏
    const metrics = {
        totalEvents: 0,
        totalListeners: 0,
        eventCounts: new Map(),
        listenerExecutionTime: new Map()
    };

    /**
     * –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø–æ–¥—ñ—é
     */
    function on(event, callback, options = {}) {
        if (typeof callback !== 'function') {
            throw new TypeError('Callback must be a function');
        }

        const listener = {
            callback,
            options: {
                priority: options.priority || 0,
                context: options.context || null,
                once: options.once || false,
                namespace: options.namespace || 'default'
            }
        };

        // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞
        if (!listeners.has(event)) {
            listeners.set(event, []);
        }

        const eventListeners = listeners.get(event);

        // –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
        let inserted = false;
        for (let i = 0; i < eventListeners.length; i++) {
            if (listener.options.priority > eventListeners[i].options.priority) {
                eventListeners.splice(i, 0, listener);
                inserted = true;
                break;
            }
        }

        if (!inserted) {
            eventListeners.push(listener);
        }

        metrics.totalListeners++;

        if (config.debugging) {
            console.log(`üìå [EventBus] –î–æ–¥–∞–Ω–æ —Å–ª—É—Ö–∞—á –¥–ª—è "${event}"`, listener.options);
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–ø–∏—Å–∫–∏
        return function unsubscribe() {
            off(event, callback);
        };
    }

    /**
     * –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø–æ–¥—ñ—é –æ–¥–∏–Ω —Ä–∞–∑
     */
    function once(event, callback, options = {}) {
        return on(event, callback, { ...options, once: true });
    }

    /**
     * –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ –ø–æ–¥—ñ—ó
     */
    function off(event, callback) {
        if (!event) {
            // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ª—É—Ö–∞—á—ñ
            listeners.clear();
            metrics.totalListeners = 0;
            return;
        }

        if (!callback) {
            // –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ª—É—Ö–∞—á—ñ –¥–ª—è –ø–æ–¥—ñ—ó
            const count = listeners.get(event)?.length || 0;
            listeners.delete(event);
            metrics.totalListeners -= count;
            return;
        }

        // –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Å–ª—É—Ö–∞—á
        const eventListeners = listeners.get(event);
        if (eventListeners) {
            const index = eventListeners.findIndex(l => l.callback === callback);
            if (index !== -1) {
                eventListeners.splice(index, 1);
                metrics.totalListeners--;

                if (eventListeners.length === 0) {
                    listeners.delete(event);
                }
            }
        }
    }

    /**
     * –í—ñ–¥–ø–∏—Å–∞—Ç–∏ –≤—Å—ñ —Å–ª—É—Ö–∞—á—ñ namespace
     */
    function offNamespace(namespace) {
        let removed = 0;

        listeners.forEach((eventListeners, event) => {
            const filtered = eventListeners.filter(listener => {
                if (listener.options.namespace === namespace) {
                    removed++;
                    return false;
                }
                return true;
            });

            if (filtered.length === 0) {
                listeners.delete(event);
            } else {
                listeners.set(event, filtered);
            }
        });

        metrics.totalListeners -= removed;

        console.log(`üóëÔ∏è [EventBus] –í–∏–¥–∞–ª–µ–Ω–æ ${removed} —Å–ª—É—Ö–∞—á—ñ–≤ –¥–ª—è namespace "${namespace}"`);
        return removed;
    }

    /**
     * –í–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ–¥—ñ—é
     */
    async function emit(event, data = {}, options = {}) {
        const startTime = performance.now();

        // –î–æ–¥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        addToHistory(event, data);

        // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        metrics.totalEvents++;
        metrics.eventCounts.set(event, (metrics.eventCounts.get(event) || 0) + 1);

        if (config.debugging) {
            console.log(`üì§ [EventBus] –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é "${event}"`, data);
        }

        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ—Ö —Å–ª—É—Ö–∞—á—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ wildcard)
        const eventListeners = [];

        // –¢–æ—á–Ω—ñ —Å–ª—É—Ö–∞—á—ñ
        if (listeners.has(event)) {
            eventListeners.push(...listeners.get(event));
        }

        // Wildcard —Å–ª—É—Ö–∞—á—ñ
        if (config.wildcardSupport) {
            listeners.forEach((wildcardListeners, wildcardEvent) => {
                if (wildcardEvent.includes('*') && matchWildcard(event, wildcardEvent)) {
                    eventListeners.push(...wildcardListeners);
                }
            });
        }

        if (eventListeners.length === 0) {
            if (config.debugging) {
                console.log(`üì≠ [EventBus] –ù–µ–º–∞—î —Å–ª—É—Ö–∞—á—ñ–≤ –¥–ª—è "${event}"`);
            }
            return;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥—ñ—ó
        const eventContext = {
            event,
            data,
            timestamp: Date.now(),
            cancelled: false,
            stopPropagation: function() {
                this.cancelled = true;
            }
        };

        // –í–∏–∫–æ–Ω—É—î–º–æ —Å–ª—É—Ö–∞—á—ñ–≤
        const results = [];

        for (const listener of eventListeners) {
            if (eventContext.cancelled) break;

            try {
                const listenerStartTime = performance.now();

                // –í–∏–∫–æ–Ω—É—î–º–æ callback
                let result;
                if (config.asyncEvents || options.async) {
                    result = await executeAsync(listener, eventContext);
                } else {
                    result = executeSync(listener, eventContext);
                }

                results.push(result);

                // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                if (config.performanceTracking) {
                    const executionTime = performance.now() - listenerStartTime;
                    trackListenerPerformance(event, listener, executionTime);
                }

                // –í–∏–¥–∞–ª—è—î–º–æ once —Å–ª—É—Ö–∞—á—ñ–≤
                if (listener.options.once) {
                    off(event, listener.callback);
                }

            } catch (error) {
                if (config.errorHandling) {
                    console.error(`‚ùå [EventBus] –ü–æ–º–∏–ª–∫–∞ –≤ —Å–ª—É—Ö–∞—á—ñ –¥–ª—è "${event}":`, error);
                    results.push({ error });
                } else {
                    throw error;
                }
            }
        }

        // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å
        const totalTime = performance.now() - startTime;
        if (config.performanceTracking && totalTime > 10) {
            console.warn(`‚ö†Ô∏è [EventBus] –ü–æ–≤—ñ–ª—å–Ω–∞ –ø–æ–¥—ñ—è "${event}": ${totalTime.toFixed(2)}ms`);
        }

        return results;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞
     */
    function executeSync(listener, eventContext) {
        const context = listener.options.context || eventContext;
        return listener.callback.call(context, eventContext.data, eventContext);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞
     */
    async function executeAsync(listener, eventContext) {
        return new Promise((resolve, reject) => {
            queueMicrotask(() => {
                try {
                    const context = listener.options.context || eventContext;
                    const result = listener.callback.call(context, eventContext.data, eventContext);
                    resolve(result);
                } catch (error) {
                    reject(error);
                }
            });
        });
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ wildcard –ø–∞—Ç—Ç–µ—Ä–Ω—É
     */
    function matchWildcard(event, pattern) {
        const eventParts = event.split('.');
        const patternParts = pattern.split('.');

        if (patternParts.length !== eventParts.length && !pattern.endsWith('*')) {
            return false;
        }

        for (let i = 0; i < patternParts.length; i++) {
            if (patternParts[i] === '*') continue;
            if (patternParts[i] !== eventParts[i]) return false;
        }

        return true;
    }

    /**
     * –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é –≤ —ñ—Å—Ç–æ—Ä—ñ—é
     */
    function addToHistory(event, data) {
        eventHistory.push({
            event,
            data: config.debugging ? data : undefined,
            timestamp: Date.now()
        });

        if (eventHistory.length > maxHistorySize) {
            eventHistory.shift();
        }
    }

    /**
     * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–ª—É—Ö–∞—á–∞
     */
    function trackListenerPerformance(event, listener, executionTime) {
        const key = `${event}:${listener.callback.name || 'anonymous'}`;

        if (!metrics.listenerExecutionTime.has(key)) {
            metrics.listenerExecutionTime.set(key, {
                count: 0,
                total: 0,
                average: 0,
                max: 0
            });
        }

        const stats = metrics.listenerExecutionTime.get(key);
        stats.count++;
        stats.total += executionTime;
        stats.average = stats.total / stats.count;
        stats.max = Math.max(stats.max, executionTime);
    }

    /**
     * –û—á—ñ–∫—É–≤–∞—Ç–∏ –Ω–∞ –ø–æ–¥—ñ—é
     */
    function waitFor(event, timeout = 5000) {
        return new Promise((resolve, reject) => {
            const timer = setTimeout(() => {
                off(event, handler);
                reject(new Error(`Timeout waiting for event: ${event}`));
            }, timeout);

            const handler = (data) => {
                clearTimeout(timer);
                resolve(data);
            };

            once(event, handler);
        });
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ namespaced –µ–º—ñ—Ç–µ—Ä
     */
    function createNamespace(namespace) {
        return {
            on: (event, callback, options = {}) =>
                on(event, callback, { ...options, namespace }),

            once: (event, callback, options = {}) =>
                once(event, callback, { ...options, namespace }),

            off: (event, callback) => off(event, callback),

            emit: (event, data, options) => emit(event, data, options),

            clear: () => offNamespace(namespace)
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    function getStats() {
        const topEvents = Array.from(metrics.eventCounts.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10);

        const slowestListeners = Array.from(metrics.listenerExecutionTime.entries())
            .sort((a, b) => b[1].average - a[1].average)
            .slice(0, 10)
            .map(([key, stats]) => ({ listener: key, ...stats }));

        return {
            totalEvents: metrics.totalEvents,
            totalListeners: metrics.totalListeners,
            uniqueEvents: listeners.size,
            topEvents,
            slowestListeners,
            recentEvents: eventHistory.slice(-10)
        };
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ
     */
    function clear() {
        listeners.clear();
        eventHistory.length = 0;
        metrics.totalEvents = 0;
        metrics.totalListeners = 0;
        metrics.eventCounts.clear();
        metrics.listenerExecutionTime.clear();

        console.log('‚úÖ [EventBus] –í—Å—ñ —Å–ª—É—Ö–∞—á—ñ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω—ñ');
    }

    /**
     * –ù–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å–ª—É—Ö–∞—á—ñ
     */
    function debug() {
        console.group('üîç [EventBus] Debug Info');
        console.log('Listeners:', listeners);
        console.log('Stats:', getStats());
        console.log('Config:', config);
        console.groupEnd();
    }

    // –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –ø–æ–¥—ñ—ó —Å–∏—Å—Ç–µ–º–∏
    const EVENTS = {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
        USER_LOGGED_IN: 'user.logged_in',
        USER_LOGGED_OUT: 'user.logged_out',
        USER_UPDATED: 'user.updated',

        // –ë–∞–ª–∞–Ω—Å
        BALANCE_UPDATED: 'balance.updated',
        BALANCE_INSUFFICIENT: 'balance.insufficient',

        // –ì–∞–º–∞–Ω–µ—Ü—å
        WALLET_CONNECTED: 'wallet.connected',
        WALLET_DISCONNECTED: 'wallet.disconnected',
        WALLET_BALANCE_UPDATED: 'wallet.balance_updated',

        // –ó–∞–≤–¥–∞–Ω–Ω—è
        TASK_STARTED: 'task.started',
        TASK_COMPLETED: 'task.completed',
        TASK_FAILED: 'task.failed',
        TASK_CLAIMED: 'task.claimed',

        // Daily Bonus
        DAILY_CLAIMED: 'daily.claimed',
        DAILY_STREAK_UPDATED: 'daily.streak_updated',
        DAILY_RESET: 'daily.reset',

        // Flex
        FLEX_BALANCE_UPDATED: 'flex.balance_updated',
        FLEX_LEVEL_CLAIMED: 'flex.level_claimed',
        FLEX_LEVEL_AVAILABLE: 'flex.level_available',

        // –°–∏—Å—Ç–µ–º–∞
        APP_READY: 'app.ready',
        APP_ERROR: 'app.error',
        NETWORK_ONLINE: 'network.online',
        NETWORK_OFFLINE: 'network.offline',

        // UI
        TAB_CHANGED: 'ui.tab_changed',
        MODAL_OPENED: 'ui.modal_opened',
        MODAL_CLOSED: 'ui.modal_closed',
        LOADING_START: 'ui.loading_start',
        LOADING_END: 'ui.loading_end'
    };

    console.log('‚úÖ [EventBus] –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—ñ–π –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        on,
        once,
        off,
        offNamespace,
        emit,
        waitFor,
        createNamespace,
        getStats,
        clear,
        debug,
        EVENTS,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        configure: (options) => {
            Object.assign(config, options);
            console.log('‚öôÔ∏è [EventBus] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞:', config);
        }
    };
})();

console.log('‚úÖ [EventBus] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');