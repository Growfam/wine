/**
 * –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TON –≥–∞–º–∞–Ω—Ü—è –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø V3 - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
 */

window.WalletChecker = (function() {
    'use strict';

    console.log('üëõ [WalletChecker-V3] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
    const { CacheManager, RequestManager, EventBus } = window;

    // Namespace –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
    const CACHE_NAMESPACE = CacheManager.NAMESPACES.WALLET;

    // RequestManager –∫–ª—ñ—î–Ω—Ç
    const apiClient = RequestManager.createClient('wallet', {
        rateLimitDelay: 2000,
        maxRetries: 3
    });

    // EventBus namespace
    const eventBus = EventBus.createNamespace('wallet');

    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    const state = {
        tonConnectUI: null,
        isInitialized: false,
        userId: null,
        isConnecting: false,
        initPromise: null,
        pollingInterval: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        manifestUrl: window.TasksConstants?.TON_CONNECT?.MANIFEST_URL || '/tonconnect-manifest.json',
        network: window.TasksConstants?.TON_CONNECT?.NETWORK || 'mainnet',
        pollingIntervalMs: 30000 // 30 —Å–µ–∫—É–Ω–¥
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    async function init(userId = null) {
        console.log('üöÄ [WalletChecker-V3] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');

        if (state.isInitialized) {
            console.log('‚úÖ [WalletChecker-V3] –í–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return true;
        }

        if (state.initPromise) {
            console.log('‚è≥ [WalletChecker-V3] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ');
            return state.initPromise;
        }

        state.initPromise = initInternal(userId);

        try {
            const result = await state.initPromise;
            return result;
        } finally {
            state.initPromise = null;
        }
    }

    /**
     * –í–Ω—É—Ç—Ä—ñ—à–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
     */
    async function initInternal(userId) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ userId
            state.userId = userId || await getUserIdFromStore();

            if (!state.userId) {
                console.warn('‚ö†Ô∏è [WalletChecker-V3] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
            const cachedWallet = CacheManager.get(CACHE_NAMESPACE, `status_${state.userId}`);
            if (cachedWallet) {
                updateWalletUI(cachedWallet);
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ TON Connect
            await initializeTonConnect();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫–∏
            setupEventSubscriptions();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
            startPolling();

            state.isInitialized = true;

            // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
            EventBus.emit('manager.wallet.ready', { userId: state.userId });

            // –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => checkWalletConnection(), 2000);

            console.log('‚úÖ [WalletChecker-V3] –ú–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return true;

        } catch (error) {
            console.error('‚ùå [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            window.TasksUtils?.showToast('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TON Connect', 'error');
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è userId –∑—ñ Store
     */
    async function getUserIdFromStore() {
        // –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        const userId = window.TasksStore?.selectors?.getUserId?.();
        if (userId) return userId;

        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å - —á–µ–∫–∞—î–º–æ –Ω–∞ –ø–æ–¥—ñ—é
        return new Promise((resolve) => {
            const unsubscribe = EventBus.on(EventBus.EVENTS.USER_LOGGED_IN, (data) => {
                unsubscribe();
                resolve(data.userId);
            });

            // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                unsubscribe();
                resolve(null);
            }, 10000);
        });
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect UI
     */
    async function initializeTonConnect() {
        console.log('üîß [WalletChecker-V3] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î
        if (window.tonConnectUI) {
            console.log('‚úÖ [WalletChecker-V3] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π TON Connect UI');
            state.tonConnectUI = window.tonConnectUI;

            state.tonConnectUI.onStatusChange(handleWalletStatusChange);
            return;
        }

        // –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        await waitForTonConnectUI();

        try {
            state.tonConnectUI = new window.TON_CONNECT_UI.TonConnectUI({
                manifestUrl: config.manifestUrl,
                buttonRootId: 'ton-connect-button',
                actionsConfiguration: {
                    twaReturnUrl: 'https://t.me/WINIX_Official_bot'
                }
            });

            window.tonConnectUI = state.tonConnectUI;

            state.tonConnectUI.onStatusChange(handleWalletStatusChange);

            console.log('‚úÖ [WalletChecker-V3] TON Connect UI —Å—Ç–≤–æ—Ä–µ–Ω–æ');

        } catch (error) {
            if (error.message?.includes('Cannot define multiple custom elements')) {
                console.warn('‚ö†Ô∏è [WalletChecker-V3] TON Connect –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ');

                await new Promise(resolve => setTimeout(resolve, 500));

                if (window.tonConnectUI) {
                    state.tonConnectUI = window.tonConnectUI;
                    state.tonConnectUI.onStatusChange(handleWalletStatusChange);
                    return;
                }
            }
            throw error;
        }
    }

    /**
     * –ß–µ–∫–∞—î–º–æ –Ω–∞ TON Connect UI
     */
    async function waitForTonConnectUI() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 20;

            const checkInterval = setInterval(() => {
                attempts++;

                if (window.TON_CONNECT_UI) {
                    clearInterval(checkInterval);
                    resolve();
                } else if (attempts >= maxAttempts) {
                    clearInterval(checkInterval);
                    reject(new Error('TON Connect UI –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ'));
                }
            }, 500);
        });
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    async function checkWalletConnection() {
        console.log('üîç [WalletChecker-V3] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');

        const store = window.TasksStore;
        if (!store) {
            console.error('‚ùå [WalletChecker-V3] Store –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return false;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        store.actions.setWalletChecking(true);

        try {
            const isConnected = state.tonConnectUI?.connected || false;
            console.log('üìä [WalletChecker-V3] TON Connect —Å—Ç–∞—Ç—É—Å:', isConnected);

            if (isConnected) {
                const wallet = state.tonConnectUI.wallet;
                const addresses = extractWalletAddresses(wallet);

                if (!addresses) {
                    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
                const cacheKey = `status_${state.userId}`;
                const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);

                if (cached && cached.address === addresses.userFriendly) {
                    console.log('‚úÖ [WalletChecker-V3] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å');
                    updateWalletState(wallet, cached);

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å FLEX –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    checkFlexBalance(addresses.userFriendly);

                    return true;
                }

                // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
                await verifyWalletOnBackend(wallet);

                return true;

            } else {
                console.log('‚ùå [WalletChecker-V3] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

                // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
                CacheManager.invalidateNamespace(CACHE_NAMESPACE);

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                store.actions.setWalletConnected(false);
                store.actions.disconnectWallet();

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                updateWalletUI({ connected: false });

                return false;
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error);

            if (!error.message?.includes('429')) {
                store.actions.setError('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è');
            }

            return false;

        } finally {
            store.actions.setWalletChecking(false);
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
     */
    async function verifyWalletOnBackend(wallet) {
        console.log('üåê [WalletChecker-V3] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ');

        const addresses = extractWalletAddresses(wallet);
        if (!addresses) {
            throw new Error('–ê–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è –≤—ñ–¥—Å—É—Ç–Ω—ñ');
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
            const statusResponse = await apiClient.execute(
                `check_status_${state.userId}`,
                () => window.TasksAPI.wallet.checkStatus(state.userId),
                { priority: 'high' }
            );

            if (statusResponse.data?.connected &&
                (statusResponse.data.address === addresses.userFriendly ||
                 statusResponse.data.address === addresses.raw)) {

                console.log('‚úÖ [WalletChecker-V3] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π');

                // –ö–µ—à—É—î–º–æ
                CacheManager.set(CACHE_NAMESPACE, `status_${state.userId}`, statusResponse.data);

                updateWalletState(wallet, statusResponse.data);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å FLEX
                checkFlexBalance(addresses.userFriendly);

                return;
            }

            // –†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å
            console.log('üîÑ [WalletChecker-V3] –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è');

            const walletData = {
                address: addresses.raw,
                addressFriendly: addresses.userFriendly,
                chain: wallet.account.chain || '-239',
                publicKey: wallet.account.publicKey || '',
                provider: wallet.device.appName || 'unknown',
                timestamp: Date.now()
            };

            const connectResponse = await apiClient.execute(
                `connect_${state.userId}`,
                () => window.TasksAPI.wallet.connect(state.userId, walletData),
                { priority: 'high', deduplicate: false }
            );

            if (connectResponse.status === 'success') {
                // –ö–µ—à—É—î–º–æ
                CacheManager.set(CACHE_NAMESPACE, `status_${state.userId}`, connectResponse.data.wallet);

                updateWalletState(wallet, connectResponse.data);

                if (connectResponse.data?.first_connection) {
                    showFirstConnectionBonus(connectResponse.data.bonus);
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å FLEX
                checkFlexBalance(addresses.userFriendly);
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);

            if (error.data?.error_code === 'WALLET_ALREADY_CONNECTED') {
                window.TasksUtils?.showToast('–¶–µ–π –≥–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ —ñ–Ω—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞', 'error');
                await disconnectWallet();
            } else if (error.data?.error_code === 'INVALID_ADDRESS') {
                window.TasksUtils?.showToast('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ TON –≥–∞–º–∞–Ω—Ü—è', 'error');
            }

            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX
     */
    async function checkFlexBalance(address) {
        console.log('üíé [WalletChecker-V3] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX');

        const cacheKey = `flex_balance_${address}`;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        const cached = CacheManager.get(CACHE_NAMESPACE, cacheKey);
        if (cached !== null) {
            console.log('üì¶ [WalletChecker-V3] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å:', cached);
            updateFlexBalance(cached);
            return;
        }

        try {
            const response = await apiClient.execute(
                cacheKey,
                () => window.TasksAPI.flex.getBalance(state.userId, address),
                { priority: 'low' }
            );

            if (response.balance !== undefined) {
                const balance = parseInt(response.balance);

                // –ö–µ—à—É—î–º–æ
                CacheManager.set(CACHE_NAMESPACE, cacheKey, balance, 30000); // 30 —Å–µ–∫

                // –û–Ω–æ–≤–ª—é—î–º–æ
                updateFlexBalance(balance);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ
                checkAvailableLevels(balance);
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX
     */
    function updateFlexBalance(balance) {
        // –û–Ω–æ–≤–ª—é—î–º–æ Store
        window.TasksStore.actions.setFlexBalance(balance);
        window.TasksStore.actions.updateBalance({ flex: balance });

        // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
        EventBus.emit(EventBus.EVENTS.FLEX_BALANCE_UPDATED, {
            oldBalance: window.TasksStore.selectors.getFlexBalance(),
            newBalance: balance
        });
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
     */
    function checkAvailableLevels(flexBalance) {
        const flexLevels = window.TasksConstants?.FLEX_LEVELS || {};
        let availableCount = 0;

        Object.entries(flexLevels).forEach(([levelKey, levelData]) => {
            const isAvailable = flexBalance >= levelData.required;

            if (isAvailable) {
                availableCount++;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ Store
            window.TasksStore.actions.setFlexLevelAvailable(levelKey, isAvailable);
        });

        if (availableCount > 0) {
            // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
            EventBus.emit(EventBus.EVENTS.FLEX_LEVEL_AVAILABLE, { count: availableCount });
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ –∑ wallet –æ–±'—î–∫—Ç–∞
     */
    function extractWalletAddresses(wallet) {
        if (!wallet?.account?.address) {
            return null;
        }

        const rawAddress = wallet.account.address;
        let userFriendlyAddress = wallet.account.addressFriendly ||
                                  wallet.account.friendlyAddress ||
                                  wallet.account.userFriendlyAddress;

        // Fallback –¥–ª—è user-friendly –∞–¥—Ä–µ—Å–∏
        if (!userFriendlyAddress) {
            if (rawAddress.startsWith('UQ') || rawAddress.startsWith('EQ')) {
                userFriendlyAddress = rawAddress;
            }
        }

        return {
            raw: rawAddress,
            userFriendly: userFriendlyAddress || rawAddress
        };
    }

    /**
     * –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å
     */
    async function connectWallet() {
        console.log('üîå [WalletChecker-V3] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');

        if (state.tonConnectUI?.connected) {
            console.log('‚ö†Ô∏è [WalletChecker-V3] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            window.TasksUtils?.showToast('–ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'info');
            await checkWalletConnection();
            return;
        }

        if (state.isConnecting) {
            console.log('‚è∏Ô∏è [WalletChecker-V3] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ');
            return;
        }

        state.isConnecting = true;

        try {
            updateConnectButton(true);

            await state.tonConnectUI.connectWallet();
            console.log('‚úÖ [WalletChecker-V3] –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');

            window.TasksUtils.showToast('–û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', 'info');

        } catch (error) {
            console.error('‚ùå [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);

            if (error.message?.includes('wallet already connected')) {
                await checkWalletConnection();
                return;
            }

            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è', 'error');

        } finally {
            state.isConnecting = false;
            setTimeout(() => updateConnectButton(false), 3000);
        }
    }

    /**
     * –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å
     */
    async function disconnectWallet() {
        console.log('üîå [WalletChecker-V3] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');

        const confirmed = confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å?');
        if (!confirmed) return;

        try {
            if (state.tonConnectUI?.connected) {
                await state.tonConnectUI.disconnect();
            }

            // –û—á–∏—â–∞—î–º–æ –∫–µ—à
            CacheManager.invalidateNamespace(CACHE_NAMESPACE);

            // –û–Ω–æ–≤–ª—é—î–º–æ Store
            window.TasksStore.actions.disconnectWallet();

            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            updateWalletUI({ connected: false });

            window.TasksUtils.showToast('–ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'info');

            // –°–ø–æ–≤—ñ—â–∞—î–º–æ –±–µ–∫–µ–Ω–¥
            if (state.userId) {
                try {
                    await window.TasksAPI.wallet.disconnect(state.userId);
                } catch (error) {
                    console.warn('‚ö†Ô∏è [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∫–µ–Ω–¥—É:', error);
                }
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è', 'error');
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è
     */
    const handleWalletStatusChange = window.TasksUtils.debounce(async (wallet) => {
        console.log('üîÑ [WalletChecker-V3] –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è');

        if (wallet) {
            console.log('‚úÖ [WalletChecker-V3] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            state.isConnecting = false;
            updateConnectButton(false);

            try {
                await verifyWalletOnBackend(wallet);
            } catch (error) {
                console.error('‚ùå [WalletChecker-V3] –ü–æ–º–∏–ª–∫–∞:', error);

                if (error.message?.includes('Network error')) {
                    await disconnectWallet();
                }
            }

        } else {
            console.log('‚ùå [WalletChecker-V3] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            // –û—á–∏—â–∞—î–º–æ –∫–µ—à
            CacheManager.invalidateNamespace(CACHE_NAMESPACE);

            // –û–Ω–æ–≤–ª—é—î–º–æ Store
            window.TasksStore.actions.disconnectWallet();

            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            updateWalletUI({ connected: false });
        }
    }, 1000);

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –≥–∞–º–∞–Ω—Ü—è –≤ Store
     */
    function updateWalletState(wallet, serverData) {
        console.log('üîÑ [WalletChecker-V3] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥–∞–º–∞–Ω—Ü—è');

        const store = window.TasksStore;
        const addresses = extractWalletAddresses(wallet);

        store.actions.setWalletConnected(true);
        store.actions.setWalletAddress({
            address: serverData.address || addresses.userFriendly,
            rawAddress: serverData.raw_address || addresses.raw,
            chainId: wallet.account.chain,
            provider: wallet.device.appName,
            connected_at: serverData.connected_at,
            status: serverData.status
        });

        if (serverData.balance?.flex !== undefined) {
            store.actions.setFlexBalance(serverData.balance.flex);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        updateWalletUI({
            connected: true,
            address: serverData.address || addresses.userFriendly
        });

        // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
        EventBus.emit(EventBus.EVENTS.WALLET_CONNECTED, {
            address: serverData.address || addresses.userFriendly
        });
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –≥–∞–º–∞–Ω—Ü—è
     */
    function updateWalletUI(walletData) {
        EventBus.emit('wallet.ui.update', walletData);

        // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø—Ä—è–º–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (walletData.connected) {
            const statusContainer = document.querySelector('.wallet-status-container');
            const tasksContainer = document.getElementById('flex-tasks');
            const connectedStatus = document.getElementById('wallet-connected-status');

            if (statusContainer) statusContainer.style.display = 'none';
            if (tasksContainer) tasksContainer.style.display = 'block';
            if (connectedStatus) connectedStatus.style.display = 'block';

            if (walletData.address) {
                const addressDisplay = document.getElementById('wallet-address-display');
                if (addressDisplay) {
                    addressDisplay.textContent = formatAddress(walletData.address);
                }
            }
        } else {
            const statusContainer = document.querySelector('.wallet-status-container');
            const tasksContainer = document.getElementById('flex-tasks');
            const connectedStatus = document.getElementById('wallet-connected-status');

            if (statusContainer) statusContainer.style.display = 'block';
            if (tasksContainer) tasksContainer.style.display = 'none';
            if (connectedStatus) connectedStatus.style.display = 'none';
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
     */
    function formatAddress(address) {
        if (!address || address.length < 20) return address;
        return `${address.slice(0, 8)}...${address.slice(-6)}`;
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    function updateConnectButton(isConnecting) {
        const buttons = document.querySelectorAll('.connect-wallet-redirect');
        buttons.forEach(button => {
            button.disabled = isConnecting;
            button.textContent = isConnecting ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...' : '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–æ—à–µ–ª–µ–∫';
            button.style.opacity = isConnecting ? '0.7' : '';
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—à–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    function showFirstConnectionBonus(bonus) {
        if (!bonus || (!bonus.winix && !bonus.tickets && !bonus.amount)) {
            return;
        }

        const winixAmount = bonus.winix || bonus.amount || 0;
        let message = '–í—ñ—Ç–∞—î–º–æ! –ë–æ–Ω—É—Å –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è: ';

        if (winixAmount > 0) {
            message += `+${winixAmount} WINIX`;
        }
        if (bonus.tickets) {
            message += ` —Ç–∞ +${bonus.tickets} tickets`;
        }

        window.TasksUtils.showToast(message, 'success', 5000);

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        const currentBalance = window.TasksStore.selectors.getUserBalance();
        window.TasksStore.actions.updateBalance({
            winix: currentBalance.winix + winixAmount,
            tickets: currentBalance.tickets + (bonus.tickets || 0)
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function startPolling() {
        // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é
        stopPolling();

        state.pollingInterval = setInterval(() => {
            if (!document.hidden && state.isInitialized) {
                checkWalletConnection();
            }
        }, config.pollingIntervalMs);
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function stopPolling() {
        if (state.pollingInterval) {
            clearInterval(state.pollingInterval);
            state.pollingInterval = null;
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–¥—ñ—ó
     */
    function setupEventSubscriptions() {
        // –í–∏–¥–∏–º—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && state.isInitialized) {
                const lastCheck = CacheManager.get(CACHE_NAMESPACE, 'lastCheckTime') || 0;
                if (Date.now() - lastCheck > 60000) {
                    checkWalletConnection();
                }
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        document.addEventListener('click', async (e) => {
            if (e.target.id === 'wallet-disconnect-btn' ||
                e.target.closest('#wallet-disconnect-btn')) {
                e.preventDefault();
                await disconnectWallet();
            }
        });

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–ø–∏—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        EventBus.on('wallet.check', () => {
            checkWalletConnection();
        });

        // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–ø–∏—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        EventBus.on('wallet.connect', () => {
            connectWallet();
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å
     */
    function getStatus() {
        return {
            initialized: state.isInitialized,
            connected: state.tonConnectUI?.connected || false,
            address: window.TasksStore?.selectors?.getWalletAddress(),
            flexBalance: window.TasksStore?.selectors?.getFlexBalance() || 0,
            userId: state.userId,
            isConnecting: state.isConnecting
        };
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [WalletChecker-V3] –ó–Ω–∏—â–µ–Ω–Ω—è –º–æ–¥—É–ª—è');

        // –ó—É–ø–∏–Ω—è—î–º–æ polling
        stopPolling();

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        state.isInitialized = false;
        state.isConnecting = false;
        state.tonConnectUI = null;

        console.log('‚úÖ [WalletChecker-V3] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [WalletChecker-V3] –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        checkWalletConnection,
        connectWallet,
        disconnectWallet,
        checkFlexBalance: () => {
            const address = window.TasksStore?.selectors?.getWalletAddress();
            if (address) checkFlexBalance(address);
        },
        getStatus,
        destroy
    };

})();

console.log('‚úÖ [WalletChecker-V3] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');