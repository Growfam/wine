/**
 * –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TON –≥–∞–º–∞–Ω—Ü—è –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ TON Connect —Ç–∞ —Å–µ—Ä–≤–µ—Ä–æ–º
 */

window.WalletChecker = (function() {
    'use strict';

    console.log('üëõ [WalletChecker] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ì–ê–ú–ê–ù–¶–Ø =====');

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        tonConnectUI: null,
        checkInterval: null,
        isInitialized: false,
        lastCheckTime: null,
        connectionAttempts: 0,
        userId: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        checkIntervalMs: window.TasksConstants?.TIMERS?.AUTO_CHECK_INTERVAL || 5 * 60 * 1000,
        maxConnectionAttempts: 3,
        manifestUrl: window.TasksConstants?.TON_CONNECT?.MANIFEST_URL || '/tonconnect-manifest.json',
        network: window.TasksConstants?.TON_CONNECT?.NETWORK || 'mainnet'
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
async function init(userId = null) {
    console.log('üöÄ [WalletChecker] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
    console.log('‚öôÔ∏è [WalletChecker] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', config);
    console.log('üë§ [WalletChecker] –ü–µ—Ä–µ–¥–∞–Ω–∏–π userId:', userId);

    try {
        // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: 1) –ø–µ—Ä–µ–¥–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, 2) Store, 3) WinixAPI
        if (userId) {
            state.userId = userId;
            console.log('‚úÖ [WalletChecker] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π userId:', userId);
        } else {
            // –°–ø—Ä–æ–±—É—î–º–æ –∑—ñ Store
            const storeUserId = window.TasksStore?.selectors?.getUserId?.();
            if (storeUserId) {
                state.userId = storeUserId;
                console.log('‚úÖ [WalletChecker] userId –æ—Ç—Ä–∏–º–∞–Ω–æ –∑—ñ Store:', storeUserId);
            } else {
                // –°–ø—Ä–æ–±—É—î–º–æ –∑ WinixAPI
                const apiUserId = window.WinixAPI?.getUserId?.();
                if (apiUserId) {
                    state.userId = apiUserId;
                    console.log('‚úÖ [WalletChecker] userId –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ WinixAPI:', apiUserId);
                }
            }
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (state.userId && typeof state.userId === 'string') {
            state.userId = parseInt(state.userId, 10);
            console.log('üîÑ [WalletChecker] userId –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —á–∏—Å–ª–æ:', state.userId);
        }

        if (!state.userId) {
            console.error('‚ùå [WalletChecker] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—ñ');
            console.error('üìä [WalletChecker] –î–æ—Å—Ç—É–ø–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞:', {
                parameter: userId,
                store: window.TasksStore?.selectors?.getUserId?.(),
                api: window.WinixAPI?.getUserId?.()
            });

            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –æ–¥—Ä–∞–∑—É - –¥–∞—î–º–æ —à–∞–Ω—Å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ userId
            console.warn('‚ö†Ô∏è [WalletChecker] –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ userId - —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞');
            // throw new Error('User ID not found');
        } else {
            console.log('‚úÖ [WalletChecker] User ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ:', state.userId);
        }

        console.log('‚úÖ [WalletChecker] User ID –æ—Ç—Ä–∏–º–∞–Ω–æ:', state.userId);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å TON Connect
            if (!window.TON_CONNECT_UI) {
                console.error('‚ùå [WalletChecker] TON Connect UI –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                throw new Error('TON Connect UI –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ TON Connect UI
            await initializeTonConnect();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π
            setupEventListeners();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
            await checkWalletConnection();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
            startPeriodicCheck();

            state.isInitialized = true;
            console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            window.TasksUtils?.showToast('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TON Connect', 'error');
            throw error;
        }
    }

   /**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect UI
 */
async function initializeTonConnect() {
    console.log('üîß [WalletChecker] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect UI...');

    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –∫–Ω–æ–ø–∫–∞ TON Connect
        const existingButton = document.querySelector('tc-root');
        if (existingButton) {
            console.log('‚ö†Ô∏è [WalletChecker] TON Connect –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');

            // –Ø–∫—â–æ —î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç tonConnectUI, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
            if (window.tonConnectUI) {
                state.tonConnectUI = window.tonConnectUI;
                console.log('‚úÖ [WalletChecker] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π TON Connect UI');

                // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
                state.tonConnectUI.onStatusChange(wallet => {
                    console.log('üîÑ [WalletChecker] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è –∑–º—ñ–Ω–∏–≤—Å—è:', wallet);
                    handleWalletStatusChange(wallet);
                });

                return;
            }
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        state.tonConnectUI = new window.TON_CONNECT_UI.TonConnectUI({
            manifestUrl: config.manifestUrl,
            buttonRootId: 'ton-connect-button'
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
        window.tonConnectUI = state.tonConnectUI;

        console.log('‚úÖ [WalletChecker] TON Connect UI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        console.log('üìä [WalletChecker] Manifest URL:', config.manifestUrl);

        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
        state.tonConnectUI.onStatusChange(wallet => {
            console.log('üîÑ [WalletChecker] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è –∑–º—ñ–Ω–∏–≤—Å—è:', wallet);
            handleWalletStatusChange(wallet);
        });

    } catch (error) {
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –¥—É–±–ª—ñ–∫–∞—Ç–æ–º custom element
        if (error.message && error.message.includes('Cannot define multiple custom elements')) {
            console.warn('‚ö†Ô∏è [WalletChecker] TON Connect –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π');

            // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —ñ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π
            await new Promise(resolve => setTimeout(resolve, 100));

            if (window.tonConnectUI) {
                state.tonConnectUI = window.tonConnectUI;
                console.log('‚úÖ [WalletChecker] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π TON Connect UI (–ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏)');
                return;
            }
        }

        console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TON Connect:', error);
        throw error;
    }
}
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    async function checkWalletConnection() {
        console.log('üîç [WalletChecker] === –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');
        console.log('üïê [WalletChecker] –ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', new Date().toISOString());

        const store = window.TasksStore;
        if (!store) {
            console.error('‚ùå [WalletChecker] Store –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return false;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        store.actions.setWalletChecking(true);

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –≥–∞–º–∞–Ω–µ—Ü—å —á–µ—Ä–µ–∑ TON Connect
            const isConnected = state.tonConnectUI?.connected || false;
            console.log('üìä [WalletChecker] TON Connect —Å—Ç–∞—Ç—É—Å:', isConnected);

            if (isConnected) {
                const wallet = state.tonConnectUI.wallet;
                console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                console.log('üìç [WalletChecker] –ê–¥—Ä–µ—Å–∞:', wallet.account.address);
                console.log('üè∑Ô∏è [WalletChecker] –ü—Ä–æ–≤–∞–π–¥–µ—Ä:', wallet.device.appName);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ/—Ä–µ—î—Å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
                await verifyWalletOnBackend(wallet);

                state.lastCheckTime = Date.now();
                return true;

            } else {
                console.log('‚ùå [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
                store.actions.setWalletConnected(false);
                store.actions.disconnectWallet();

                // –ü–æ–∫–∞–∑—É—î–º–æ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                showWalletConnectionUI();

                return false;
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error);
            store.actions.setError('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è');
            return false;

        } finally {
            store.actions.setWalletChecking(false);
            console.log('‚úÖ [WalletChecker] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
     */
    async function verifyWalletOnBackend(wallet) {
    console.log('üåê [WalletChecker] === –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –ù–ê –ë–ï–ö–ï–ù–î–Ü ===');

    // –í–ê–ñ–õ–ò–í–û: –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∞–¥—Ä–µ—Å—É
    const address = wallet.account.address;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∞ TON –∞–¥—Ä–µ—Å–∞
    if (!address || (!address.startsWith('EQ') && !address.startsWith('UQ'))) {
        console.error('‚ùå [WalletChecker] –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è:', address);
        throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ TON –≥–∞–º–∞–Ω—Ü—è');
    }

    const chain = wallet.account.chain || '-239';
    const publicKey = wallet.account.publicKey;

    console.log('üìä [WalletChecker] –î–∞–Ω—ñ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', {
        userId: state.userId,
        address: address,  // <-- –¶–ï –ú–ê–Ñ –ë–£–¢–ò TON –ê–î–†–ï–°–ê!
        chain: chain,
        provider: wallet.device.appName
    });

    try {
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
        const statusResponse = await window.TasksAPI.wallet.checkStatus(state.userId);

        if (statusResponse.connected && statusResponse.address === address) {
            console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π');
            updateWalletState(wallet, statusResponse);
            await checkFlexBalance(address);
            return;
        }

        // –†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å - userId –≤ URL, –∞–¥—Ä–µ—Å–∞ –≤ body
        console.log('üîÑ [WalletChecker] –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ...');

        const connectResponse = await window.TasksAPI.wallet.connect(
            state.userId,  // userId –¥–ª—è URL
            {
                address: address,  // TON –∞–¥—Ä–µ—Å–∞ –≤ body!
                chain: chain,
                publicKey: publicKey,
                provider: wallet.device.appName,
                timestamp: Date.now()
            }
        );

        console.log('‚úÖ [WalletChecker] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:', connectResponse);

        if (connectResponse.success) {
            updateWalletState(wallet, connectResponse);

            if (connectResponse.firstConnection) {
                console.log('üéÅ [WalletChecker] –ü–µ—Ä—à–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è! –ë–æ–Ω—É—Å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π');
                showFirstConnectionBonus(connectResponse.bonus);
            }

            await checkFlexBalance(address);
        } else {
            throw new Error(connectResponse.message || 'Failed to connect wallet');
        }

    } catch (error) {
        console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ:', error);

        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—É –∞–¥—Ä–µ—Å—É - –ø–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ
        if (error.message.includes('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞')) {
            window.TasksUtils?.showToast(
                '–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ TON –≥–∞–º–∞–Ω—Ü—è. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ –≥–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ.',
                'error'
            );
        } else {
            window.TasksUtils?.showToast(
                error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è',
                'error'
            );
        }

        throw error;
    }
}

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –≥–∞–º–∞–Ω—Ü—è –≤ Store
     */
    function updateWalletState(wallet, serverData) {
        console.log('üîÑ [WalletChecker] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥–∞–º–∞–Ω—Ü—è');

        const store = window.TasksStore;

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        store.actions.setWalletConnected(true);
        store.actions.setWalletAddress({
            address: wallet.account.address,
            chainId: wallet.account.chain,
            provider: wallet.device.appName
        });

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        if (serverData.flexBalance !== undefined) {
            store.actions.setFlexBalance(serverData.flexBalance);
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ Flex –∑–∞–≤–¥–∞–Ω–Ω—è
        showFlexTasks();
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX
     */
    async function checkFlexBalance(address) {
        console.log('üíé [WalletChecker] === –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–õ–ê–ù–°–£ FLEX ===');

        try {
            const response = await window.TasksAPI.flex.getBalance(state.userId, address);

            console.log('üí∞ [WalletChecker] –ë–∞–ª–∞–Ω—Å FLEX:', response);

            if (response.balance !== undefined) {
                const balance = parseInt(response.balance);
                console.log('‚úÖ [WalletChecker] –ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ:', window.TasksUtils.formatNumber(balance));

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –≤ —Å—Ç–æ—Ä—ñ
                window.TasksStore.actions.setFlexBalance(balance);
                window.TasksStore.actions.updateBalance({ flex: balance });

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ
                await checkAvailableLevels(balance);
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
            // –ù–µ –±–ª–æ–∫—É—î–º–æ —Ä–æ–±–æ—Ç—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –±–∞–ª–∞–Ω—Å—É
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
     */
    async function checkAvailableLevels(flexBalance) {
        console.log('üéØ [WalletChecker] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤...');
        console.log('üíé [WalletChecker] –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:', window.TasksUtils.formatNumber(flexBalance));

        try {
            // –ó–∞–ø–∏—Ç—É—î–º–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ
            const response = await window.TasksAPI.flex.checkLevels(state.userId, flexBalance);

            let availableCount = 0;

            Object.entries(response.levels).forEach(([levelKey, levelData]) => {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ä—ñ–≤–Ω—è –≤ Store
                window.TasksStore.actions.setFlexLevelAvailable(levelKey, levelData.available);

                if (levelData.available && !levelData.claimedToday) {
                    availableCount++;
                }

                console.log(`üìä [WalletChecker] ${levelKey}:`, levelData);
            });

            console.log(`‚úÖ [WalletChecker] –î–æ—Å—Ç—É–ø–Ω–æ —Ä—ñ–≤–Ω—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: ${availableCount}`);

            if (availableCount > 0) {
                window.TasksUtils.showToast(
                    `–î–æ—Å—Ç—É–ø–Ω–æ ${availableCount} ${availableCount === 1 ? '–≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞' : '–≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'}!`,
                    'success'
                );
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä—ñ–≤–Ω—ñ–≤:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    function showWalletConnectionUI() {
        console.log('üîå [WalletChecker] –ü–æ–∫–∞–∑—É—î–º–æ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');

        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É TON Connect —è–∫—â–æ —î
        const tonConnectButton = document.getElementById('ton-connect-button');
        if (tonConnectButton) {
            tonConnectButton.style.display = 'block';
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É
        const statusText = document.getElementById('wallet-connection-status');
        if (statusText) {
            statusText.textContent = '–ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ';
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –±–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        const statusContainer = document.querySelector('.wallet-status-container');
        if (statusContainer) {
            statusContainer.style.display = 'block';
        }

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        const tasksContainer = document.getElementById('flex-tasks');
        if (tasksContainer) {
            tasksContainer.style.display = 'none';
        }

        console.log('‚úÖ [WalletChecker] UI –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ Flex –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function showFlexTasks() {
        console.log('üìã [WalletChecker] –ü–æ–∫–∞–∑—É—î–º–æ Flex –∑–∞–≤–¥–∞–Ω–Ω—è');

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É TON Connect
        const tonConnectButton = document.getElementById('ton-connect-button');
        if (tonConnectButton) {
            tonConnectButton.style.display = 'none';
        }

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –±–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        const statusContainer = document.querySelector('.wallet-status-container');
        if (statusContainer) {
            statusContainer.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        const tasksContainer = document.getElementById('flex-tasks');
        if (tasksContainer) {
            tasksContainer.style.display = 'block';
        }
    }

    /**
     * –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å
     */
    async function connectWallet() {
        console.log('üîå [WalletChecker] === –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');

        if (!state.tonConnectUI) {
            console.error('‚ùå [WalletChecker] TON Connect UI –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }

        state.connectionAttempts++;
        console.log(`üîÑ [WalletChecker] –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è #${state.connectionAttempts}`);

        try {
            // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            await state.tonConnectUI.connectWallet();
            console.log('‚úÖ [WalletChecker] –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            window.TasksUtils.showToast('–û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', 'info');

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);

            if (state.connectionAttempts >= config.maxConnectionAttempts) {
                console.error('‚ùå [WalletChecker] –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±');
                window.TasksUtils.showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ', 'error');
                state.connectionAttempts = 0;
            }
        }
    }

    /**
     * –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å
     */
    async function disconnectWallet() {
        console.log('üîå [WalletChecker] === –í–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');

        if (!state.tonConnectUI) {
            console.error('‚ùå [WalletChecker] TON Connect UI –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }

        try {
            // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
            await window.TasksAPI.wallet.disconnect(state.userId);

            // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤ TON Connect
            await state.tonConnectUI.disconnect();

            console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
            window.TasksStore.actions.disconnectWallet();

            // –ü–æ–∫–∞–∑—É—î–º–æ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            showWalletConnectionUI();

            window.TasksUtils.showToast('–ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'info');

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è', 'error');
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è
     */
    async function handleWalletStatusChange(wallet) {
        console.log('üîÑ [WalletChecker] === –û–ë–†–û–ë–ö–ê –ó–ú–Ü–ù–ò –°–¢–ê–¢–£–°–£ ===');

        if (wallet) {
            console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', wallet);

            // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
            state.connectionAttempts = 0;

            // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
            try {
                await verifyWalletOnBackend(wallet);
            } catch (error) {
                // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó - –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ
                console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å');
                await disconnectWallet();
            }

        } else {
            console.log('‚ùå [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
            window.TasksStore.actions.disconnectWallet();
            showWalletConnectionUI();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—à–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    function showFirstConnectionBonus(bonus) {
        console.log('üéÅ [WalletChecker] === –ë–û–ù–£–° –ó–ê –ü–ï–†–®–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø ===');

        if (!bonus || (!bonus.winix && !bonus.tickets)) {
            console.warn('‚ö†Ô∏è [WalletChecker] –ë–æ–Ω—É—Å –Ω–µ –Ω–∞–¥–∞–Ω–∏–π');
            return;
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let message = '–í—ñ—Ç–∞—î–º–æ! –ë–æ–Ω—É—Å –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è: ';
        if (bonus.winix) message += `+${bonus.winix} WINIX`;
        if (bonus.tickets) message += ` —Ç–∞ +${bonus.tickets} tickets`;

        window.TasksUtils.showToast(message, 'success', 5000);

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏
        const currentBalance = window.TasksStore.selectors.getUserBalance();
        window.TasksStore.actions.updateBalance({
            winix: currentBalance.winix + (bonus.winix || 0),
            tickets: currentBalance.tickets + (bonus.tickets || 0)
        });

        console.log('‚úÖ [WalletChecker] –ë–æ–Ω—É—Å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ:', bonus);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function startPeriodicCheck() {
        console.log('‚è∞ [WalletChecker] –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
        console.log(`‚è±Ô∏è [WalletChecker] –Ü–Ω—Ç–µ—Ä–≤–∞–ª: ${config.checkIntervalMs / 1000 / 60} —Ö–≤–∏–ª–∏–Ω`);

        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —è–∫—â–æ —î
        if (state.checkInterval) {
            clearInterval(state.checkInterval);
        }

        state.checkInterval = setInterval(() => {
            console.log('üîÑ [WalletChecker] === –ü–ï–†–Ü–û–î–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê ===');
            checkWalletConnection();
        }, config.checkIntervalMs);

        console.log('‚úÖ [WalletChecker] –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function stopPeriodicCheck() {
        console.log('‚èπÔ∏è [WalletChecker] –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');

        if (state.checkInterval) {
            clearInterval(state.checkInterval);
            state.checkInterval = null;
            console.log('‚úÖ [WalletChecker] –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞');
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
     */
    function setupEventListeners() {
        console.log('üéØ [WalletChecker] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π');

        // –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ –Ω–∞—à–æ–º—É UI
        const connectButton = document.querySelector('.connect-wallet-redirect');
        if (connectButton) {
            connectButton.addEventListener('click', async (e) => {
                e.preventDefault();
                console.log('üñ±Ô∏è [WalletChecker] –ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');

                // –Ø–∫—â–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ earn - –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ TON Connect
                if (window.location.pathname.includes('earn')) {
                    await connectWallet();
                } else {
                    // –Ü–Ω–∞–∫—à–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ wallet.html
                    console.log('üöÄ [WalletChecker] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ wallet.html');
                    window.location.href = 'wallet.html';
                }
            });
            console.log('‚úÖ [WalletChecker] –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ');
        }

        // –°–ª—É—Ö–∞—á –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && state.isInitialized) {
                console.log('üëÅÔ∏è [WalletChecker] –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ—é, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å');
                checkWalletConnection();
            }
        });

        // –°–ª—É—Ö–∞—á —Ñ–æ–∫—É—Å—É –≤—ñ–∫–Ω–∞
        window.addEventListener('focus', () => {
            if (state.isInitialized) {
                const timeSinceLastCheck = Date.now() - (state.lastCheckTime || 0);
                if (timeSinceLastCheck > 60000) { // 1 —Ö–≤–∏–ª–∏–Ω–∞
                    console.log('üîç [WalletChecker] –í—ñ–∫–Ω–æ —É —Ñ–æ–∫—É—Å—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å');
                    checkWalletConnection();
                }
            }
        });

        console.log('‚úÖ [WalletChecker] –°–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
     */
    function getStatus() {
        return {
            initialized: state.isInitialized,
            connected: state.tonConnectUI?.connected || false,
            lastCheck: state.lastCheckTime,
            connectionAttempts: state.connectionAttempts,
            userId: state.userId
        };
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [WalletChecker] === –ó–ù–ò–©–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ===');

        // –ó—É–ø–∏–Ω—è—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
        stopPeriodicCheck();

        // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ TON Connect UI
        if (state.tonConnectUI) {
            // –ù–µ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ
            state.tonConnectUI = null;
        }

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        state.isInitialized = false;
        state.lastCheckTime = null;
        state.connectionAttempts = 0;

        console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        checkWalletConnection,
        connectWallet,
        disconnectWallet,
        checkFlexBalance,
        getStatus,
        destroy
    };

})();

console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');