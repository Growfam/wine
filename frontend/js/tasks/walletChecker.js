/**
 * –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TON –≥–∞–º–∞–Ω—Ü—è –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø V2 - Smart polling, —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±'—î–¥–Ω–∞–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 */

window.WalletChecker = (function() {
    'use strict';

    console.log('üëõ [WalletChecker-V2] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    // –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à –¥–ª—è –≥–∞–º–∞–Ω—Ü—è
    const WalletCache = {
        data: new Map(),
        checksums: new Map(),
        timestamps: new Map(),

        ttl: {
            walletStatus: 60000,     // 1 —Ö–≤–∏–ª–∏–Ω–∞
            flexBalance: 30000,      // 30 —Å–µ–∫—É–Ω–¥
            walletConnection: 5000,  // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
            availableLevels: 120000  // 2 —Ö–≤–∏–ª–∏–Ω–∏
        },

        set(key, data, customTTL) {
            const checksum = this.calculateChecksum(data);
            this.data.set(key, data);
            this.checksums.set(key, checksum);
            this.timestamps.set(key, Date.now());

            const ttl = customTTL || this.ttl[key] || 60000;
            setTimeout(() => this.invalidate(key), ttl);
        },

        get(key) {
            const timestamp = this.timestamps.get(key);
            if (!timestamp) return null;

            const age = Date.now() - timestamp;
            const ttl = this.ttl[key] || 60000;

            if (age > ttl) {
                this.invalidate(key);
                return null;
            }

            return this.data.get(key);
        },

        hasChanged(key, newData) {
            const oldChecksum = this.checksums.get(key);
            if (!oldChecksum) return true;

            const newChecksum = this.calculateChecksum(newData);
            return oldChecksum !== newChecksum;
        },

        calculateChecksum(data) {
            return JSON.stringify(data).split('').reduce((a, b) => {
                a = ((a << 5) - a) + b.charCodeAt(0);
                return a & a;
            }, 0);
        },

        invalidate(key) {
            this.data.delete(key);
            this.checksums.delete(key);
            this.timestamps.delete(key);
        },

        clear() {
            this.data.clear();
            this.checksums.clear();
            this.timestamps.clear();
        }
    };

    // Request Manager –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    const RequestManager = {
        pending: new Map(),
        rateLimiter: {
            lastCall: 0,
            baseDelay: 2000,
            currentDelay: 2000,
            maxDelay: 60000,
            backoffMultiplier: 1.5
        },

        async execute(key, requestFn) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç–∞–∫–∏–π –∑–∞–ø–∏—Ç
            if (this.pending.has(key)) {
                console.log(`üì¶ [RequestManager] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Ç: ${key}`);
                return this.pending.get(key);
            }

            // Rate limiting –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–º backoff
            await this.waitForRateLimit();

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
            const promise = requestFn()
                .then(result => {
                    // –£—Å–ø—ñ—Ö - —Å–∫–∏–¥–∞—î–º–æ delay
                    this.rateLimiter.currentDelay = this.rateLimiter.baseDelay;
                    return result;
                })
                .catch(error => {
                    // –ü–æ–º–∏–ª–∫–∞ - –∑–±—ñ–ª—å—à—É—î–º–æ delay
                    if (error.message?.includes('429')) {
                        this.increaseDelay();
                    }
                    throw error;
                })
                .finally(() => {
                    this.pending.delete(key);
                });

            this.pending.set(key, promise);
            return promise;
        },

        async waitForRateLimit() {
            const now = Date.now();
            const timeSinceLastCall = now - this.rateLimiter.lastCall;

            if (timeSinceLastCall < this.rateLimiter.currentDelay) {
                const waitTime = this.rateLimiter.currentDelay - timeSinceLastCall;
                console.log(`‚è≥ [RequestManager] Rate limit: —á–µ–∫–∞—î–º–æ ${waitTime}–º—Å`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
            }

            this.rateLimiter.lastCall = Date.now();
        },

        increaseDelay() {
            const newDelay = Math.min(
                this.rateLimiter.currentDelay * this.rateLimiter.backoffMultiplier,
                this.rateLimiter.maxDelay
            );

            console.warn(`‚ö†Ô∏è [RequestManager] –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É: ${this.rateLimiter.currentDelay}–º—Å ‚Üí ${newDelay}–º—Å`);
            this.rateLimiter.currentDelay = newDelay;

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É
            setTimeout(() => {
                if (this.rateLimiter.currentDelay > this.rateLimiter.baseDelay) {
                    this.rateLimiter.currentDelay = Math.max(
                        this.rateLimiter.baseDelay,
                        this.rateLimiter.currentDelay / this.rateLimiter.backoffMultiplier
                    );
                    console.log(`üìâ [RequestManager] –ó–º–µ–Ω—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–æ ${this.rateLimiter.currentDelay}–º—Å`);
                }
            }, 60000);
        }
    };

    // Smart Polling Manager
    const SmartPolling = {
        intervals: new Map(),
        lastChecks: new Map(),
        checkCounts: new Map(),

        baseIntervals: {
            walletConnection: 30000,    // 30 —Å–µ–∫ –±–∞–∑–æ–≤–∏–π
            flexBalance: 60000,         // 1 —Ö–≤ –±–∞–∑–æ–≤–∏–π
            availableLevels: 120000     // 2 —Ö–≤ –±–∞–∑–æ–≤–∏–π
        },

        start(name, callback) {
            console.log(`üîÑ [SmartPolling] –ó–∞–ø—É—Å–∫ smart polling –¥–ª—è ${name}`);

            // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            this.stop(name);

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
            const getAdaptiveInterval = () => {
                const baseInterval = this.baseIntervals[name] || 60000;
                const checkCount = this.checkCounts.get(name) || 0;

                // –ó–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
                const multiplier = Math.min(checkCount / 10, 5); // –ú–∞–∫—Å–∏–º—É–º x5
                const adaptiveInterval = baseInterval * (1 + multiplier);

                // –í—Ä–∞—Ö–æ–≤—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const isUserActive = this.isUserActive();

                return isUserActive ? adaptiveInterval : adaptiveInterval * 2;
            };

            const runCheck = async () => {
                const lastCheck = this.lastChecks.get(name) || 0;
                const now = Date.now();

                // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–∏
                if (now - lastCheck < 5000) {
                    console.log(`‚è∏Ô∏è [SmartPolling] ${name}: –∑–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏`);
                    return;
                }

                console.log(`üîç [SmartPolling] ${name}: –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏`);
                this.lastChecks.set(name, now);

                // –í–∏–∫–æ–Ω—É—î–º–æ callback —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∏ –∑–º—ñ–Ω–∏
                const hasChanges = await callback();

                // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                if (hasChanges) {
                    this.checkCounts.set(name, 0); // –°–∫–∏–¥–∞—î–º–æ —è–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏
                } else {
                    const count = this.checkCounts.get(name) || 0;
                    this.checkCounts.set(name, count + 1);
                }

                // –ü–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                const nextInterval = getAdaptiveInterval();
                console.log(`‚è±Ô∏è [SmartPolling] ${name}: –Ω–∞—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ ${Math.round(nextInterval/1000)}—Å`);

                const timerId = setTimeout(runCheck, nextInterval);
                this.intervals.set(name, timerId);
            };

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
            runCheck();
        },

        stop(name) {
            const timerId = this.intervals.get(name);
            if (timerId) {
                clearTimeout(timerId);
                this.intervals.delete(name);
                console.log(`‚èπÔ∏è [SmartPolling] –ó—É–ø–∏–Ω–µ–Ω–æ polling –¥–ª—è ${name}`);
            }
        },

        stopAll() {
            this.intervals.forEach((timerId, name) => {
                clearTimeout(timerId);
                console.log(`‚èπÔ∏è [SmartPolling] –ó—É–ø–∏–Ω–µ–Ω–æ polling –¥–ª—è ${name}`);
            });
            this.intervals.clear();
        },

        isUserActive() {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ sessionStorage
            const lastActivity = parseInt(sessionStorage.getItem('lastUserActivity') || '0');
            const inactiveTime = Date.now() - lastActivity;
            return inactiveTime < 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
        }
    };

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        tonConnectUI: null,
        isInitialized: false,
        lastCheckTime: null,
        connectionAttempts: 0,
        userId: null,
        isConnecting: false,
        initPromise: null,

        // –û–±'—î–¥–Ω–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
        currentWallet: {
            connected: false,
            address: null,
            rawAddress: null,
            provider: null,
            flexBalance: 0,
            lastUpdate: null
        },

        // Batch –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        pendingUpdates: new Set(),
        updateFrame: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        maxConnectionAttempts: 3,
        manifestUrl: window.TasksConstants?.TON_CONNECT?.MANIFEST_URL || '/tonconnect-manifest.json',
        network: window.TasksConstants?.TON_CONNECT?.NETWORK || 'mainnet'
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function init(userId = null) {
        console.log('üöÄ [WalletChecker-V2] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');

        if (state.isInitialized) {
            console.log('‚úÖ [WalletChecker-V2] –ú–æ–¥—É–ª—å –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return true;
        }

        if (state.initPromise) {
            console.log('‚è≥ [WalletChecker-V2] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ');
            return state.initPromise;
        }

        state.initPromise = initInternal(userId);

        try {
            const result = await state.initPromise;
            return result;
        } finally {
            state.initPromise = null;
        }
    }

    /**
     * –í–Ω—É—Ç—Ä—ñ—à–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
     */
    async function initInternal(userId) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ userId
            state.userId = userId || await getUserIdFromSources();

            if (state.userId && typeof state.userId === 'string') {
                state.userId = parseInt(state.userId, 10);
            }

            if (!state.userId) {
                console.warn('‚ö†Ô∏è [WalletChecker-V2] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É
            loadCachedWalletData();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ TON Connect
            await waitForTonConnectUI();
            await initializeTonConnect();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            setupEventListeners();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ smart polling
            startSmartPolling();

            state.isInitialized = true;
            console.log('‚úÖ [WalletChecker-V2] –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

            // –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => checkWalletConnection(), 2000);

            return true;

        } catch (error) {
            console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            window.TasksUtils?.showToast('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TON Connect', 'error');
            throw error;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—è
     */
    function loadCachedWalletData() {
        const cached = window.TasksUtils.storage.get('walletData');
        if (cached && cached.userId === state.userId) {
            console.log('üì¶ [WalletChecker-V2] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –≥–∞–º–∞–Ω—Ü—è');
            state.currentWallet = { ...state.currentWallet, ...cached.wallet };

            // –û–Ω–æ–≤–ª—é—î–º–æ UI –æ–¥—Ä–∞–∑—É
            if (state.currentWallet.connected) {
                showWalletConnectedStatus(state.currentWallet.address);
            }
        }
    }

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—è
     */
    function saveWalletData() {
        window.TasksUtils.storage.set('walletData', {
            userId: state.userId,
            wallet: state.currentWallet,
            timestamp: Date.now()
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è userId –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª - –∫–µ—à–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è
     */
    const getUserIdFromSources = (() => {
        let cachedUserId = null;

        return async function() {
            if (cachedUserId) return cachedUserId;

            console.log('üîç [WalletChecker-V2] –ü–æ—à—É–∫ userId...');

            const syncSources = [
                () => window.TasksStore?.selectors?.getUserId?.(),
                () => window.WinixAPI?.getUserId?.(),
                () => window.TasksIntegrationInstance?.userId,
                () => localStorage.getItem('telegram_user_id'),
                () => localStorage.getItem('user_id'),
                () => window.Telegram?.WebApp?.initDataUnsafe?.user?.id
            ];

            // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            for (const source of syncSources) {
                try {
                    const id = source();
                    if (id && id !== 'undefined' && id !== 'null') {
                        cachedUserId = id;
                        return id;
                    }
                } catch (e) {
                    continue;
                }
            }

            // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —á–µ–∫–∞—î–º–æ
            return new Promise((resolve) => {
                let attempts = 0;
                const checkInterval = setInterval(() => {
                    attempts++;

                    for (const source of syncSources) {
                        try {
                            const id = source();
                            if (id && id !== 'undefined' && id !== 'null') {
                                clearInterval(checkInterval);
                                cachedUserId = id;
                                resolve(id);
                                return;
                            }
                        } catch (e) {
                            continue;
                        }
                    }

                    if (attempts > 10) {
                        clearInterval(checkInterval);
                        resolve(null);
                    }
                }, 500);
            });
        };
    })();

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function checkWalletConnection() {
        console.log('üîç [WalletChecker-V2] === –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê) ===');

        const store = window.TasksStore;
        if (!store) {
            console.error('‚ùå [WalletChecker-V2] Store –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return false;
        }

        // –ë–∞—Ç—á–∏–º–æ UI –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        scheduleUpdate('checking', () => {
            store.actions.setWalletChecking(true);
        });

        try {
            const isConnected = state.tonConnectUI?.connected || false;
            console.log('üìä [WalletChecker-V2] TON Connect —Å—Ç–∞—Ç—É—Å:', isConnected);

            if (isConnected) {
                const wallet = state.tonConnectUI.wallet;
                const addresses = extractWalletAddresses(wallet);

                if (!addresses) {
                    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–ª–∞—Å—å –∞–¥—Ä–µ—Å–∞
                const addressChanged = state.currentWallet.address !== addresses.userFriendly;

                if (!addressChanged) {
                    console.log('‚úÖ [WalletChecker-V2] –ê–¥—Ä–µ—Å–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à');

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¥–∞–≤–Ω–æ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–∏
                    const lastUpdate = state.currentWallet.lastUpdate || 0;
                    if (Date.now() - lastUpdate < 30000) { // 30 —Å–µ–∫
                        return true;
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                state.currentWallet = {
                    connected: true,
                    address: addresses.userFriendly,
                    rawAddress: addresses.raw,
                    provider: wallet.device.appName,
                    lastUpdate: Date.now(),
                    flexBalance: state.currentWallet.flexBalance // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å
                };

                // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                await verifyWalletIfNeeded(wallet);

                state.lastCheckTime = Date.now();
                saveWalletData();

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                scheduleUpdate('connected', () => {
                    showWalletConnectedStatus(addresses.userFriendly);
                });

                return true;

            } else {
                console.log('‚ùå [WalletChecker-V2] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

                // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
                state.currentWallet = {
                    connected: false,
                    address: null,
                    rawAddress: null,
                    provider: null,
                    flexBalance: 0,
                    lastUpdate: Date.now()
                };

                WalletCache.clear();
                saveWalletData();

                // –û–Ω–æ–≤–ª—é—î–º–æ Store —Ç–∞ UI
                scheduleUpdate('disconnected', () => {
                    store.actions.setWalletConnected(false);
                    store.actions.disconnectWallet();
                    showWalletConnectionUI();
                });

                return false;
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error);

            if (!error.message?.includes('400') && !error.message?.includes('429')) {
                store.actions.setError('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è');
            }

            return false;

        } finally {
            scheduleUpdate('checking-complete', () => {
                store.actions.setWalletChecking(false);
            });
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
     */
    async function verifyWalletIfNeeded(wallet) {
        const addresses = extractWalletAddresses(wallet);
        const cacheKey = `wallet_status_${state.userId}`;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        const cached = WalletCache.get(cacheKey);
        if (cached && cached.address === addresses.userFriendly) {
            console.log('‚úÖ [WalletChecker-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è');
            updateWalletState(wallet, cached);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å FLEX —è–∫—â–æ –¥–∞–≤–Ω–æ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–∏
            const lastFlexCheck = WalletCache.timestamps.get('flexBalance') || 0;
            if (Date.now() - lastFlexCheck > 30000) {
                checkFlexBalanceOptimized(addresses.userFriendly);
            }

            return;
        }

        // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
        await RequestManager.execute(
            `verify_wallet_${state.userId}`,
            () => verifyWalletOnBackend(wallet)
        );
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function verifyWalletOnBackend(wallet) {
        console.log('üåê [WalletChecker-V2] === –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –ù–ê –ë–ï–ö–ï–ù–î–Ü ===');

        const addresses = extractWalletAddresses(wallet);

        if (!addresses) {
            throw new Error('–ê–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è –≤—ñ–¥—Å—É—Ç–Ω—ñ');
        }

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
            const statusResponse = await window.TasksAPI.wallet.checkStatus(state.userId);

            if (statusResponse.data?.connected &&
                (statusResponse.data.address === addresses.userFriendly ||
                 statusResponse.data.address === addresses.raw)) {

                console.log('‚úÖ [WalletChecker-V2] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π');

                // –ö–µ—à—É—î–º–æ
                WalletCache.set(`wallet_status_${state.userId}`, statusResponse.data);

                updateWalletState(wallet, statusResponse.data);

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
                checkFlexBalanceOptimized(addresses.userFriendly);

                return;
            }

            // –†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å
            console.log('üîÑ [WalletChecker-V2] –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è...');

            const walletData = {
                address: addresses.raw,
                addressFriendly: addresses.userFriendly,
                chain: wallet.account.chain || '-239',
                publicKey: wallet.account.publicKey || '',
                provider: wallet.device.appName || 'unknown',
                timestamp: Date.now()
            };

            const connectResponse = await window.TasksAPI.wallet.connect(state.userId, walletData);

            if (connectResponse.status === 'success') {
                // –ö–µ—à—É—î–º–æ
                WalletCache.set(`wallet_status_${state.userId}`, connectResponse.data.wallet);

                updateWalletState(wallet, connectResponse.data);

                if (connectResponse.data?.first_connection) {
                    showFirstConnectionBonus(connectResponse.data.bonus);
                }

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
                checkFlexBalanceOptimized(addresses.userFriendly);
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);

            if (error.data?.error_code === 'WALLET_ALREADY_CONNECTED') {
                window.TasksUtils?.showToast('–¶–µ–π –≥–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ —ñ–Ω—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞', 'error');
                await disconnectWallet();
            } else if (error.data?.error_code === 'INVALID_ADDRESS') {
                window.TasksUtils?.showToast('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ TON –≥–∞–º–∞–Ω—Ü—è', 'error');
            }

            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function checkFlexBalanceOptimized(address) {
        console.log('üíé [WalletChecker-V2] === –ü–ï–†–ï–í–Ü–†–ö–ê FLEX (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê) ===');

        const cacheKey = 'flexBalance';

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        const cached = WalletCache.get(cacheKey);
        if (cached !== null) {
            console.log('üì¶ [WalletChecker-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å FLEX:', cached);
            return false; // –ù–µ–º–∞—î –∑–º—ñ–Ω
        }

        try {
            const response = await RequestManager.execute(
                `flex_balance_${address}`,
                () => window.TasksAPI.flex.getBalance(state.userId, address)
            );

            if (response.balance !== undefined) {
                const balance = parseInt(response.balance);
                const oldBalance = state.currentWallet.flexBalance;

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –±–∞–ª–∞–Ω—Å
                if (oldBalance === balance) {
                    console.log('‚úÖ [WalletChecker-V2] –ë–∞–ª–∞–Ω—Å FLEX –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è');
                    WalletCache.set(cacheKey, balance);
                    return false;
                }

                console.log('üí∞ [WalletChecker-V2] –ë–∞–ª–∞–Ω—Å FLEX –∑–º—ñ–Ω–∏–≤—Å—è:', oldBalance, '‚Üí', balance);

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                state.currentWallet.flexBalance = balance;
                WalletCache.set(cacheKey, balance);

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                scheduleUpdate('flex-balance', () => {
                    window.TasksStore.actions.setFlexBalance(balance);
                    window.TasksStore.actions.updateBalance({ flex: balance });
                });

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ
                checkAvailableLevelsOptimized(balance);

                saveWalletData();

                return true; // –ë—É–ª–∏ –∑–º—ñ–Ω–∏
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
        }

        return false;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function checkAvailableLevelsOptimized(flexBalance) {
        console.log('üéØ [WalletChecker-V2] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤');

        const cacheKey = `available_levels_${flexBalance}`;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        const cached = WalletCache.get(cacheKey);
        if (cached) {
            console.log('üì¶ [WalletChecker-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ —Ä—ñ–≤–Ω—ñ');
            return false;
        }

        const flexLevels = window.TasksConstants?.FLEX_LEVELS || {};
        let availableCount = 0;
        const updates = [];

        Object.entries(flexLevels).forEach(([levelKey, levelData]) => {
            const isAvailable = flexBalance >= levelData.required;

            if (isAvailable) {
                availableCount++;
            }

            // –ó–±–∏—Ä–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –±–∞—Ç—á–∏–Ω–≥—É
            updates.push({ level: levelKey, available: isAvailable });
        });

        // –ë–∞—Ç—á–∏–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Store
        scheduleUpdate('flex-levels', () => {
            updates.forEach(({ level, available }) => {
                window.TasksStore.actions.setFlexLevelAvailable(level, available);
            });
        });

        // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        WalletCache.set(cacheKey, { availableCount, updates });

        if (availableCount > 0) {
            window.TasksUtils.showToast(
                `–î–æ—Å—Ç—É–ø–Ω–æ ${availableCount} ${availableCount === 1 ? '—Ä—ñ–≤–µ–Ω—å' : '—Ä—ñ–≤–Ω—ñ–≤'} –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥!`,
                'success'
            );
        }

        return availableCount > 0;
    }

    /**
     * –ë–∞—Ç—á–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ requestAnimationFrame
     */
    function scheduleUpdate(type, updateFn) {
        state.pendingUpdates.add({ type, fn: updateFn });

        if (!state.updateFrame) {
            state.updateFrame = requestAnimationFrame(() => {
                processPendingUpdates();
            });
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –±–∞—Ç—á–æ–≤–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
     */
    function processPendingUpdates() {
        console.log(`üé® [WalletChecker-V2] –û–±—Ä–æ–±–∫–∞ ${state.pendingUpdates.size} –æ–Ω–æ–≤–ª–µ–Ω—å`);

        state.pendingUpdates.forEach(update => {
            try {
                update.fn();
            } catch (error) {
                console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
            }
        });

        state.pendingUpdates.clear();
        state.updateFrame = null;
    }

    /**
     * –ó–∞–ø—É—Å–∫ smart polling
     */
    function startSmartPolling() {
        console.log('üîÑ [WalletChecker-V2] –ó–∞–ø—É—Å–∫ smart polling');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
        SmartPolling.start('walletConnection', async () => {
            const oldConnected = state.currentWallet.connected;
            await checkWalletConnection();
            return oldConnected !== state.currentWallet.connected;
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ)
        SmartPolling.start('flexBalance', async () => {
            if (!state.currentWallet.connected || !state.currentWallet.address) {
                return false;
            }
            return await checkFlexBalanceOptimized(state.currentWallet.address);
        });
    }

    /**
     * –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è TON Connect UI
     */
    async function waitForTonConnectUI() {
        console.log('‚è≥ [WalletChecker-V2] –û—á—ñ–∫—É–≤–∞–Ω–Ω—è TON Connect UI...');

        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 20;

            const checkInterval = setInterval(() => {
                attempts++;

                if (window.TON_CONNECT_UI) {
                    clearInterval(checkInterval);
                    console.log('‚úÖ [WalletChecker-V2] TON Connect UI –∑–Ω–∞–π–¥–µ–Ω–æ');
                    resolve();
                } else if (attempts >= maxAttempts) {
                    clearInterval(checkInterval);
                    console.error('‚ùå [WalletChecker-V2] TON Connect UI –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
                    reject(new Error('TON Connect UI –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ'));
                }
            }, 500);
        });
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect UI
     */
    async function initializeTonConnect() {
        console.log('üîß [WalletChecker-V2] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect UI...');

        try {
            if (window.tonConnectUI) {
                console.log('‚úÖ [WalletChecker-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π TON Connect UI');
                state.tonConnectUI = window.tonConnectUI;

                state.tonConnectUI.onStatusChange(wallet => {
                    console.log('üîÑ [WalletChecker-V2] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è –∑–º—ñ–Ω–∏–≤—Å—è');
                    handleWalletStatusChange(wallet);
                });

                return;
            }

            console.log('üî® [WalletChecker-V2] –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π TON Connect UI...');

            state.tonConnectUI = new window.TON_CONNECT_UI.TonConnectUI({
                manifestUrl: config.manifestUrl,
                buttonRootId: 'ton-connect-button',
                actionsConfiguration: {
                    twaReturnUrl: 'https://t.me/WINIX_Official_bot'
                }
            });

            window.tonConnectUI = state.tonConnectUI;

            state.tonConnectUI.onStatusChange(wallet => {
                console.log('üîÑ [WalletChecker-V2] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è –∑–º—ñ–Ω–∏–≤—Å—è');
                handleWalletStatusChange(wallet);
            });

            console.log('‚úÖ [WalletChecker-V2] TON Connect UI —Å—Ç–≤–æ—Ä–µ–Ω–æ');

        } catch (error) {
            if (error.message?.includes('Cannot define multiple custom elements')) {
                console.warn('‚ö†Ô∏è [WalletChecker-V2] TON Connect –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ');

                await new Promise(resolve => setTimeout(resolve, 500));

                if (window.tonConnectUI) {
                    state.tonConnectUI = window.tonConnectUI;
                    console.log('‚úÖ [WalletChecker-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π TON Connect UI');
                    return;
                }
            }

            throw error;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è
     */
    function formatAddress(address) {
        if (!address || address.length < 20) return address;
        return `${address.slice(0, 8)}...${address.slice(-6)}`;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
     */
    function showWalletConnectedStatus(address) {
        console.log('üíé [WalletChecker-V2] –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è');

        const statusContainer = document.querySelector('.wallet-status-container');
        if (statusContainer) {
            statusContainer.style.display = 'none';
        }

        const connectedStatus = document.getElementById('wallet-connected-status');
        if (connectedStatus) {
            connectedStatus.style.display = 'block';

            const addressDisplay = document.getElementById('wallet-address-display');
            if (addressDisplay && address) {
                const formattedAddress = formatAddress(address);
                addressDisplay.textContent = formattedAddress;
            }
        }

        const tasksContainer = document.getElementById('flex-tasks');
        if (tasksContainer) {
            tasksContainer.style.display = 'block';
        }

        const tonConnectButton = document.getElementById('ton-connect-button');
        if (tonConnectButton) {
            tonConnectButton.style.display = 'none';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    function showWalletConnectionUI() {
        console.log('üîå [WalletChecker-V2] –ü–æ–∫–∞–∑—É—î–º–æ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');

        const connectedStatus = document.getElementById('wallet-connected-status');
        if (connectedStatus) {
            connectedStatus.style.display = 'none';
        }

        const statusContainer = document.querySelector('.wallet-status-container');
        if (statusContainer) {
            statusContainer.style.display = 'block';
        }

        const tasksContainer = document.getElementById('flex-tasks');
        if (tasksContainer) {
            tasksContainer.style.display = 'none';
        }

        const statusText = document.getElementById('wallet-connection-status');
        if (statusText) {
            statusText.textContent = '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ';
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ –∑ wallet –æ–±'—î–∫—Ç–∞
     */
    function extractWalletAddresses(wallet) {
        if (!wallet?.account?.address) {
            return null;
        }

        const rawAddress = wallet.account.address;
        let userFriendlyAddress = null;

        // –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–ª—ñ–≤
        const possibleFields = [
            'addressFriendly',
            'friendlyAddress',
            'userFriendlyAddress',
            'address_friendly',
            'user_friendly_address'
        ];

        for (const field of possibleFields) {
            if (wallet.account[field]) {
                userFriendlyAddress = wallet.account[field];
                break;
            }
        }

        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç raw –∞–¥—Ä–µ—Å–∏
        if (!userFriendlyAddress) {
            if (rawAddress.startsWith('UQ') || rawAddress.startsWith('EQ')) {
                userFriendlyAddress = rawAddress;
            }
        }

        return {
            raw: rawAddress,
            userFriendly: userFriendlyAddress || rawAddress,
            needsConversion: !userFriendlyAddress && (rawAddress.startsWith('0:') || rawAddress.startsWith('-1:'))
        };
    }

    /**
     * –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function connectWallet() {
        console.log('üîå [WalletChecker-V2] === –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');

        if (state.tonConnectUI?.connected) {
            console.log('‚ö†Ô∏è [WalletChecker-V2] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            window.TasksUtils?.showToast('–ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'info');
            await checkWalletConnection();
            return;
        }

        if (state.isConnecting) {
            console.log('‚è∏Ô∏è [WalletChecker-V2] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ');
            return;
        }

        if (!state.isInitialized) {
            console.log('‚ö†Ô∏è [WalletChecker-V2] –ú–æ–¥—É–ª—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            try {
                await init();
            } catch (error) {
                console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
                window.TasksUtils?.showToast('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≥–∞–º–∞–Ω—Ü—è', 'error');
                return;
            }
        }

        state.isConnecting = true;
        state.connectionAttempts++;

        try {
            updateConnectButton(true);

            await state.tonConnectUI.connectWallet();
            console.log('‚úÖ [WalletChecker-V2] –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');

            window.TasksUtils.showToast('–û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', 'info');

        } catch (error) {
            console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);

            if (error.message?.includes('wallet already connected')) {
                console.log('‚ö†Ô∏è [WalletChecker-V2] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –±—É–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π');
                await checkWalletConnection();
                return;
            }

            if (state.connectionAttempts >= config.maxConnectionAttempts) {
                window.TasksUtils.showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ', 'error');
                state.connectionAttempts = 0;
            } else {
                window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', 'error');
            }
        } finally {
            state.isConnecting = false;
            setTimeout(() => updateConnectButton(false), 3000);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    function updateConnectButton(isConnecting) {
        const buttons = document.querySelectorAll('.connect-wallet-redirect');
        buttons.forEach(button => {
            if (isConnecting) {
                button.disabled = true;
                button.textContent = '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...';
                button.style.opacity = '0.7';
            } else {
                button.disabled = false;
                button.textContent = '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–æ—à–µ–ª–µ–∫';
                button.style.opacity = '';
            }
        });
    }

    /**
     * –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å
     */
    async function disconnectWallet() {
        console.log('üîå [WalletChecker-V2] === –í–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');

        const confirmed = confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å?');
        if (!confirmed) {
            console.log('‚ùå [WalletChecker-V2] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
            return;
        }

        try {
            if (state.tonConnectUI?.connected) {
                await state.tonConnectUI.disconnect();
            }

            console.log('‚úÖ [WalletChecker-V2] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
            state.currentWallet = {
                connected: false,
                address: null,
                rawAddress: null,
                provider: null,
                flexBalance: 0,
                lastUpdate: Date.now()
            };

            WalletCache.clear();
            saveWalletData();

            scheduleUpdate('disconnect', () => {
                window.TasksStore.actions.disconnectWallet();
                showWalletConnectionUI();
            });

            window.TasksUtils.showToast('–ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'info');

            // –°–ø–æ–≤—ñ—â–∞—î–º–æ –±–µ–∫–µ–Ω–¥
            if (state.userId) {
                try {
                    await window.TasksAPI.wallet.disconnect(state.userId);
                    console.log('‚úÖ [WalletChecker-V2] –ë–µ–∫–µ–Ω–¥ —Å–ø–æ–≤—ñ—â–µ–Ω–æ');
                } catch (error) {
                    console.warn('‚ö†Ô∏è [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∫–µ–Ω–¥—É:', error);
                }
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è', 'error');
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è
     */
    const handleWalletStatusChange = window.TasksUtils.debounce(async (wallet) => {
        console.log('üîÑ [WalletChecker-V2] === –ó–ú–Ü–ù–ê –°–¢–ê–¢–£–°–£ –ì–ê–ú–ê–ù–¶–Ø ===');

        if (wallet) {
            console.log('‚úÖ [WalletChecker-V2] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            state.connectionAttempts = 0;
            state.isConnecting = false;

            updateConnectButton(false);

            const addresses = extractWalletAddresses(wallet);
            if (addresses) {
                state.currentWallet.address = addresses.userFriendly;
                state.currentWallet.rawAddress = addresses.raw;
                state.currentWallet.connected = true;
            }

            try {
                await verifyWalletOnBackend(wallet);
            } catch (error) {
                console.error('‚ùå [WalletChecker-V2] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);

                if (error.message?.includes('Network error') || error.message?.includes('500')) {
                    await disconnectWallet();
                }
            }

        } else {
            console.log('‚ùå [WalletChecker-V2] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            state.currentWallet = {
                connected: false,
                address: null,
                rawAddress: null,
                provider: null,
                flexBalance: 0,
                lastUpdate: Date.now()
            };

            WalletCache.clear();
            saveWalletData();

            scheduleUpdate('status-disconnected', () => {
                window.TasksStore.actions.disconnectWallet();
                showWalletConnectionUI();
            });
        }
    }, 1000);

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –≥–∞–º–∞–Ω—Ü—è –≤ Store
     */
    function updateWalletState(wallet, serverData) {
        console.log('üîÑ [WalletChecker-V2] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥–∞–º–∞–Ω—Ü—è');

        const store = window.TasksStore;

        scheduleUpdate('wallet-state', () => {
            store.actions.setWalletConnected(true);

            const walletData = serverData.wallet || serverData;
            const addresses = extractWalletAddresses(wallet);

            store.actions.setWalletAddress({
                address: walletData.address || addresses.userFriendly,
                rawAddress: walletData.raw_address || addresses.raw,
                chainId: wallet.account.chain,
                provider: wallet.device.appName,
                connected_at: walletData.connected_at,
                status: walletData.status
            });

            if (serverData.balance?.flex !== undefined) {
                store.actions.setFlexBalance(serverData.balance.flex);
            }

            showWalletConnectedStatus(walletData.address || addresses.userFriendly);
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—à–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    function showFirstConnectionBonus(bonus) {
        if (!bonus || (!bonus.winix && !bonus.tickets && !bonus.amount)) {
            return;
        }

        let message = '–í—ñ—Ç–∞—î–º–æ! –ë–æ–Ω—É—Å –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è: ';
        const winixAmount = bonus.winix || bonus.amount || 0;

        if (winixAmount > 0) {
            message += `+${winixAmount} WINIX`;
        }
        if (bonus.tickets) {
            message += ` —Ç–∞ +${bonus.tickets} tickets`;
        }

        window.TasksUtils.showToast(message, 'success', 5000);

        scheduleUpdate('bonus', () => {
            const currentBalance = window.TasksStore.selectors.getUserBalance();

            window.TasksStore.actions.updateBalance({
                winix: currentBalance.winix + winixAmount,
                tickets: currentBalance.tickets + (bonus.tickets || 0)
            });
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
     */
    function setupEventListeners() {
        console.log('üéØ [WalletChecker-V2] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π');

        // –í–∏–¥–∏–º—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && state.isInitialized) {
                const timeSinceLastCheck = Date.now() - (state.lastCheckTime || 0);
                if (timeSinceLastCheck > 60000) {
                    console.log('üëÅÔ∏è [WalletChecker-V2] –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å');
                    checkWalletConnection();
                }
            } else if (document.hidden) {
                // –ü—Ä–∏–∑—É–ø–∏–Ω—è—î–º–æ polling –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ
                SmartPolling.stopAll();
            } else {
                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ polling
                startSmartPolling();
            }
        });

        // –§–æ–∫—É—Å –≤—ñ–∫–Ω–∞
        window.addEventListener('focus', window.TasksUtils.debounce(() => {
            if (state.isInitialized) {
                const timeSinceLastCheck = Date.now() - (state.lastCheckTime || 0);
                if (timeSinceLastCheck > 60000) {
                    console.log('üîç [WalletChecker-V2] –í—ñ–∫–Ω–æ —É —Ñ–æ–∫—É—Å—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å');
                    checkWalletConnection();
                }
            }
        }, 1000));

        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        document.addEventListener('click', async (e) => {
            if (e.target.id === 'wallet-disconnect-btn' || e.target.closest('#wallet-disconnect-btn')) {
                e.preventDefault();
                e.stopPropagation();
                await disconnectWallet();
            }
        });

        console.log('‚úÖ [WalletChecker-V2] –°–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
     */
    function getStatus() {
        return {
            initialized: state.isInitialized,
            connected: state.currentWallet.connected,
            address: state.currentWallet.address,
            flexBalance: state.currentWallet.flexBalance,
            lastCheck: state.lastCheckTime,
            connectionAttempts: state.connectionAttempts,
            userId: state.userId,
            isConnecting: state.isConnecting,
            cacheSize: WalletCache.data.size,
            pendingRequests: RequestManager.pending.size,
            currentDelay: RequestManager.rateLimiter.currentDelay
        };
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [WalletChecker-V2] === –ó–ù–ò–©–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ===');

        // –ó—É–ø–∏–Ω—è—î–º–æ polling
        SmartPolling.stopAll();

        // –û—á–∏—â–∞—î–º–æ –∫–µ—à
        WalletCache.clear();

        // –°–∫–∞—Å–æ–≤—É—î–º–æ pending –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (state.updateFrame) {
            cancelAnimationFrame(state.updateFrame);
        }

        // –û—á–∏—â–∞—î–º–æ TON Connect
        if (state.tonConnectUI) {
            state.tonConnectUI = null;
        }

        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        state.isInitialized = false;
        state.lastCheckTime = null;
        state.connectionAttempts = 0;
        state.isConnecting = false;
        state.initPromise = null;
        state.currentWallet = {
            connected: false,
            address: null,
            rawAddress: null,
            provider: null,
            flexBalance: 0,
            lastUpdate: null
        };

        console.log('‚úÖ [WalletChecker-V2] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [WalletChecker-V2] –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è –≥–æ—Ç–æ–≤–∏–π (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        checkWalletConnection,
        connectWallet,
        disconnectWallet,
        checkFlexBalance: () => checkFlexBalanceOptimized(state.currentWallet.address),
        getStatus,
        destroy,

        // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        _cache: WalletCache,
        _requestManager: RequestManager,
        _smartPolling: SmartPolling
    };

})();

console.log('‚úÖ [WalletChecker-V2] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô)');