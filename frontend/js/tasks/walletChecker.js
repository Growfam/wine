/**
 * –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TON –≥–∞–º–∞–Ω—Ü—è –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø - –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º
 */

window.WalletChecker = (function() {
    'use strict';

    console.log('üëõ [WalletChecker] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ì–ê–ú–ê–ù–¶–Ø =====');

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        tonConnectUI: null,
        checkInterval: null,
        isInitialized: false,
        lastCheckTime: null,
        connectionAttempts: 0,
        userId: null,
        isConnecting: false,
        initPromise: null,
        lastApiCallTime: 0,
        apiCallDelay: 2000,
        walletCache: null,
        lastWalletAddress: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        checkIntervalMs: window.TasksConstants?.TIMERS?.AUTO_CHECK_INTERVAL || 5 * 60 * 1000,
        maxConnectionAttempts: 3,
        manifestUrl: window.TasksConstants?.TON_CONNECT?.MANIFEST_URL || '/tonconnect-manifest.json',
        network: window.TasksConstants?.TON_CONNECT?.NETWORK || 'mainnet'
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
     */
    async function init(userId = null) {
        console.log('üöÄ [WalletChecker] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');

        if (state.isInitialized) {
            console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return true;
        }

        if (state.initPromise) {
            console.log('‚è≥ [WalletChecker] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ, —á–µ–∫–∞—î–º–æ...');
            return state.initPromise;
        }

        state.initPromise = initInternal(userId);

        try {
            const result = await state.initPromise;
            return result;
        } finally {
            state.initPromise = null;
        }
    }

    /**
     * –í–Ω—É—Ç—Ä—ñ—à–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    async function initInternal(userId) {
        try {
            if (userId) {
                state.userId = userId;
                console.log('‚úÖ [WalletChecker] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π userId:', userId);
            } else {
                state.userId = await getUserIdFromSources();
                console.log('‚úÖ [WalletChecker] userId –æ—Ç—Ä–∏–º–∞–Ω–æ:', state.userId);
            }

            if (state.userId && typeof state.userId === 'string') {
                state.userId = parseInt(state.userId, 10);
                console.log('üîÑ [WalletChecker] userId –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —á–∏—Å–ª–æ:', state.userId);
            }

            if (!state.userId) {
                console.warn('‚ö†Ô∏è [WalletChecker] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞');
            }

            await waitForTonConnectUI();
            await initializeTonConnect();
            setupEventListeners();

            setTimeout(() => {
                startPeriodicCheck();
            }, 10000);

            state.isInitialized = true;
            console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

            window._walletCheckerState = state;

            return true;

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            window.TasksUtils?.showToast('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TON Connect', 'error');
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è userId –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     */
    async function getUserIdFromSources() {
        console.log('üîç [WalletChecker] –ü–æ—à—É–∫ userId...');

        const syncSources = [
            () => window.TasksStore?.selectors?.getUserId?.(),
            () => window.WinixAPI?.getUserId?.(),
            () => window.TasksIntegrationInstance?.userId,
            () => localStorage.getItem('telegram_user_id'),
            () => localStorage.getItem('user_id'),
            () => window.Telegram?.WebApp?.initDataUnsafe?.user?.id
        ];

        for (const source of syncSources) {
            try {
                const id = source();
                if (id && id !== 'undefined' && id !== 'null') {
                    return id;
                }
            } catch (e) {
                continue;
            }
        }

        console.log('‚è≥ [WalletChecker] userId –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–¥—Ä–∞–∑—É, —á–µ–∫–∞—î–º–æ...');

        return new Promise((resolve) => {
            let attempts = 0;
            const checkInterval = setInterval(() => {
                attempts++;

                for (const source of syncSources) {
                    try {
                        const id = source();
                        if (id && id !== 'undefined' && id !== 'null') {
                            clearInterval(checkInterval);
                            resolve(id);
                            return;
                        }
                    } catch (e) {
                        continue;
                    }
                }

                if (attempts > 10) {
                    clearInterval(checkInterval);
                    resolve(null);
                }
            }, 500);
        });
    }

    /**
     * –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è TON Connect UI
     */
    async function waitForTonConnectUI() {
        console.log('‚è≥ [WalletChecker] –û—á—ñ–∫—É–≤–∞–Ω–Ω—è TON Connect UI...');

        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 20;

            const checkInterval = setInterval(() => {
                attempts++;

                if (window.TON_CONNECT_UI) {
                    clearInterval(checkInterval);
                    console.log('‚úÖ [WalletChecker] TON Connect UI –∑–Ω–∞–π–¥–µ–Ω–æ');
                    resolve();
                } else if (attempts >= maxAttempts) {
                    clearInterval(checkInterval);
                    console.error('‚ùå [WalletChecker] TON Connect UI –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
                    reject(new Error('TON Connect UI –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ'));
                }
            }, 500);
        });
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect UI
     */
    async function initializeTonConnect() {
        console.log('üîß [WalletChecker] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TON Connect UI...');

        try {
            if (window.tonConnectUI) {
                console.log('‚úÖ [WalletChecker] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π TON Connect UI');
                state.tonConnectUI = window.tonConnectUI;

                state.tonConnectUI.onStatusChange(wallet => {
                    console.log('üîÑ [WalletChecker] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è –∑–º—ñ–Ω–∏–≤—Å—è:', wallet);
                    handleWalletStatusChange(wallet);
                });

                return;
            }

            console.log('üî® [WalletChecker] –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π TON Connect UI...');

            state.tonConnectUI = new window.TON_CONNECT_UI.TonConnectUI({
                manifestUrl: config.manifestUrl,
                buttonRootId: 'ton-connect-button',
                actionsConfiguration: {
                    twaReturnUrl: 'https://t.me/WINIX_Official_bot'
                }
            });

            window.tonConnectUI = state.tonConnectUI;

            state.tonConnectUI.onStatusChange(wallet => {
                console.log('üîÑ [WalletChecker] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è –∑–º—ñ–Ω–∏–≤—Å—è:', wallet);
                handleWalletStatusChange(wallet);
            });

            console.log('‚úÖ [WalletChecker] TON Connect UI —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');

        } catch (error) {
            if (error.message?.includes('Cannot define multiple custom elements')) {
                console.warn('‚ö†Ô∏è [WalletChecker] TON Connect –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π');

                await new Promise(resolve => setTimeout(resolve, 500));

                if (window.tonConnectUI) {
                    state.tonConnectUI = window.tonConnectUI;
                    console.log('‚úÖ [WalletChecker] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π TON Connect UI');
                    return;
                }
            }

            throw error;
        }
    }

    /**
     * –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è API –≤–∏–∫–ª–∏–∫—ñ–≤
     */
    async function rateLimit() {
        const now = Date.now();
        const timeSinceLastCall = now - state.lastApiCallTime;

        if (timeSinceLastCall < state.apiCallDelay) {
            const waitTime = state.apiCallDelay - timeSinceLastCall;
            console.log(`‚è≥ [WalletChecker] Rate limit: —á–µ–∫–∞—î–º–æ ${waitTime}–º—Å`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }

        state.lastApiCallTime = Date.now();
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è
     */
    function formatAddress(address) {
        if (!address || address.length < 20) return address;
        return `${address.slice(0, 8)}...${address.slice(-6)}`;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
     */
    function showWalletConnectedStatus(address) {
        console.log('üíé [WalletChecker] –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è');

        const statusContainer = document.querySelector('.wallet-status-container');
        if (statusContainer) {
            statusContainer.style.display = 'none';
        }

        const connectedStatus = document.getElementById('wallet-connected-status');
        if (connectedStatus) {
            connectedStatus.style.display = 'block';

            const addressDisplay = document.getElementById('wallet-address-display');
            if (addressDisplay && address) {
                const formattedAddress = formatAddress(address);
                addressDisplay.textContent = formattedAddress;
            }
        }

        const tasksContainer = document.getElementById('flex-tasks');
        if (tasksContainer) {
            tasksContainer.style.display = 'block';
        }

        const tonConnectButton = document.getElementById('ton-connect-button');
        if (tonConnectButton) {
            tonConnectButton.style.display = 'none';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    function showWalletConnectionUI() {
        console.log('üîå [WalletChecker] –ü–æ–∫–∞–∑—É—î–º–æ UI –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');

        const connectedStatus = document.getElementById('wallet-connected-status');
        if (connectedStatus) {
            connectedStatus.style.display = 'none';
        }

        const statusContainer = document.querySelector('.wallet-status-container');
        if (statusContainer) {
            statusContainer.style.display = 'block';
        }

        const tasksContainer = document.getElementById('flex-tasks');
        if (tasksContainer) {
            tasksContainer.style.display = 'none';
        }

        const statusText = document.getElementById('wallet-connection-status');
        if (statusText) {
            statusText.textContent = '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ';
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    async function checkWalletConnection() {
        console.log('üîç [WalletChecker] === –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');
        console.log('üïê [WalletChecker] –ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', new Date().toISOString());

        const store = window.TasksStore;
        if (!store) {
            console.error('‚ùå [WalletChecker] Store –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return false;
        }

        store.actions.setWalletChecking(true);

        try {
            const isConnected = state.tonConnectUI?.connected || false;
            console.log('üìä [WalletChecker] TON Connect —Å—Ç–∞—Ç—É—Å:', isConnected);

            if (isConnected) {
                const wallet = state.tonConnectUI.wallet;
                console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                console.log('üìç [WalletChecker] –ê–¥—Ä–µ—Å–∞:', wallet.account.address);
                console.log('üè∑Ô∏è [WalletChecker] –ü—Ä–æ–≤–∞–π–¥–µ—Ä:', wallet.device.appName);

                state.lastWalletAddress = wallet.account.address;

                showWalletConnectedStatus(wallet.account.address);

                await rateLimit();
                await verifyWalletOnBackend(wallet);

                state.lastCheckTime = Date.now();
                return true;

            } else {
                console.log('‚ùå [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

                state.walletCache = null;
                state.lastWalletAddress = null;

                store.actions.setWalletConnected(false);
                store.actions.disconnectWallet();

                showWalletConnectionUI();

                return false;
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error);

            if (error.message?.includes('429')) {
                console.warn('‚ö†Ô∏è [WalletChecker] Rate limit exceeded, –∑–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É');
                state.apiCallDelay = Math.min(state.apiCallDelay * 2, 60000);
            }

            if (!error.message?.includes('400') && !error.message?.includes('429')) {
                store.actions.setError('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è');
            }

            return false;

        } finally {
            store.actions.setWalletChecking(false);
            console.log('‚úÖ [WalletChecker] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
     */
    async function verifyWalletOnBackend(wallet) {
        console.log('üåê [WalletChecker] === –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –ù–ê –ë–ï–ö–ï–ù–î–Ü ===');

        if (!wallet || !wallet.account || !wallet.account.address) {
            console.error('‚ùå [WalletChecker] Wallet –∞–±–æ –∞–¥—Ä–µ—Å–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
            throw new Error('–ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –∞–±–æ –∞–¥—Ä–µ—Å–∞ –≤—ñ–¥—Å—É—Ç–Ω—è');
        }

        // TON Connect v2+ –ø–æ–≤–∏–Ω–µ–Ω –Ω–∞–¥–∞–≤–∞—Ç–∏ –æ–±–∏–¥–≤—ñ –∞–¥—Ä–µ—Å–∏
const rawAddress = wallet.account.address;
const userFriendlyAddress = wallet.account.publicKey
    ? await formatAddressToUserFriendly(rawAddress, wallet.account.publicKey)
    : rawAddress;

// –ê–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ —î –º–µ—Ç–æ–¥ –≤ TON Connect
const tonConnectAddress = state.tonConnectUI.account?.address;
const tonConnectFriendlyAddress = state.tonConnectUI.account?.addressFriendly
    || state.tonConnectUI.account?.userFriendlyAddress;

console.log('üìç –ê–¥—Ä–µ—Å–∏ –≤—ñ–¥ TON Connect:', {
    raw: rawAddress,
    friendly: userFriendlyAddress,
    tonConnectAddress: tonConnectAddress,
    tonConnectFriendly: tonConnectFriendlyAddress
});

const walletData = {
    address: rawAddress,
    addressFriendly: userFriendlyAddress || tonConnectFriendlyAddress || rawAddress,
    chain: chain,
    publicKey: publicKey,
    provider: wallet.device.appName || 'unknown',
    timestamp: Date.now()
};

        console.log('üîç [WalletChecker] –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó WALLET OBJECT:');
console.log('üì¶ –ü–æ–≤–Ω–∏–π wallet –æ–±\'—î–∫—Ç:', wallet);
console.log('üì¶ wallet.account:', wallet.account);
console.log('üì¶ –í—Å—ñ –∫–ª—é—á—ñ wallet.account:', Object.keys(wallet.account));
console.log('üì¶ address —Ñ–æ—Ä–º–∞—Ç:', address);
console.log('üì¶ –ß–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0:?', address.startsWith('0:'));
console.log('üì¶ –ß–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ UQ?', address.startsWith('UQ'));

        if (!address || typeof address !== 'string' || address.length < 10) {
            console.error('‚ùå [WalletChecker] –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏:', address);
            throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏ TON –≥–∞–º–∞–Ω—Ü—è');
        }

        console.log('‚úÖ [WalletChecker] –ê–¥—Ä–µ—Å–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', address);

        const chain = wallet.account.chain || '-239';
        const publicKey = wallet.account.publicKey || '';

        console.log('üìä [WalletChecker] –î–∞–Ω—ñ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', {
            userId: state.userId,
            address: address,
            chain: chain,
            provider: wallet.device.appName
        });

        try {
            await rateLimit();

            if (state.walletCache && state.walletCache.address === address) {
                console.log('üì¶ [WalletChecker] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –≥–∞–º–∞–Ω—Ü—è');
                updateWalletState(wallet, state.walletCache);
                await checkFlexBalance(address);
                return;
            }

            const statusResponse = await window.TasksAPI.wallet.checkStatus(state.userId);
            console.log('üìä [WalletChecker] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', statusResponse);

            if (statusResponse.data && statusResponse.data.connected && statusResponse.data.address === address) {
                console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π');

                state.walletCache = statusResponse.data;
                updateWalletState(wallet, statusResponse.data);

                await rateLimit();
                await checkFlexBalance(address);
                return;
            }

            await rateLimit();

            console.log('üîÑ [WalletChecker] –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ...');

// –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ addressFriendly –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
let addressFriendly = null;

// –í–∞—Ä—ñ–∞–Ω—Ç 1: –ú–æ–∂–ª–∏–≤–æ —î –≤ —ñ–Ω—à–æ–º—É –ø–æ–ª—ñ
if (wallet.account.addressFriendly) {
    addressFriendly = wallet.account.addressFriendly;
} else if (wallet.account.friendlyAddress) {
    addressFriendly = wallet.account.friendlyAddress;
} else if (wallet.account.userFriendlyAddress) {
    addressFriendly = wallet.account.userFriendlyAddress;
}

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É
console.log('üîç [WalletChecker] –ü–æ—à—É–∫ addressFriendly:', {
    addressFriendly: addressFriendly,
    address: address,
    allKeys: Object.keys(wallet.account)
});

const walletData = {
    address: address,
    addressFriendly: addressFriendly || address, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ address —è–∫ fallback
    chain: chain,
    publicKey: publicKey,
    provider: wallet.device.appName || 'unknown',
    timestamp: Date.now()
};

            console.log('üì§ [WalletChecker] –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', walletData);

            const connectResponse = await window.TasksAPI.wallet.connect(state.userId, walletData);

            console.log('‚úÖ [WalletChecker] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:', connectResponse);

            if (connectResponse.status === 'success') {
                state.walletCache = connectResponse.data.wallet;
                updateWalletState(wallet, connectResponse.data);

                if (connectResponse.data && connectResponse.data.first_connection) {
                    console.log('üéÅ [WalletChecker] –ü–µ—Ä—à–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è! –ë–æ–Ω—É—Å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π');
                    showFirstConnectionBonus(connectResponse.data.bonus);
                }

                await rateLimit();
                await checkFlexBalance(address);
            } else {
                throw new Error(connectResponse.message || 'Failed to connect wallet');
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ:', error);

            if (error.data && error.data.error_code === 'WALLET_ALREADY_CONNECTED') {
                console.log('‚ö†Ô∏è [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ —ñ–Ω—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞');
                window.TasksUtils?.showToast('–¶–µ–π –≥–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ —ñ–Ω—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞', 'error');
                await disconnectWallet();
                return;
            }

            if (error.data && error.data.error_code === 'INVALID_ADDRESS') {
                console.error('‚ùå [WalletChecker] –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è');
                window.TasksUtils?.showToast('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ TON –≥–∞–º–∞–Ω—Ü—è', 'error');
                return;
            }

            if (!error.message?.includes('400') && !error.message?.includes('429')) {
                window.TasksUtils?.showToast(
                    error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è',
                    'error'
                );
            }

            throw error;
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –≥–∞–º–∞–Ω—Ü—è –≤ Store
     */
    function updateWalletState(wallet, serverData) {
        console.log('üîÑ [WalletChecker] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥–∞–º–∞–Ω—Ü—è');

        const store = window.TasksStore;

        store.actions.setWalletConnected(true);

        const walletData = serverData.wallet || serverData;

        store.actions.setWalletAddress({
            address: wallet.account.address,
            chainId: wallet.account.chain,
            provider: wallet.device.appName,
            connected_at: walletData.connected_at,
            status: walletData.status
        });

        if (serverData.balance && serverData.balance.flex !== undefined) {
            store.actions.setFlexBalance(serverData.balance.flex);
        }

        showWalletConnectedStatus(wallet.account.address);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É FLEX
     */
    async function checkFlexBalance(address) {
        console.log('üíé [WalletChecker] === –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–õ–ê–ù–°–£ FLEX ===');

        try {
            const response = await window.TasksAPI.flex.getBalance(state.userId, address);

            console.log('üí∞ [WalletChecker] –ë–∞–ª–∞–Ω—Å FLEX:', response);

            if (response.balance !== undefined) {
                const balance = parseInt(response.balance);
                console.log('‚úÖ [WalletChecker] –ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ:', window.TasksUtils.formatNumber(balance));

                window.TasksStore.actions.setFlexBalance(balance);
                window.TasksStore.actions.updateBalance({ flex: balance });

                await checkAvailableLevels(balance);
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
     */
    async function checkAvailableLevels(flexBalance) {
        console.log('üéØ [WalletChecker] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤...');
        console.log('üíé [WalletChecker] –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:', window.TasksUtils.formatNumber(flexBalance));

        const flexLevels = window.TasksConstants?.FLEX_LEVELS || {};
        let availableCount = 0;

        Object.entries(flexLevels).forEach(([levelKey, levelData]) => {
            const isAvailable = flexBalance >= levelData.required;

            window.TasksStore.actions.setFlexLevelAvailable(levelKey, isAvailable);

            if (isAvailable) {
                availableCount++;
            }

            console.log(`üìä [WalletChecker] ${levelKey}: ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∏–π' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}`);
        });

        console.log(`‚úÖ [WalletChecker] –î–æ—Å—Ç—É–ø–Ω–æ —Ä—ñ–≤–Ω—ñ–≤: ${availableCount}`);

        if (availableCount > 0) {
            window.TasksUtils.showToast(
                `–î–æ—Å—Ç—É–ø–Ω–æ ${availableCount} ${availableCount === 1 ? '—Ä—ñ–≤–µ–Ω—å' : '—Ä—ñ–≤–Ω—ñ–≤'} –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥!`,
                'success'
            );
        }
    }

    /**
     * –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å
     */
    async function connectWallet() {
        console.log('üîå [WalletChecker] === –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');

        if (state.tonConnectUI?.connected) {
            console.log('‚ö†Ô∏è [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            window.TasksUtils?.showToast('–ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'info');
            await checkWalletConnection();
            return;
        }

        if (state.isConnecting) {
            console.log('‚è∏Ô∏è [WalletChecker] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ, —ñ–≥–Ω–æ—Ä—É—î–º–æ');
            return;
        }

        if (!state.isInitialized) {
            console.log('‚ö†Ô∏è [WalletChecker] –ú–æ–¥—É–ª—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é...');

            try {
                await init();
            } catch (error) {
                console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
                window.TasksUtils?.showToast('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≥–∞–º–∞–Ω—Ü—è', 'error');
                return;
            }
        }

        if (!state.tonConnectUI) {
            console.error('‚ùå [WalletChecker] TON Connect UI –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
            window.TasksUtils?.showToast('–°–∏—Å—Ç–µ–º–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è –Ω–µ –≥–æ—Ç–æ–≤–∞', 'error');
            return;
        }

        state.isConnecting = true;
        state.connectionAttempts++;
        console.log(`üîÑ [WalletChecker] –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è #${state.connectionAttempts}`);

        try {
            updateConnectButton(true);

            await state.tonConnectUI.connectWallet();
            console.log('‚úÖ [WalletChecker] –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');

            window.TasksUtils.showToast('–û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è', 'info');

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);

            if (error.message?.includes('wallet already connected')) {
                console.log('‚ö†Ô∏è [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –±—É–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω');
                await checkWalletConnection();
                return;
            }

            if (state.connectionAttempts >= config.maxConnectionAttempts) {
                console.error('‚ùå [WalletChecker] –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±');
                window.TasksUtils.showToast('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ', 'error');
                state.connectionAttempts = 0;
            } else {
                window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', 'error');
            }
        } finally {
            state.isConnecting = false;
            setTimeout(() => updateConnectButton(false), 3000);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    function updateConnectButton(isConnecting) {
        const buttons = document.querySelectorAll('.connect-wallet-redirect');
        buttons.forEach(button => {
            if (isConnecting) {
                button.disabled = true;
                button.textContent = '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...';
                button.style.opacity = '0.7';
            } else {
                button.disabled = false;
                button.textContent = '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–æ—à–µ–ª–µ–∫';
                button.style.opacity = '';
            }
        });
    }

    /**
     * –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å
     */
    async function disconnectWallet() {
        console.log('üîå [WalletChecker] === –í–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');

        const confirmed = confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å?');
        if (!confirmed) {
            console.log('‚ùå [WalletChecker] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
            return;
        }

        try {
            if (state.tonConnectUI?.connected) {
                await state.tonConnectUI.disconnect();
            }

            console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            state.walletCache = null;
            state.lastWalletAddress = null;

            window.TasksStore.actions.disconnectWallet();

            showWalletConnectionUI();

            window.TasksUtils.showToast('–ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'info');

            if (state.userId) {
                try {
                    await window.TasksAPI.wallet.disconnect(state.userId);
                    console.log('‚úÖ [WalletChecker] –ë–µ–∫–µ–Ω–¥ —Å–ø–æ–≤—ñ—â–µ–Ω–æ –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
                } catch (error) {
                    console.warn('‚ö†Ô∏è [WalletChecker] –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∫–µ–Ω–¥—É:', error);
                }
            }

        } catch (error) {
            console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è', 'error');
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è
     */
    async function handleWalletStatusChange(wallet) {
        console.log('üîÑ [WalletChecker] === –û–ë–†–û–ë–ö–ê –ó–ú–Ü–ù–ò –°–¢–ê–¢–£–°–£ ===');

        await new Promise(resolve => setTimeout(resolve, 2000));

        if (wallet) {
            console.log('‚úÖ [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', wallet);

            state.connectionAttempts = 0;
            state.isConnecting = false;

            updateConnectButton(false);

            state.lastWalletAddress = wallet.account.address;

            try {
                await rateLimit();
                await verifyWalletOnBackend(wallet);
            } catch (error) {
                console.error('‚ùå [WalletChecker] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);

                if (!error.message?.includes('400') && !error.message?.includes('429')) {
                    if (error.message?.includes('Network error') || error.message?.includes('500')) {
                        await disconnectWallet();
                    }
                }
            }

        } else {
            console.log('‚ùå [WalletChecker] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            state.walletCache = null;
            state.lastWalletAddress = null;

            window.TasksStore.actions.disconnectWallet();
            showWalletConnectionUI();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—à–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    function showFirstConnectionBonus(bonus) {
        console.log('üéÅ [WalletChecker] === –ë–û–ù–£–° –ó–ê –ü–ï–†–®–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø ===');

        if (!bonus || (!bonus.winix && !bonus.tickets)) {
            console.warn('‚ö†Ô∏è [WalletChecker] –ë–æ–Ω—É—Å –Ω–µ –Ω–∞–¥–∞–Ω–∏–π');
            return;
        }

        let message = '–í—ñ—Ç–∞—î–º–æ! –ë–æ–Ω—É—Å –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è: ';
        if (bonus.winix || bonus.amount) {
            const amount = bonus.winix || bonus.amount;
            message += `+${amount} WINIX`;
        }
        if (bonus.tickets) {
            message += ` —Ç–∞ +${bonus.tickets} tickets`;
        }

        window.TasksUtils.showToast(message, 'success', 5000);

        const currentBalance = window.TasksStore.selectors.getUserBalance();
        const winixBonus = bonus.winix || bonus.amount || 0;

        window.TasksStore.actions.updateBalance({
            winix: currentBalance.winix + winixBonus,
            tickets: currentBalance.tickets + (bonus.tickets || 0)
        });

        console.log('‚úÖ [WalletChecker] –ë–æ–Ω—É—Å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ:', bonus);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function startPeriodicCheck() {
        console.log('‚è∞ [WalletChecker] –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
        console.log(`‚è±Ô∏è [WalletChecker] –Ü–Ω—Ç–µ—Ä–≤–∞–ª: ${config.checkIntervalMs / 1000 / 60} —Ö–≤–∏–ª–∏–Ω`);

        if (state.checkInterval) {
            clearInterval(state.checkInterval);
        }

        state.checkInterval = setInterval(() => {
            console.log('üîÑ [WalletChecker] === –ü–ï–†–Ü–û–î–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê ===');
            checkWalletConnection();
        }, config.checkIntervalMs);

        console.log('‚úÖ [WalletChecker] –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function stopPeriodicCheck() {
        console.log('‚èπÔ∏è [WalletChecker] –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');

        if (state.checkInterval) {
            clearInterval(state.checkInterval);
            state.checkInterval = null;
            console.log('‚úÖ [WalletChecker] –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞');
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
     */
    function setupEventListeners() {
        console.log('üéØ [WalletChecker] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π');

        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && state.isInitialized) {
                const timeSinceLastCheck = Date.now() - (state.lastCheckTime || 0);
                if (timeSinceLastCheck > 60000) {
                    console.log('üëÅÔ∏è [WalletChecker] –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ—é, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å');
                    checkWalletConnection();
                }
            }
        });

        window.addEventListener('focus', () => {
            if (state.isInitialized) {
                const timeSinceLastCheck = Date.now() - (state.lastCheckTime || 0);
                if (timeSinceLastCheck > 60000) {
                    console.log('üîç [WalletChecker] –í—ñ–∫–Ω–æ —É —Ñ–æ–∫—É—Å—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å');
                    checkWalletConnection();
                }
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        document.addEventListener('click', async (e) => {
            if (e.target.id === 'wallet-disconnect-btn' || e.target.closest('#wallet-disconnect-btn')) {
                e.preventDefault();
                e.stopPropagation();
                await disconnectWallet();
            }
        });

        console.log('‚úÖ [WalletChecker] –°–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
     */
    function getStatus() {
        return {
            initialized: state.isInitialized,
            connected: state.tonConnectUI?.connected || false,
            lastCheck: state.lastCheckTime,
            connectionAttempts: state.connectionAttempts,
            userId: state.userId,
            isConnecting: state.isConnecting,
            lastWalletAddress: state.lastWalletAddress,
            hasCachedData: !!state.walletCache
        };
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [WalletChecker] === –ó–ù–ò–©–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ===');

        stopPeriodicCheck();

        if (state.tonConnectUI) {
            state.tonConnectUI = null;
        }

        state.isInitialized = false;
        state.lastCheckTime = null;
        state.connectionAttempts = 0;
        state.isConnecting = false;
        state.initPromise = null;
        state.walletCache = null;
        state.lastWalletAddress = null;

        console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        checkWalletConnection,
        connectWallet,
        disconnectWallet,
        checkFlexBalance,
        getStatus,
        destroy
    };

})();

console.log('‚úÖ [WalletChecker] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');