
/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à—É –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –Ñ–¥–∏–Ω–∞ —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è–º –¥–ª—è —É—Å—É–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
 */

window.CacheManager = (function() {
    'use strict';

    console.log('üíæ [CacheManager] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–û–ì–û –ö–ï–®–£ =====');

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è TTL –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö
    const TTL_CONFIG = {
        // API –¥–∞–Ω—ñ
        userProfile: 5 * 60 * 1000,      // 5 —Ö–≤–∏–ª–∏–Ω
        balance: 30 * 1000,              // 30 —Å–µ–∫—É–Ω–¥
        tasks: 2 * 60 * 1000,            // 2 —Ö–≤–∏–ª–∏–Ω–∏
        walletStatus: 60 * 1000,         // 1 —Ö–≤–∏–ª–∏–Ω–∞
        dailyStatus: 60 * 1000,          // 1 —Ö–≤–∏–ª–∏–Ω–∞
        flexBalance: 30 * 1000,          // 30 —Å–µ–∫—É–Ω–¥

        // –°–∏—Å—Ç–µ–º–Ω—ñ –¥–∞–Ω—ñ
        apiHealth: 30 * 1000,            // 30 —Å–µ–∫—É–Ω–¥
        validation: 5 * 60 * 1000,       // 5 —Ö–≤–∏–ª–∏–Ω
        telegramData: 10 * 60 * 1000,    // 10 —Ö–≤–∏–ª–∏–Ω
        tokenInfo: 60 * 1000,            // 1 —Ö–≤–∏–ª–∏–Ω–∞

        // UI –¥–∞–Ω—ñ
        uiState: Infinity,               // –ù–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        tempData: 10 * 1000              // 10 —Å–µ–∫—É–Ω–¥
    };

    // –û—Å–Ω–æ–≤–Ω–µ —Å—Ö–æ–≤–∏—â–µ
    const storage = {
        data: new Map(),
        metadata: new Map(),
        subscribers: new Map(),
        cleanupTimers: new Map()
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    const stats = {
        hits: 0,
        misses: 0,
        sets: 0,
        deletes: 0,
        startTime: Date.now()
    };

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á–∞ –∑ namespace
     */
    function generateKey(namespace, key) {
        return `${namespace}:${key}`;
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–µ—à
     */
    function set(namespace, key, value, customTTL) {
        const fullKey = generateKey(namespace, key);
        const ttl = customTTL || TTL_CONFIG[namespace] || 60000;

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —Ç–∞–π–º–µ—Ä —è–∫—â–æ —î
        const oldTimer = storage.cleanupTimers.get(fullKey);
        if (oldTimer) {
            clearTimeout(oldTimer);
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        storage.data.set(fullKey, value);
        storage.metadata.set(fullKey, {
            timestamp: Date.now(),
            ttl: ttl,
            namespace: namespace,
            hits: 0,
            size: estimateSize(value)
        });

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è —è–∫—â–æ TTL –Ω–µ –≤—ñ—á–Ω–∏–π
        if (ttl !== Infinity) {
            const timer = setTimeout(() => {
                invalidate(namespace, key);
            }, ttl);
            storage.cleanupTimers.set(fullKey, timer);
        }

        stats.sets++;

        // –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
        notifySubscribers(namespace, key, 'set', value);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É
        checkCacheSize();

        return value;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–µ—à—É
     */
    function get(namespace, key, defaultValue = null) {
        const fullKey = generateKey(namespace, key);

        if (!storage.data.has(fullKey)) {
            stats.misses++;
            return defaultValue;
        }

        const metadata = storage.metadata.get(fullKey);
        const now = Date.now();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTL
        if (metadata.ttl !== Infinity && now - metadata.timestamp > metadata.ttl) {
            invalidate(namespace, key);
            stats.misses++;
            return defaultValue;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        metadata.hits++;
        stats.hits++;

        const value = storage.data.get(fullKey);

        // –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
        notifySubscribers(namespace, key, 'get', value);

        return value;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î –∫–ª—é—á —ñ —á–∏ –≤–∞–ª—ñ–¥–Ω–∏–π
     */
    function has(namespace, key) {
        const fullKey = generateKey(namespace, key);

        if (!storage.data.has(fullKey)) {
            return false;
        }

        const metadata = storage.metadata.get(fullKey);
        const now = Date.now();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTL
        if (metadata.ttl !== Infinity && now - metadata.timestamp > metadata.ttl) {
            invalidate(namespace, key);
            return false;
        }

        return true;
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ –∑–º—ñ–Ω–∏–ª–æ—Å—å
     */
    function update(namespace, key, value, customTTL) {
        const fullKey = generateKey(namespace, key);
        const oldValue = storage.data.get(fullKey);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—å –¥–∞–Ω—ñ
        if (oldValue !== undefined && JSON.stringify(oldValue) === JSON.stringify(value)) {
            // –î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å, —Ç—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ timestamp
            const metadata = storage.metadata.get(fullKey);
            if (metadata) {
                metadata.timestamp = Date.now();
            }
            return false; // –ù–µ –±—É–ª–æ –∑–º—ñ–Ω
        }

        // –î–∞–Ω—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—å, –æ–Ω–æ–≤–ª—é—î–º–æ
        set(namespace, key, value, customTTL);
        return true; // –ë—É–ª–∏ –∑–º—ñ–Ω–∏
    }

    /**
     * –Ü–Ω–≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á
     */
    function invalidate(namespace, key) {
        const fullKey = generateKey(namespace, key);

        // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ
        const deleted = storage.data.delete(fullKey);
        storage.metadata.delete(fullKey);

        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä
        const timer = storage.cleanupTimers.get(fullKey);
        if (timer) {
            clearTimeout(timer);
            storage.cleanupTimers.delete(fullKey);
        }

        if (deleted) {
            stats.deletes++;
            // –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
            notifySubscribers(namespace, key, 'invalidate', null);
        }

        return deleted;
    }

    /**
     * –Ü–Ω–≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–ª—é—á—ñ –≤ namespace
     */
    function invalidateNamespace(namespace) {
        const keysToDelete = [];

        storage.metadata.forEach((meta, fullKey) => {
            if (meta.namespace === namespace) {
                keysToDelete.push(fullKey);
            }
        });

        keysToDelete.forEach(fullKey => {
            storage.data.delete(fullKey);
            storage.metadata.delete(fullKey);

            const timer = storage.cleanupTimers.get(fullKey);
            if (timer) {
                clearTimeout(timer);
                storage.cleanupTimers.delete(fullKey);
            }
        });

        stats.deletes += keysToDelete.length;

        // –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ namespace
        const subscribers = storage.subscribers.get(namespace);
        if (subscribers) {
            subscribers.forEach(callback => {
                try {
                    callback('invalidateNamespace', namespace, null);
                } catch (error) {
                    console.error('‚ùå [CacheManager] –ü–æ–º–∏–ª–∫–∞ –≤ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—É:', error);
                }
            });
        }

        return keysToDelete.length;
    }

    /**
     * –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∑–º—ñ–Ω–∏ –≤ –∫–µ—à—ñ
     */
    function subscribe(namespace, callback) {
        if (!storage.subscribers.has(namespace)) {
            storage.subscribers.set(namespace, new Set());
        }

        storage.subscribers.get(namespace).add(callback);

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–ø–∏—Å–∫–∏
        return function unsubscribe() {
            const subscribers = storage.subscribers.get(namespace);
            if (subscribers) {
                subscribers.delete(callback);
                if (subscribers.size === 0) {
                    storage.subscribers.delete(namespace);
                }
            }
        };
    }

    /**
     * –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω–∏
     */
    function notifySubscribers(namespace, key, action, value) {
        const subscribers = storage.subscribers.get(namespace);
        if (!subscribers) return;

        subscribers.forEach(callback => {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ microtask –¥–ª—è async —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            queueMicrotask(() => {
                try {
                    callback(action, key, value);
                } catch (error) {
                    console.error('‚ùå [CacheManager] –ü–æ–º–∏–ª–∫–∞ –≤ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—É:', error);
                }
            });
        });
    }

    /**
     * –û—Ü—ñ–Ω–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –¥–∞–Ω–∏—Ö
     */
    function estimateSize(data) {
        try {
            return JSON.stringify(data).length;
        } catch (e) {
            return 0;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –∫–µ—à—É —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
     */
    function checkCacheSize() {
        const maxSize = 10 * 1024 * 1024; // 10MB
        let totalSize = 0;

        storage.metadata.forEach(meta => {
            totalSize += meta.size;
        });

        if (totalSize > maxSize) {
            console.warn('‚ö†Ô∏è [CacheManager] –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∫–µ—à—É, –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö');
            performLRUCleanup();
        }
    }

    /**
     * LRU –æ—á–∏—â–µ–Ω–Ω—è - –≤–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π–º–µ–Ω—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ
     */
    function performLRUCleanup() {
        const entries = [];

        storage.metadata.forEach((meta, fullKey) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ—á–Ω—ñ –¥–∞–Ω—ñ
            if (meta.ttl === Infinity) return;

            entries.push({
                key: fullKey,
                score: meta.hits / (Date.now() - meta.timestamp),
                meta: meta
            });
        });

        // –°–æ—Ä—Ç—É—î–º–æ –ø–æ score (–º–µ–Ω—à–∏–π score = –º–µ–Ω—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏–π)
        entries.sort((a, b) => a.score - b.score);

        // –í–∏–¥–∞–ª—è—î–º–æ 20% –Ω–∞–π–º–µ–Ω—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏—Ö
        const toDelete = Math.floor(entries.length * 0.2);

        for (let i = 0; i < toDelete; i++) {
            const entry = entries[i];
            storage.data.delete(entry.key);
            storage.metadata.delete(entry.key);

            const timer = storage.cleanupTimers.get(entry.key);
            if (timer) {
                clearTimeout(timer);
                storage.cleanupTimers.delete(entry.key);
            }
        }

        console.log(`‚úÖ [CacheManager] –û—á–∏—â–µ–Ω–æ ${toDelete} –∑–∞–ø–∏—Å—ñ–≤`);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –∫–µ—à
     */
    function clear() {
        // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏
        storage.cleanupTimers.forEach(timer => clearTimeout(timer));

        // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        storage.data.clear();
        storage.metadata.clear();
        storage.cleanupTimers.clear();

        stats.deletes += storage.data.size;

        // –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
        storage.subscribers.forEach((subscribers, namespace) => {
            subscribers.forEach(callback => {
                try {
                    callback('clear', null, null);
                } catch (error) {
                    console.error('‚ùå [CacheManager] –ü–æ–º–∏–ª–∫–∞ –≤ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—É:', error);
                }
            });
        });

        console.log('‚úÖ [CacheManager] –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É
     */
    function getStats() {
        const now = Date.now();
        const uptime = now - stats.startTime;
        const hitRate = stats.hits / (stats.hits + stats.misses) || 0;

        let totalSize = 0;
        let totalEntries = storage.data.size;

        storage.metadata.forEach(meta => {
            totalSize += meta.size;
        });

        return {
            entries: totalEntries,
            size: totalSize,
            sizeFormatted: (totalSize / 1024).toFixed(2) + ' KB',
            hits: stats.hits,
            misses: stats.misses,
            sets: stats.sets,
            deletes: stats.deletes,
            hitRate: (hitRate * 100).toFixed(2) + '%',
            uptime: Math.floor(uptime / 1000) + ' seconds',
            namespaces: new Set(Array.from(storage.metadata.values()).map(m => m.namespace)).size
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ namespace
     */
    function getNamespaceData(namespace) {
        const result = {};

        storage.data.forEach((value, fullKey) => {
            const meta = storage.metadata.get(fullKey);
            if (meta && meta.namespace === namespace) {
                const key = fullKey.replace(`${namespace}:`, '');
                result[key] = value;
            }
        });

        return result;
    }

    /**
     * Batch –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
     */
    const batch = {
        operations: [],

        set(namespace, key, value, ttl) {
            this.operations.push({ type: 'set', namespace, key, value, ttl });
            return this;
        },

        get(namespace, key) {
            const value = get(namespace, key);
            return value;
        },

        invalidate(namespace, key) {
            this.operations.push({ type: 'invalidate', namespace, key });
            return this;
        },

        execute() {
            const results = [];

            this.operations.forEach(op => {
                if (op.type === 'set') {
                    results.push(set(op.namespace, op.key, op.value, op.ttl));
                } else if (op.type === 'invalidate') {
                    results.push(invalidate(op.namespace, op.key));
                }
            });

            this.operations = [];
            return results;
        }
    };

    console.log('‚úÖ [CacheManager] –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        set,
        get,
        has,
        update,
        invalidate,
        invalidateNamespace,
        subscribe,
        clear,
        getStats,
        getNamespaceData,
        batch,

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è namespace
        NAMESPACES: {
            USER: 'userProfile',
            BALANCE: 'balance',
            TASKS: 'tasks',
            WALLET: 'walletStatus',
            DAILY: 'dailyStatus',
            FLEX: 'flexBalance',
            API: 'apiHealth',
            VALIDATION: 'validation',
            TELEGRAM: 'telegramData',
            TOKEN: 'tokenInfo',
            UI: 'uiState',
            TEMP: 'tempData'
        }
    };
})();

console.log('‚úÖ [CacheManager] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');