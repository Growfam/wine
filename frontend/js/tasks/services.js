/**
 * –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –º—ñ–∂ –º–æ–¥—É–ª—è–º–∏
 */

window.TasksServices = (function() {
    'use strict';

    console.log('üõ†Ô∏è [TasksServices] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ï–†–í–Ü–°–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    const AuthService = {
        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        async initUser() {
            console.log('üë§ [AuthService] === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');

            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Telegram
                const telegramUser = this.getTelegramUser();
                if (!telegramUser) {
                    throw new Error('Telegram user data not found');
                }

                console.log('üì± [AuthService] Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:', telegramUser);

                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –±–µ–∫–µ–Ω–¥—É
                const profile = await window.TasksAPI.user.getProfile(telegramUser.id);
                console.log('‚úÖ [AuthService] –ü—Ä–æ—Ñ—ñ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', profile);

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä
                window.TasksStore.actions.setUser({
                    id: profile.id,
                    telegramId: telegramUser.id,
                    username: profile.username || telegramUser.username,
                    balance: profile.balance || { winix: 0, tickets: 0, flex: 0 }
                });

                return profile;

            } catch (error) {
                console.error('‚ùå [AuthService] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);

                // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
                if (window.TasksConstants.DEBUG.ENABLED) {
                    console.warn('‚ö†Ô∏è [AuthService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á');
                    const demoUser = {
                        id: 123456789,
                        telegramId: 123456789,
                        username: 'demo_user',
                        balance: { winix: 1000, tickets: 10, flex: 0 }
                    };

                    window.TasksStore.actions.setUser(demoUser);
                    return demoUser;
                }

                throw error;
            }
        },

        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        getTelegramUser() {
            console.log('üì± [AuthService] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

            if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
                return window.Telegram.WebApp.initDataUnsafe.user;
            }

            // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
            const storedId = localStorage.getItem('telegram_user_id');
            if (storedId) {
                return { id: parseInt(storedId), username: 'stored_user' };
            }

            return null;
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
     */
    const SyncService = {
        syncInterval: null,
        lastSyncTime: 0,

        /**
         * –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
         */
        startAutoSync() {
            console.log('üîÑ [SyncService] === –ó–ê–ü–£–°–ö –ê–í–¢–û–°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á ===');

            // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            if (this.syncInterval) {
                clearInterval(this.syncInterval);
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            const SYNC_INTERVAL = 5 * 60 * 1000;

            this.syncInterval = setInterval(() => {
                this.syncData();
            }, SYNC_INTERVAL);

            console.log(`‚úÖ [SyncService] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞ (–∫–æ–∂–Ω—ñ ${SYNC_INTERVAL/1000/60} —Ö–≤)`);
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
         */
        async syncData() {
            console.log('üîÑ [SyncService] === –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• ===');
            console.log('üïê [SyncService] –ß–∞—Å:', new Date().toISOString());

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É
            const now = Date.now();
            const timeSinceLastSync = now - this.lastSyncTime;

            if (timeSinceLastSync < 30000) { // 30 —Å–µ–∫—É–Ω–¥
                console.log('‚è∏Ô∏è [SyncService] –ó–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó');
                return;
            }

            this.lastSyncTime = now;

            try {
                const userId = window.TasksStore.selectors.getUserId();
                if (!userId) {
                    console.warn('‚ö†Ô∏è [SyncService] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                    return;
                }

                // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
                const promises = [
                    this.syncBalance(userId),
                    this.syncFlexStatus(userId),
                    this.syncDailyBonus(userId),
                    this.syncTasks(userId)
                ];

                await Promise.allSettled(promises);

                console.log('‚úÖ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É
         */
        async syncBalance(userId) {
            console.log('üí∞ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É...');

            try {
                const response = await window.TasksAPI.user.getBalance(userId);
                window.TasksStore.actions.updateBalance(response.balance);
                console.log('‚úÖ [SyncService] –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ:', response.balance);
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex —Å—Ç–∞—Ç—É—Å—É
         */
        async syncFlexStatus(userId) {
            console.log('üíé [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex —Å—Ç–∞—Ç—É—Å—É...');

            const wallet = window.TasksStore.selectors.getWalletAddress();
            if (!wallet) {
                console.log('‚è∏Ô∏è [SyncService] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                return;
            }

            try {
                await window.FlexEarnManager?.checkFlexBalance();
                console.log('‚úÖ [SyncService] Flex —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó Flex:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
         */
        async syncDailyBonus(userId) {
            console.log('üéÅ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É...');

            try {
                const response = await window.TasksAPI.daily.getStatus(userId);
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
                if (window.DailyBonusManager) {
                    window.DailyBonusManager.updateDailyBonusUI();
                }
                console.log('‚úÖ [SyncService] –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–æ–Ω—É—Å—É:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å
         */
        async syncTasks(userId) {
            console.log('üìã [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å...');

            try {
                const response = await window.TasksAPI.tasks.getList(userId);
                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —Å—Ç–æ—Ä—ñ
                if (response.tasks) {
                    Object.entries(response.tasks).forEach(([type, tasks]) => {
                        window.TasksStore.actions.setTasks(type, tasks);
                    });
                }
                console.log('‚úÖ [SyncService] –ó–∞–≤–¥–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å:', error);
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π
     */
    const NotificationService = {
        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å–ø—ñ—à–Ω—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
         */
        showSuccess(message, duration = 3000) {
            console.log('‚úÖ [NotificationService] –£—Å–ø—ñ—Ö:', message);
            window.TasksUtils.showToast(message, 'success', duration);

            // –í—ñ–±—Ä–∞—Ü—ñ—è –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
            this.vibrate([50]);
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
         */
        showError(message, duration = 5000) {
            console.log('‚ùå [NotificationService] –ü–æ–º–∏–ª–∫–∞:', message);
            window.TasksUtils.showToast(message, 'error', duration);

            // –î–æ–≤—à–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è –¥–ª—è –ø–æ–º–∏–ª–æ–∫
            this.vibrate([100, 50, 100]);
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
         */
        showWarning(message, duration = 4000) {
            console.log('‚ö†Ô∏è [NotificationService] –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:', message);
            window.TasksUtils.showToast(message, 'warning', duration);

            this.vibrate([75]);
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
         */
        showInfo(message, duration = 3000) {
            console.log('‚ÑπÔ∏è [NotificationService] –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:', message);
            window.TasksUtils.showToast(message, 'info', duration);
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
         */
        showReward(reward) {
            console.log('üéÅ [NotificationService] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞:', reward);

            let message = '';
            if (reward.winix > 0) {
                message += `+${reward.winix} WINIX`;
            }
            if (reward.tickets > 0) {
                message += ` +${reward.tickets} tickets`;
            }

            this.showSuccess(message, 4000);

            // –°–≤—è—Ç–∫–æ–≤–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è
            this.vibrate([50, 100, 50, 100, 50]);
        },

        /**
         * –í—ñ–±—Ä–∞—Ü—ñ—è (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
         */
        vibrate(pattern) {
            if ('vibrate' in navigator) {
                navigator.vibrate(pattern);
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
     */
    const AnalyticsService = {
        /**
         * –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–æ–¥—ñ—é
         */
        trackEvent(category, action, label, value) {
            console.log('üìä [AnalyticsService] –ü–æ–¥—ñ—è:', {
                category,
                action,
                label,
                value
            });

            // Telegram WebApp –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
            if (window.Telegram?.WebApp) {
                window.Telegram.WebApp.sendData(JSON.stringify({
                    type: 'analytics',
                    event: { category, action, label, value },
                    timestamp: Date.now()
                }));
            }

            // Google Analytics (—è–∫—â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ)
            if (window.gtag) {
                window.gtag('event', action, {
                    event_category: category,
                    event_label: label,
                    value: value
                });
            }
        },

        /**
         * –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
         */
        trackPageView(pageName) {
            console.log('üìÑ [AnalyticsService] –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', pageName);
            this.trackEvent('Navigation', 'page_view', pageName);
        },

        /**
         * –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É
         */
        trackError(error, context) {
            console.log('üêõ [AnalyticsService] –ü–æ–º–∏–ª–∫–∞:', error, context);
            this.trackEvent('Error', error.name || 'Unknown', context);
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –∫–µ—à—É–≤–∞–Ω–Ω—è
     */
    const CacheService = {
        cache: new Map(),

        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–µ—à—É
         */
        get(key) {
            const item = this.cache.get(key);
            if (!item) return null;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
            if (item.expires && item.expires < Date.now()) {
                this.cache.delete(key);
                return null;
            }

            console.log(`üì¶ [CacheService] –û—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É: ${key}`);
            return item.value;
        },

        /**
         * –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –∫–µ—à
         */
        set(key, value, ttl = 300000) { // 5 —Ö–≤–∏–ª–∏–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            console.log(`üíæ [CacheService] –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∫–µ—à: ${key}`);

            this.cache.set(key, {
                value,
                expires: ttl ? Date.now() + ttl : null
            });
        },

        /**
         * –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–µ—à—É
         */
        delete(key) {
            console.log(`üóëÔ∏è [CacheService] –í–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–µ—à—É: ${key}`);
            this.cache.delete(key);
        },

        /**
         * –û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –∫–µ—à
         */
        clear() {
            console.log('üßπ [CacheService] –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
            this.cache.clear();
        },

        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É
         */
        size() {
            return this.cache.size;
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    const ValidationService = {
        /**
         * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è
         */
        validateTask(task) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', task);

            const errors = [];

            if (!task.id) errors.push('ID –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.type) errors.push('–¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.title) errors.push('–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è');
            if (!task.reward) errors.push('–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –≤—ñ–¥—Å—É—Ç–Ω—è');

            if (errors.length > 0) {
                console.error('‚ùå [ValidationService] –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors);
                return { valid: false, errors };
            }

            console.log('‚úÖ [ValidationService] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–µ');
            return { valid: true };
        },

        /**
         * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
         */
        validateTransaction(transaction) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', transaction);

            const errors = [];

            if (!transaction.amount || transaction.amount <= 0) {
                errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó');
            }

            if (!transaction.type) {
                errors.push('–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            }

            if (!transaction.userId) {
                errors.push('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            }

            if (errors.length > 0) {
                console.error('‚ùå [ValidationService] –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors);
                return { valid: false, errors };
            }

            console.log('‚úÖ [ValidationService] –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞');
            return { valid: true };
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
    function init() {
        console.log('üöÄ [TasksServices] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤');

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        SyncService.startAutoSync();

        console.log('‚úÖ [TasksServices] –°–µ—Ä–≤—ñ—Å–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    setTimeout(init, 100);

    console.log('‚úÖ [TasksServices] –°–µ—Ä–≤—ñ—Å–Ω–∏–π –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        Auth: AuthService,
        Sync: SyncService,
        Notification: NotificationService,
        Analytics: AnalyticsService,
        Cache: CacheService,
        Validation: ValidationService
    };

})();

console.log('‚úÖ [TasksServices] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');