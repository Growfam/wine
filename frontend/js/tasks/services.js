/**
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
 */

window.TasksServices = (function() {
    'use strict';

    console.log('üõ†Ô∏è [TasksServices] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –°–ï–†–í–Ü–°–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
    const { CacheManager, RequestManager, EventBus } = window;

    // RequestManager –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const requestClient = RequestManager.createClient('services');

    // EventBus namespace –¥–ª—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const eventBus = EventBus.createNamespace('services');

    // –°—Ç–∞–Ω —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const servicesState = {
        initialized: false,
        dependencies: {
            telegramValidator: false,
            tasksAPI: false,
            tasksStore: false,
            tasksConstants: false
        },
        userActivity: {
            lastAction: Date.now(),
            isActive: true
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
     */
    function checkDependencies() {
        console.log('üîç [TasksServices] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');

        servicesState.dependencies.telegramValidator = !!(window.TelegramValidator?.validateTelegramAuth);
        servicesState.dependencies.tasksAPI = !!(window.TasksAPI?.auth);
        servicesState.dependencies.tasksStore = !!(window.TasksStore?.actions);
        servicesState.dependencies.tasksConstants = !!(window.TasksConstants?.API_ENDPOINTS);

        const allReady = Object.values(servicesState.dependencies).every(ready => ready);

        console.log(`${allReady ? '‚úÖ' : '‚ùå'} [TasksServices] –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≥–æ—Ç–æ–≤—ñ:`, allReady);

        return allReady;
    }

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    const AuthService = {
        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        async initUser() {
            console.log('üë§ [AuthService] === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à —Å–µ—Å—ñ—ó
            const cachedSession = CacheManager.get(CacheManager.NAMESPACES.USER, 'session');
            if (cachedSession) {
                console.log('‚úÖ [AuthService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É —Å–µ—Å—ñ—é');
                this.updateUserUI(cachedSession);
                return cachedSession;
            }

            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
                if (!checkDependencies()) {
                    throw new Error('–°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è. –ó–∞—á–µ–∫–∞–π—Ç–µ...');
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram
                console.log('üîÑ [AuthService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram...');
                const validation = await window.TelegramValidator.validateTelegramAuth();

                if (!validation.valid) {
                    throw new Error('Telegram authentication failed: ' + validation.error);
                }

                const telegramUser = validation.user;

                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —á–µ—Ä–µ–∑ RequestManager
                console.log('üîÑ [AuthService] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é...');
                const profile = await requestClient.execute(
                    `profile_${telegramUser.telegram_id}`,
                    () => window.TasksAPI.user.getProfile(telegramUser.telegram_id || telegramUser.id),
                    { priority: 'high' }
                );

                if (!profile?.data) {
                    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                window.TasksStore.actions.setUser({
                    id: profile.data.id,
                    telegramId: telegramUser.telegram_id || telegramUser.id,
                    username: profile.data.username || telegramUser.username,
                    balance: profile.data.balance || { winix: 0, tickets: 0, flex: 0 }
                });

                // –ö–µ—à—É—î–º–æ —Å–µ—Å—ñ—é
                CacheManager.set(CacheManager.NAMESPACES.USER, 'session', profile.data);

                // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
                EventBus.emit(EventBus.EVENTS.USER_LOGGED_IN, {
                    userId: profile.data.id,
                    user: profile.data
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                this.updateUserUI(profile.data);

                console.log('‚úÖ [AuthService] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                return profile.data;

            } catch (error) {
                console.error('‚ùå [AuthService] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);

                EventBus.emit(EventBus.EVENTS.APP_ERROR, {
                    service: 'auth',
                    error: error.message
                });

                throw error;
            }
        },

        /**
         * –û–Ω–æ–≤–∏—Ç–∏ UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        updateUserUI(user) {
            console.log('üîÑ [AuthService] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

            requestAnimationFrame(() => {
                // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const userIdElement = document.getElementById('header-user-id');
                if (userIdElement) {
                    userIdElement.textContent = user.telegram_id || user.id || '';
                }

                // –ê–≤–∞—Ç–∞—Ä
                const avatarElement = document.querySelector('.profile-avatar');
                if (avatarElement && user.username) {
                    avatarElement.textContent = user.username.charAt(0).toUpperCase();
                }

                // –ë–∞–ª–∞–Ω—Å–∏
                const winixElement = document.getElementById('user-winix');
                const ticketsElement = document.getElementById('user-tickets');

                if (winixElement) {
                    winixElement.textContent = user.balance?.winix || 0;
                }

                if (ticketsElement) {
                    ticketsElement.textContent = user.balance?.tickets || 0;
                }
            });
        },

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é
         */
        async checkSession() {
            console.log('üîê [AuthService] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Å—ñ—ó');

            // –ö–µ—à–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            const cachedSession = CacheManager.get(CacheManager.NAMESPACES.USER, 'session');
            if (cachedSession) {
                return true;
            }

            try {
                if (!window.TelegramValidator) {
                    return false;
                }

                const isAuth = window.TelegramValidator.isAuthenticated();

                if (!isAuth) {
                    console.warn('‚ö†Ô∏è [AuthService] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');

                    EventBus.emit(EventBus.EVENTS.USER_LOGGED_OUT);

                    NotificationService.showError('–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É');

                    setTimeout(() => window.location.reload(), 3000);
                    return false;
                }

                return true;

            } catch (error) {
                console.error('‚ùå [AuthService] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó:', error);
                return false;
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
     */
    const SyncService = {
        syncInterval: null,
        syncSubscriptions: new Map(),

        /**
         * –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
         */
        startAutoSync() {
            console.log('üîÑ [SyncService] === –ó–ê–ü–£–°–ö –ê–í–¢–û–°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á ===');

            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –ø–æ–¥—ñ—ó –¥–ª—è smart sync
            this.setupEventSubscriptions();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
            this.syncInterval = setInterval(() => {
                if (servicesState.userActivity.isActive) {
                    this.performSync();
                }
            }, 2 * 60 * 1000); // 2 —Ö–≤–∏–ª–∏–Ω–∏

            console.log('‚úÖ [SyncService] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞');
        },

        /**
         * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–¥—ñ—ó
         */
        setupEventSubscriptions() {
            // –†–µ–∞–≥—É—î–º–æ –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó
            this.syncSubscriptions.set('balance',
                EventBus.on(EventBus.EVENTS.TASK_COMPLETED, () => {
                    this.syncBalance();
                })
            );

            this.syncSubscriptions.set('wallet',
                EventBus.on(EventBus.EVENTS.WALLET_CONNECTED, () => {
                    this.syncWalletData();
                })
            );

            this.syncSubscriptions.set('daily',
                EventBus.on(EventBus.EVENTS.DAILY_CLAIMED, () => {
                    setTimeout(() => this.syncDailyBonus(), 1000);
                })
            );
        },

        /**
         * –í–∏–∫–æ–Ω–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
         */
        async performSync() {
            console.log('üîÑ [SyncService] === –í–ò–ö–û–ù–ê–ù–ù–Ø –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á ===');

            const userId = window.TasksStore?.selectors?.getUserId();
            if (!userId) {
                console.warn('‚ö†Ô∏è [SyncService] User ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
                return;
            }

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏
            const syncTasks = [];

            // –ë–∞–ª–∞–Ω—Å - –∑–∞–≤–∂–¥–∏
            syncTasks.push(this.syncBalance(userId));

            // Flex - —è–∫—â–æ –≥–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π
            if (window.TasksStore?.selectors?.isWalletConnected()) {
                syncTasks.push(this.syncFlexBalance(userId));
            }

            // Daily bonus - —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
            const lastDailySync = CacheManager.get(CacheManager.NAMESPACES.TEMP, 'lastDailySync') || 0;
            if (Date.now() - lastDailySync > 60000) {
                syncTasks.push(this.syncDailyBonus(userId));
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            try {
                await Promise.all(syncTasks);
                console.log('‚úÖ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É
         */
        async syncBalance(userId) {
            userId = userId || window.TasksStore?.selectors?.getUserId();
            if (!userId) return;

            console.log('üí∞ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É');

            try {
                const response = await requestClient.execute(
                    `balance_${userId}`,
                    () => window.TasksAPI.user.getBalance(userId),
                    { deduplicate: false } // –ó–∞–≤–∂–¥–∏ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
                );

                if (response?.status === 'success' && response.data) {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –±–∞–ª–∞–Ω—Å
                    const hasChanged = CacheManager.update(
                        CacheManager.NAMESPACES.BALANCE,
                        userId,
                        response.data
                    );

                    if (hasChanged) {
                        window.TasksStore.actions.updateBalance(response.data);
                    }
                }
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex –±–∞–ª–∞–Ω—Å—É
         */
        async syncFlexBalance(userId) {
            const wallet = window.TasksStore?.selectors?.getWalletAddress();
            if (!wallet) return;

            console.log('üíé [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex –±–∞–ª–∞–Ω—Å—É');

            try {
                const response = await requestClient.execute(
                    `flex_balance_${wallet}`,
                    () => window.TasksAPI.flex.getBalance(userId, wallet)
                );

                if (response?.balance !== undefined) {
                    window.TasksStore.actions.setFlexBalance(parseInt(response.balance));
                }
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó Flex:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Daily Bonus
         */
        async syncDailyBonus(userId) {
            console.log('üéÅ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Daily Bonus');

            CacheManager.set(CacheManager.NAMESPACES.TEMP, 'lastDailySync', Date.now());

            try {
                const response = await requestClient.execute(
                    `daily_status_${userId}`,
                    () => window.TasksAPI.daily.getStatus(userId)
                );

                if (response?.status === 'success') {
                    // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è DailyBonusManager
                    EventBus.emit('daily.status.updated', response.data);
                }
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó Daily:', error);
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—è
         */
        async syncWalletData() {
            const userId = window.TasksStore?.selectors?.getUserId();
            if (!userId) return;

            console.log('üëõ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—è');

            try {
                const response = await requestClient.execute(
                    `wallet_status_${userId}`,
                    () => window.TasksAPI.wallet.checkStatus(userId)
                );

                if (response?.status === 'success' && response.data) {
                    // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
                    EventBus.emit('wallet.status.updated', response.data);
                }
            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≥–∞–º–∞–Ω—Ü—è:', error);
            }
        },

        /**
         * –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
         */
        stopAutoSync() {
            if (this.syncInterval) {
                clearInterval(this.syncInterval);
                this.syncInterval = null;
            }

            // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –≤—ñ–¥ –ø–æ–¥—ñ–π
            this.syncSubscriptions.forEach(unsubscribe => unsubscribe());
            this.syncSubscriptions.clear();

            console.log('‚èπÔ∏è [SyncService] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞');
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π
     */
    const NotificationService = {
        showSuccess(message, duration = 3000) {
            console.log('‚úÖ [NotificationService] –£—Å–ø—ñ—Ö:', message);
            window.TasksUtils?.showToast?.(message, 'success', duration);
            this.vibrate([50]);

            // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é
            eventBus.emit('notification.shown', { type: 'success', message });
        },

        showError(message, duration = 5000) {
            console.log('‚ùå [NotificationService] –ü–æ–º–∏–ª–∫–∞:', message);
            window.TasksUtils?.showToast?.(message, 'error', duration);
            this.vibrate([100, 50, 100]);

            eventBus.emit('notification.shown', { type: 'error', message });
        },

        showWarning(message, duration = 4000) {
            console.log('‚ö†Ô∏è [NotificationService] –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:', message);
            window.TasksUtils?.showToast?.(message, 'warning', duration);
            this.vibrate([75]);

            eventBus.emit('notification.shown', { type: 'warning', message });
        },

        showInfo(message, duration = 3000) {
            console.log('‚ÑπÔ∏è [NotificationService] –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:', message);
            window.TasksUtils?.showToast?.(message, 'info', duration);

            eventBus.emit('notification.shown', { type: 'info', message });
        },

        showReward(reward) {
            console.log('üéÅ [NotificationService] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞:', reward);

            let message = '–û—Ç—Ä–∏–º–∞–Ω–æ: ';
            const parts = [];

            if (reward.winix > 0) parts.push(`+${reward.winix} WINIX`);
            if (reward.tickets > 0) parts.push(`+${reward.tickets} tickets`);
            if (reward.flex > 0) parts.push(`+${reward.flex} FLEX`);

            message += parts.join(' —Ç–∞ ');

            this.showSuccess(message, 4000);
            this.vibrate([50, 100, 50, 100, 50]);

            eventBus.emit('reward.received', reward);
        },

        vibrate(pattern) {
            if (window.Telegram?.WebApp?.HapticFeedback) {
                try {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
                } catch (e) {
                    if ('vibrate' in navigator) {
                        navigator.vibrate(pattern);
                    }
                }
            } else if ('vibrate' in navigator) {
                navigator.vibrate(pattern);
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
     */
    const AnalyticsService = {
        sessionId: null,

        init() {
            this.sessionId = this.generateSessionId();
            console.log('üìä [AnalyticsService] –°–µ—Å—ñ—è:', this.sessionId);

            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –≤—Å—ñ –ø–æ–¥—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            EventBus.on('*', (data, context) => {
                if (context.event && !context.event.startsWith('analytics.')) {
                    this.trackEvent('System', context.event, JSON.stringify(data));
                }
            });
        },

        generateSessionId() {
            return `ses_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        },

        trackEvent(category, action, label, value) {
            const event = {
                category,
                action,
                label,
                value,
                sessionId: this.sessionId,
                timestamp: Date.now()
            };

            console.log('üìä [AnalyticsService] –ü–æ–¥—ñ—è:', event);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CacheManager –¥–ª—è –±–∞—Ç—á–∏–Ω–≥—É
            const events = CacheManager.get(CacheManager.NAMESPACES.TEMP, 'analytics_batch') || [];
            events.push(event);
            CacheManager.set(CacheManager.NAMESPACES.TEMP, 'analytics_batch', events);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫—â–æ –Ω–∞–∫–æ–ø–∏—á–∏–ª–æ—Å—å –±–∞–≥–∞—Ç–æ
            if (events.length >= 10) {
                this.flushEvents();
            }
        },

        async flushEvents() {
            const events = CacheManager.get(CacheManager.NAMESPACES.TEMP, 'analytics_batch') || [];
            if (events.length === 0) return;

            // –û—á–∏—â–∞—î–º–æ –∫–µ—à
            CacheManager.invalidate(CacheManager.NAMESPACES.TEMP, 'analytics_batch');

            try {
                // Telegram WebApp
                if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.sendData(JSON.stringify({
                        type: 'analytics_batch',
                        events
                    }));
                }
            } catch (error) {
                console.error('‚ùå [AnalyticsService] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
            }
        },

        trackPageView(pageName) {
            this.trackEvent('Navigation', 'page_view', pageName);
        },

        trackError(error, context) {
            this.trackEvent('Error', error.name || 'UnknownError', context, 1);
        },

        trackTiming(category, variable, time) {
            this.trackEvent('Timing', category, variable, time);
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    const ValidationService = {
        validateTask(task) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', task);

            const errors = [];

            if (!task.id) errors.push('ID –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.type) errors.push('–¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.title) errors.push('–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è');
            if (!task.reward) errors.push('–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –≤—ñ–¥—Å—É—Ç–Ω—è');

            if (task.reward) {
                if (typeof task.reward.winix !== 'number' || task.reward.winix < 0) {
                    errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ WINIX');
                }
                if (task.reward.tickets && (typeof task.reward.tickets !== 'number' || task.reward.tickets < 0)) {
                    errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ tickets');
                }
            }

            if (errors.length > 0) {
                console.error('‚ùå [ValidationService] –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors);
                return { valid: false, errors };
            }

            console.log('‚úÖ [ValidationService] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–µ');
            return { valid: true };
        },

        validateWalletAddress(address) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏:', address);

            const rules = window.TasksConstants?.VALIDATION_RULES?.WALLET_ADDRESS;

            if (rules && rules.isValid) {
                const isValid = rules.isValid(address);

                if (!isValid) {
                    console.error('‚ùå [ValidationService] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏');
                    return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏ TON' };
                }
            } else {
                // Fallback –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
                const isValid = /^(EQ|UQ)[a-zA-Z0-9_-]{46}$/.test(address) ||
                               /^-?[0-9]:[0-9a-fA-F]{64}$/.test(address);

                if (!isValid) {
                    console.error('‚ùå [ValidationService] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏');
                    return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏ TON' };
                }
            }

            console.log('‚úÖ [ValidationService] –ê–¥—Ä–µ—Å–∞ –≤–∞–ª—ñ–¥–Ω–∞');
            return { valid: true };
        },

        validateTelegramId(telegramId) {
            const rules = window.TasksConstants?.VALIDATION_RULES?.TELEGRAM_ID;
            const id = parseInt(telegramId);

            if (!id || isNaN(id)) {
                return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID' };
            }

            if (rules) {
                if (id < rules.MIN || id > rules.MAX) {
                    return { valid: false, error: 'ID –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º' };
                }
            }

            return { valid: true };
        }
    };

    /**
     * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function setupActivityTracking() {
        const updateActivity = window.TasksUtils.throttle(() => {
            servicesState.userActivity.lastAction = Date.now();
            servicesState.userActivity.isActive = true;
        }, 1000);

        ['click', 'keypress', 'mousemove', 'touchstart', 'scroll'].forEach(event => {
            document.addEventListener(event, updateActivity, { passive: true });
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        setInterval(() => {
            const timeSinceLastAction = Date.now() - servicesState.userActivity.lastAction;
            servicesState.userActivity.isActive = timeSinceLastAction < 5 * 60000; // 5 —Ö–≤–∏–ª–∏–Ω
        }, 30000);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
    async function init() {
        console.log('üöÄ [TasksServices] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤');

        try {
            // –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            const maxWaitTime = 10000;
            const startTime = Date.now();

            while (!checkDependencies() && (Date.now() - startTime) < maxWaitTime) {
                console.log('‚è≥ [TasksServices] –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            if (!checkDependencies()) {
                throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ');
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
            AnalyticsService.init();
            setupActivityTracking();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            EventBus.once(EventBus.EVENTS.USER_LOGGED_IN, () => {
                SyncService.startAutoSync();
            });

            servicesState.initialized = true;

            console.log('‚úÖ [TasksServices] –°–µ—Ä–≤—ñ—Å–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TasksServices] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            throw error;
        }
    }

    /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
    function destroy() {
        console.log('üóëÔ∏è [TasksServices] –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤');

        // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        SyncService.stopAutoSync();

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ª–∏—à–∫–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        AnalyticsService.flushEvents();

        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –≤—ñ–¥ –ø–æ–¥—ñ–π
        eventBus.clear();

        console.log('‚úÖ [TasksServices] –°–µ—Ä–≤—ñ—Å–∏ –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [TasksServices] –°–µ—Ä–≤—ñ—Å–Ω–∏–π –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        Auth: AuthService,
        Sync: SyncService,
        Notification: NotificationService,
        Analytics: AnalyticsService,
        Validation: ValidationService,
        init,
        checkDependencies,
        getState: () => servicesState,
        destroy
    };

})();

console.log('‚úÖ [TasksServices] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');