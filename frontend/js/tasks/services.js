/**
 * –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è V2
 * Intelligent sync, diff-based –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è
 */

window.TasksServices = (function() {
    'use strict';

    console.log('üõ†Ô∏è [TasksServices-V2] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –°–ï–†–í–Ü–°–ù–û–ì–û –ú–û–î–£–õ–Ø =====');

    // –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à –¥–ª—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const ServiceCache = {
        data: new Map(),
        checksums: new Map(),
        lastSync: new Map(),

        ttl: {
            apiHealth: 30000,        // 30 —Å–µ–∫—É–Ω–¥
            userSession: 5 * 60000,  // 5 —Ö–≤–∏–ª–∏–Ω
            balance: 30000,          // 30 —Å–µ–∫—É–Ω–¥
            tasks: 2 * 60000,        // 2 —Ö–≤–∏–ª–∏–Ω–∏
            dailyStatus: 60000,      // 1 —Ö–≤–∏–ª–∏–Ω–∞
            flexStatus: 60000        // 1 —Ö–≤–∏–ª–∏–Ω–∞
        },

        set(key, data, customTTL) {
            const checksum = this.calculateChecksum(data);
            this.data.set(key, data);
            this.checksums.set(key, checksum);
            this.lastSync.set(key, Date.now());

            const ttl = customTTL || this.ttl[key.split('_')[0]] || 60000;
            setTimeout(() => this.invalidate(key), ttl);

            return checksum;
        },

        get(key) {
            const timestamp = this.lastSync.get(key);
            if (!timestamp) return null;

            const age = Date.now() - timestamp;
            const ttl = this.ttl[key.split('_')[0]] || 60000;

            if (age > ttl) {
                this.invalidate(key);
                return null;
            }

            return this.data.get(key);
        },

        hasChanged(key, newData) {
            const oldChecksum = this.checksums.get(key);
            if (!oldChecksum) return true;

            const newChecksum = this.calculateChecksum(newData);
            return oldChecksum !== newChecksum;
        },

        calculateChecksum(data) {
            // –ü—Ä–æ—Å—Ç–∏–π checksum –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            return JSON.stringify(data).split('').reduce((a, b) => {
                a = ((a << 5) - a) + b.charCodeAt(0);
                return a & a;
            }, 0);
        },

        getDiff(key, newData) {
            const oldData = this.data.get(key);
            if (!oldData) return { type: 'full', data: newData };

            return this.computeDiff(oldData, newData);
        },

        computeDiff(oldObj, newObj) {
            const diff = {
                added: {},
                modified: {},
                removed: {}
            };

            // Check for added/modified
            for (const key in newObj) {
                if (!(key in oldObj)) {
                    diff.added[key] = newObj[key];
                } else if (JSON.stringify(oldObj[key]) !== JSON.stringify(newObj[key])) {
                    diff.modified[key] = newObj[key];
                }
            }

            // Check for removed
            for (const key in oldObj) {
                if (!(key in newObj)) {
                    diff.removed[key] = true;
                }
            }

            const hasChanges = Object.keys(diff.added).length > 0 ||
                               Object.keys(diff.modified).length > 0 ||
                               Object.keys(diff.removed).length > 0;

            return hasChanges ? { type: 'diff', diff } : { type: 'none' };
        },

        invalidate(key) {
            this.data.delete(key);
            this.checksums.delete(key);
            this.lastSync.delete(key);
        },

        clear() {
            this.data.clear();
            this.checksums.clear();
            this.lastSync.clear();
        }
    };

    // Intelligent Sync Queue
    const SyncQueue = {
        queue: [],
        processing: false,
        priorities: {
            critical: 10,
            high: 7,
            normal: 5,
            low: 3
        },

        enqueue(task, priority = 'normal') {
            this.queue.push({
                task,
                priority: this.priorities[priority] || this.priorities.normal,
                timestamp: Date.now()
            });

            // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
            this.queue.sort((a, b) => b.priority - a.priority);

            if (!this.processing) {
                this.process();
            }
        },

        async process() {
            if (this.queue.length === 0) {
                this.processing = false;
                return;
            }

            this.processing = true;
            const item = this.queue.shift();

            try {
                await item.task();
            } catch (error) {
                console.error('‚ùå [SyncQueue] –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
            }

            // –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            setTimeout(() => this.process(), 100);
        }
    };

    // –°—Ç–∞–Ω —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const servicesState = {
        initialized: false,
        dependencies: {
            telegramValidator: false,
            tasksAPI: false,
            tasksStore: false,
            tasksConstants: false
        },
        apiAvailable: false,
        lastHealthCheck: 0,
        syncInProgress: false,
        lastFullSync: 0,
        userActivity: {
            lastAction: Date.now(),
            isActive: true
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    const checkDependencies = (() => {
        let lastCheck = 0;
        let lastResult = false;

        return function() {
            const now = Date.now();

            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
            if (now - lastCheck < 5000 && lastResult) {
                return lastResult;
            }

            console.log('üîç [TasksServices-V2] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');

            servicesState.dependencies.telegramValidator = !!(window.TelegramValidator?.validateTelegramAuth);
            servicesState.dependencies.tasksAPI = !!(window.TasksAPI?.auth);
            servicesState.dependencies.tasksStore = !!(window.TasksStore?.actions);
            servicesState.dependencies.tasksConstants = !!(window.TasksConstants?.API_ENDPOINTS);

            lastResult = Object.values(servicesState.dependencies).every(ready => ready);
            lastCheck = now;

            console.log(`${lastResult ? '‚úÖ' : '‚ùå'} [TasksServices-V2] –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≥–æ—Ç–æ–≤—ñ:`, lastResult);

            return lastResult;
        };
    })();

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
     */
    async function checkApiHealth(force = false) {
        const cacheKey = 'apiHealth';

        if (!force) {
            const cached = ServiceCache.get(cacheKey);
            if (cached !== null) {
                console.log('‚úÖ [TasksServices-V2] API –∑–¥–æ—Ä–æ–≤–∏–π (–∫–µ—à)');
                return cached;
            }
        }

        console.log('üè• [TasksServices-V2] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è API...');

        try {
            const response = await fetch('/api/ping', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                timeout: 5000
            });

            const isHealthy = response.ok;
            servicesState.apiAvailable = isHealthy;

            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            ServiceCache.set(cacheKey, isHealthy);

            console.log(`${isHealthy ? '‚úÖ' : '‚ùå'} [TasksServices-V2] API —Å—Ç–∞—Ç—É—Å:`, response.status);
            return isHealthy;

        } catch (error) {
            console.error('‚ùå [TasksServices-V2] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
            servicesState.apiAvailable = false;
            ServiceCache.set(cacheKey, false);
            return false;
        }
    }

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô
     */
    const AuthService = {
        isInitializing: false,
        retryCount: 0,
        maxRetries: 3,
        authPromise: null,

        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
         */
        async initUser() {
            console.log('üë§ [AuthService-V2] === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');

            // –£–Ω–∏–∫–∞—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
            if (this.authPromise) {
                console.log('‚è∏Ô∏è [AuthService-V2] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π Promise');
                return this.authPromise;
            }

            this.authPromise = this._initUserInternal();

            try {
                const result = await this.authPromise;
                return result;
            } finally {
                this.authPromise = null;
            }
        },

        async _initUserInternal() {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à —Å–µ—Å—ñ—ó
            const cachedSession = ServiceCache.get('userSession');
            if (cachedSession) {
                console.log('‚úÖ [AuthService-V2] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—É —Å–µ—Å—ñ—é');
                this.updateUserUI(cachedSession);
                return cachedSession;
            }

            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
                if (!checkDependencies()) {
                    throw new Error('–°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è. –ó–∞—á–µ–∫–∞–π—Ç–µ...');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API
                const apiHealthy = await checkApiHealth();
                if (!apiHealthy) {
                    this.retryCount++;
                    if (this.retryCount >= this.maxRetries) {
                        throw new Error('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
                    }
                    throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±–∞ ${this.retryCount}/${this.maxRetries}`);
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram
                console.log('üîÑ [AuthService-V2] –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram...');
                const validation = await window.TelegramValidator.validateTelegramAuth();

                if (!validation.valid) {
                    throw new Error('Telegram authentication failed: ' + validation.error);
                }

                const telegramUser = validation.user;

                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
                console.log('üîÑ [AuthService-V2] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é...');
                const profile = await window.TasksAPI.user.getProfile(
                    telegramUser.telegram_id || telegramUser.id
                );

                if (!profile?.data) {
                    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                window.TasksStore.actions.setUser({
                    id: profile.data.id,
                    telegramId: telegramUser.telegram_id || telegramUser.id,
                    username: profile.data.username || telegramUser.username,
                    firstName: profile.data.first_name || telegramUser.first_name,
                    lastName: profile.data.last_name || telegramUser.last_name,
                    balance: profile.data.balance || { winix: 0, tickets: 0, flex: 0 }
                });

                // –ö–µ—à—É—î–º–æ —Å–µ—Å—ñ—é
                ServiceCache.set('userSession', profile.data);

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                this.updateUserUI(profile.data);

                // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
                this.retryCount = 0;

                console.log('‚úÖ [AuthService-V2] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                return profile.data;

            } catch (error) {
                console.error('‚ùå [AuthService-V2] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
                if (window.TasksUtils?.showToast) {
                    const errorMessage = error.message.includes('—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è') ? 'info' : 'error';
                    window.TasksUtils.showToast(error.message, errorMessage);
                }

                throw error;
            }
        },

        /**
         * –û–Ω–æ–≤–∏—Ç–∏ UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        updateUserUI(user) {
            console.log('üîÑ [AuthService-V2] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

            requestAnimationFrame(() => {
                // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const userIdElement = document.getElementById('header-user-id');
                if (userIdElement) {
                    userIdElement.textContent = user.telegram_id || user.id || '';
                }

                // –ê–≤–∞—Ç–∞—Ä
                const avatarElement = document.querySelector('.profile-avatar');
                if (avatarElement && user.username) {
                    avatarElement.textContent = user.username.charAt(0).toUpperCase();
                }

                // –ë–∞–ª–∞–Ω—Å–∏
                const winixElement = document.getElementById('user-winix');
                const ticketsElement = document.getElementById('user-tickets');

                if (winixElement) {
                    winixElement.textContent = user.balance?.winix || 0;
                }

                if (ticketsElement) {
                    ticketsElement.textContent = user.balance?.tickets || 0;
                }
            });
        },

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
         */
        async checkSession() {
            console.log('üîê [AuthService-V2] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Å—ñ—ó');

            // –ö–µ—à–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            const cachedSession = ServiceCache.get('userSession');
            if (cachedSession) {
                return true;
            }

            try {
                if (!window.TelegramValidator) {
                    return false;
                }

                const isAuth = window.TelegramValidator.isAuthenticated();

                if (!isAuth) {
                    console.warn('‚ö†Ô∏è [AuthService-V2] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');

                    if (window.TasksUtils?.showToast) {
                        window.TasksUtils.showToast('–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', 'error');
                    }

                    setTimeout(() => window.location.reload(), 3000);
                    return false;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω—É
                const token = window.TelegramValidator.getAuthToken();
                if (token) {
                    try {
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        const exp = payload.exp * 1000;
                        const now = Date.now();

                        if (exp - now < 5 * 60 * 1000) { // –ú–µ–Ω—à–µ 5 —Ö–≤–∏–ª–∏–Ω
                            console.log('üîÑ [AuthService-V2] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');
                            await window.TelegramValidator.refreshToken();
                        }
                    } catch (error) {
                        console.error('‚ùå [AuthService-V2] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—É:', error);
                        window.TelegramValidator.clearAuthToken();
                        return false;
                    }
                }

                return true;

            } catch (error) {
                console.error('‚ùå [AuthService-V2] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó:', error);
                return false;
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó - INTELLIGENT SYNC
     */
    const SyncService = {
        syncInterval: null,
        lastSyncTime: 0,
        isSyncing: false,
        syncHistory: new Map(),

        /**
         * –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
         */
        startAutoSync() {
            console.log('üîÑ [SyncService-V2] === –ó–ê–ü–£–°–ö INTELLIGENT SYNC ===');

            if (this.syncInterval) {
                clearInterval(this.syncInterval);
            }

            // –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            const getAdaptiveInterval = () => {
                const isActive = servicesState.userActivity.isActive;
                const timeSinceLastAction = Date.now() - servicesState.userActivity.lastAction;

                // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –±—ñ–ª—å—à–µ 5 —Ö–≤ - —Ä—ñ–¥—à–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
                if (!isActive || timeSinceLastAction > 5 * 60000) {
                    return 10 * 60000; // 10 —Ö–≤–∏–ª–∏–Ω
                }

                // –ê–∫—Ç–∏–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - —á–∞—Å—Ç—ñ—à–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
                return 2 * 60000; // 2 —Ö–≤–∏–ª–∏–Ω–∏
            };

            const syncLoop = () => {
                if (servicesState.apiAvailable) {
                    this.intelligentSync();
                }

                // –ê–¥–∞–ø—Ç—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
                const nextInterval = getAdaptiveInterval();
                this.syncInterval = setTimeout(syncLoop, nextInterval);
            };

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª
            syncLoop();

            console.log('‚úÖ [SyncService-V2] Intelligent sync –∑–∞–ø—É—â–µ–Ω–æ');
        },

        /**
         * Intelligent —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è - —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ –¥–∞–Ω—ñ
         */
        async intelligentSync() {
            console.log('üß† [SyncService-V2] === INTELLIGENT SYNC ===');

            if (this.isSyncing) {
                console.log('‚è∏Ô∏è [SyncService-V2] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
                return;
            }

            this.isSyncing = true;

            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ—é
                const sessionValid = await AuthService.checkSession();
                if (!sessionValid) {
                    return;
                }

                const userId = window.TasksStore?.selectors?.getUserId();
                if (!userId) {
                    throw new Error('User ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
                }

                // –í–∏–∑–Ω–∞—á–∞—î–º–æ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏
                const syncTasks = this.determineSyncTasks();

                console.log(`üéØ [SyncService-V2] –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ ${syncTasks.length} –∑–∞–≤–¥–∞–Ω—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó`);

                // –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
                syncTasks.forEach(({ task, priority }) => {
                    SyncQueue.enqueue(task, priority);
                });

                this.lastSyncTime = Date.now();

            } catch (error) {
                console.error('‚ùå [SyncService-V2] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);

                if (error.message.includes('User ID') || error.message.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó')) {
                    if (window.TasksUtils?.showToast) {
                        window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...', 'error');
                    }
                    setTimeout(() => window.location.reload(), 2000);
                }
            } finally {
                this.isSyncing = false;
            }
        },

        /**
         * –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
         */
        determineSyncTasks() {
            const tasks = [];
            const now = Date.now();
            const userId = window.TasksStore?.selectors?.getUserId();

            // –ë–∞–ª–∞–Ω—Å - –≤–∏—Å–æ–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π
            if (servicesState.userActivity.isActive) {
                const lastBalanceSync = this.syncHistory.get('balance') || 0;
                if (now - lastBalanceSync > 30000) { // 30 —Å–µ–∫
                    tasks.push({
                        task: () => this.syncBalance(userId),
                        priority: 'high'
                    });
                }
            }

            // Flex —Å—Ç–∞—Ç—É—Å - —è–∫—â–æ –≥–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π
            if (window.TasksStore?.selectors?.isWalletConnected()) {
                const lastFlexSync = this.syncHistory.get('flex') || 0;
                if (now - lastFlexSync > 60000) { // 1 —Ö–≤
                    tasks.push({
                        task: () => this.syncFlexStatus(userId),
                        priority: 'normal'
                    });
                }
            }

            // Daily bonus - —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
            const lastDailySync = this.syncHistory.get('daily') || 0;
            if (now - lastDailySync > 60000) { // 1 —Ö–≤
                tasks.push({
                    task: () => this.syncDailyBonus(userId),
                    priority: 'normal'
                });
            }

            // –ó–∞–≤–¥–∞–Ω–Ω—è - —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ –≤–∫–ª–∞–¥–∫–∞
            const currentTab = window.TasksStore?.selectors?.getCurrentTab();
            if (['social', 'limited', 'partner'].includes(currentTab)) {
                const lastTasksSync = this.syncHistory.get('tasks') || 0;
                if (now - lastTasksSync > 120000) { // 2 —Ö–≤
                    tasks.push({
                        task: () => this.syncTasks(userId),
                        priority: 'low'
                    });
                }
            }

            return tasks;
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É - DIFF BASED
         */
        async syncBalance(userId) {
            console.log('üí∞ [SyncService-V2] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É (diff-based)');

            const cacheKey = `balance_${userId}`;

            try {
                const response = await window.TasksAPI.user.getBalance(userId);

                if (response.status === 'success') {
                    const newBalance = response.balance || response.data;

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è –¥–∞–Ω—ñ
                    if (!ServiceCache.hasChanged(cacheKey, newBalance)) {
                        console.log('‚úÖ [SyncService-V2] –ë–∞–ª–∞–Ω—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
                        return;
                    }

                    // –û—Ç—Ä–∏–º—É—î–º–æ diff
                    const diff = ServiceCache.getDiff(cacheKey, newBalance);
                    console.log('üìä [SyncService-V2] Diff –±–∞–ª–∞–Ω—Å—É:', diff);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    ServiceCache.set(cacheKey, newBalance);

                    // –û–Ω–æ–≤–ª—é—î–º–æ Store
                    window.TasksStore.actions.updateBalance(newBalance);

                    // –û–Ω–æ–≤–ª—é—î–º–æ UI —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∑–º—ñ–Ω–∏
                    if (diff.type !== 'none') {
                        AuthService.updateUserUI({ balance: newBalance });
                    }

                    this.syncHistory.set('balance', Date.now());
                    return response;
                }

            } catch (error) {
                console.error('‚ùå [SyncService-V2] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É:', error);
                throw error;
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex —Å—Ç–∞—Ç—É—Å—É
         */
        async syncFlexStatus(userId) {
            console.log('üíé [SyncService-V2] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex —Å—Ç–∞—Ç—É—Å—É');

            const wallet = window.TasksStore?.selectors?.getWalletAddress();
            if (!wallet) {
                console.log('‚è∏Ô∏è [SyncService-V2] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                return { skipped: true };
            }

            if (window.FlexEarnManager) {
                await window.FlexEarnManager.checkFlexBalance();
                this.syncHistory.set('flex', Date.now());
                return { synced: true };
            }

            return { skipped: true };
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
         */
        async syncDailyBonus(userId) {
            console.log('üéÅ [SyncService-V2] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É');

            const cacheKey = `daily_${userId}`;

            try {
                const response = await window.TasksAPI.daily.getStatus(userId);

                if (response.status === 'success') {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏
                    if (!ServiceCache.hasChanged(cacheKey, response.data)) {
                        console.log('‚úÖ [SyncService-V2] Daily bonus –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è');
                        return;
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    ServiceCache.set(cacheKey, response.data);

                    // –û–Ω–æ–≤–ª—é—î–º–æ UI
                    if (window.DailyBonusManager?.updateDailyBonusUI) {
                        window.DailyBonusManager.updateDailyBonusUI();
                    }

                    this.syncHistory.set('daily', Date.now());
                    return response;
                }

            } catch (error) {
                console.error('‚ùå [SyncService-V2] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó daily bonus:', error);
                throw error;
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å
         */
        async syncTasks(userId) {
            console.log('üìã [SyncService-V2] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å');

            const cacheKey = `tasks_${userId}`;

            try {
                const response = await window.TasksAPI.tasks.getList(userId);

                if (response.status === 'success' && response.data.tasks) {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏
                    const diff = ServiceCache.getDiff(cacheKey, response.data.tasks);

                    if (diff.type === 'none') {
                        console.log('‚úÖ [SyncService-V2] –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å');
                        return;
                    }

                    console.log('üìä [SyncService-V2] Diff –∑–∞–≤–¥–∞–Ω—å:', diff);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    ServiceCache.set(cacheKey, response.data.tasks);

                    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                    if (diff.type === 'diff') {
                        // –î–æ–¥–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                        Object.entries(diff.diff.added).forEach(([type, tasks]) => {
                            const currentTasks = window.TasksStore.getState().tasks[type] || {};
                            window.TasksStore.actions.setTasks(type, { ...currentTasks, ...tasks });
                        });

                        // –ó–º—ñ–Ω–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                        Object.entries(diff.diff.modified).forEach(([type, tasks]) => {
                            const currentTasks = window.TasksStore.getState().tasks[type] || {};
                            window.TasksStore.actions.setTasks(type, { ...currentTasks, ...tasks });
                        });

                        // –í–∏–¥–∞–ª–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
                        Object.entries(diff.diff.removed).forEach(([type, taskIds]) => {
                            const currentTasks = { ...window.TasksStore.getState().tasks[type] };
                            taskIds.forEach(id => delete currentTasks[id]);
                            window.TasksStore.actions.setTasks(type, currentTasks);
                        });
                    } else {
                        // –ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                        Object.entries(response.data.tasks).forEach(([type, tasks]) => {
                            window.TasksStore.actions.setTasks(type, tasks);
                        });
                    }

                    this.syncHistory.set('tasks', Date.now());
                    return response;
                }

            } catch (error) {
                console.error('‚ùå [SyncService-V2] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å:', error);
                throw error;
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π - –±–µ–∑ –∑–º—ñ–Ω
     */
    const NotificationService = {
        showSuccess(message, duration = 3000) {
            console.log('‚úÖ [NotificationService] –£—Å–ø—ñ—Ö:', message);
            window.TasksUtils?.showToast?.(message, 'success', duration);
            this.vibrate([50]);
        },

        showError(message, duration = 5000) {
            console.log('‚ùå [NotificationService] –ü–æ–º–∏–ª–∫–∞:', message);
            window.TasksUtils?.showToast?.(message, 'error', duration);
            this.vibrate([100, 50, 100]);
        },

        showWarning(message, duration = 4000) {
            console.log('‚ö†Ô∏è [NotificationService] –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:', message);
            window.TasksUtils?.showToast?.(message, 'warning', duration);
            this.vibrate([75]);
        },

        showInfo(message, duration = 3000) {
            console.log('‚ÑπÔ∏è [NotificationService] –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:', message);
            window.TasksUtils?.showToast?.(message, 'info', duration);
        },

        showReward(reward) {
            console.log('üéÅ [NotificationService] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞:', reward);

            let message = '–û—Ç—Ä–∏–º–∞–Ω–æ: ';
            const parts = [];

            if (reward.winix > 0) parts.push(`+${reward.winix} WINIX`);
            if (reward.tickets > 0) parts.push(`+${reward.tickets} tickets`);
            if (reward.flex > 0) parts.push(`+${reward.flex} FLEX`);

            message += parts.join(' —Ç–∞ ');

            this.showSuccess(message, 4000);
            this.vibrate([50, 100, 50, 100, 50]);
        },

        vibrate(pattern) {
            if (window.Telegram?.WebApp?.HapticFeedback) {
                try {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
                } catch (e) {
                    if ('vibrate' in navigator) {
                        navigator.vibrate(pattern);
                    }
                }
            } else if ('vibrate' in navigator) {
                navigator.vibrate(pattern);
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô
     */
    const AnalyticsService = {
        sessionId: null,
        eventQueue: [],
        flushInterval: null,

        init() {
            this.sessionId = this.generateSessionId();
            console.log('üìä [AnalyticsService] –°–µ—Å—ñ—è:', this.sessionId);

            // –ë–∞—Ç—á–∏–Ω–≥ –ø–æ–¥—ñ–π
            this.flushInterval = setInterval(() => {
                this.flushEvents();
            }, 5000);
        },

        generateSessionId() {
            return `ses_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        },

        trackEvent(category, action, label, value) {
            const event = {
                category,
                action,
                label,
                value,
                sessionId: this.sessionId,
                timestamp: Date.now()
            };

            console.log('üìä [AnalyticsService] –ü–æ–¥—ñ—è:', event);

            // –î–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É
            this.eventQueue.push(event);

            // –Ø–∫—â–æ —á–µ—Ä–≥–∞ –≤–µ–ª–∏–∫–∞ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–¥—Ä–∞–∑—É
            if (this.eventQueue.length >= 10) {
                this.flushEvents();
            }
        },

        async flushEvents() {
            if (this.eventQueue.length === 0) return;

            const events = [...this.eventQueue];
            this.eventQueue = [];

            try {
                // Telegram WebApp
                if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.sendData(JSON.stringify({
                        type: 'analytics_batch',
                        events
                    }));
                }

                // Backend
                if (servicesState.apiAvailable && window.TasksAPI) {
                    await window.TasksAPI.call('/analytics/batch', {
                        method: 'POST',
                        body: { events }
                    });
                }
            } catch (error) {
                console.error('‚ùå [AnalyticsService] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–¥—ñ—ó –≤ —á–µ—Ä–≥—É
                this.eventQueue.unshift(...events);
            }
        },

        trackPageView(pageName) {
            this.trackEvent('Navigation', 'page_view', pageName);
        },

        trackError(error, context) {
            const errorData = {
                name: error.name || 'UnknownError',
                message: error.message || 'Unknown error',
                stack: error.stack ? error.stack.substring(0, 500) : null,
                context
            };

            this.trackEvent('Error', errorData.name, context, 1);
        },

        trackTiming(category, variable, time) {
            this.trackEvent('Timing', category, variable, time);
        },

        destroy() {
            if (this.flushInterval) {
                clearInterval(this.flushInterval);
                this.flushEvents(); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ª–∏—à–∫–∏
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó - –±–µ–∑ –∑–º—ñ–Ω, –≤–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π
     */
    const ValidationService = {
        validateTask(task) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', task);

            const errors = [];

            if (!task.id) errors.push('ID –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.type) errors.push('–¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.title) errors.push('–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è');
            if (!task.reward) errors.push('–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –≤—ñ–¥—Å—É—Ç–Ω—è');

            if (task.reward) {
                if (typeof task.reward.winix !== 'number' || task.reward.winix < 0) {
                    errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ WINIX');
                }
                if (task.reward.tickets && (typeof task.reward.tickets !== 'number' || task.reward.tickets < 0)) {
                    errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ tickets');
                }
            }

            if (errors.length > 0) {
                console.error('‚ùå [ValidationService] –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors);
                return { valid: false, errors };
            }

            console.log('‚úÖ [ValidationService] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–µ');
            return { valid: true };
        },

        validateWalletAddress(address) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏:', address);

            const rules = window.TasksConstants?.VALIDATION_RULES?.WALLET_ADDRESS;

            if (rules && rules.isValid) {
                const isValid = rules.isValid(address);

                if (!isValid) {
                    console.error('‚ùå [ValidationService] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏');
                    return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏ TON' };
                }
            } else {
                // Fallback –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
                const isValid = /^(EQ|UQ)[a-zA-Z0-9_-]{46}$/.test(address) ||
                               /^-?[0-9]:[0-9a-fA-F]{64}$/.test(address);

                if (!isValid) {
                    console.error('‚ùå [ValidationService] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏');
                    return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏ TON' };
                }
            }

            console.log('‚úÖ [ValidationService] –ê–¥—Ä–µ—Å–∞ –≤–∞–ª—ñ–¥–Ω–∞');
            return { valid: true };
        },

        validateTelegramId(telegramId) {
            const rules = window.TasksConstants?.VALIDATION_RULES?.TELEGRAM_ID;
            const id = parseInt(telegramId);

            if (!id || isNaN(id)) {
                return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID' };
            }

            if (rules) {
                if (id < rules.MIN || id > rules.MAX) {
                    return { valid: false, error: 'ID –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º' };
                }
            }

            return { valid: true };
        }
    };

    /**
     * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function setupActivityTracking() {
        const activityEvents = ['click', 'keypress', 'mousemove', 'touchstart', 'scroll'];

        const updateActivity = window.TasksUtils.throttle(() => {
            servicesState.userActivity.lastAction = Date.now();
            servicesState.userActivity.isActive = true;
        }, 1000);

        activityEvents.forEach(event => {
            document.addEventListener(event, updateActivity, { passive: true });
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        setInterval(() => {
            const timeSinceLastAction = Date.now() - servicesState.userActivity.lastAction;
            servicesState.userActivity.isActive = timeSinceLastAction < 5 * 60000; // 5 —Ö–≤–∏–ª–∏–Ω
        }, 30000);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    async function init() {
        console.log('üöÄ [TasksServices-V2] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ (Optimized)');

        try {
            // –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            const maxWaitTime = 10000;
            const startTime = Date.now();

            while (!checkDependencies() && (Date.now() - startTime) < maxWaitTime) {
                console.log('‚è≥ [TasksServices-V2] –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            if (!checkDependencies()) {
                throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ');
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
            AnalyticsService.init();
            setupActivityTracking();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–¥–æ—Ä–æ–≤'—è API
            await checkApiHealth();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ intelligent sync
            if (servicesState.apiAvailable) {
                SyncService.startAutoSync();
            } else {
                console.warn('‚ö†Ô∏è [TasksServices-V2] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∞');

                // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                setTimeout(async () => {
                    if (await checkApiHealth(true)) {
                        SyncService.startAutoSync();
                    }
                }, 30000);
            }

            servicesState.initialized = true;

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
            AnalyticsService.trackEvent('System', 'init', 'services_v2_optimized');

            console.log('‚úÖ [TasksServices-V2] –°–µ—Ä–≤—ñ—Å–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (Optimized)');

        } catch (error) {
            console.error('‚ùå [TasksServices-V2] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            AnalyticsService.trackError(error, 'services_init');
            throw error;
        }
    }

    /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
    function destroy() {
        console.log('üóëÔ∏è [TasksServices-V2] –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤');

        // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        if (SyncService.syncInterval) {
            clearInterval(SyncService.syncInterval);
        }

        // –û—á–∏—â–∞—î–º–æ –∫–µ—à
        ServiceCache.clear();

        // –ó–Ω–∏—â—É—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
        AnalyticsService.destroy();

        console.log('‚úÖ [TasksServices-V2] –°–µ—Ä–≤—ñ—Å–∏ –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [TasksServices-V2] –°–µ—Ä–≤—ñ—Å–Ω–∏–π –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π (Optimized)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        Auth: AuthService,
        Sync: SyncService,
        Notification: NotificationService,
        Analytics: AnalyticsService,
        Validation: ValidationService,
        init,
        checkDependencies,
        checkApiHealth,
        getState: () => servicesState,
        destroy,

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        _cache: ServiceCache,
        _queue: SyncQueue
    };

})();

console.log('‚úÖ [TasksServices-V2] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ (Optimized)');