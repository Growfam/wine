/**
 * –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - Production Version
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –º—ñ–∂ –º–æ–¥—É–ª—è–º–∏ –±–µ–∑ Mock –¥–∞–Ω–∏—Ö
 */

window.TasksServices = (function() {
    'use strict';

    console.log('üõ†Ô∏è [TasksServices] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ï–†–í–Ü–°–ù–û–ì–û –ú–û–î–£–õ–Ø (PRODUCTION) =====');

    // –°—Ç–∞–Ω —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const servicesState = {
        initialized: false,
        dependencies: {
            telegramValidator: false,
            tasksAPI: false,
            tasksStore: false,
            tasksConstants: false
        },
        apiAvailable: false,
        lastHealthCheck: 0
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
     */
    function checkDependencies() {
        console.log('üîç [TasksServices] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');

        servicesState.dependencies.telegramValidator = !!(window.TelegramValidator && typeof window.TelegramValidator.validateTelegramAuth === 'function');
        servicesState.dependencies.tasksAPI = !!(window.TasksAPI && typeof window.TasksAPI.auth === 'object');
        servicesState.dependencies.tasksStore = !!(window.TasksStore && typeof window.TasksStore.actions === 'object');
        servicesState.dependencies.tasksConstants = !!(window.TasksConstants && typeof window.TasksConstants.API_ENDPOINTS === 'object');

        const allReady = Object.values(servicesState.dependencies).every(ready => ready);

        console.log('üìä [TasksServices] –°—Ç–∞–Ω –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:', servicesState.dependencies);
        console.log(`${allReady ? '‚úÖ' : '‚ùå'} [TasksServices] –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≥–æ—Ç–æ–≤—ñ:`, allReady);

        return allReady;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
     */
    async function checkApiHealth() {
        console.log('üè• [TasksServices] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è API...');

        const now = Date.now();
        // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        if (servicesState.apiAvailable && (now - servicesState.lastHealthCheck) < 30000) {
            console.log('‚úÖ [TasksServices] API –∑–¥–æ—Ä–æ–≤–∏–π (–∫–µ—à)');
            return true;
        }

        try {
            const response = await fetch('/api/ping', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                timeout: 5000
            });

            servicesState.apiAvailable = response.ok;
            servicesState.lastHealthCheck = now;

            console.log(`${servicesState.apiAvailable ? '‚úÖ' : '‚ùå'} [TasksServices] API —Å—Ç–∞—Ç—É—Å:`, response.status);
            return servicesState.apiAvailable;

        } catch (error) {
            console.error('‚ùå [TasksServices] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
            servicesState.apiAvailable = false;
            servicesState.lastHealthCheck = now;
            return false;
        }
    }

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    const AuthService = {
        isInitializing: false,
        retryCount: 0,
        maxRetries: 3,

        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        async initUser() {
            console.log('üë§ [AuthService] === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');

            // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
            if (this.isInitializing) {
                console.log('‚è∏Ô∏è [AuthService] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');

                // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                while (this.isInitializing) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ Store —è–∫—â–æ —î
                const userId = window.TasksStore?.selectors?.getUserId();
                if (userId) {
                    return window.TasksStore.getState().user;
                }
            }

            this.isInitializing = true;

            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
                if (!checkDependencies()) {
                    console.error('‚ùå [AuthService] –ù–µ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≥–æ—Ç–æ–≤—ñ');
                    throw new Error('–°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è. –ó–∞—á–µ–∫–∞–π—Ç–µ...');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API
                const apiHealthy = await checkApiHealth();
                if (!apiHealthy) {
                    this.retryCount++;

                    if (this.retryCount >= this.maxRetries) {
                        console.error('‚ùå [AuthService] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–±');
                        throw new Error('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
                    } else {
                        throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±–∞ ${this.retryCount}/${this.maxRetries}`);
                    }
                }

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ TelegramValidator
                console.log('üîÑ [AuthService] –ó–∞–ø—É—Å–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó Telegram...');
                const validation = await window.TelegramValidator.validateTelegramAuth();

                if (!validation.valid) {
                    console.error('‚ùå [AuthService] Telegram –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', validation.error);
                    throw new Error('Telegram authentication failed: ' + validation.error);
                }

                console.log('‚úÖ [AuthService] Telegram –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞');

                const telegramUser = validation.user;
                console.log('üì± [AuthService] Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:', {
                    id: telegramUser.id || telegramUser.telegram_id,
                    username: telegramUser.username
                });

                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ –±–µ–∫–µ–Ω–¥—É
                console.log('üîÑ [AuthService] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ –±–µ–∫–µ–Ω–¥—É...');
                const profile = await window.TasksAPI.user.getProfile(telegramUser.telegram_id || telegramUser.id);
                console.log('‚úÖ [AuthService] –ü—Ä–æ—Ñ—ñ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', profile);

                if (!profile || !profile.data) {
                    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä
                console.log('üìù [AuthService] –û–Ω–æ–≤–ª–µ–Ω–Ω—è Store...');
                window.TasksStore.actions.setUser({
                    id: profile.data.id,
                    telegramId: telegramUser.telegram_id || telegramUser.id,
                    username: profile.data.username || telegramUser.username,
                    firstName: profile.data.first_name || telegramUser.first_name,
                    lastName: profile.data.last_name || telegramUser.last_name,
                    balance: profile.data.balance || { winix: 0, tickets: 0, flex: 0 }
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                this.updateUserUI(profile.data);

                // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
                this.retryCount = 0;

                console.log('‚úÖ [AuthService] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                return profile.data;

            } catch (error) {
                console.error('‚ùå [AuthService] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                if (window.TasksUtils?.showToast) {
                    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–º–∏–ª–∫–∏
                    if (error.message.includes('–°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è')) {
                        window.TasksUtils.showToast('–°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è. –ó–∞—á–µ–∫–∞–π—Ç–µ...', 'info');
                    } else if (error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')) {
                        window.TasksUtils.showToast('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'error');
                    } else {
                        window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', 'error');
                    }
                }

                throw error;

            } finally {
                this.isInitializing = false;
            }
        },

        /**
         * –û–Ω–æ–≤–∏—Ç–∏ UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        updateUserUI(user) {
            console.log('üîÑ [AuthService] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

            try {
                // –û–Ω–æ–≤–ª—é—î–º–æ ID
                const userIdElement = document.getElementById('header-user-id');
                if (userIdElement) {
                    userIdElement.textContent = user.telegram_id || user.id || '';
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –∞–≤–∞—Ç–∞—Ä
                const avatarElement = document.querySelector('.profile-avatar');
                if (avatarElement && user.username) {
                    avatarElement.textContent = user.username.charAt(0).toUpperCase();
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏
                const winixElement = document.getElementById('user-winix');
                const ticketsElement = document.getElementById('user-tickets');

                if (winixElement) {
                    winixElement.textContent = user.balance?.winix || 0;
                }

                if (ticketsElement) {
                    ticketsElement.textContent = user.balance?.tickets || 0;
                }

                console.log('‚úÖ [AuthService] UI –æ–Ω–æ–≤–ª–µ–Ω–æ');

            } catch (error) {
                console.error('‚ùå [AuthService] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI:', error);
            }
        },

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é
         */
        async checkSession() {
            console.log('üîê [AuthService] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Å—ñ—ó');

            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
                if (!window.TelegramValidator) {
                    console.warn('‚ö†Ô∏è [AuthService] TelegramValidator –Ω–µ –≥–æ—Ç–æ–≤–∏–π');
                    return false;
                }

                const isAuth = window.TelegramValidator.isAuthenticated();

                if (!isAuth) {
                    console.warn('‚ö†Ô∏è [AuthService] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');

                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —ñ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏
                    if (window.TasksUtils?.showToast) {
                        window.TasksUtils.showToast('–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', 'error');
                    }

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);

                    return false;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                if (!servicesState.apiAvailable) {
                    console.warn('‚ö†Ô∏è [AuthService] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó');
                    return false;
                }

                // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                const token = window.TelegramValidator.getAuthToken();
                if (token) {
                    try {
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        const exp = payload.exp * 1000;
                        const now = Date.now();

                        if (exp - now < 5 * 60 * 1000) { // –ú–µ–Ω—à–µ 5 —Ö–≤–∏–ª–∏–Ω
                            console.log('üîÑ [AuthService] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');
                            await window.TelegramValidator.refreshToken();
                        }
                    } catch (error) {
                        console.error('‚ùå [AuthService] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—É:', error);

                        // –û—á–∏—â–∞—î–º–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω
                        window.TelegramValidator.clearAuthToken();

                        if (window.TasksUtils?.showToast) {
                            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', 'error');
                        }

                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);

                        return false;
                    }
                }

                return true;

            } catch (error) {
                console.error('‚ùå [AuthService] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó:', error);
                return false;
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
     */
    const SyncService = {
        syncInterval: null,
        lastSyncTime: 0,
        isSyncing: false,

        /**
         * –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
         */
        startAutoSync() {
            console.log('üîÑ [SyncService] === –ó–ê–ü–£–°–ö –ê–í–¢–û–°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á ===');

            // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            if (this.syncInterval) {
                clearInterval(this.syncInterval);
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            const SYNC_INTERVAL = window.TasksConstants?.TIMERS?.AUTO_CHECK_INTERVAL || 5 * 60 * 1000;

            this.syncInterval = setInterval(() => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é
                if (servicesState.apiAvailable) {
                    this.syncData();
                } else {
                    console.log('‚è∏Ô∏è [SyncService] –ü—Ä–æ–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó - API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
                }
            }, SYNC_INTERVAL);

            console.log(`‚úÖ [SyncService] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞ (–∫–æ–∂–Ω—ñ ${SYNC_INTERVAL/1000/60} —Ö–≤)`);
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
         */
        async syncData() {
            console.log('üîÑ [SyncService] === –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• ===');
            console.log('üïê [SyncService] –ß–∞—Å:', new Date().toISOString());

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –π–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
            if (this.isSyncing) {
                console.log('‚è∏Ô∏è [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            if (!checkDependencies()) {
                console.log('‚è∏Ô∏è [SyncService] –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ –≥–æ—Ç–æ–≤—ñ');
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É
            const now = Date.now();
            const timeSinceLastSync = now - this.lastSyncTime;

            if (timeSinceLastSync < 30000) { // 30 —Å–µ–∫—É–Ω–¥
                console.log('‚è∏Ô∏è [SyncService] –ó–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó');
                return;
            }

            this.isSyncing = true;
            this.lastSyncTime = now;

            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ—é
                const sessionValid = await AuthService.checkSession();
                if (!sessionValid) {
                    console.error('‚ùå [SyncService] –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ —Å–µ—Å—ñ—è');
                    return;
                }

                const userId = window.TasksStore?.selectors?.getUserId();
                if (!userId) {
                    console.warn('‚ö†Ô∏è [SyncService] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                    throw new Error('User ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
                }

                // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
                const promises = [
                    this.syncBalance(userId).catch(err => ({ error: err, type: 'balance' })),
                    this.syncFlexStatus(userId).catch(err => ({ error: err, type: 'flex' })),
                    this.syncDailyBonus(userId).catch(err => ({ error: err, type: 'daily' })),
                    this.syncTasks(userId).catch(err => ({ error: err, type: 'tasks' }))
                ];

                const results = await Promise.allSettled(promises);

                // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                results.forEach((result, index) => {
                    const syncType = ['Balance', 'Flex', 'Daily', 'Tasks'][index];
                    if (result.status === 'fulfilled' && !result.value.error) {
                        console.log(`‚úÖ [SyncService] ${syncType} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ`);
                    } else {
                        const error = result.status === 'rejected' ? result.reason : result.value.error;
                        console.error(`‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó ${syncType}:`, error.message);
                    }
                });

                console.log('‚úÖ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            } catch (error) {
                console.error('‚ùå [SyncService] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);

                // –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
                if (error.message.includes('User ID') || error.message.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó')) {
                    if (window.TasksUtils?.showToast) {
                        window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...', 'error');
                    }

                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                }
            } finally {
                this.isSyncing = false;
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É
         */
        async syncBalance(userId) {
            console.log('üí∞ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É...');

            const response = await window.TasksAPI.user.getBalance(userId);

            if (response.status === 'success') {
                window.TasksStore.actions.updateBalance(response.balance);

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                AuthService.updateUserUI({
                    balance: response.balance
                });

                return response;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É');
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex —Å—Ç–∞—Ç—É—Å—É
         */
        async syncFlexStatus(userId) {
            console.log('üíé [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Flex —Å—Ç–∞—Ç—É—Å—É...');

            const wallet = window.TasksStore?.selectors?.getWalletAddress();
            if (!wallet) {
                console.log('‚è∏Ô∏è [SyncService] –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                return { skipped: true, reason: 'wallet_not_connected' };
            }

            if (window.FlexEarnManager) {
                await window.FlexEarnManager.checkFlexBalance();
                return { synced: true };
            }

            console.warn('‚ö†Ô∏è [SyncService] FlexEarnManager –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return { skipped: true, reason: 'flex_manager_unavailable' };
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
         */
        async syncDailyBonus(userId) {
            console.log('üéÅ [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É...');

            const response = await window.TasksAPI.daily.getStatus(userId);

            if (response.status === 'success') {
                // –û–Ω–æ–≤–ª—é—î–º–æ UI —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
                if (window.DailyBonusManager && window.DailyBonusManager.updateDailyBonusUI) {
                    window.DailyBonusManager.updateDailyBonusUI();
                }

                return response;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É');
            }
        },

        /**
         * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å
         */
        async syncTasks(userId) {
            console.log('üìã [SyncService] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å...');

            const response = await window.TasksAPI.tasks.getList(userId);

            if (response.status === 'success') {
                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —Å—Ç–æ—Ä—ñ
                if (response.data.tasks) {
                    Object.entries(response.data.tasks).forEach(([type, tasks]) => {
                        window.TasksStore.actions.setTasks(type, tasks);
                    });
                }

                return response;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π
     */
    const NotificationService = {
        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å–ø—ñ—à–Ω—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
         */
        showSuccess(message, duration = 3000) {
            console.log('‚úÖ [NotificationService] –£—Å–ø—ñ—Ö:', message);
            if (window.TasksUtils?.showToast) {
                window.TasksUtils.showToast(message, 'success', duration);
            }

            // –í—ñ–±—Ä–∞—Ü—ñ—è –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
            this.vibrate([50]);
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
         */
        showError(message, duration = 5000) {
            console.log('‚ùå [NotificationService] –ü–æ–º–∏–ª–∫–∞:', message);
            if (window.TasksUtils?.showToast) {
                window.TasksUtils.showToast(message, 'error', duration);
            }

            // –î–æ–≤—à–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è –¥–ª—è –ø–æ–º–∏–ª–æ–∫
            this.vibrate([100, 50, 100]);
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
         */
        showWarning(message, duration = 4000) {
            console.log('‚ö†Ô∏è [NotificationService] –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:', message);
            if (window.TasksUtils?.showToast) {
                window.TasksUtils.showToast(message, 'warning', duration);
            }

            this.vibrate([75]);
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
         */
        showInfo(message, duration = 3000) {
            console.log('‚ÑπÔ∏è [NotificationService] –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:', message);
            if (window.TasksUtils?.showToast) {
                window.TasksUtils.showToast(message, 'info', duration);
            }
        },

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
         */
        showReward(reward) {
            console.log('üéÅ [NotificationService] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞:', reward);

            let message = '–û—Ç—Ä–∏–º–∞–Ω–æ: ';
            const parts = [];

            if (reward.winix > 0) {
                parts.push(`+${reward.winix} WINIX`);
            }
            if (reward.tickets > 0) {
                parts.push(`+${reward.tickets} tickets`);
            }
            if (reward.flex > 0) {
                parts.push(`+${reward.flex} FLEX`);
            }

            message += parts.join(' —Ç–∞ ');

            this.showSuccess(message, 4000);

            // –°–≤—è—Ç–∫–æ–≤–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è
            this.vibrate([50, 100, 50, 100, 50]);
        },

        /**
         * –í—ñ–±—Ä–∞—Ü—ñ—è (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
         */
        vibrate(pattern) {
            if (window.Telegram?.WebApp?.HapticFeedback) {
                try {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
                } catch (e) {
                    // Fallback –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –≤—ñ–±—Ä–∞—Ü—ñ—ó
                    if ('vibrate' in navigator) {
                        navigator.vibrate(pattern);
                    }
                }
            } else if ('vibrate' in navigator) {
                navigator.vibrate(pattern);
            }
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
     */
    const AnalyticsService = {
        sessionId: null,

        /**
         * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
         */
        init() {
            this.sessionId = this.generateSessionId();
            console.log('üìä [AnalyticsService] –°–µ—Å—ñ—è:', this.sessionId);
        },

        /**
         * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ID —Å–µ—Å—ñ—ó
         */
        generateSessionId() {
            return `ses_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        },

        /**
         * –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–æ–¥—ñ—é
         */
        trackEvent(category, action, label, value) {
            console.log('üìä [AnalyticsService] –ü–æ–¥—ñ—è:', {
                category,
                action,
                label,
                value,
                sessionId: this.sessionId
            });

            // Telegram WebApp –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
            if (window.Telegram?.WebApp) {
                try {
                    window.Telegram.WebApp.sendData(JSON.stringify({
                        type: 'analytics',
                        event: {
                            category,
                            action,
                            label,
                            value,
                            sessionId: this.sessionId,
                            timestamp: Date.now()
                        }
                    }));
                } catch (error) {
                    console.error('‚ùå [AnalyticsService] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
                }
            }

            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ API –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (servicesState.apiAvailable && window.TasksAPI) {
                window.TasksAPI.call('/analytics/event', {
                    method: 'POST',
                    body: {
                        category,
                        action,
                        label,
                        value,
                        sessionId: this.sessionId,
                        timestamp: Date.now()
                    }
                }).catch(error => {
                    console.error('‚ùå [AnalyticsService] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±–µ–∫–µ–Ω–¥:', error);
                });
            }
        },

        /**
         * –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
         */
        trackPageView(pageName) {
            console.log('üìÑ [AnalyticsService] –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', pageName);
            this.trackEvent('Navigation', 'page_view', pageName);
        },

        /**
         * –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É
         */
        trackError(error, context) {
            console.log('üêõ [AnalyticsService] –ü–æ–º–∏–ª–∫–∞:', error, context);

            const errorData = {
                name: error.name || 'UnknownError',
                message: error.message || 'Unknown error',
                stack: error.stack ? error.stack.substring(0, 500) : null,
                context: context
            };

            this.trackEvent('Error', errorData.name, context, 1);
        },

        /**
         * –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
         */
        trackTiming(category, variable, time) {
            console.log('‚è±Ô∏è [AnalyticsService] –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:', {
                category,
                variable,
                time: time + 'ms'
            });
            this.trackEvent('Timing', category, variable, time);
        }
    };

    /**
     * –°–µ—Ä–≤—ñ—Å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    const ValidationService = {
        /**
         * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è
         */
        validateTask(task) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', task);

            const errors = [];

            if (!task.id) errors.push('ID –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.type) errors.push('–¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            if (!task.title) errors.push('–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è');
            if (!task.reward) errors.push('–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –≤—ñ–¥—Å—É—Ç–Ω—è');

            if (task.reward) {
                if (typeof task.reward.winix !== 'number' || task.reward.winix < 0) {
                    errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ WINIX');
                }
                if (task.reward.tickets && (typeof task.reward.tickets !== 'number' || task.reward.tickets < 0)) {
                    errors.push('–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ tickets');
                }
            }

            if (errors.length > 0) {
                console.error('‚ùå [ValidationService] –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', errors);
                return { valid: false, errors };
            }

            console.log('‚úÖ [ValidationService] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–µ');
            return { valid: true };
        },

        /**
         * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è
         */
        validateWalletAddress(address) {
            console.log('üîç [ValidationService] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏:', address);

            const rules = window.TasksConstants?.VALIDATION_RULES?.WALLET_ADDRESS;

            if (rules) {
                const isValid = rules.PATTERN.test(address) && address.length === rules.LENGTH;

                if (!isValid) {
                    console.error('‚ùå [ValidationService] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏');
                    return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏ TON' };
                }
            } else {
                // Fallback –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
                const isValid = /^[a-zA-Z0-9_-]{48}$/.test(address);

                if (!isValid) {
                    console.error('‚ùå [ValidationService] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏');
                    return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏ TON' };
                }
            }

            console.log('‚úÖ [ValidationService] –ê–¥—Ä–µ—Å–∞ –≤–∞–ª—ñ–¥–Ω–∞');
            return { valid: true };
        },

        /**
         * –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram ID
         */
        validateTelegramId(telegramId) {
            const rules = window.TasksConstants?.VALIDATION_RULES?.TELEGRAM_ID;
            const id = parseInt(telegramId);

            if (!id || isNaN(id)) {
                return { valid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID' };
            }

            if (rules) {
                if (id < rules.MIN || id > rules.MAX) {
                    return { valid: false, error: 'ID –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º' };
                }
            }

            return { valid: true };
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
    async function init() {
        console.log('üöÄ [TasksServices] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ (Production)');

        try {
            // –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
            const maxWaitTime = 10000; // 10 —Å–µ–∫—É–Ω–¥
            const startTime = Date.now();

            while (!checkDependencies() && (Date.now() - startTime) < maxWaitTime) {
                console.log('‚è≥ [TasksServices] –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            if (!checkDependencies()) {
                console.error('‚ùå [TasksServices] –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ –≥–æ—Ç–æ–≤—ñ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
                throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ');
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
            AnalyticsService.init();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–¥–æ—Ä–æ–≤'—è API
            await checkApiHealth();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ API –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (servicesState.apiAvailable) {
                SyncService.startAutoSync();
            } else {
                console.warn('‚ö†Ô∏è [TasksServices] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∞');
            }

            servicesState.initialized = true;

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
            AnalyticsService.trackEvent('System', 'init', 'services_production');

            console.log('‚úÖ [TasksServices] –°–µ—Ä–≤—ñ—Å–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (Production)');

        } catch (error) {
            console.error('‚ùå [TasksServices] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤:', error);

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–º–∏–ª–∫—É
            AnalyticsService.trackError(error, 'services_init');

            throw error;
        }
    }

    console.log('‚úÖ [TasksServices] –°–µ—Ä–≤—ñ—Å–Ω–∏–π –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π (Production)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        Auth: AuthService,
        Sync: SyncService,
        Notification: NotificationService,
        Analytics: AnalyticsService,
        Validation: ValidationService,
        init,
        checkDependencies,
        checkApiHealth,
        getState: () => servicesState
    };

})();

console.log('‚úÖ [TasksServices] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ (Production)');