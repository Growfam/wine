/**
 * TaskManager - –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
 * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –∫—Ä–∞—â–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é
 * @version 1.1.0
 */

window.TaskManager = (function() {
    // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –º–æ–¥—É–ª—è
    let socialTasks = [];
    let limitedTasks = [];
    let partnerTasks = [];
    let userProgress = {};

    // –¢–∏–ø–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
    const REWARD_TYPES = {
        TOKENS: 'tokens',
        COINS: 'coins'
    };

    // –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–ø–µ—Ä–∞—Ü—ñ–π
    const operationStatus = {
        tasksLoading: false,
        verificationInProgress: {},
        lastVerificationTime: {},
        lastOperationId: null
    };

    // DOM-–µ–ª–µ–º–µ–Ω—Ç–∏
    const domElements = {
        socialTasksContainer: null,
        limitedTasksContainer: null,
        partnersTasksContainer: null,
        tabButtons: null,
        contentSections: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
    const errorHandlingConfig = {
        maxRetries: 3,
        retryInterval: 1500,
        showTechnicalDetails: true
    };

    /**
     * –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ includes –∑ –æ–±—Ä–æ–±–∫–æ—é undefined
     * @param {string|undefined} str - –†—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @param {string} substring - –ü—ñ–¥—Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç
     */
    function safeIncludes(str, substring) {
        if (!str || typeof str !== 'string') return false;
        return str.includes(substring);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TaskManager
     */
    function init() {
        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TaskManager...');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API
        if (!isApiAvailable()) {
            console.error('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ!');
            console.log('window.API =', window.API);
            console.log('window.API_PATHS =', window.API_PATHS);

            showErrorMessage('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.');
            return;
        }

        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: API –¥–æ—Å—Ç—É–ø–Ω–µ');
        console.log('window.API_PATHS.TASKS =', window.API_PATHS.TASKS);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏
        findDomElements();

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞—á—ñ–≤ –≤–∫–ª–∞–¥–æ–∫
        setupTabSwitching();

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
        loadTasks();
    }

    /**
     * –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
    function findDomElements() {
        domElements.socialTasksContainer = document.getElementById('social-tasks-container');
        domElements.limitedTasksContainer = document.getElementById('limited-tasks-container');
        domElements.partnersTasksContainer = document.getElementById('partners-tasks-container');
        domElements.tabButtons = document.querySelectorAll('.tab');
        domElements.contentSections = document.querySelectorAll('.content-section');

        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω–æ:');
        console.log('socialTasksContainer =', domElements.socialTasksContainer ? '–∑–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        console.log('limitedTasksContainer =', domElements.limitedTasksContainer ? '–∑–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        console.log('partnersTasksContainer =', domElements.partnersTasksContainer ? '–∑–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞—á—ñ–≤ –≤–∫–ª–∞–¥–æ–∫
     */
    function setupTabSwitching() {
        if (!domElements.tabButtons) return;

        domElements.tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                // –ó–Ω—ñ–º–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –≤–∫–ª–∞–¥–æ–∫
                domElements.tabButtons.forEach(btn => btn.classList.remove('active'));

                // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –ø–æ—Ç–æ—á–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ
                this.classList.add('active');

                // –•–æ–≤–∞—î–º–æ –≤—Å—ñ —Å–µ–∫—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
                if (domElements.contentSections) {
                    domElements.contentSections.forEach(section => section.classList.remove('active'));
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Å–µ–∫—Ü—ñ—é
                const tabType = this.dataset.tab;
                const targetSection = document.getElementById(`${tabType}-content`);
                if (targetSection) {
                    targetSection.classList.add('active');
                }

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É –≤ localStorage
                try {
                    localStorage.setItem('active_tasks_tab', tabType);
                } catch (e) {
                    console.warn('TaskManager: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –≤ localStorage:', e.message);
                }
            });
        });

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É –∑ localStorage
        try {
            const savedTab = localStorage.getItem('active_tasks_tab');
            if (savedTab) {
                const savedTabButton = document.querySelector(`.tab[data-tab="${savedTab}"]`);
                if (savedTabButton) {
                    savedTabButton.click();
                }
            }
        } catch (e) {
            console.warn('TaskManager: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑ localStorage:', e.message);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
     */
    function isApiAvailable() {
        return window.API && typeof window.API.get === 'function' && typeof window.API.post === 'function';
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
     */
    async function loadTasks() {
        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...');

        try {
            // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
            if (operationStatus.tasksLoading) {
                console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
                return;
            }

            operationStatus.tasksLoading = true;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API
            if (!isApiAvailable()) {
                throw new Error('API_NOT_AVAILABLE');
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
            if (domElements.socialTasksContainer) {
                domElements.socialTasksContainer.innerHTML = '<div class="task-loader">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...</div>';
            }
            if (domElements.limitedTasksContainer) {
                domElements.limitedTasksContainer.innerHTML = '<div class="task-loader">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...</div>';
            }
            if (domElements.partnersTasksContainer) {
                domElements.partnersTasksContainer.innerHTML = '<div class="task-loader">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...</div>';
            }

            // –õ–æ–≥—É—î–º–æ URL-—à–ª—è—Ö–∏ —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è
            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: URL –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å =', window.API_PATHS.TASKS.SOCIAL);
            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: URL –¥–ª—è –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å =', window.API_PATHS.TASKS.LIMITED);
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PARTNER –∑–∞–º—ñ—Å—Ç—å PARTNERS
            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: URL –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å =', window.API_PATHS.TASKS.PARTNER);

            try {
                // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –ø–æ–±–∞—á–∏—Ç–∏ —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è
                console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–ø–∏—Ç —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å...');
                const socialResponse = await window.API.get(window.API_PATHS.TASKS.SOCIAL);
                console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å:', socialResponse);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (socialResponse) {
                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', typeof socialResponse);
                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–ª—é—á—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', Object.keys(socialResponse));

                    if (socialResponse.status) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–Ω–∞—á–µ–Ω–Ω—è status:', socialResponse.status);
                    }

                    if (socialResponse.data) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–∏–ø data:', typeof socialResponse.data);
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–ª—é—á—ñ –≤ data:', Object.keys(socialResponse.data));

                        if (socialResponse.data.tasks) {
                            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: data.tasks —î –º–∞—Å–∏–≤–æ–º:', Array.isArray(socialResponse.data.tasks));
                            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å:', socialResponse.data.tasks.length);

                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è (—è–∫—â–æ —î)
                            if (socialResponse.data.tasks.length > 0) {
                                console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–∏–∫–ª–∞–¥ –ø–µ—Ä—à–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:', socialResponse.data.tasks[0]);
                            }
                        } else {
                            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª–µ data.tasks –≤—ñ–¥—Å—É—Ç–Ω—î');
                            // –ú–æ–∂–ª–∏–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ñ–Ω—à–∞ - –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≤–º—ñ—Å—Ç data
                            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í–º—ñ—Å—Ç data:', socialResponse.data);
                        }
                    }

                    // –†–Ü–ó–ù–Ü –í–ê–†–Ü–ê–ù–¢–ò –û–ë–†–û–ë–ö–ò - —Å–ø—Ä–æ–±—É—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
                    let tasksData = [];

                    // –í–∞—Ä—ñ–∞–Ω—Ç 1: –ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ { status: 'success', data: { tasks: [...] } }
                    if (socialResponse.status === 'success' && socialResponse.data && socialResponse.data.tasks) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É data.tasks');
                        tasksData = socialResponse.data.tasks;
                    }
                    // –í–∞—Ä—ñ–∞–Ω—Ç 2: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ { status: 'success', data: [...] }
                    else if (socialResponse.status === 'success' && socialResponse.data && Array.isArray(socialResponse.data)) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É data —è–∫ –º–∞—Å–∏–≤');
                        tasksData = socialResponse.data;
                    }
                    // –í–∞—Ä—ñ–∞–Ω—Ç 3: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ { success: true, data: [...] }
                    else if (socialResponse.success && socialResponse.data) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ success –∑–∞–º—ñ—Å—Ç—å status');
                        if (Array.isArray(socialResponse.data)) {
                            tasksData = socialResponse.data;
                        } else if (socialResponse.data.tasks) {
                            tasksData = socialResponse.data.tasks;
                        }
                    }
                    // –í–∞—Ä—ñ–∞–Ω—Ç 4: –º–∞—Å–∏–≤ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    else if (Array.isArray(socialResponse)) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–ø–æ–≤—ñ–¥—å —î –º–∞—Å–∏–≤–æ–º –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ');
                        tasksData = socialResponse;
                    }
                    // –í–∞—Ä—ñ–∞–Ω—Ç 5: { tasks: [...] }
                    else if (socialResponse.tasks && Array.isArray(socialResponse.tasks)) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ tasks –≤ –∫–æ—Ä–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
                        tasksData = socialResponse.tasks;
                    }

                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–¥–∞–Ω—å:', tasksData.length);

                    if (tasksData.length > 0) {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ!');
                        socialTasks = normalizeTasksData(tasksData);
                        renderSocialTasks();
                    } else {
                        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±');
                        if (domElements.socialTasksContainer) {
                            domElements.socialTasksContainer.innerHTML =
                                '<div class="no-tasks">–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</div>';
                        }
                    }
                } else {
                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–ø–æ–≤—ñ–¥—å socialResponse —î null –∞–±–æ undefined');
                }

                // –ü—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å
                try {
                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–ø–∏—Ç –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å...');
                    const limitedResponse = await window.API.get(window.API_PATHS.TASKS.LIMITED);
                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å:', limitedResponse);

                    // –¢–∞–∫–∞ –∂ –æ–±—Ä–æ–±–∫–∞ —è–∫ —ñ –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, –∞–ª–µ —Å–∫–æ—Ä–æ—á–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ
                    let limitedTasksData = [];
                    if (limitedResponse.status === 'success' && limitedResponse.data && limitedResponse.data.tasks) {
                        limitedTasksData = limitedResponse.data.tasks;
                    } else if (limitedResponse.status === 'success' && limitedResponse.data && Array.isArray(limitedResponse.data)) {
                        limitedTasksData = limitedResponse.data;
                    } else if (limitedResponse.success && limitedResponse.data) {
                        limitedTasksData = Array.isArray(limitedResponse.data) ? limitedResponse.data :
                            (limitedResponse.data.tasks || []);
                    } else if (Array.isArray(limitedResponse)) {
                        limitedTasksData = limitedResponse;
                    } else if (limitedResponse.tasks && Array.isArray(limitedResponse.tasks)) {
                        limitedTasksData = limitedResponse.tasks;
                    }

                    if (limitedTasksData.length > 0) {
                        limitedTasks = normalizeTasksData(limitedTasksData);
                        renderLimitedTasks();
                    } else if (domElements.limitedTasksContainer) {
                        domElements.limitedTasksContainer.innerHTML =
                            '<div class="no-tasks">–õ—ñ–º—ñ—Ç–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.</div>';
                    }
                } catch (limitedError) {
                    console.error('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å:', limitedError);
                }

                try {
                    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API_PATHS.TASKS.PARTNER –∑–∞–º—ñ—Å—Ç—å API_PATHS.TASKS.PARTNERS
                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–ø–∏—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å...');
                    const partnerResponse = await window.API.get(window.API_PATHS.TASKS.PARTNER);
                    console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å:', partnerResponse);

                    // –¢–∞–∫–∞ –∂ –æ–±—Ä–æ–±–∫–∞ —è–∫ —ñ –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, –∞–ª–µ —Å–∫–æ—Ä–æ—á–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ
                    let partnerTasksData = [];
                    if (partnerResponse.status === 'success' && partnerResponse.data && partnerResponse.data.tasks) {
                        partnerTasksData = partnerResponse.data.tasks;
                    } else if (partnerResponse.status === 'success' && partnerResponse.data && Array.isArray(partnerResponse.data)) {
                        partnerTasksData = partnerResponse.data;
                    } else if (partnerResponse.success && partnerResponse.data) {
                        partnerTasksData = Array.isArray(partnerResponse.data) ? partnerResponse.data :
                            (partnerResponse.data.tasks || []);
                    } else if (Array.isArray(partnerResponse)) {
                        partnerTasksData = partnerResponse;
                    } else if (partnerResponse.tasks && Array.isArray(partnerResponse.tasks)) {
                        partnerTasksData = partnerResponse.tasks;
                    }

                    if (partnerTasksData.length > 0) {
                        partnerTasks = normalizeTasksData(partnerTasksData);
                        renderPartnerTasks();
                    } else if (domElements.partnersTasksContainer) {
                        domElements.partnersTasksContainer.innerHTML =
                            '<div class="no-tasks">–ü–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.</div>';
                    }
                } catch (partnerError) {
                    console.error('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å:', partnerError);
                }

            } catch (error) {
                console.error('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É:', error);

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
                const errorHtml = `<div class="error-message">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å: ${error.message}</div>`;
                if (domElements.socialTasksContainer) {
                    domElements.socialTasksContainer.innerHTML = errorHtml;
                }
            }

        } catch (error) {
            console.error('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);

            // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: ' + error.message);
        } finally {
            operationStatus.tasksLoading = false;
            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–ø—Ä–æ–±—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
     */
    function normalizeTasksData(tasks) {
        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, –æ—Ç—Ä–∏–º–∞–Ω–æ:', tasks);

        if (!Array.isArray(tasks)) {
            console.warn('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: tasks –Ω–µ —î –º–∞—Å–∏–≤–æ–º, —Ç–∏–ø:', typeof tasks);
            return [];
        }

        return tasks.map(task => {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –∑–∞–≤–¥–∞–Ω–Ω—è
            const normalizedTask = { ...task };

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            normalizedTask.id = normalizedTask.id || `task_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
            normalizedTask.title = normalizedTask.title || '–ó–∞–≤–¥–∞–Ω–Ω—è';
            normalizedTask.description = normalizedTask.description || '–û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è';

            // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            if (normalizedTask.reward_type) {
                const lowerType = normalizedTask.reward_type.toLowerCase();
                if (safeIncludes(lowerType, 'token') || safeIncludes(lowerType, 'winix')) {
                    normalizedTask.reward_type = REWARD_TYPES.TOKENS;
                } else if (safeIncludes(lowerType, 'coin') || safeIncludes(lowerType, '–∂–µ—Ç–æ–Ω')) {
                    normalizedTask.reward_type = REWARD_TYPES.COINS;
                }
            } else {
                normalizedTask.reward_type = REWARD_TYPES.TOKENS;
            }

            // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Å—É–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            normalizedTask.reward_amount = parseFloat(normalizedTask.reward_amount) || 10;

            // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ü—ñ–ª—å–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            normalizedTask.target_value = parseInt(normalizedTask.target_value) || 1;

            return normalizedTask;
        });
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
     */
    function renderSocialTasks() {
        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', socialTasks.length);

        if (!domElements.socialTasksContainer) {
            console.warn('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        domElements.socialTasksContainer.innerHTML = '';

        if (socialTasks.length === 0) {
            domElements.socialTasksContainer.innerHTML = '<div class="no-tasks">–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å</div>';
            return;
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        socialTasks.forEach(task => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            if (window.SocialTask && window.SocialTask.create) {
                console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SocialTask.create –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è', task.id);
                const taskElement = window.SocialTask.create(task, userProgress[task.id]);
                domElements.socialTasksContainer.appendChild(taskElement);
            } else {
                console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ createBasicTaskElement –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è', task.id);
                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                domElements.socialTasksContainer.innerHTML += createBasicTaskElement(task, userProgress[task.id]);
            }
        });

        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ');
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
     */
    function renderLimitedTasks() {
        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', limitedTasks.length);

        if (!domElements.limitedTasksContainer) {
            console.warn('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        domElements.limitedTasksContainer.innerHTML = '';

        if (limitedTasks.length === 0) {
            domElements.limitedTasksContainer.innerHTML = '<div class="no-tasks">–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å</div>';
            return;
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        limitedTasks.forEach(task => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            if (window.LimitedTask && window.LimitedTask.create) {
                const taskElement = window.LimitedTask.create(task, userProgress[task.id]);
                domElements.limitedTasksContainer.appendChild(taskElement);
            } else {
                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                domElements.limitedTasksContainer.innerHTML += createBasicTaskElement(task, userProgress[task.id], true);
            }
        });

        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –õ—ñ–º—ñ—Ç–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ');
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å
     */
    function renderPartnerTasks() {
        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å, –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', partnerTasks.length);

        if (!domElements.partnersTasksContainer) {
            console.warn('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        domElements.partnersTasksContainer.innerHTML = '';

        if (partnerTasks.length === 0) {
            domElements.partnersTasksContainer.innerHTML = '<div class="no-tasks">–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å</div>';
            return;
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        partnerTasks.forEach(task => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            if (window.PartnerTask && window.PartnerTask.create) {
                const taskElement = window.PartnerTask.create(task, userProgress[task.id]);
                domElements.partnersTasksContainer.appendChild(taskElement);
            } else {
                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                domElements.partnersTasksContainer.innerHTML += createBasicTaskElement(task, userProgress[task.id]);
            }
        });

        console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ');
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –∑–∞–≤–¥–∞–Ω–Ω—è (–∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
     */
    function createBasicTaskElement(task, progress, isLimited = false) {
        const completed = progress && progress.status === 'completed';
        const progressValue = progress ? progress.progress_value : 0;
        const progressPercent = Math.min(100, Math.round((progressValue / task.target_value) * 100)) || 0;

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∏–ø –Ω–∞–≥–æ—Ä–æ–¥–∏
        const rewardType = task.reward_type === REWARD_TYPES.TOKENS ? '$WINIX' : '–∂–µ—Ç–æ–Ω—ñ–≤';

        let timerHtml = '';
        if (isLimited && task.end_date) {
            const endDate = new Date(task.end_date);
            const now = new Date();
            const timeLeft = endDate - now;

            if (timeLeft > 0) {
                const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                timerHtml = `<div class="timer-container"><span class="timer-icon">‚è∞</span> <span class="timer-value" data-end-date="${task.end_date}">${days}–¥ ${hours}–≥</span></div>`;
            } else {
                timerHtml = `<div class="timer-container expired"><span class="timer-icon">‚è∞</span> <span data-lang-key="earn.expired">–ó–∞–∫—ñ–Ω—á–µ–Ω–æ</span></div>`;
            }
        }

        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —è–∫—â–æ —î
        let partnerLabel = '';
        if (task.partner_name) {
            partnerLabel = `<div class="partner-label">–ü–∞—Ä—Ç–Ω–µ—Ä: ${escapeHtml(task.partner_name)}</div>`;
        }

        return `
            <div class="task-item" data-task-id="${task.id}" data-task-type="${task.type}" data-target-value="${task.target_value}">
                ${partnerLabel}
                <div class="task-header">
                    <div class="task-title">${escapeHtml(task.title)}</div>
                    ${completed ? 
                      '<div class="completed-label" data-lang-key="earn.completed">–í–∏–∫–æ–Ω–∞–Ω–æ</div>' : 
                      `<div class="task-reward">${task.reward_amount} <span class="token-symbol">${rewardType}</span></div>${timerHtml}`
                    }
                </div>
                <div class="task-description">${escapeHtml(task.description)}</div>
                ${task.target_value > 1 ? 
                  `<div class="task-progress">
                       <div class="progress-text">${progressValue}/${task.target_value} ${task.progress_label || ''}</div>
                       <div class="progress-bar-container">
                           <div class="progress-fill" style="width: ${progressPercent}%;"></div>
                       </div>
                   </div>` : ''
                }
                <div class="task-action">
                    ${completed ? 
                      '<div class="completed-label" data-lang-key="earn.completed">–í–∏–∫–æ–Ω–∞–Ω–æ</div>' : 
                      `<button class="action-button" data-action="start" data-task-id="${task.id}" data-lang-key="earn.${task.action_type || 'start'}">${task.action_label || '–í–∏–∫–æ–Ω–∞—Ç–∏'}</button>
                       <button class="action-button verify-button" data-action="verify" data-task-id="${task.id}" data-lang-key="earn.verify">–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏</button>`
                    }
                </div>
            </div>
        `;
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è HTML
     */
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     */
    function showErrorMessage(message) {
        console.error('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:', message);

        // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ toast-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const toastElement = document.getElementById('toast-message');
        if (toastElement) {
            toastElement.textContent = message;
            toastElement.className = 'toast-message error';
            toastElement.classList.add('show');

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => {
                toastElement.classList.remove('show');
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å
                setTimeout(() => {
                    toastElement.className = 'toast-message';
                }, 300);
            }, 3000);
        } else {
            // –Ø–∫—â–æ toast-–µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
            console.log('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: toast-message –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ');

            const newToast = document.createElement('div');
            newToast.id = 'toast-message';
            newToast.className = 'toast-message error show';
            newToast.textContent = message;
            newToast.style.position = 'fixed';
            newToast.style.bottom = '20px';
            newToast.style.left = '50%';
            newToast.style.transform = 'translateX(-50%)';
            newToast.style.backgroundColor = '#f44336';
            newToast.style.color = 'white';
            newToast.style.padding = '12px 20px';
            newToast.style.borderRadius = '4px';
            newToast.style.zIndex = '9999';

            document.body.appendChild(newToast);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                newToast.style.opacity = '0';
                setTimeout(() => {
                    newToast.remove();
                }, 300);
            }, 5000);
        }
    }

    /**
     * –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API —à–ª—è—Ö—ñ–≤
     */
    function diagnoseApiPaths() {
        console.group('üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê API_PATHS:');

        if (!window.API_PATHS) {
            console.error('window.API_PATHS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
            console.groupEnd();
            return;
        }

        console.log('API_PATHS.TASKS:', window.API_PATHS.TASKS);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–ª—è—Ö–∏ –¥–æ –∑–∞–≤–¥–∞–Ω—å
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–º—ñ–Ω–µ–Ω–æ PARTNERS –Ω–∞ PARTNER
        const paths = ['SOCIAL', 'LIMITED', 'PARTNER'];
        paths.forEach(path => {
            if (window.API_PATHS.TASKS[path]) {
                console.log(`API_PATHS.TASKS.${path}:`, window.API_PATHS.TASKS[path]);

                // –°–ø—Ä–æ–±—É—î–º–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≤–Ω–∏–π URL
                let fullUrl = '';
                if (window.API_BASE_URL) {
                    fullUrl = `${window.API_BASE_URL}/${window.API_PATHS.TASKS[path]}`;
                } else if (window.WinixAPI && window.WinixAPI.config && window.WinixAPI.config.baseUrl) {
                    fullUrl = `${window.WinixAPI.config.baseUrl}/${window.API_PATHS.TASKS[path]}`;
                }

                if (fullUrl) {
                    console.log(`–ü–æ–≤–Ω–∏–π URL –¥–ª—è ${path}:`, fullUrl);
                }
            } else {
                console.error(`API_PATHS.TASKS.${path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
            }
        });

        console.groupEnd();
    }

    // –ü—É–±–ª—ñ—á–Ω–∏–π API –º–æ–¥—É–ª—è
    return {
        init,
        loadTasks,
        renderSocialTasks,
        renderLimitedTasks,
        renderPartnerTasks,
        diagnoseApiPaths,
        showErrorMessage
    };
})();