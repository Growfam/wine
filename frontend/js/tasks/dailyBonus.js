/**
 * –ú–æ–¥—É–ª—å Daily Bonus –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏–º–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞–º–∏ (–ª–æ–≥—ñ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ)
 */

window.DailyBonusManager = (function() {
    'use strict';

    console.log('üéÅ [DailyBonus] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø –©–û–î–ï–ù–ù–û–ì–û –ë–û–ù–£–°–£ =====');

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        userId: null,
        isInitialized: false,
        currentDay: 0,
        currentStreak: 0,
        longestStreak: 0,
        canClaim: false,
        nextClaimTime: null,
        todayReward: null,
        updateInterval: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        updateIntervalMs: 60000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
        maxDays: 30
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    async function init(userId) {
        console.log('üöÄ [DailyBonus] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
        console.log('üë§ [DailyBonus] User ID:', userId);
        console.log('‚öôÔ∏è [DailyBonus] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', config);

        state.userId = userId;

        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞–Ω –∑ –±–µ–∫–µ–Ω–¥—É
            await loadDailyBonusState();

            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            updateDailyBonusUI();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–π–º–µ—Ä –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            setupUpdateTimer();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            setupEventHandlers();

            state.isInitialized = true;
            console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –±–µ–∫–µ–Ω–¥—É
     */
    async function loadDailyBonusState() {
        console.log('üìÇ [DailyBonus] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –±–µ–∫–µ–Ω–¥—É...');

        try {
            const response = await window.TasksAPI.daily.getStatus(state.userId);

            console.log('‚úÖ [DailyBonus] –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω –∑ –±–µ–∫–µ–Ω–¥—É:', response);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            state.currentDay = response.currentDay || 0;
            state.currentStreak = response.currentStreak || 0;
            state.longestStreak = response.longestStreak || 0;
            state.canClaim = response.canClaim || false;
            state.nextClaimTime = response.nextClaimTime || null;
            state.todayReward = response.todayReward || null;

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ —Å—Ç–æ—Ä—ñ
            const store = window.TasksStore;
            if (store) {
                store.actions.setDailyStreak(state.currentStreak);

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
                if (response.claimedDays) {
                    response.claimedDays.forEach(day => {
                        if (!store.getState().dailyBonus.claimedDays.includes(day)) {
                            store.actions.addClaimedDay(day);
                        }
                    });
                }

                if (response.totalClaimed) {
                    store.actions.updateDailyTotalClaimed(response.totalClaimed);
                }
            }

            console.log('üìä [DailyBonus] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:', {
                Daily: state.currentDay,
                Seria: state.currentStreak,
                Claim: state.canClaim,
                NextTime: state.nextClaimTime
            });

        } catch (error) {
            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É', 'error');
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
     */
    function updateDailyBonusUI() {
        console.log('üîÑ [DailyBonus] === –û–ù–û–í–õ–ï–ù–ù–Ø UI ===');

        const store = window.TasksStore;
        const dailyBonus = store.getState().dailyBonus;

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –º—ñ—Å—è—Ü—è
        updateMonthProgressUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –¥–Ω—ñ–≤
        updateRecentDaysUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
        updateCalendarUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateStatsUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        updateClaimButtonUI();

        console.log('‚úÖ [DailyBonus] UI –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä—É –º—ñ—Å—è—Ü—è
     */
    function updateMonthProgressUI(dailyBonus) {
        console.log('üìä [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä—É –º—ñ—Å—è—Ü—è...');

        const progressFill = document.getElementById('month-progress-fill');
        const daysCompleted = document.getElementById('days-completed');
        const currentStreakSpan = document.getElementById('current-streak');
        const longestStreakSpan = document.getElementById('longest-streak');

        if (progressFill) {
            const progress = (state.currentDay / config.maxDays) * 100;
            progressFill.style.width = `${progress}%`;
        }

        if (daysCompleted) {
            daysCompleted.textContent = state.currentDay;
        }

        if (currentStreakSpan) {
            currentStreakSpan.textContent = state.currentStreak;
        }

        if (longestStreakSpan) {
            longestStreakSpan.textContent = state.longestStreak;
        }

        console.log('‚úÖ [DailyBonus] –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 –¥–Ω—ñ–≤
     */
    function updateRecentDaysUI(dailyBonus) {
        console.log('üìÖ [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 –¥–Ω—ñ–≤...');

        const recentDaysGrid = document.getElementById('recent-days-grid');
        if (!recentDaysGrid) return;

        recentDaysGrid.innerHTML = '';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –¥–Ω—ñ–≤
        const currentDay = state.currentDay + 1; // –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        const startDay = Math.max(1, currentDay - 4);
        const endDay = Math.min(startDay + 4, config.maxDays);

        for (let day = startDay; day <= endDay; day++) {
            const dayCard = createRecentDayCard(day, dailyBonus, currentDay);
            recentDaysGrid.appendChild(dayCard);
        }

        console.log('‚úÖ [DailyBonus] –û—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–Ω—è
     */
    function createRecentDayCard(dayNumber, dailyBonus, currentDay) {
        const card = document.createElement('div');
        card.className = 'recent-day-card';

        const isToday = dayNumber === currentDay && state.canClaim;
        const isClaimed = dayNumber < currentDay;
        const isFuture = dayNumber > currentDay;

        if (isToday) card.classList.add('today');
        if (isClaimed) card.classList.add('claimed');

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞ –∞–±–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω—ñ
        const rewardDisplay = getRewardDisplay(dayNumber);

        card.innerHTML = `
            <div class="recent-day-number">${dayNumber}</div>
            <div class="recent-day-label">–î–µ–Ω—å</div>
            <div class="recent-day-rewards">
                <div class="recent-day-reward winix">
                    <span class="reward-icon-small winix-icon-small"></span>
                    ${rewardDisplay.winix}
                </div>
                ${rewardDisplay.tickets ? `
                    <div class="recent-day-reward tickets">
                        <span class="reward-icon-small ticket-icon-small"></span>
                        ${rewardDisplay.tickets}
                    </div>
                ` : ''}
            </div>
        `;

        return card;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function getRewardDisplay(dayNumber) {
        // –Ø–∫—â–æ —Ü–µ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —ñ –º–∏ –º–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        if (dayNumber === state.currentDay + 1 && state.todayReward) {
            return {
                winix: state.todayReward.winix,
                tickets: state.todayReward.tickets || null
            };
        }

        // –Ü–Ω–∞–∫—à–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ UI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        const uiRewards = window.TasksConstants.DAILY_BONUS.UI_REWARDS;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á—É –≤—ñ—Ö—É
        let display = '20+';
        Object.entries(uiRewards).forEach(([day, config]) => {
            if (dayNumber >= parseInt(day)) {
                display = config.display;
            }
        });

        return {
            winix: display,
            tickets: '?'
        };
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    function updateCalendarUI(dailyBonus) {
        console.log('üìÖ [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');

        const calendar = document.getElementById('daily-calendar');
        if (!calendar) {
            console.warn('‚ö†Ô∏è [DailyBonus] –ï–ª–µ–º–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û—á–∏—â–∞—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
        calendar.innerHTML = '';

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–Ω—ñ
        for (let day = 1; day <= config.maxDays; day++) {
            const dayCell = createDayCell(day, dailyBonus);
            calendar.appendChild(dayCell);
        }

        console.log('‚úÖ [DailyBonus] –ö–∞–ª–µ–Ω–¥–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏ –¥–Ω—è
     */
    function createDayCell(dayNumber, dailyBonus) {
        console.log(`üìÖ [DailyBonus] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–Ω—è ${dayNumber}`);

        const cell = document.createElement('div');
        cell.className = 'calendar-day';
        cell.setAttribute('data-day', dayNumber);

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω –¥–Ω—è
        const currentDay = state.currentDay + 1;
        const isClaimed = dayNumber < currentDay;
        const isToday = dayNumber === currentDay && state.canClaim;
        const isFuture = dayNumber > currentDay;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞—Å–∏
        if (isClaimed) cell.classList.add('claimed');
        if (isToday) cell.classList.add('today');
        if (isFuture) cell.classList.add('future');

        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥–Ω—ñ (–∫–æ–∂–µ–Ω 7-–π –¥–µ–Ω—å)
        if (dayNumber % 7 === 0) {
            cell.classList.add('special');
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        const rewardDisplay = getRewardDisplay(dayNumber);

        // –í–º—ñ—Å—Ç –∫–æ–º—ñ—Ä–∫–∏
        cell.innerHTML = `
            <div class="calendar-day-number">${dayNumber}</div>
            <div class="calendar-day-reward">${rewardDisplay.winix}</div>
            ${rewardDisplay.tickets ? '<div class="calendar-ticket-badge"></div>' : ''}
        `;

        return cell;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    function updateStatsUI(dailyBonus) {
        console.log('üìä [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

        // –ï–ª–µ–º–µ–Ω—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è —á–µ—Ä–µ–∑ updateMonthProgressUI
        console.log('‚úÖ [DailyBonus] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
     */
    function updateClaimButtonUI() {
        console.log('üîò [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è...');

        const button = document.getElementById('claim-daily-button');
        if (!button) return;

        if (state.canClaim) {
            button.disabled = false;
            button.className = 'claim-daily-button available';

            // –Ø–∫—â–æ –º–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            if (state.todayReward) {
                button.innerHTML = `
                    <span class="button-text">–û—Ç—Ä–∏–º–∞—Ç–∏ ${state.todayReward.winix} WINIX</span>
                    ${state.todayReward.tickets > 0 ? `<span class="bonus-tickets">+${state.todayReward.tickets} tickets</span>` : ''}
                `;
            } else {
                button.innerHTML = '<span class="button-text">–û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å</span>';
            }
        } else {
            button.disabled = true;
            button.className = 'claim-daily-button claimed';

            // –ü–æ–∫–∞–∑—É—î–º–æ —á–∞—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
            if (state.nextClaimTime) {
                const timeUntilNext = getTimeUntilNext(state.nextClaimTime);
                button.innerHTML = `
                    <span class="button-text">–û—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ</span>
                    <span class="timer">${timeUntilNext}</span>
                `;
            } else {
                button.innerHTML = '<span class="button-text">–û—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ</span>';
            }
        }

        console.log('‚úÖ [DailyBonus] –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞');
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
     */
    function getTimeUntilNext(nextClaimTime) {
        const now = Date.now();
        const next = new Date(nextClaimTime).getTime();
        const diff = next - now;

        if (diff <= 0) return '00:00:00';

        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å
     */
    async function claimDailyBonus() {
        console.log('üéÅ [DailyBonus] === –û–¢–†–ò–ú–ê–ù–ù–Ø –©–û–î–ï–ù–ù–û–ì–û –ë–û–ù–£–°–£ ===');

        const store = window.TasksStore;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏
        if (!state.canClaim) {
            console.warn('‚ö†Ô∏è [DailyBonus] –ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ');
            window.TasksUtils.showToast('–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ', 'warning');
            return;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        store.actions.setDailyClaiming(true);

        try {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –±–µ–∫–µ–Ω–¥
            const response = await window.TasksAPI.daily.claim(state.userId);

            console.log('‚úÖ [DailyBonus] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É:', response);

            if (response.success) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
                state.canClaim = false;
                state.currentDay = response.currentDay;
                state.currentStreak = response.currentStreak;
                state.nextClaimTime = response.nextClaimTime;

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ —Å—Ç–æ—Ä—ñ
                store.actions.claimDailyBonus(response.reward);

                if (response.reward.tickets > 0) {
                    store.actions.addTicketDay(new Date().toISOString());
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏
                const currentBalance = store.selectors.getUserBalance();
                store.actions.updateBalance({
                    winix: currentBalance.winix + response.reward.winix,
                    tickets: currentBalance.tickets + (response.reward.tickets || 0)
                });

                // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
                showClaimAnimation(response.reward);

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                updateDailyBonusUI();

                console.log('‚úÖ [DailyBonus] –ë–æ–Ω—É—Å —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!');
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É');
            }

        } catch (error) {
            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É:', error);
            window.TasksUtils.showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É', 'error');

        } finally {
            store.actions.setDailyClaiming(false);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
     */
    function showClaimAnimation(reward) {
        console.log('üéä [DailyBonus] –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó
        const animDiv = document.createElement('div');
        animDiv.className = 'daily-bonus-claimed';

        let content = `
            <div class="reward-amount">
                <span class="winix-icon-small"></span>
                +${reward.winix} WINIX
            </div>
        `;

        if (reward.tickets > 0) {
            content += `
                <div class="reward-tickets">
                    <span class="ticket-icon-small"></span>
                    +${reward.tickets} TICKETS
                </div>
            `;
        }

        animDiv.innerHTML = content;
        document.body.appendChild(animDiv);

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        setTimeout(() => {
            animDiv.classList.add('show');
        }, 10);

        // –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            animDiv.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(animDiv);
            }, 500);
        }, 2500);

        // Toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let message = `–û—Ç—Ä–∏–º–∞–Ω–æ ${reward.winix} WINIX`;
        if (reward.tickets > 0) {
            message += ` —Ç–∞ ${reward.tickets} tickets!`;
        }
        window.TasksUtils.showToast(message, 'success');
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function setupUpdateTimer() {
        console.log('‚è∞ [DailyBonus] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');

        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
        if (state.updateInterval) {
            clearInterval(state.updateInterval);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        state.updateInterval = setInterval(() => {
            console.log('üîÑ [DailyBonus] –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
            updateClaimButtonUI();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞—Å—Ç–∞–≤ –Ω–æ–≤–∏–π –¥–µ–Ω—å
            checkForNewDay();

        }, config.updateIntervalMs);

        // –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        setInterval(() => {
            if (!state.canClaim && state.nextClaimTime) {
                updateClaimButtonUI();
            }
        }, 1000);

        console.log('‚úÖ [DailyBonus] –¢–∞–π–º–µ—Ä –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
     */
    async function checkForNewDay() {
        if (!state.canClaim && state.nextClaimTime) {
            const now = Date.now();
            const next = new Date(state.nextClaimTime).getTime();

            if (now >= next) {
                console.log('üÜï [DailyBonus] –ù–æ–≤–∏–π –¥–µ–Ω—å! –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω');
                await loadDailyBonusState();
                updateDailyBonusUI();
            }
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    function setupEventHandlers() {
        console.log('üéØ [DailyBonus] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π');

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        const claimButton = document.getElementById('claim-daily-button');
        if (claimButton) {
            claimButton.addEventListener('click', claimDailyBonus);
            console.log('‚úÖ [DailyBonus] –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ');
        }

        // –ö–ª—ñ–∫ –Ω–∞ –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ
        const calendar = document.getElementById('daily-calendar');
        if (calendar) {
            calendar.addEventListener('click', async (e) => {
                const dayCell = e.target.closest('.calendar-day');
                if (dayCell) {
                    const day = parseInt(dayCell.getAttribute('data-day'));
                    console.log(`üìÖ [DailyBonus] –ö–ª—ñ–∫ –Ω–∞ –¥–µ–Ω—å ${day}`);
                    await showDayDetails(day);
                }
            });
            console.log('‚úÖ [DailyBonus] –û–±—Ä–æ–±–Ω–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–æ–¥–∞–Ω–æ');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –¥–Ω—è
     */
    async function showDayDetails(day) {
        console.log(`üìã [DailyBonus] –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–Ω—è ${day}`);

        try {
            // –ó–∞–ø–∏—Ç—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
            const response = await window.TasksAPI.daily.calculateReward(state.userId, day);

            const message = `–î–µ–Ω—å ${day}: ${response.winix} WINIX` +
                           (response.tickets > 0 ? ` + ${response.tickets} tickets` : '');

            window.TasksUtils.showToast(message, 'info');
        } catch (error) {
            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–Ω—è:', error);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    function getStatistics() {
        const store = window.TasksStore;
        const dailyBonus = store.getState().dailyBonus;

        return {
            currentStreak: state.currentStreak,
            longestStreak: state.longestStreak,
            currentDay: state.currentDay,
            totalWinix: dailyBonus.totalClaimed.winix,
            totalTickets: dailyBonus.totalClaimed.tickets,
            completionRate: (state.currentDay / config.maxDays * 100).toFixed(1) + '%'
        };
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [DailyBonus] === –ó–ù–ò–©–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ===');

        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä
        if (state.updateInterval) {
            clearInterval(state.updateInterval);
        }

        console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        claimDailyBonus,
        updateDailyBonusUI,
        getStatistics,
        destroy
    };

})();

console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');