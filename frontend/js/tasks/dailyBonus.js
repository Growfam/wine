/**
 * –ú–æ–¥—É–ª—å Daily Bonus –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏–º–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞–º–∏ –∑ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é
 * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–æ–±–∫—É —Å–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Ä—ñ—ó
 */

window.DailyBonusManager = (function() {
    'use strict';

    console.log('üéÅ [DailyBonus] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø –©–û–î–ï–ù–ù–û–ì–û –ë–û–ù–£–°–£ =====');

    /*
     * –í–ê–ñ–õ–ò–í–û: –î–æ–¥–∞–π—Ç–µ —Ü—ñ CSS —Å—Ç–∏–ª—ñ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∫–Ω–æ–ø–∫–∏:
     *
     * .claim-daily-button {
     *     padding: 12px 24px;
     *     border-radius: 8px;
     *     border: none;
     *     font-weight: 600;
     *     cursor: pointer;
     *     transition: all 0.3s ease;
     * }
     *
     * .claim-daily-button.available {
     *     background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
     *     color: white;
     * }
     *
     * .claim-daily-button.available:hover {
     *     transform: translateY(-2px);
     *     box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
     * }
     *
     * .claim-daily-button.claimed {
     *     background: #e0e0e0;
     *     color: #999;
     *     cursor: not-allowed !important;
     * }
     *
     * .claim-daily-button:disabled {
     *     opacity: 0.6;
     *     cursor: not-allowed !important;
     *     pointer-events: none;
     * }
     *
     * .claim-daily-button.claiming {
     *     background: #f0f0f0;
     *     color: #666;
     * }
     *
     * .claim-daily-button .timer {
     *     display: block;
     *     font-size: 14px;
     *     margin-top: 4px;
     *     font-weight: normal;
     * }
     *
     * .claim-daily-button.pulse-animation {
     *     animation: pulse 2s infinite;
     * }
     *
     * @keyframes pulse {
     *     0% { transform: scale(1); }
     *     50% { transform: scale(1.05); }
     *     100% { transform: scale(1); }
     * }
     *
     * .reset-badge {
     *     display: inline-block;
     *     background: #ff6b6b;
     *     color: white;
     *     padding: 2px 8px;
     *     border-radius: 4px;
     *     font-size: 12px;
     *     margin-left: 8px;
     * }
     *
     * .claim-now-badge {
     *     position: absolute;
     *     top: -8px;
     *     right: -8px;
     *     background: #ff6b6b;
     *     color: white;
     *     padding: 2px 6px;
     *     border-radius: 4px;
     *     font-size: 10px;
     *     font-weight: bold;
     * }
     */

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        userId: null,
        isInitialized: false,
        currentDay: 0,
        currentStreak: 0,
        longestStreak: 0,
        canClaim: false,
        nextClaimTime: null,
        todayReward: null,
        calendarRewards: null,
        updateInterval: null,
        claimedDays: [],
        isResetting: false,  // –î–æ–¥–∞–Ω–æ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Ä—ñ—ó
        lastSyncTime: null,  // –î–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —á–∞—Å—Ç–æ—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—å
        isProcessingClaim: false  // –î–æ–¥–∞–Ω–æ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–¥–≤—ñ–π–Ω–∏—Ö –∫–ª—ñ–∫—ñ–≤
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        updateIntervalMs: 60000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
        maxDays: 30,
        minSyncInterval: 5000,   // –ú—ñ–Ω—ñ–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è–º–∏
        maxRetries: 3,           // –ú–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
        debugMode: false         // –†–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    async function init(userId) {
        console.log('üöÄ [DailyBonus] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
        console.log('üë§ [DailyBonus] User ID:', userId);
        console.log('‚öôÔ∏è [DailyBonus] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', config);

        state.userId = userId;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ (–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞)
        const button = document.getElementById('claim-daily-button');
        if (button) {
            button.disabled = true;
            button.classList.add('loading');
            button.innerHTML = '<span class="button-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>';
        }

        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞–Ω –∑ –±–µ–∫–µ–Ω–¥—É
            await loadDailyBonusState();

            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            updateDailyBonusUI();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–π–º–µ—Ä –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            setupUpdateTimer();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            setupEventHandlers();

            state.isInitialized = true;
            console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            console.log('  üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:', {
                canClaim: state.canClaim,
                currentDay: state.currentDay,
                currentStreak: state.currentStreak,
                buttonDisabled: button ? button.disabled : 'button not found'
            });

        } catch (error) {
            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);

            // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ - –±–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É
            if (button) {
                button.disabled = true;
                button.classList.remove('loading');
                button.classList.add('error');
                button.innerHTML = '<span class="button-text">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</span>';
            }

            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É', 'error');
            throw error;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –±–µ–∫–µ–Ω–¥—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º refresh –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
     */
    async function loadDailyBonusState(forceRefresh = false) {
        console.log('üìÇ [DailyBonus] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –±–µ–∫–µ–Ω–¥—É...');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ
        if (!forceRefresh && state.lastSyncTime) {
            const timeSinceLastSync = Date.now() - state.lastSyncTime;
            if (timeSinceLastSync < config.minSyncInterval) {
                console.log('‚è≥ [DailyBonus] –ó–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
                return;
            }
        }

        let retries = 0;
        let lastError = null;

        while (retries < config.maxRetries) {
            try {
                let response = await window.TasksAPI.daily.getStatus(state.userId);
                console.log('‚úÖ [DailyBonus] –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω –∑ –±–µ–∫–µ–Ω–¥—É:', response);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
                if (response.data) {
                    const data = response.data;

                    // –î–µ—Ç–µ–∫—Ç—É—î–º–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Ä—ñ—ó
                    const wasReset = state.currentStreak > 0 && data.current_streak === 0 && data.current_day_number === 1;
                    if (wasReset) {
                        console.warn('üîÑ [DailyBonus] –í–∏—è–≤–ª–µ–Ω–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Ä—ñ—ó!');
                        state.isResetting = true;
                    }

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π refresh –ø—Ä–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                    const needsRefresh = data.can_claim_today && data.next_claim_in_hours > 0;
                    const hasInconsistentData = data.can_claim_today === false && (!data.next_available_date || new Date(data.next_available_date) <= new Date());

                    if (needsRefresh || hasInconsistentData) {
                        console.warn('‚ö†Ô∏è [DailyBonus] –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ, —Ä–æ–±–∏–º–æ refresh');

                        try {
                            // –í–∏–∫–ª–∏–∫–∞—î–º–æ refresh
                            await window.TasksAPI.daily.refresh(state.userId);
                            console.log('‚úÖ [DailyBonus] Refresh –≤–∏–∫–æ–Ω–∞–Ω–æ');

                            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å
                            response = await window.TasksAPI.daily.getStatus(state.userId);
                            console.log('‚úÖ [DailyBonus] –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è refresh:', response);
                        } catch (refreshError) {
                            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ refresh:', refreshError);
                            // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                        }
                    }
                }

                if (response.status === 'success' && response.data) {
                    const data = response.data;

                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
                    state.currentDay = data.current_day_number || 0;
                    state.currentStreak = data.current_streak || 0;
                    state.longestStreak = data.longest_streak || 0;
                    state.canClaim = Boolean(data.can_claim_today); // –Ø–≤–Ω–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ boolean
                    state.nextClaimTime = data.next_available_date || null;
                    state.todayReward = data.today_reward || null;
                    state.calendarRewards = data.calendar_rewards || [];
                    state.claimedDays = data.claimed_days || [];
                    state.lastSyncTime = Date.now();

                    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
                    if (state.canClaim && state.nextClaimTime) {
                        const now = new Date();
                        const next = new Date(state.nextClaimTime);
                        if (next > now) {
                            console.warn('‚ö†Ô∏è [DailyBonus] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: canClaim=true –∞–ª–µ nextClaimTime –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É');
                            state.canClaim = false;
                        }
                    }

                    // –Ø–∫—â–æ –±—É–ª–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Ä—ñ—ó, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if (state.isResetting) {
                        window.TasksUtils.showToast('–°–µ—Ä—ñ—è —Å–∫–∏–Ω—É—Ç–∞ –Ω–∞ –¥–µ–Ω—å 1. –ú–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å!', 'info');
                        state.isResetting = false;
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ —Å—Ç–æ—Ä—ñ
                    updateStoreState();

                    console.log('üìä [DailyBonus] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:', {
                        Daily: state.currentDay,
                        Seria: state.currentStreak,
                        Claim: state.canClaim,
                        NextTime: state.nextClaimTime,
                        ClaimedDays: state.claimedDays
                    });

                    return; // –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
                } else {
                    throw new Error('Invalid response format');
                }

            } catch (error) {
                lastError = error;
                retries++;
                console.error(`‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Å–ø—Ä–æ–±–∞ ${retries}/${config.maxRetries}):`, error);

                if (retries < config.maxRetries) {
                    // –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    await new Promise(resolve => setTimeout(resolve, 1000 * retries));
                }
            }
        }

        // –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ
        console.error('‚ùå [DailyBonus] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±:', lastError);

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        state.currentDay = 0;
        state.currentStreak = 0;
        state.longestStreak = 0;
        state.canClaim = false;
        state.claimedDays = [];

        window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É', 'error');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤ —Å—Ç–æ—Ä—ñ
     */
    function updateStoreState() {
        const store = window.TasksStore;
        if (!store || !store.actions) {
            console.warn('‚ö†Ô∏è [DailyBonus] TasksStore –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä—ñ—é
        if (store.actions.setDailyStreak) {
            store.actions.setDailyStreak(state.currentStreak);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ claimed days
        if (store.actions.setClaimedDays) {
            store.actions.setClaimedDays(state.claimedDays);
        } else if (store.actions.addClaimedDay) {
            // Fallback —è–∫—â–æ –Ω–µ–º–∞—î setClaimedDays
            state.claimedDays.forEach(day => {
                store.actions.addClaimedDay(day);
            });
        }

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
        if (store.actions.updateDailyTotalClaimed) {
            const totalWinix = state.calendarRewards
                .filter((_, index) => state.claimedDays.includes(index + 1))
                .reduce((sum, reward) => sum + (reward.winix || 0), 0);

            const totalTickets = state.calendarRewards
                .filter((_, index) => state.claimedDays.includes(index + 1))
                .reduce((sum, reward) => sum + (reward.tickets || 0), 0);

            store.actions.updateDailyTotalClaimed({
                winix: totalWinix,
                tickets: totalTickets
            });
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
     */
    function updateDailyBonusUI() {
        console.log('üîÑ [DailyBonus] === –û–ù–û–í–õ–ï–ù–ù–Ø UI ===');

        const store = window.TasksStore;
        const dailyBonus = store ? store.getState().dailyBonus : {};

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –º—ñ—Å—è—Ü—è
        updateMonthProgressUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –¥–Ω—ñ–≤
        updateRecentDaysUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
        updateCalendarUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateStatsUI(dailyBonus);

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        updateClaimButtonUI();

        console.log('‚úÖ [DailyBonus] UI –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä—É –º—ñ—Å—è—Ü—è
     */
    function updateMonthProgressUI(dailyBonus) {
        console.log('üìä [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä—É –º—ñ—Å—è—Ü—è...');

        const progressFill = document.getElementById('month-progress-fill');
        const daysCompleted = document.getElementById('days-completed');
        const currentStreakSpan = document.getElementById('current-streak');
        const longestStreakSpan = document.getElementById('longest-streak');

        if (progressFill) {
            const progress = (state.currentDay / config.maxDays) * 100;
            progressFill.style.width = `${progress}%`;

            // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            progressFill.style.transition = 'width 0.5s ease-out';
        }

        if (daysCompleted) {
            daysCompleted.textContent = state.currentDay;
        }

        if (currentStreakSpan) {
            currentStreakSpan.textContent = state.currentStreak;

            // –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Å–µ—Ä—ñ—ó
            if (state.currentStreak === 0 && state.currentDay > 0) {
                currentStreakSpan.style.color = '#ff6b6b';
                setTimeout(() => {
                    currentStreakSpan.style.color = '';
                }, 3000);
            }
        }

        if (longestStreakSpan) {
            longestStreakSpan.textContent = state.longestStreak;
        }

        console.log('‚úÖ [DailyBonus] –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 –¥–Ω—ñ–≤
     */
    function updateRecentDaysUI(dailyBonus) {
        console.log('üìÖ [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 –¥–Ω—ñ–≤...');

        const recentDaysGrid = document.getElementById('recent-days-grid');
        if (!recentDaysGrid) return;

        recentDaysGrid.innerHTML = '';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –¥–Ω—ñ–≤
        const currentDay = state.currentDay;
        const nextClaimDay = state.canClaim ? state.currentDay + 1 : state.currentDay;
        const startDay = Math.max(1, nextClaimDay - 2);
        const endDay = Math.min(startDay + 4, config.maxDays);

        for (let day = startDay; day <= endDay; day++) {
            const dayCard = createRecentDayCard(day, dailyBonus, currentDay);
            recentDaysGrid.appendChild(dayCard);
        }

        console.log('‚úÖ [DailyBonus] –û—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–Ω—è
     */
    function createRecentDayCard(dayNumber, dailyBonus, currentDay) {
        const card = document.createElement('div');
        card.className = 'recent-day-card';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω –¥–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Ä—ñ—ó
        const isToday = state.canClaim && dayNumber === state.currentDay + 1;
        const isClaimed = state.claimedDays.includes(dayNumber);
        const isFuture = dayNumber > state.currentDay + 1 && !isClaimed;

        if (isToday) {
            card.classList.add('today');
            // –î–æ–¥–∞—î–º–æ –ø—É–ª—å—Å—É—é—á—É –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è —É–≤–∞–≥–∏
            card.style.animation = 'pulse 2s infinite';
        }
        if (isClaimed) card.classList.add('claimed');
        if (isFuture) card.classList.add('future');

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const rewardData = state.calendarRewards ?
            state.calendarRewards.find(r => r.day === dayNumber) : null;

        const rewardDisplay = rewardData || { winix: '?', tickets: 0 };

        card.innerHTML = `
            <div class="recent-day-number">${dayNumber}</div>
            <div class="recent-day-label">–î–µ–Ω—å</div>
            <div class="recent-day-rewards">
                <div class="recent-day-reward winix">
                    <span class="reward-icon-small winix-icon-small"></span>
                    ${rewardDisplay.winix}
                </div>
                ${rewardDisplay.tickets > 0 ? `
                    <div class="recent-day-reward tickets">
                        <span class="reward-icon-small ticket-icon-small"></span>
                        ${rewardDisplay.tickets}
                    </div>
                ` : ''}
            </div>
            ${isToday ? '<div class="claim-now-badge">–û—Ç—Ä–∏–º–∞—Ç–∏!</div>' : ''}
        `;

        return card;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    function updateCalendarUI(dailyBonus) {
        console.log('üìÖ [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');

        const calendar = document.getElementById('daily-calendar');
        if (!calendar) {
            console.warn('‚ö†Ô∏è [DailyBonus] –ï–ª–µ–º–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û—á–∏—â–∞—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
        calendar.innerHTML = '';

        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ claimed days –∑ state
        const claimedDays = state.claimedDays || [];

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–Ω—ñ
        for (let day = 1; day <= config.maxDays; day++) {
            const dayCell = createDayCell(day, dailyBonus, claimedDays);
            calendar.appendChild(dayCell);
        }

        console.log('‚úÖ [DailyBonus] –ö–∞–ª–µ–Ω–¥–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ claimed days:', claimedDays);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏ –¥–Ω—è
     */
    function createDayCell(dayNumber, dailyBonus, claimedDays) {
        const cell = document.createElement('div');
        cell.className = 'calendar-day';
        cell.setAttribute('data-day', dayNumber);

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω –¥–Ω—è
        const isClaimed = claimedDays.includes(dayNumber);
        const isToday = state.canClaim && dayNumber === state.currentDay + 1;
        const isFuture = dayNumber > state.currentDay + 1 && !isClaimed;
        const isPast = dayNumber < state.currentDay + 1 && !isClaimed && !state.canClaim;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞—Å–∏
        if (isClaimed) cell.classList.add('claimed');
        if (isToday) {
            cell.classList.add('today');
            cell.classList.add('available');
        }
        if (isFuture) cell.classList.add('future');
        if (isPast) cell.classList.add('missed'); // –ü—Ä–æ–ø—É—â–µ–Ω—ñ –¥–Ω—ñ

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const rewardData = state.calendarRewards ?
            state.calendarRewards.find(r => r.day === dayNumber) : null;

        const hasTickets = rewardData && rewardData.tickets > 0;

        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥–Ω—ñ –∑ –±—ñ–ª–µ—Ç–∞–º–∏
        if (hasTickets) {
            cell.classList.add('special');
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        const rewardDisplay = rewardData || { winix: '?', tickets: 0 };

        // –í–º—ñ—Å—Ç –∫–æ–º—ñ—Ä–∫–∏
        cell.innerHTML = `
            <div class="calendar-day-number">${dayNumber}</div>
            <div class="calendar-day-reward">${rewardDisplay.winix}</div>
            ${hasTickets ? `<div class="calendar-ticket-badge">${rewardDisplay.tickets}</div>` : ''}
            ${isToday ? '<div class="pulse-indicator"></div>' : ''}
        `;

        return cell;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    function updateStatsUI(dailyBonus) {
        console.log('üìä [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

        // –î–æ–¥–∞—Ç–∫–æ–≤–æ –º–æ–∂–µ–º–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalClaimed = dailyBonus.totalClaimed || { winix: 0, tickets: 0 };
        console.log('üìä [DailyBonus] –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', totalClaimed);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Å–µ—Ä—ñ—ó
        const streakResetWarning = document.getElementById('streak-reset-warning');
        if (streakResetWarning) {
            if (state.currentStreak === 0 && state.currentDay > 0) {
                streakResetWarning.style.display = 'block';
                streakResetWarning.textContent = '–°–µ—Ä—ñ—è —Å–∫–∏–Ω—É—Ç–∞! –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω—ñ —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–µ—Ä—ñ—é.';
            } else {
                streakResetWarning.style.display = 'none';
            }
        }

        console.log('‚úÖ [DailyBonus] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
     */
    function updateClaimButtonUI() {
        console.log('üîò [DailyBonus] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è...');
        console.log('  üìä –°—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏:', {
            canClaim: state.canClaim,
            nextClaimTime: state.nextClaimTime,
            currentDay: state.currentDay,
            currentStreak: state.currentStreak
        });

        const button = document.getElementById('claim-daily-button');
        if (!button) {
            console.warn('‚ö†Ô∏è [DailyBonus] –ö–Ω–æ–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!');
            return;
        }

        // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –∫–ª–∞—Å–∏ —ñ —Å—Ç–∏–ª—ñ
        button.className = 'claim-daily-button';
        button.style.cursor = '';

        // –ì–û–õ–û–í–ù–ê –õ–û–ì–Ü–ö–ê: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å
        if (state.canClaim === true) {
            // –ú–û–ñ–ù–ê –û–¢–†–ò–ú–ê–¢–ò - —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
            button.disabled = false;
            button.classList.add('available');
            button.style.cursor = 'pointer';

            // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è —É–≤–∞–≥–∏
            if (state.currentStreak === 0 && state.currentDay > 0) {
                button.classList.add('pulse-animation');
            }

            // –Ø–∫—â–æ –º–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            if (state.todayReward) {
                let btnText = `–û—Ç—Ä–∏–º–∞—Ç–∏ ${state.todayReward.winix} WINIX`;
                if (state.todayReward.tickets > 0) {
                    btnText += ` + ${state.todayReward.tickets} tickets`;
                }
                button.innerHTML = `
                    <span class="button-text">${btnText}</span>
                    ${state.currentStreak === 0 ? '<span class="reset-badge">–°–µ—Ä—ñ—è —Å–∫–∏–Ω—É—Ç–∞!</span>' : ''}
                `;
            } else {
                button.innerHTML = '<span class="button-text">–û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å</span>';
            }

            console.log('‚úÖ [DailyBonus] –ö–Ω–æ–ø–∫–∞ –†–û–ó–ë–õ–û–ö–û–í–ê–ù–ê - –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å');
        } else {
            // –ù–ï –ú–û–ñ–ù–ê –û–¢–†–ò–ú–ê–¢–ò - –±–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É
            button.disabled = true;
            button.classList.add('claimed');
            button.style.cursor = 'not-allowed';

            // –ü–æ–∫–∞–∑—É—î–º–æ —á–∞—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
            if (state.nextClaimTime) {
                const now = new Date();
                const nextTime = new Date(state.nextClaimTime);

                if (nextTime > now) {
                    const timeUntilNext = getTimeUntilNext(state.nextClaimTime);
                    button.innerHTML = `
                        <span class="button-text">–û—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ</span>
                        <span class="timer">${timeUntilNext}</span>
                    `;
                } else {
                    // –ß–∞—Å –≤–∂–µ –º–∏–Ω—É–≤, –∞–ª–µ —Å–µ—Ä–≤–µ—Ä —â–µ –Ω–µ –æ–Ω–æ–≤–∏–≤ —Å—Ç–∞–Ω
                    button.innerHTML = `
                        <span class="button-text">–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É...</span>
                    `;
                    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
                    setTimeout(() => loadDailyBonusState(true), 1000);
                }
            } else {
                button.innerHTML = '<span class="button-text">–û—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ</span>';
            }

            console.log('‚úÖ [DailyBonus] –ö–Ω–æ–ø–∫–∞ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ê - –ø–æ—Ç—Ä—ñ–±–Ω–æ —á–µ–∫–∞—Ç–∏');
        }

        // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤ –ø—Ä–∏ disabled
        button.onclick = function(e) {
            if (button.disabled || !state.canClaim) {
                e.preventDefault();
                e.stopPropagation();
                console.warn('‚ö†Ô∏è [DailyBonus] –ö–ª—ñ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –±–æ–Ω—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if (state.nextClaimTime) {
                    const timeUntilNext = getTimeUntilNext(state.nextClaimTime);
                    window.TasksUtils.showToast(`–ù–∞—Å—Ç—É–ø–Ω–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${timeUntilNext}`, 'warning');
                } else {
                    window.TasksUtils.showToast('–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ', 'warning');
                }
                return false;
            }
        };

        console.log('‚úÖ [DailyBonus] –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞. –°—Ç–∞–Ω:', button.disabled ? '–ó–ê–ë–õ–û–ö–û–í–ê–ù–ê' : '–ê–ö–¢–ò–í–ù–ê');
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
     */
    function getTimeUntilNext(nextClaimTime) {
        const now = Date.now();
        const next = new Date(nextClaimTime).getTime();
        const diff = next - now;

        if (diff <= 0) return '00:00:00';

        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å
     */
    async function claimDailyBonus() {
        console.log('üéÅ [DailyBonus] === –û–¢–†–ò–ú–ê–ù–ù–Ø –©–û–î–ï–ù–ù–û–ì–û –ë–û–ù–£–°–£ ===');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –∑–∞–ø–∏—Ç
        if (state.isProcessingClaim) {
            console.warn('‚ö†Ô∏è [DailyBonus] –í–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç');
            return;
        }

        // –î–û–î–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê: —á–∏ –¥—ñ–π—Å–Ω–æ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å
        if (!state.canClaim) {
            console.warn('‚ö†Ô∏è [DailyBonus] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å –∫–æ–ª–∏ canClaim = false');
            window.TasksUtils.showToast('–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ', 'warning');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
            await loadDailyBonusState(true);
            updateDailyBonusUI();
            return;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ –æ–±—Ä–æ–±–∫–∏
        state.isProcessingClaim = true;

        const store = window.TasksStore;

        // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –æ–¥—Ä–∞–∑—É
        const button = document.getElementById('claim-daily-button');
        if (button) {
            button.disabled = true;
            button.classList.remove('available');
            button.classList.add('claiming');
            button.innerHTML = '<span class="button-text">–û—Ç—Ä–∏–º–∞–Ω–Ω—è...</span>';
            button.style.cursor = 'wait';
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        if (store) {
            store.actions.setDailyClaiming(true);
        }

        try {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –±–µ–∫–µ–Ω–¥
            const response = await window.TasksAPI.daily.claim(state.userId);

            console.log('‚úÖ [DailyBonus] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É:', response);

            if (response.status === 'success' && response.data) {
                const data = response.data;

                // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
                state.canClaim = false;
                state.currentDay = data.day_number;
                state.currentStreak = data.new_streak;
                state.nextClaimTime = data.next_available;

                // –î–æ–¥–∞—î–º–æ –¥–µ–Ω—å –¥–æ claimed days
                if (!state.claimedDays.includes(data.day_number)) {
                    state.claimedDays.push(data.day_number);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ —Å—Ç–æ—Ä—ñ
                if (store) {
                    store.actions.claimDailyBonus(data.reward);

                    if (data.reward.tickets > 0) {
                        store.actions.addTicketDay(new Date().toISOString());
                    }

                    // –î–æ–¥–∞—î–º–æ claimed day
                    store.actions.addClaimedDay(data.day_number);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏
                    const currentBalance = store.selectors.getUserBalance();
                    store.actions.updateBalance({
                        winix: currentBalance.winix + data.reward.winix,
                        tickets: currentBalance.tickets + (data.reward.tickets || 0)
                    });
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
                showClaimAnimation(data.reward);

                // –û–Ω–æ–≤–ª—é—î–º–æ UI —á–µ—Ä–µ–∑ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É
                setTimeout(() => {
                    updateDailyBonusUI();
                }, 1500);

                console.log('‚úÖ [DailyBonus] –ë–æ–Ω—É—Å —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!');
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É');
            }

        } catch (error) {
            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É:', error);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫
            if (error.message) {
                if (error.message.includes('–≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ') ||
                    error.message.includes('–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ') ||
                    error.message.includes('—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑ —Å–µ—Ä–≤–µ—Ä–∞
                    state.canClaim = false;
                    await loadDailyBonusState(true);
                    updateDailyBonusUI();
                    window.TasksUtils.showToast('–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ —â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'warning');
                } else if (error.message.includes('–ó–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ')) {
                    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–ª–∏—à–∏–ª–æ—Å—å
                    window.TasksUtils.showToast(error.message, 'warning');
                    state.canClaim = false;
                    updateDailyBonusUI();
                } else {
                    window.TasksUtils.showToast(error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É', 'error');
                }
            } else {
                window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É', 'error');
            }

        } finally {
            // –ó–Ω—ñ–º–∞—î–º–æ —Ñ–ª–∞–≥ –æ–±—Ä–æ–±–∫–∏
            state.isProcessingClaim = false;

            if (store) {
                store.actions.setDailyClaiming(false);
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
            if (button) {
                button.classList.remove('claiming');
            }
            updateClaimButtonUI();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
     */
    function showClaimAnimation(reward) {
        console.log('üéä [DailyBonus] –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó
        const animDiv = document.createElement('div');
        animDiv.className = 'daily-bonus-claimed';

        let content = `
            <div class="reward-amount">
                <span class="winix-icon"></span>
                +${reward.winix} WINIX
            </div>
        `;

        if (reward.tickets > 0) {
            content += `
                <div class="reward-tickets">
                    <span class="ticket-icon"></span>
                    +${reward.tickets} TICKETS
                </div>
            `;
        }

        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä—ñ—é
        if (state.currentStreak > 1) {
            content += `
                <div class="streak-info">
                    –°–µ—Ä—ñ—è: ${state.currentStreak} –¥–Ω—ñ–≤!
                </div>
            `;
        }

        animDiv.innerHTML = content;
        document.body.appendChild(animDiv);

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        setTimeout(() => {
            animDiv.classList.add('show');
        }, 10);

        // –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            animDiv.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(animDiv);
            }, 500);
        }, 2500);

        // Toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let message = `–û—Ç—Ä–∏–º–∞–Ω–æ ${reward.winix} WINIX`;
        if (reward.tickets > 0) {
            message += ` —Ç–∞ ${reward.tickets} tickets!`;
        }
        window.TasksUtils.showToast(message, 'success');
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function setupUpdateTimer() {
        console.log('‚è∞ [DailyBonus] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');

        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
        if (state.updateInterval) {
            clearInterval(state.updateInterval);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        state.updateInterval = setInterval(() => {
            console.log('üîÑ [DailyBonus] –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
            updateClaimButtonUI();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞—Å—Ç–∞–≤ –Ω–æ–≤–∏–π –¥–µ–Ω—å
            checkForNewDay();

        }, config.updateIntervalMs);

        // –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        setInterval(() => {
            if (!state.canClaim && state.nextClaimTime) {
                updateClaimButtonUI();
            }
        }, 1000);

        console.log('‚úÖ [DailyBonus] –¢–∞–π–º–µ—Ä –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
     */
    async function checkForNewDay() {
        console.log('üîç [DailyBonus] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è...');
        console.log('  üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:', {
            canClaim: state.canClaim,
            nextClaimTime: state.nextClaimTime,
            now: new Date().toISOString()
        });

        if (!state.canClaim && state.nextClaimTime) {
            const now = Date.now();
            const next = new Date(state.nextClaimTime).getTime();

            if (now >= next) {
                console.log('üÜï [DailyBonus] –ù–æ–≤–∏–π –¥–µ–Ω—å! –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω');
                await loadDailyBonusState(true);
                updateDailyBonusUI();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¥—ñ–π—Å–Ω–æ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏
                if (state.canClaim) {
                    window.TasksUtils.showToast('–ù–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π!', 'info');
                }
            }
        }

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é UI
        const button = document.getElementById('claim-daily-button');
        if (button) {
            const shouldBeDisabled = !state.canClaim;
            const isDisabled = button.disabled;

            if (isDisabled !== shouldBeDisabled) {
                console.warn('‚ö†Ô∏è [DailyBonus] UI –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤–∏—è–≤–ª–µ–Ω–∞!');
                console.log('  üìä –ö–Ω–æ–ø–∫–∞ disabled:', isDisabled);
                console.log('  üìä –ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ disabled:', shouldBeDisabled);
                console.log('  üìä state.canClaim:', state.canClaim);
                updateClaimButtonUI();
            }
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    function setupEventHandlers() {
        console.log('üéØ [DailyBonus] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π');

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        const claimButton = document.getElementById('claim-daily-button');
        if (claimButton) {
            // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            claimButton.removeEventListener('click', claimDailyBonus);

            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
            claimButton.addEventListener('click', function(e) {
                e.preventDefault();

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è
                if (state.isProcessingClaim) {
                    console.warn('‚ö†Ô∏è [DailyBonus] –ö–ª—ñ–∫ —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è - –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è');
                    return false;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –∫–ª—ñ–∫–∞—Ç–∏
                if (claimButton.disabled || !state.canClaim) {
                    console.warn('‚ö†Ô∏è [DailyBonus] –ö–ª—ñ–∫ –Ω–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—É –∫–Ω–æ–ø–∫—É');

                    if (state.nextClaimTime) {
                        const timeUntilNext = getTimeUntilNext(state.nextClaimTime);
                        window.TasksUtils.showToast(`–ù–∞—Å—Ç—É–ø–Ω–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${timeUntilNext}`, 'warning');
                    } else {
                        window.TasksUtils.showToast('–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ', 'warning');
                    }
                    return false;
                }

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
                claimDailyBonus();
            });

            console.log('‚úÖ [DailyBonus] –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ');
        }

        // –ö–ª—ñ–∫ –Ω–∞ –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ
        const calendar = document.getElementById('daily-calendar');
        if (calendar) {
            calendar.addEventListener('click', async (e) => {
                const dayCell = e.target.closest('.calendar-day');
                if (dayCell) {
                    const day = parseInt(dayCell.getAttribute('data-day'));
                    console.log(`üìÖ [DailyBonus] –ö–ª—ñ–∫ –Ω–∞ –¥–µ–Ω—å ${day}`);
                    await showDayDetails(day);
                }
            });
            console.log('‚úÖ [DailyBonus] –û–±—Ä–æ–±–Ω–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–æ–¥–∞–Ω–æ');
        }

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—è–∫—â–æ —î)
        const refreshButton = document.getElementById('daily-refresh-button');
        if (refreshButton) {
            refreshButton.addEventListener('click', async () => {
                console.log('üîÑ [DailyBonus] –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...');
                refreshButton.disabled = true;
                refreshButton.textContent = '–û–Ω–æ–≤–ª–µ–Ω–Ω—è...';

                try {
                    await loadDailyBonusState(true);
                    updateDailyBonusUI();
                    window.TasksUtils.showToast('–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ', 'success');
                } catch (error) {
                    window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è', 'error');
                } finally {
                    refreshButton.disabled = false;
                    refreshButton.textContent = '–û–Ω–æ–≤–∏—Ç–∏';
                }
            });
            console.log('‚úÖ [DailyBonus] –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ');
        }

        // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden && state.isInitialized) {
                console.log('üëÅÔ∏è [DailyBonus] –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω');
                checkForNewDay();
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ–∫—É—Å—É –≤—ñ–∫–Ω–∞
        window.addEventListener('focus', function() {
            if (state.isInitialized) {
                console.log('üéØ [DailyBonus] –í—ñ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω');
                checkForNewDay();
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –¥–Ω—è
     */
    async function showDayDetails(day) {
        console.log(`üìã [DailyBonus] –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–Ω—è ${day}`);

        try {
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∞–Ω—ñ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ
            const dayData = state.calendarRewards ?
                state.calendarRewards.find(r => r.day === day) : null;

            if (dayData) {
                let message = `–î–µ–Ω—å ${day}: ${dayData.winix} WINIX`;
                if (dayData.tickets > 0) {
                    message += ` + ${dayData.tickets} tickets`;
                }

                // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
                const isClaimed = state.claimedDays.includes(day);
                const isToday = state.canClaim && day === state.currentDay + 1;

                if (isClaimed) {
                    message += ' ‚úì –û—Ç—Ä–∏–º–∞–Ω–æ';
                } else if (isToday) {
                    message += ' üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞—Ä–∞–∑!';
                } else if (day < state.currentDay + 1 && !state.canClaim) {
                    message += ' ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ';
                }

                window.TasksUtils.showToast(message, 'info');
            } else {
                // –ó–∞–ø–∏—Ç—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                const response = await window.TasksAPI.daily.calculateReward(state.userId, day);

                if (response.status === 'success' && response.data) {
                    const reward = response.data.reward;
                    const message = `–î–µ–Ω—å ${day}: ${reward.winix} WINIX` +
                                   (reward.tickets > 0 ? ` + ${reward.tickets} tickets` : '');

                    window.TasksUtils.showToast(message, 'info');
                }
            }
        } catch (error) {
            console.error('‚ùå [DailyBonus] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–Ω—è:', error);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    function getStatistics() {
        const store = window.TasksStore;
        const dailyBonus = store ? store.getState().dailyBonus : {};

        return {
            currentStreak: state.currentStreak,
            longestStreak: state.longestStreak,
            currentDay: state.currentDay,
            totalWinix: dailyBonus.totalClaimed?.winix || 0,
            totalTickets: dailyBonus.totalClaimed?.tickets || 0,
            completionRate: (state.currentDay / config.maxDays * 100).toFixed(1) + '%',
            daysUntilReset: config.maxDays - state.currentDay,
            isStreakActive: state.currentStreak > 0
        };
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–æ–¥—É–ª—å
     */
    function destroy() {
        console.log('üóëÔ∏è [DailyBonus] === –ó–ù–ò–©–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ===');

        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä
        if (state.updateInterval) {
            clearInterval(state.updateInterval);
        }

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        Object.keys(state).forEach(key => {
            if (typeof state[key] !== 'function') {
                state[key] = null;
            }
        });

        console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        claimDailyBonus,
        updateDailyBonusUI,
        getStatistics,
        loadDailyBonusState,
        destroy,

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        getState: function() {
            return {
                canClaim: state.canClaim,
                currentDay: state.currentDay,
                currentStreak: state.currentStreak,
                nextClaimTime: state.nextClaimTime,
                isInitialized: state.isInitialized
            };
        },

        forceUpdateButton: function() {
            console.log('üîß [DailyBonus] –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏');
            updateClaimButtonUI();
        }
    };

})();

console.log('‚úÖ [DailyBonus] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');