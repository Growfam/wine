/**
 * Redux-–ø–æ–¥—ñ–±–Ω–∏–π —Å—Ç–æ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø - –∑ –±–∞—Ç—á—ñ–Ω–≥–æ–º –æ–Ω–æ–≤–ª–µ–Ω—å —Ç–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
 */

window.TasksStore = (function() {
    'use strict';

    console.log('üè™ [TasksStore] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–¢–û–†–£ (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô) =====');

    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
    const initialState = {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
        user: {
            id: null,
            telegramId: null,
            username: null,
            balance: {
                winix: 0,
                tickets: 0,
                flex: 0
            },
            lastSync: null
        },

        // –ì–∞–º–∞–Ω–µ—Ü—å
        wallet: {
            connected: false,
            address: null,
            chainId: null,
            provider: null,
            lastCheck: null,
            checking: false,
            flexBalance: 0
        },

        // Flex Earn
        flexEarn: {
            levels: {
                BRONZE: { claimed: false, lastClaim: null, available: false },
                SILVER: { claimed: false, lastClaim: null, available: false },
                GOLD: { claimed: false, lastClaim: null, available: false },
                PLATINUM: { claimed: false, lastClaim: null, available: false },
                DIAMOND: { claimed: false, lastClaim: null, available: false }
            },
            flexBalance: 0,
            lastBalanceCheck: null,
            checking: false,
            claiming: false
        },

        // Daily Bonus
        dailyBonus: {
            currentStreak: 0,
            longestStreak: 0,
            lastClaimDate: null,
            claimedDays: [], // –º–∞—Å–∏–≤ –¥–∞—Ç
            ticketDays: [], // –¥–Ω—ñ –∫–æ–ª–∏ –±—É–ª–∏ tickets
            totalClaimed: {
                winix: 0,
                tickets: 0
            },
            nextTicketDay: null,
            claiming: false,
            isClaiming: false // –¥–æ–¥–∞–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        },

        // –ó–∞–≤–¥–∞–Ω–Ω—è
        tasks: {
            social: {},
            limited: {},
            partner: {},
            daily: {},
            loading: false,
            lastUpdate: null
        },

        // UI —Å—Ç–∞–Ω
        ui: {
            currentTab: 'flex',
            loading: false,
            error: null,
            toasts: []
        },

        // –ú–µ—Ä–µ–∂–∞
        network: {
            online: navigator.onLine,
            lastOnline: Date.now()
        }
    };

    // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    let state = window.TasksUtils.deepClone(initialState);

    // –°–ª—É—Ö–∞—á—ñ –∑–º—ñ–Ω
    const listeners = new Set();

    // –Ü—Å—Ç–æ—Ä—ñ—è –¥—ñ–π (–¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è)
    const actionHistory = [];
    const MAX_HISTORY_LENGTH = 50;

    // –ë–∞—Ç—á—ñ–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω—å
    let updateQueue = [];
    let isProcessingQueue = false;
    const BATCH_DELAY = 16; // 1 frame (60fps)

    // –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤
    const selectorCache = new Map();
    let lastStateForCache = null;

    // –¢–∏–ø–∏ –¥—ñ–π
    const ActionTypes = {
        // User actions
        SET_USER: 'SET_USER',
        UPDATE_BALANCE: 'UPDATE_BALANCE',

        // Wallet actions
        SET_WALLET_CONNECTED: 'SET_WALLET_CONNECTED',
        SET_WALLET_ADDRESS: 'SET_WALLET_ADDRESS',
        SET_WALLET_CHECKING: 'SET_WALLET_CHECKING',
        DISCONNECT_WALLET: 'DISCONNECT_WALLET',

        // Flex Earn actions
        SET_FLEX_BALANCE: 'SET_FLEX_BALANCE',
        SET_FLEX_LEVEL_CLAIMED: 'SET_FLEX_LEVEL_CLAIMED',
        SET_FLEX_LEVEL_AVAILABLE: 'SET_FLEX_LEVEL_AVAILABLE',
        SET_FLEX_CHECKING: 'SET_FLEX_CHECKING',
        SET_FLEX_CLAIMING: 'SET_FLEX_CLAIMING',
        RESET_FLEX_DAILY: 'RESET_FLEX_DAILY',

        // Daily Bonus actions
        SET_DAILY_STREAK: 'SET_DAILY_STREAK',
        CLAIM_DAILY_BONUS: 'CLAIM_DAILY_BONUS',
        ADD_TICKET_DAY: 'ADD_TICKET_DAY',
        SET_DAILY_CLAIMING: 'SET_DAILY_CLAIMING',
        RESET_DAILY_BONUS: 'RESET_DAILY_BONUS',
        ADD_CLAIMED_DAY: 'ADD_CLAIMED_DAY',
        SET_CLAIMED_DAYS: 'SET_CLAIMED_DAYS',
        UPDATE_DAILY_TOTAL_CLAIMED: 'UPDATE_DAILY_TOTAL_CLAIMED',

        // Tasks actions
        SET_TASKS: 'SET_TASKS',
        UPDATE_TASK_STATUS: 'UPDATE_TASK_STATUS',
        SET_TASKS_LOADING: 'SET_TASKS_LOADING',

        // UI actions
        SET_CURRENT_TAB: 'SET_CURRENT_TAB',
        SET_LOADING: 'SET_LOADING',
        SET_ERROR: 'SET_ERROR',
        ADD_TOAST: 'ADD_TOAST',
        REMOVE_TOAST: 'REMOVE_TOAST',

        // Network actions
        SET_ONLINE: 'SET_ONLINE',

        // Global actions
        RESET_STATE: 'RESET_STATE',
        HYDRATE_STATE: 'HYDRATE_STATE',
        CLEAR_USER: 'CLEAR_USER'
    };

    /**
     * –ë–∞—Ç—á—ñ–Ω–≥ dispatch - –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å
     */
    function batchedDispatch(action) {
        updateQueue.push(action);

        if (!isProcessingQueue) {
            isProcessingQueue = true;

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ requestAnimationFrame –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            requestAnimationFrame(() => {
                processBatchedUpdates();
            });
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –±–∞—Ç—á–æ–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
     */
    function processBatchedUpdates() {
        if (updateQueue.length === 0) {
            isProcessingQueue = false;
            return;
        }

        console.log(`üì¶ [TasksStore] –û–±—Ä–æ–±–∫–∞ ${updateQueue.length} –±–∞—Ç—á–æ–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å`);

        const actions = [...updateQueue];
        updateQueue = [];

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
        const initialBatchState = state;

        // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –¥—ñ—ó
        actions.forEach(action => {
            const prevState = state;
            state = rootReducer(state, action);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            if (actionHistory.length >= MAX_HISTORY_LENGTH) {
                actionHistory.shift();
            }

            actionHistory.push({
                action,
                timestamp: Date.now(),
                prevState: window.TasksUtils.deepClone(prevState)
            });
        });

        // –û—á–∏—â–∞—î–º–æ –∫–µ—à —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ —è–∫—â–æ —Å—Ç–∞–Ω –∑–º—ñ–Ω–∏–≤—Å—è
        if (state !== initialBatchState) {
            clearSelectorCache();

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            saveStateToStorage();

            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Å–ª—É—Ö–∞—á—ñ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å—ñ—Ö –∑–º—ñ–Ω
            notifyListeners(actions, initialBatchState);
        }

        isProcessingQueue = false;

        // –Ø–∫—â–æ —î –Ω–æ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–∑—ñ, –æ–±—Ä–æ–±–ª—è—î–º–æ —ó—Ö
        if (updateQueue.length > 0) {
            requestAnimationFrame(() => {
                processBatchedUpdates();
            });
        }
    }

    /**
     * Dispatch - –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥—ñ—ó –¥–æ —Å—Ç–æ—Ä—É
     */
    function dispatch(action) {
        console.log('üì§ [TasksStore] Dispatch action:', action.type);
        console.log('  üìä Payload:', action.payload);

        // –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –¥—ñ–π - –º–∏—Ç—Ç—î–≤–∞ –æ–±—Ä–æ–±–∫–∞
        const criticalActions = [
            ActionTypes.UPDATE_BALANCE,
            ActionTypes.CLAIM_DAILY_BONUS,
            ActionTypes.SET_DAILY_CLAIMING,
            ActionTypes.SET_FLEX_CLAIMING
        ];

        if (criticalActions.includes(action.type)) {
            // –ú–∏—Ç—Ç—î–≤–∞ –æ–±—Ä–æ–±–∫–∞
            const prevState = state;
            state = rootReducer(state, action);

            if (state !== prevState) {
                clearSelectorCache();
                saveStateToStorage();
                notifyListeners([action], prevState);
            }
        } else {
            // –ë–∞—Ç—á–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞
            batchedDispatch(action);
        }

        return action;
    }

    /**
     * –ö–æ—Ä–µ–Ω–µ–≤–∏–π reducer
     */
    function rootReducer(state = initialState, action) {
        console.log('üîÑ [TasksStore] Reducer –æ–±—Ä–æ–±–ª—è—î:', action.type);

        return {
            user: userReducer(state.user, action),
            wallet: walletReducer(state.wallet, action),
            flexEarn: flexEarnReducer(state.flexEarn, action),
            dailyBonus: dailyBonusReducer(state.dailyBonus, action),
            tasks: tasksReducer(state.tasks, action),
            ui: uiReducer(state.ui, action),
            network: networkReducer(state.network, action)
        };
    }

    /**
     * User Reducer - –í–ò–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –±–∞–ª–∞–Ω—Å—É
     */
    function userReducer(state = initialState.user, action) {
        switch(action.type) {
            case ActionTypes.SET_USER:
                console.log('  üë§ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                return { ...state, ...action.payload };

            case ActionTypes.UPDATE_BALANCE:
                console.log('  üí∞ [TasksStore] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É');
                console.log('    üìä –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:', state.balance);
                console.log('    üìä –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å:', action.payload);

                // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å—É
                let newBalance = { ...state.balance };

                // –Ø–∫—â–æ payload –º—ñ—Å—Ç–∏—Ç—å winix/tickets - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ø—Ä—è–º—É
                if (action.payload.winix !== undefined || action.payload.tickets !== undefined) {
                    newBalance.winix = action.payload.winix !== undefined ? action.payload.winix : state.balance.winix;
                    newBalance.tickets = action.payload.tickets !== undefined ? action.payload.tickets : state.balance.tickets;
                    console.log('    ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç winix/tickets');
                }
                // –Ø–∫—â–æ payload –º—ñ—Å—Ç–∏—Ç—å balance/coins - –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
                else if (action.payload.balance !== undefined || action.payload.coins !== undefined) {
                    newBalance.winix = action.payload.balance !== undefined ? action.payload.balance : state.balance.winix;
                    newBalance.tickets = action.payload.coins !== undefined ? action.payload.coins : state.balance.tickets;
                    console.log('    ‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç balance/coins –≤ winix/tickets');
                }
                // –Ø–∫—â–æ payload –º—ñ—Å—Ç–∏—Ç—å flex - –æ–Ω–æ–≤–ª—é—î–º–æ
                if (action.payload.flex !== undefined) {
                    newBalance.flex = action.payload.flex;
                }

                console.log('    üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:', newBalance);

                return {
                    ...state,
                    balance: newBalance,
                    lastSync: Date.now()
                };

            case ActionTypes.CLEAR_USER:
                return initialState.user;

            case ActionTypes.HYDRATE_STATE:
                return action.payload.user || state;

            case ActionTypes.RESET_STATE:
                return initialState.user;

            default:
                return state;
        }
    }

    /**
     * Wallet Reducer
     */
    function walletReducer(state = initialState.wallet, action) {
        switch(action.type) {
            case ActionTypes.SET_WALLET_CONNECTED:
                console.log('  üîå [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');
                return {
                    ...state,
                    connected: action.payload,
                    lastCheck: Date.now()
                };

            case ActionTypes.SET_WALLET_ADDRESS:
                console.log('  üìç [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è');
                return {
                    ...state,
                    address: action.payload.address,
                    addressFriendly: action.payload.addressFriendly,
                    chainId: action.payload.chainId,
                    provider: action.payload.provider
                };

            case ActionTypes.SET_WALLET_CHECKING:
                console.log('  üîç [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è');
                return { ...state, checking: action.payload };

            case ActionTypes.DISCONNECT_WALLET:
                console.log('  üîå [TasksStore] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');
                return {
                    ...initialState.wallet,
                    lastCheck: Date.now()
                };

            case ActionTypes.SET_FLEX_BALANCE:
                console.log('  üíé [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É –≤ –≥–∞–º–∞–Ω—Ü—ñ');
                return {
                    ...state,
                    flexBalance: action.payload
                };

            case ActionTypes.HYDRATE_STATE:
                return action.payload.wallet || state;

            case ActionTypes.RESET_STATE:
                return initialState.wallet;

            default:
                return state;
        }
    }

    /**
     * Flex Earn Reducer
     */
    function flexEarnReducer(state = initialState.flexEarn, action) {
        switch(action.type) {
            case ActionTypes.SET_FLEX_BALANCE:
                console.log('  üíé [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX');
                return {
                    ...state,
                    flexBalance: action.payload,
                    lastBalanceCheck: Date.now()
                };

            case ActionTypes.SET_FLEX_LEVEL_CLAIMED:
                console.log('  ‚úÖ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è');
                return {
                    ...state,
                    levels: {
                        ...state.levels,
                        [action.payload.level]: {
                            ...state.levels[action.payload.level],
                            claimed: true,
                            lastClaim: Date.now()
                        }
                    }
                };

            case ActionTypes.SET_FLEX_LEVEL_AVAILABLE:
                console.log('  üéØ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ä—ñ–≤–Ω—è');
                return {
                    ...state,
                    levels: {
                        ...state.levels,
                        [action.payload.level]: {
                            ...state.levels[action.payload.level],
                            available: action.payload.available
                        }
                    }
                };

            case ActionTypes.SET_FLEX_CHECKING:
                console.log('  üîç [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ FLEX');
                return { ...state, checking: action.payload };

            case ActionTypes.SET_FLEX_CLAIMING:
                console.log('  üéÅ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏');
                return { ...state, claiming: action.payload };

            case ActionTypes.RESET_FLEX_DAILY:
                console.log('  üîÑ [TasksStore] –°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥ FLEX');
                const resetLevels = {};
                Object.keys(state.levels).forEach(level => {
                    resetLevels[level] = {
                        ...state.levels[level],
                        claimed: false
                    };
                });
                return { ...state, levels: resetLevels };

            case ActionTypes.HYDRATE_STATE:
                return action.payload.flexEarn || state;

            case ActionTypes.RESET_STATE:
                return initialState.flexEarn;

            default:
                return state;
        }
    }

    /**
     * Daily Bonus Reducer - —Ä–æ–∑—à–∏—Ä–µ–Ω–æ –Ω–æ–≤–∏–º–∏ –¥—ñ—è–º–∏
     */
    function dailyBonusReducer(state = initialState.dailyBonus, action) {
        switch(action.type) {
            case ActionTypes.SET_DAILY_STREAK:
                console.log('  üî• [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä—ñ—ó –¥–Ω—ñ–≤');
                return {
                    ...state,
                    currentStreak: action.payload.current,
                    longestStreak: Math.max(state.longestStreak, action.payload.current)
                };

            case ActionTypes.CLAIM_DAILY_BONUS:
                console.log('  üéÅ [TasksStore] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É');
                const today = new Date().toDateString();
                return {
                    ...state,
                    lastClaimDate: today,
                    claimedDays: [...state.claimedDays, today],
                    currentStreak: state.currentStreak + 1,
                    totalClaimed: {
                        winix: state.totalClaimed.winix + (action.payload.winix || 0),
                        tickets: state.totalClaimed.tickets + (action.payload.tickets || 0)
                    }
                };

            case ActionTypes.ADD_TICKET_DAY:
                console.log('  üéüÔ∏è [TasksStore] –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –∑ –∫–≤–∏—Ç–∫–∞–º–∏');
                return {
                    ...state,
                    ticketDays: [...state.ticketDays, action.payload]
                };

            case ActionTypes.SET_DAILY_CLAIMING:
                console.log('  üîÑ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É');
                return {
                    ...state,
                    claiming: action.payload,
                    isClaiming: action.payload // –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                };

            case ActionTypes.ADD_CLAIMED_DAY:
                console.log('  üìÖ [TasksStore] –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É');
                if (!state.claimedDays.includes(action.payload)) {
                    return {
                        ...state,
                        claimedDays: [...state.claimedDays, action.payload]
                    };
                }
                return state;

            case ActionTypes.SET_CLAIMED_DAYS:
                console.log('  üìÖ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–Ω—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤');
                return {
                    ...state,
                    claimedDays: action.payload || []
                };

            case ActionTypes.UPDATE_DAILY_TOTAL_CLAIMED:
                console.log('  üí∞ [TasksStore] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤');
                return {
                    ...state,
                    totalClaimed: {
                        winix: action.payload.winix || 0,
                        tickets: action.payload.tickets || 0
                    }
                };

            case ActionTypes.RESET_DAILY_BONUS:
                console.log('  üîÑ [TasksStore] –°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É');
                return initialState.dailyBonus;

            case ActionTypes.HYDRATE_STATE:
                return action.payload.dailyBonus || state;

            case ActionTypes.RESET_STATE:
                return initialState.dailyBonus;

            default:
                return state;
        }
    }

    /**
     * Tasks Reducer
     */
    function tasksReducer(state = initialState.tasks, action) {
        switch(action.type) {
            case ActionTypes.SET_TASKS:
                console.log('  üìã [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
                return {
                    ...state,
                    [action.payload.type]: action.payload.tasks,
                    lastUpdate: Date.now()
                };

            case ActionTypes.UPDATE_TASK_STATUS:
                console.log('  ‚úèÔ∏è [TasksStore] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è');
                const { type, taskId, status } = action.payload;
                return {
                    ...state,
                    [type]: {
                        ...state[type],
                        [taskId]: {
                            ...state[type][taskId],
                            status: status,
                            lastUpdate: Date.now()
                        }
                    }
                };

            case ActionTypes.SET_TASKS_LOADING:
                console.log('  ‚è≥ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
                return { ...state, loading: action.payload };

            case ActionTypes.HYDRATE_STATE:
                return action.payload.tasks || state;

            case ActionTypes.RESET_STATE:
                return initialState.tasks;

            default:
                return state;
        }
    }

    /**
     * UI Reducer
     */
    function uiReducer(state = initialState.ui, action) {
        switch(action.type) {
            case ActionTypes.SET_CURRENT_TAB:
                console.log('  üìë [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏');
                return { ...state, currentTab: action.payload };

            case ActionTypes.SET_LOADING:
                console.log('  ‚è≥ [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
                return { ...state, loading: action.payload };

            case ActionTypes.SET_ERROR:
                console.log('  ‚ùå [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏');
                return { ...state, error: action.payload };

            case ActionTypes.ADD_TOAST:
                console.log('  üí¨ [TasksStore] –î–æ–¥–∞–≤–∞–Ω–Ω—è toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
                return {
                    ...state,
                    toasts: [...state.toasts, {
                        id: window.TasksUtils.generateId(),
                        ...action.payload,
                        timestamp: Date.now()
                    }]
                };

            case ActionTypes.REMOVE_TOAST:
                console.log('  üóëÔ∏è [TasksStore] –í–∏–¥–∞–ª–µ–Ω–Ω—è toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
                return {
                    ...state,
                    toasts: state.toasts.filter(t => t.id !== action.payload)
                };

            case ActionTypes.HYDRATE_STATE:
                return action.payload.ui || state;

            case ActionTypes.RESET_STATE:
                return initialState.ui;

            default:
                return state;
        }
    }

    /**
     * Network Reducer
     */
    function networkReducer(state = initialState.network, action) {
        switch(action.type) {
            case ActionTypes.SET_ONLINE:
                console.log('  üåê [TasksStore] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–µ—Ä–µ–∂—ñ');
                return {
                    ...state,
                    online: action.payload,
                    lastOnline: action.payload ? Date.now() : state.lastOnline
                };

            case ActionTypes.HYDRATE_STATE:
                return action.payload.network || state;

            case ActionTypes.RESET_STATE:
                return initialState.network;

            default:
                return state;
        }
    }

    /**
     * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    function subscribe(listener) {
        console.log('üëÇ [TasksStore] –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞');

        // –û–±–≥–æ—Ä—Ç–∞—î–º–æ listener –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        const wrappedListener = function(state, prevState, actions) {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ requestAnimationFrame –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è UI
            requestAnimationFrame(() => {
                try {
                    listener(state, prevState, actions);
                } catch (error) {
                    console.error('‚ùå [TasksStore] –ü–æ–º–∏–ª–∫–∞ –≤ —Å–ª—É—Ö–∞—á—ñ:', error);
                }
            });
        };

        listeners.add(wrappedListener);

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–ø–∏—Å–∫–∏
        return function unsubscribe() {
            console.log('üîá [TasksStore] –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞');
            listeners.delete(wrappedListener);
        };
    }

    /**
     * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    function notifyListeners(actions, prevState) {
        console.log(`üì¢ [TasksStore] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${listeners.size} —Å–ª—É—Ö–∞—á—ñ–≤`);

        // –î–ª—è –±–∞—Ç—á–æ–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –ø–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤ –¥—ñ–π
        const actionInfo = actions.length === 1 ? actions[0] : { type: 'BATCH_UPDATE', actions };

        listeners.forEach(listener => {
            listener(state, prevState, actionInfo);
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
     */
    function getState() {
        return state;
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤
     */
    function clearSelectorCache() {
        selectorCache.clear();
        lastStateForCache = null;
    }

    /**
     * –ö–µ—à–æ–≤–∞–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
     */
    function createCachedSelector(name, selector) {
        return function() {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—Ç–∞–Ω –∑–º—ñ–Ω–∏–≤—Å—è
            if (lastStateForCache !== state) {
                clearSelectorCache();
                lastStateForCache = state;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            if (selectorCache.has(name)) {
                return selectorCache.get(name);
            }

            // –û–±—á–∏—Å–ª—é—î–º–æ —ñ –∫–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const result = selector();
            selectorCache.set(name, result);
            return result;
        };
    }

    /**
     * –°–µ–ª–µ–∫—Ç–æ—Ä–∏ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–Ü –ó –ö–ï–®–£–í–ê–ù–ù–Ø–ú
     */
    const selectors = {
        // User selectors
        getUserId: createCachedSelector('userId', () => state.user.id),
        getUserBalance: createCachedSelector('userBalance', () => state.user.balance),
        getWinixBalance: createCachedSelector('winixBalance', () => state.user.balance.winix),
        getTicketsBalance: createCachedSelector('ticketsBalance', () => state.user.balance.tickets),

        // Wallet selectors
        isWalletConnected: createCachedSelector('walletConnected', () => state.wallet.connected),
        getWalletAddress: createCachedSelector('walletAddress', () => state.wallet.address),
        getWalletFlexBalance: createCachedSelector('walletFlexBalance', () => state.wallet.flexBalance),

        // Flex selectors
        getFlexBalance: createCachedSelector('flexBalance', () => state.flexEarn.flexBalance || state.wallet.flexBalance),
        getFlexLevel: (level) => state.flexEarn.levels[level],
        isFlexLevelClaimed: (level) => state.flexEarn.levels[level]?.claimed || false,
        isFlexLevelAvailable: (level) => state.flexEarn.levels[level]?.available || false,

        // Daily bonus selectors - —Ä–æ–∑—à–∏—Ä–µ–Ω–æ
        getCurrentStreak: createCachedSelector('currentStreak', () => state.dailyBonus.currentStreak),
        getLastClaimDate: createCachedSelector('lastClaimDate', () => state.dailyBonus.lastClaimDate),
        canClaimDailyBonus: createCachedSelector('canClaimDaily', () => {
            const lastClaim = state.dailyBonus.lastClaimDate;
            if (!lastClaim) return true;
            return window.TasksUtils.isNewDay(lastClaim);
        }),
        getDailyBonus: createCachedSelector('dailyBonus', () => state.dailyBonus),
        getDailyStreak: createCachedSelector('dailyStreak', () => state.dailyBonus.currentStreak),
        getClaimedDays: createCachedSelector('claimedDays', () => state.dailyBonus.claimedDays),
        isDailyClaiming: createCachedSelector('dailyClaiming', () => state.dailyBonus.claiming || state.dailyBonus.isClaiming),
        getTotalClaimed: createCachedSelector('totalClaimed', () => state.dailyBonus.totalClaimed),
        getTicketDays: createCachedSelector('ticketDays', () => state.dailyBonus.ticketDays),

        // UI selectors
        getCurrentTab: createCachedSelector('currentTab', () => state.ui.currentTab),
        isLoading: createCachedSelector('isLoading', () => state.ui.loading),
        getError: createCachedSelector('error', () => state.ui.error),

        // Network selectors
        isOnline: createCachedSelector('isOnline', () => state.network.online)
    };

    /**
     * Action creators - —Ä–æ–∑—à–∏—Ä–µ–Ω–æ –¥–ª—è Daily Bonus
     */
    const actions = {
        // User actions
        setUser: (userData) => dispatch({ type: ActionTypes.SET_USER, payload: userData }),
        updateBalance: (balances) => {
            console.log('üéØ [TasksStore] Action creator updateBalance –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑:', balances);
            return dispatch({ type: ActionTypes.UPDATE_BALANCE, payload: balances });
        },
        clearUser: () => dispatch({ type: ActionTypes.CLEAR_USER }),

        // Wallet actions
        setWalletConnected: (connected) => dispatch({ type: ActionTypes.SET_WALLET_CONNECTED, payload: connected }),
        setWalletAddress: (data) => dispatch({ type: ActionTypes.SET_WALLET_ADDRESS, payload: data }),
        setWalletChecking: (checking) => dispatch({ type: ActionTypes.SET_WALLET_CHECKING, payload: checking }),
        disconnectWallet: () => dispatch({ type: ActionTypes.DISCONNECT_WALLET }),

        // Flex actions
        setFlexBalance: (balance) => dispatch({ type: ActionTypes.SET_FLEX_BALANCE, payload: balance }),
        setFlexLevelClaimed: (level) => dispatch({ type: ActionTypes.SET_FLEX_LEVEL_CLAIMED, payload: { level } }),
        setFlexLevelAvailable: (level, available) => dispatch({
            type: ActionTypes.SET_FLEX_LEVEL_AVAILABLE,
            payload: { level, available }
        }),
        setFlexChecking: (checking) => dispatch({ type: ActionTypes.SET_FLEX_CHECKING, payload: checking }),
        setFlexClaiming: (claiming) => dispatch({ type: ActionTypes.SET_FLEX_CLAIMING, payload: claiming }),
        resetFlexDaily: () => dispatch({ type: ActionTypes.RESET_FLEX_DAILY }),

        // Daily bonus actions - —Ä–æ–∑—à–∏—Ä–µ–Ω–æ –Ω–æ–≤–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        setDailyStreak: (current) => dispatch({ type: ActionTypes.SET_DAILY_STREAK, payload: { current } }),
        claimDailyBonus: (rewards) => dispatch({ type: ActionTypes.CLAIM_DAILY_BONUS, payload: rewards }),
        addTicketDay: (date) => dispatch({ type: ActionTypes.ADD_TICKET_DAY, payload: date }),
        setDailyClaiming: (claiming) => dispatch({ type: ActionTypes.SET_DAILY_CLAIMING, payload: claiming }),
        addClaimedDay: (day) => dispatch({ type: ActionTypes.ADD_CLAIMED_DAY, payload: day }),
        setClaimedDays: (days) => dispatch({ type: ActionTypes.SET_CLAIMED_DAYS, payload: days }),
        updateDailyTotalClaimed: (totals) => dispatch({
            type: ActionTypes.UPDATE_DAILY_TOTAL_CLAIMED,
            payload: totals
        }),
        resetDailyBonus: () => dispatch({ type: ActionTypes.RESET_DAILY_BONUS }),

        // Tasks actions
        setTasks: (type, tasks) => dispatch({ type: ActionTypes.SET_TASKS, payload: { type, tasks } }),
        updateTaskStatus: (type, taskId, status) => dispatch({
            type: ActionTypes.UPDATE_TASK_STATUS,
            payload: { type, taskId, status }
        }),
        setTasksLoading: (loading) => dispatch({ type: ActionTypes.SET_TASKS_LOADING, payload: loading }),

        // UI actions
        setCurrentTab: (tab) => dispatch({ type: ActionTypes.SET_CURRENT_TAB, payload: tab }),
        setLoading: (loading) => dispatch({ type: ActionTypes.SET_LOADING, payload: loading }),
        setError: (error) => dispatch({ type: ActionTypes.SET_ERROR, payload: error }),
        addToast: (toast) => dispatch({ type: ActionTypes.ADD_TOAST, payload: toast }),
        removeToast: (id) => dispatch({ type: ActionTypes.REMOVE_TOAST, payload: id }),

        // Network actions
        setOnline: (online) => dispatch({ type: ActionTypes.SET_ONLINE, payload: online }),

        // Global actions
        resetState: () => dispatch({ type: ActionTypes.RESET_STATE }),
        hydrateState: (savedState) => dispatch({ type: ActionTypes.HYDRATE_STATE, payload: savedState })
    };

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤ sessionStorage - –î–ï–ë–ê–£–ù–°–û–í–ê–ù–ï
     */
    const saveStateToStorage = window.TasksUtils.debounce(function() {
        console.log('üíæ [TasksStore] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤ sessionStorage');

        try {
            const stateToSave = {
                user: state.user,
                flexEarn: {
                    levels: state.flexEarn.levels,
                    flexBalance: state.flexEarn.flexBalance
                },
                dailyBonus: state.dailyBonus,
                ui: {
                    currentTab: state.ui.currentTab
                }
            };

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sessionStorage –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            sessionStorage.setItem('tasksStoreState', JSON.stringify(stateToSave));
            console.log('‚úÖ [TasksStore] –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ sessionStorage');
        } catch (error) {
            console.error('‚ùå [TasksStore] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
        }
    }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–µ–±–∞—É–Ω—Å

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ sessionStorage
     */
    function loadStateFromStorage() {
        console.log('üìÇ [TasksStore] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ sessionStorage');

        try {
            const savedStateStr = sessionStorage.getItem('tasksStoreState');
            if (savedStateStr) {
                const savedState = JSON.parse(savedStateStr);
                console.log('‚úÖ [TasksStore] –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω');

                // –í–∞–ª—ñ–¥—É—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
                if (savedState && typeof savedState === 'object') {
                    actions.hydrateState(savedState);
                }
            } else {
                console.log('üì≠ [TasksStore] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå [TasksStore] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
            // –û—á–∏—â–∞—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –¥–∞–Ω—ñ
            sessionStorage.removeItem('tasksStoreState');
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—É
     */
    function init() {
        console.log('üöÄ [TasksStore] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—É');

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
        loadStateFromStorage();

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–ª—É—Ö–∞—á—ñ –º–µ—Ä–µ–∂—ñ
        window.addEventListener('online', () => actions.setOnline(true));
        window.addEventListener('offline', () => actions.setOnline(false));

        console.log('‚úÖ [TasksStore] –°—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        console.log('üìä [TasksStore] –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω:', state);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    init();

    console.log('‚úÖ [TasksStore] Redux-–ø–æ–¥—ñ–±–Ω–∏–π —Å—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        dispatch,
        subscribe,
        getState,
        selectors,
        actions,
        ActionTypes
    };

})();

console.log('‚úÖ [TasksStore] –ú–æ–¥—É–ª—å —Å—Ç–æ—Ä—É –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô)');