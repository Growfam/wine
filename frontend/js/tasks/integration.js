/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - Production Version
 * –ö–æ–æ—Ä–¥–∏–Ω—É—î —Ä–æ–±–æ—Ç—É –≤—Å—ñ—Ö –ø—ñ–¥–º–æ–¥—É–ª—ñ–≤ –±–µ–∑ Mock –¥–∞–Ω–∏—Ö
 */

window.TasksIntegration = (function() {
    'use strict';

    console.log('üöÄ [TasksIntegration] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–ô–ù–û–ì–û –ú–û–î–£–õ–Ø (PRODUCTION) =====');

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
     */
    function TasksIntegration() {
        console.log('üîß [TasksIntegration] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ TasksIntegration');

        this.managers = {
            flexEarn: null,
            dailyBonus: null,
            tasks: null,
            verification: null,
            tasksManager: null,
            walletChecker: null
        };

        this.state = {
            userId: null,
            isInitialized: false,
            currentTab: 'flex',
            walletConnected: false,
            isAuthenticating: false
        };

        this.config = {
            autoSaveInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            syncInterval: 60000,     // 1 —Ö–≤–∏–ª–∏–Ω–∞
            debugMode: window.TasksConstants?.DEBUG?.ENABLED || false
        };

        console.log('üìä [TasksIntegration] –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', this.config);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
     */
    TasksIntegration.prototype.init = async function() {
        console.log('üéØ [TasksIntegration] ===== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –°–ò–°–¢–ï–ú–ò =====');
        console.log('üïê [TasksIntegration] –ß–∞—Å –ø–æ—á–∞—Ç–∫—É:', new Date().toISOString());

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
            this.checkRequiredServices();

            // –°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await this.authenticateUser();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
            this.checkRequiredModules();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
            await this.initializeManagers();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            this.setupEventHandlers();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            this.setupAutoSave();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
            await this.initialSync();

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            this.state.isInitialized = true;

            console.log('‚úÖ [TasksIntegration] ===== –°–ò–°–¢–ï–ú–ê –£–°–ü–Ü–®–ù–û –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–ê =====');
            console.log('üìä [TasksIntegration] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:', this.state);

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
            if (window.TasksServices?.Analytics) {
                window.TasksServices.Analytics.trackEvent('System', 'initialized', 'success');
            }

            return this;

        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á:', error);
            console.error('‚ùå [TasksIntegration] Stack trace:', error.stack);

            // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–º–∏–ª–∫—É
            this.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Ç–∞ –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É');

            throw error;
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
    TasksIntegration.prototype.checkRequiredServices = function() {
        console.log('üîç [TasksIntegration] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤`—è–∑–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤...');

        const requiredServices = [
            'TasksAPI',
            'TasksStore',
            'TelegramValidator',
            'TasksConstants'
        ];

        const missing = requiredServices.filter(service => !window[service]);

        if (missing.length > 0) {
            throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏: ${missing.join(', ')}`);
        }

        console.log('‚úÖ [TasksIntegration] –í—Å—ñ –æ–±–æ–≤`—è–∑–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
    };

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.authenticateUser = async function() {
        console.log('üîê [TasksIntegration] === –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');

        if (this.state.isAuthenticating) {
            console.log('‚è∏Ô∏è [TasksIntegration] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
            return;
        }

        this.state.isAuthenticating = true;

        try {
            // –¢—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ AuthService
            if (!window.TasksServices?.Auth) {
                throw new Error('Auth service not available');
            }

            const user = await window.TasksServices.Auth.initUser();
            this.state.userId = user.id;
            console.log('‚úÖ [TasksIntegration] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π:', user.id);

            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            this.updateUserUI(user);

        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Ç–∞ –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É');
            throw error;
        } finally {
            this.state.isAuthenticating = false;
        }
    };

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.updateUserUI = function(user) {
        console.log('üîÑ [TasksIntegration] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

        // –û–Ω–æ–≤–ª—é—î–º–æ ID
        const userIdElement = document.getElementById('header-user-id');
        if (userIdElement) {
            userIdElement.textContent = user.id || '';
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∞–≤–∞—Ç–∞—Ä
        const avatarElement = document.querySelector('.profile-avatar');
        if (avatarElement && user.username) {
            avatarElement.textContent = user.username.charAt(0).toUpperCase();
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏
        const winixElement = document.getElementById('user-winix');
        const ticketsElement = document.getElementById('user-tickets');

        if (winixElement) {
            winixElement.textContent = user.balance?.winix || 0;
        }

        if (ticketsElement) {
            ticketsElement.textContent = user.balance?.tickets || 0;
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
     */
    TasksIntegration.prototype.checkRequiredModules = function() {
        console.log('üîç [TasksIntegration] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤...');

        const requiredModules = {
            'FlexEarnManager': window.FlexEarnManager,
            'TasksConstants': window.TasksConstants,
            'TasksManager': window.TasksManager,
            'TaskVerification': window.TaskVerification,
            'DailyBonusManager': window.DailyBonusManager,
            'TasksAPI': window.TasksAPI,
            'TasksStore': window.TasksStore,
            'TasksUtils': window.TasksUtils
        };

        const missingModules = [];
        const optionalModules = ['TelegramValidator', 'WalletChecker', 'TasksServices'];

        Object.entries(requiredModules).forEach(([name, module]) => {
            if (!module) {
                missingModules.push(name);
                console.error(`‚ùå [TasksIntegration] –í—ñ–¥—Å—É—Ç–Ω—ñ–π –º–æ–¥—É–ª—å: ${name}`);
            } else {
                console.log(`‚úÖ [TasksIntegration] –ú–æ–¥—É–ª—å ${name} –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ
        optionalModules.forEach(name => {
            if (!window[name]) {
                console.warn(`‚ö†Ô∏è [TasksIntegration] –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å ${name} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π`);
            }
        });

        if (missingModules.length > 0) {
            throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ: ${missingModules.join(', ')}`);
        }

        console.log('‚úÖ [TasksIntegration] –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
     */
    TasksIntegration.prototype.initializeManagers = async function() {
        console.log('üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...');

        const userId = this.state.userId;

        try {
            // WalletChecker
            if (window.WalletChecker) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WalletChecker...');
                try {
                    this.managers.walletChecker = window.WalletChecker;
                    await this.managers.walletChecker.init();
                    console.log('  ‚úÖ [TasksIntegration] WalletChecker —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                } catch (error) {
                    console.error('  ‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WalletChecker:', error);
                    // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –≥–∞–º–∞–Ω—Ü—è
                }
            }

            // FlexEarn Manager
            if (window.FlexEarnManager) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FlexEarnManager...');
                this.managers.flexEarn = window.FlexEarnManager;
                this.managers.flexEarn.init(userId);
                console.log('  ‚úÖ [TasksIntegration] FlexEarnManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            }

            // Daily Bonus Manager
            if (window.DailyBonusManager) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DailyBonusManager...');
                this.managers.dailyBonus = window.DailyBonusManager;
                await this.managers.dailyBonus.init(userId);
                console.log('  ‚úÖ [TasksIntegration] DailyBonusManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            }

            // Tasks Manager
            if (window.TasksManager) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TasksManager...');
                this.managers.tasksManager = window.TasksManager;
                await this.managers.tasksManager.init(userId);
                console.log('  ‚úÖ [TasksIntegration] TasksManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            }

            // Task Verification
            if (window.TaskVerification) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TaskVerification...');
                this.managers.verification = window.TaskVerification;
                this.managers.verification.init();
                console.log('  ‚úÖ [TasksIntegration] TaskVerification –≥–æ—Ç–æ–≤–∏–π');
            }

            console.log('‚úÖ [TasksIntegration] –í—Å—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:', error);
            throw error;
        }
    };

    /**
     * –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
     */
    TasksIntegration.prototype.initialSync = async function() {
        console.log('üîÑ [TasksIntegration] === –ü–û–ß–ê–¢–ö–û–í–ê –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø ===');

        try {
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ SyncService
            if (window.TasksServices?.Sync) {
                await window.TasksServices.Sync.syncData();
                console.log('‚úÖ [TasksIntegration] –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }
        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É
        }
    };

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    TasksIntegration.prototype.setupEventHandlers = function() {
        console.log('üéØ [TasksIntegration] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ this –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö
        const self = this;

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        const tabs = document.querySelectorAll('.main-tabs .tab-button');
        console.log(`  üìë [TasksIntegration] –ó–Ω–∞–π–¥–µ–Ω–æ ${tabs.length} –≤–∫–ª–∞–¥–æ–∫`);

        tabs.forEach((tab, index) => {
            tab.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                const tabName = this.getAttribute('data-tab');
                console.log(`  üìë [TasksIntegration] –ö–ª—ñ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫—É ${index}: ${tabName}`);

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ self
                self.switchTab(tabName);

                // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
                if (window.TasksServices?.Analytics) {
                    window.TasksServices.Analytics.trackEvent('Navigation', 'tab_switch', tabName);
                }
            });
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                console.log('üëÅÔ∏è [TasksIntegration] –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ—é');
                this.onPageVisible();
            } else {
                console.log('üëÅÔ∏è [TasksIntegration] –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞');
                this.onPageHidden();
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
        window.addEventListener('online', () => {
            console.log('üåê [TasksIntegration] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
            this.onOnline();
        });

        window.addEventListener('offline', () => {
            console.log('üìµ [TasksIntegration] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ');
            this.onOffline();
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        window.addEventListener('unhandledrejection', (event) => {
            console.error('‚ùå [TasksIntegration] –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Promise:', event.reason);
            if (window.TasksServices?.Analytics) {
                window.TasksServices.Analytics.trackError(event.reason, 'unhandled_promise');
            }
        });

        console.log('‚úÖ [TasksIntegration] –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    };

    /**
     * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
     */
    TasksIntegration.prototype.switchTab = function(tabName) {
        console.log(`üìë [TasksIntegration] === –ü–ï–†–ï–ú–ò–ö–ê–ù–ù–Ø –í–ö–õ–ê–î–ö–ò ===`);
        console.log(`üìë [TasksIntegration] –¶—ñ–ª—å–æ–≤–∞ –≤–∫–ª–∞–¥–∫–∞: ${tabName}`);
        console.log(`üìë [TasksIntegration] –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≤–∫–ª–∞–¥–∫–∞: ${this.state.currentTab}`);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∫–ª–∞–¥–∫–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—å
        if (this.state.currentTab === tabName) {
            console.log('‚ÑπÔ∏è [TasksIntegration] –í–∫–ª–∞–¥–∫–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞');
            return;
        }

        this.state.currentTab = tabName;

        // –û–Ω–æ–≤–ª—é—î–º–æ Store
        if (window.TasksStore) {
            window.TasksStore.actions.setCurrentTab(tabName);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ UI –≤–∫–ª–∞–¥–æ–∫
        const tabs = document.querySelectorAll('.main-tabs .tab-button');
        const panes = document.querySelectorAll('.main-tab-pane');

        console.log(`üìë [TasksIntegration] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –¥–ª—è ${tabs.length} –≤–∫–ª–∞–¥–æ–∫ —Ç–∞ ${panes.length} –ø–∞–Ω–µ–ª–µ–π`);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏
        tabs.forEach(tab => {
            const isActive = tab.getAttribute('data-tab') === tabName;
            if (isActive) {
                tab.classList.add('active');
                console.log(`  ‚úÖ [TasksIntegration] –í–∫–ª–∞–¥–∫–∞ ${tabName} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞`);
            } else {
                tab.classList.remove('active');
            }
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–Ω–µ–ª—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        panes.forEach(pane => {
            const paneId = pane.id;
            const shouldBeActive = paneId === `${tabName}-tab`;

            if (shouldBeActive) {
                pane.classList.add('active');
                pane.style.display = 'block';
                console.log(`  ‚úÖ [TasksIntegration] –ü–∞–Ω–µ–ª—å ${paneId} –ø–æ–∫–∞–∑–∞–Ω–∞`);
            } else {
                pane.classList.remove('active');
                pane.style.display = 'none';
            }
        });

        // –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        try {
            this.onTabSwitch(tabName);
        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏:', error);
        }

        console.log('‚úÖ [TasksIntegration] –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏
     */
    TasksIntegration.prototype.onTabSwitch = function(tabName) {
        console.log(`üîÑ [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);

        switch(tabName) {
            case 'flex':
                if (this.managers.flexEarn) {
                    console.log('  üîÑ [TasksIntegration] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è...');
                    this.managers.flexEarn.checkWalletConnection();
                }
                break;

            case 'daily':
                if (this.managers.dailyBonus) {
                    console.log('  üîÑ [TasksIntegration] –û–Ω–æ–≤–ª–µ–Ω–Ω—è Daily Bonus...');
                    this.managers.dailyBonus.updateDailyBonusUI();
                }
                break;

            case 'social':
            case 'limited':
            case 'partner':
                if (this.managers.tasksManager) {
                    console.log(`  üîÑ [TasksIntegration] –û–Ω–æ–≤–ª–µ–Ω–Ω—è ${tabName} –∑–∞–≤–¥–∞–Ω—å...`);
                    this.managers.tasksManager.updateTasksUI();
                }
                break;

            default:
                console.warn(`  ‚ö†Ô∏è [TasksIntegration] –ù–µ–≤—ñ–¥–æ–º–∞ –≤–∫–ª–∞–¥–∫–∞: ${tabName}`);
        }
    };

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     */
    TasksIntegration.prototype.setupAutoSave = function() {
        console.log('üíæ [TasksIntegration] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');

        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
        }

        this.autoSaveInterval = setInterval(() => {
            this.saveState();
        }, this.config.autoSaveInterval);

        console.log(`‚úÖ [TasksIntegration] –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–∫–æ–∂–Ω—ñ ${this.config.autoSaveInterval/1000} —Å–µ–∫)`);
    };

    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω
     */
    TasksIntegration.prototype.saveState = function() {
        console.log('üíæ [TasksIntegration] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏...');

        try {
            const stateToSave = {
                userId: this.state.userId,
                currentTab: this.state.currentTab,
                timestamp: Date.now()
            };

            if (window.TasksUtils?.storage) {
                window.TasksUtils.storage.setSecure('tasksSystemState', stateToSave);
                console.log('‚úÖ [TasksIntegration] –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', stateToSave);
            }
        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    TasksIntegration.prototype.onPageVisible = function() {
        console.log('üëÅÔ∏è [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ...');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ—é
        if (window.TasksServices?.Auth) {
            window.TasksServices.Auth.checkSession();
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
        if (window.TasksServices?.Sync) {
            window.TasksServices.Sync.syncData();
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        this.onTabSwitch(this.state.currentTab);
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    TasksIntegration.prototype.onPageHidden = function() {
        console.log('üëÅÔ∏è [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏...');
        this.saveState();
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
     */
    TasksIntegration.prototype.onOnline = function() {
        console.log('üåê [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑\'—î–¥–Ω–∞–Ω–Ω—è...');

        this.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ', 'success');

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
        if (window.TasksServices?.Sync) {
            window.TasksServices.Sync.syncData();
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        this.onTabSwitch(this.state.currentTab);
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤—Ç—Ä–∞—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
     */
    TasksIntegration.prototype.onOffline = function() {
        console.log('üìµ [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –≤—Ç—Ä–∞—Ç–∏ –∑\'—î–¥–Ω–∞–Ω–Ω—è...');
        this.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ', 'warning');
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    TasksIntegration.prototype.showToast = function(message, type = 'info') {
        console.log(`üí¨ [TasksIntegration] Toast: ${type} - ${message}`);
        if (window.TasksUtils?.showToast) {
            window.TasksUtils.showToast(message, type);
        }
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
     */
    TasksIntegration.prototype.showError = function(message) {
        console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞:', message);
        this.showToast(message, 'error');
    };

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é
     */
    TasksIntegration.prototype.destroy = function() {
        console.log('üßπ [TasksIntegration] –ó–Ω–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...');

        // –û—á–∏—â–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏
        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
        }

        // –ó–Ω–∏—â—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
        Object.entries(this.managers).forEach(([name, manager]) => {
            if (manager && typeof manager.destroy === 'function') {
                console.log(`  üßπ [TasksIntegration] –ó–Ω–∏—â–µ–Ω–Ω—è ${name}...`);
                try {
                    manager.destroy();
                } catch (error) {
                    console.error(`  ‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è ${name}:`, error);
                }
            }
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
        this.saveState();

        console.log('‚úÖ [TasksIntegration] –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∏—â–µ–Ω–∞');
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä
    const integration = new TasksIntegration();

    console.log('‚úÖ [TasksIntegration] –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π –¥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó (Production)');

    return integration;

})();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üìÑ [TasksIntegration] DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...');

    try {
        window.tasksIntegration = await window.TasksIntegration.init();
        console.log('üéâ [TasksIntegration] –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–¥–∞–Ω—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
    } catch (error) {
        console.error('‚ùå [TasksIntegration] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É:', error);

        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        const container = document.querySelector('.container');
        if (container) {
            const notice = document.createElement('div');
            notice.style.cssText = 'background: #e74c3c; color: white; padding: 15px; text-align: center; margin-bottom: 10px; border-radius: 8px;';
            notice.innerHTML = `
                <strong>–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏</strong><br>
                –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Ç–∞ –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É
            `;
            container.insertBefore(notice, container.firstChild);
        }
    }
});