/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—ñ–¥—Ö—ñ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ - –ø—Ä–æ—Å—Ç–∏–π —ñ –Ω–∞–¥—ñ–π–Ω–∏–π
 */
window.TasksIntegration = (function() {
    'use strict';

    console.log('üì¶ [TASKS-INTEGRATION] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è TasksIntegration...');

    function TasksIntegration() {
        console.log('üèóÔ∏è [TASKS-INTEGRATION] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É TasksIntegration');
        this.userId = null;
        this.store = null;
        this.isInitialized = false;
        this.managers = {};
        console.log('‚úÖ [TASKS-INTEGRATION] –ï–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ:', this);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å (—è–∫ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ)
     */
    TasksIntegration.prototype.init = function() {
        var self = this;
        console.log('üöÄ [TASKS-INTEGRATION] ===== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á =====');
        console.log('üïê [TASKS-INTEGRATION] –ß–∞—Å –ø–æ—á–∞—Ç–∫—É:', new Date().toISOString());

        return new Promise(function(resolve, reject) {
            try {
                console.log('üîç [TASKS-INTEGRATION] –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');

                // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.userId = self.getUserId();
                console.log('üìä [TASKS-INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç getUserId:', {
                    userId: self.userId,
                    type: typeof self.userId,
                    isValid: !!self.userId
                });

                if (!self.userId) {
                    var error = new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
                    console.error('‚ùå [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
                    self.showErrorMessage(error.message);
                    throw error;
                }

                console.log('‚úÖ [TASKS-INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ:', self.userId);

                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–æ–≤–∏—â–µ
                console.log('üîß [TASKS-INTEGRATION] –ö—Ä–æ–∫ 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ö–æ–≤–∏—â–∞...');
                self.initStore();

                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI
                console.log('üé® [TASKS-INTEGRATION] –ö—Ä–æ–∫ 3: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI...');
                self.initUI()
                    .then(function() {
                        console.log('‚úÖ [TASKS-INTEGRATION] UI —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                        console.log('üìä [TASKS-INTEGRATION] –ö—Ä–æ–∫ 4: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');

                        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
                        return self.loadInitialData();
                    })
                    .then(function() {
                        console.log('‚úÖ [TASKS-INTEGRATION] –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
                        console.log('üéØ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 5: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

                        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
                        self.setupEventListeners();

                        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
                        console.log('üîß [TASKS-INTEGRATION] –ö—Ä–æ–∫ 6: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...');
                        self.initializeManagers();

                        self.isInitialized = true;
                        console.log('üéâ [TASKS-INTEGRATION] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê =====');
                        console.log('üìä [TASKS-INTEGRATION] –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:', {
                            userId: self.userId,
                            storeInitialized: !!self.store,
                            isInitialized: self.isInitialized
                        });
                        resolve(self);
                    })
                    .catch(function(error) {
                        console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
                        console.error('‚ùå [TASKS-INTEGRATION] –î–µ—Ç–∞–ª—ñ:', error);
                        self.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ' + error.message);
                        reject(error);
                    });
            } catch (error) {
                console.error('‚ùå [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ –±–ª–æ—Ü—ñ try-catch');
                console.error('‚ùå [TASKS-INTEGRATION] –î–µ—Ç–∞–ª—ñ:', error);
                self.showErrorMessage('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ' + error.message);
                reject(error);
            }
        });
    };

    /**
     * –û—Ç—Ä–∏–º—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (—ñ–¥–µ–Ω—Ç–∏—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ)
     */
    TasksIntegration.prototype.getUserId = function() {
        console.log('üîç [TASKS-INTEGRATION] === getUserId START ===');
        console.log('üîç [TASKS-INTEGRATION] –î–æ—Å—Ç—É–ø–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±\'—î–∫—Ç–∏:', {
            hasWindow: typeof window !== 'undefined',
            hasWinixAPI: typeof window.WinixAPI !== 'undefined',
            hasTelegram: typeof window.Telegram !== 'undefined',
            hasTelegramWebApp: window.Telegram && typeof window.Telegram.WebApp !== 'undefined'
        });

        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑ WinixAPI —è–∫—â–æ –≤—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
            console.log('üîç [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ WinixAPI...');
            try {
                var apiId = window.WinixAPI.getUserId();
                console.log('üîç [TASKS-INTEGRATION] WinixAPI.getUserId() –ø–æ–≤–µ—Ä–Ω—É–≤:', {
                    value: apiId,
                    type: typeof apiId,
                    isValid: apiId && apiId !== 'undefined' && apiId !== 'null'
                });

                if (apiId && apiId !== 'undefined' && apiId !== 'null') {
                    var numericId = parseInt(apiId);
                    console.log('‚úÖ [TASKS-INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ WinixAPI:', numericId);
                    return numericId;
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É WinixAPI.getUserId():', e);
            }
        } else {
            console.log('‚ö†Ô∏è [TASKS-INTEGRATION] WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ –º–∞—î –º–µ—Ç–æ–¥—É getUserId');
        }

        // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –∑ Telegram
        console.log('üîç [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ Telegram WebApp...');
        if (window.Telegram && window.Telegram.WebApp) {
            console.log('üìä [TASKS-INTEGRATION] Telegram WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π. initDataUnsafe:',
                window.Telegram.WebApp.initDataUnsafe);

            if (window.Telegram.WebApp.initDataUnsafe &&
                window.Telegram.WebApp.initDataUnsafe.user &&
                window.Telegram.WebApp.initDataUnsafe.user.id) {
                var tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id;
                console.log('‚úÖ [TASKS-INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Telegram:', tgUserId);
                return parseInt(tgUserId);
            } else {
                console.log('‚ö†Ô∏è [TASKS-INTEGRATION] Telegram WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
            }
        } else {
            console.log('‚ö†Ô∏è [TASKS-INTEGRATION] Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }

        // –ü–æ—Ç—ñ–º –∑ localStorage
        console.log('üîç [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ localStorage...');
        var telegramId = localStorage.getItem('telegram_user_id');
        var userId = localStorage.getItem('user_id');
        console.log('üìä [TASKS-INTEGRATION] –î–∞–Ω—ñ –∑ localStorage:', {
            telegram_user_id: telegramId,
            user_id: userId
        });

        var storedId = telegramId || userId;
        if (storedId) {
            var numericId = parseInt(storedId);
            console.log('üìä [TASKS-INTEGRATION] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ID:', {
                original: storedId,
                numeric: numericId,
                isNaN: isNaN(numericId)
            });

            if (!isNaN(numericId)) {
                console.log('‚úÖ [TASKS-INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage:', numericId);
                return numericId;
            }
        }

        // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
        console.error('‚ùå [TASKS-INTEGRATION] === getUserId FAILED - ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—ñ ===');
        return null;
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Redux —Å—Ö–æ–≤–∏—â–µ (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–µ)
     */
    TasksIntegration.prototype.initStore = function() {
        console.log('üîß [TASKS-INTEGRATION] === initStore START ===');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î TasksStore
        if (window.TasksStore) {
            console.log('üìä [TASKS-INTEGRATION] TasksStore –∑–Ω–∞–π–¥–µ–Ω–æ');
            this.store = window.TasksStore;

            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ —è–∫—â–æ —î –º–µ—Ç–æ–¥ subscribe
            if (typeof this.store.subscribe === 'function') {
                var self = this;
                var unsubscribe = this.store.subscribe(function(state, prevState, action) {
                    console.log('üîÑ [TASKS-INTEGRATION] Store state –∑–º—ñ–Ω–∏–≤—Å—è:', action ? action.type : 'unknown');
                    self.handleStateChange(state, prevState, action);
                });

                console.log('‚úÖ [TASKS-INTEGRATION] –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ store –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            }
        } else {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] TasksStore –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –±–µ–∑ –Ω—å–æ–≥–æ');
        }

        console.log('‚úÖ [TASKS-INTEGRATION] === initStore COMPLETE ===');
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.initUI = function() {
        var self = this;
        console.log('üé® [TASKS-INTEGRATION] === initUI START ===');

        return new Promise(function(resolve, reject) {
            try {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
                console.log('üé® [TASKS-INTEGRATION] –ö—Ä–æ–∫ 1: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É...');
                self.setUserIdInHeader();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
                console.log('üé® [TASKS-INTEGRATION] –ö—Ä–æ–∫ 2: –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –≤–∫–ª–∞–¥–∫—É...');
                self.showTab('flex'); // Flex —è–∫ –æ—Å–Ω–æ–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞

                console.log('‚úÖ [TASKS-INTEGRATION] === initUI SUCCESS ===');
                resolve();
            } catch (error) {
                console.error('‚ùå [TASKS-INTEGRATION] === initUI FAILED ===');
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞:', error);
                reject(error);
            }
        });
    };

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
     */
    TasksIntegration.prototype.setUserIdInHeader = function() {
        console.log('üè∑Ô∏è [TASKS-INTEGRATION] === setUserIdInHeader START ===');

        var userIdElements = document.querySelectorAll('.user-id-value, #header-user-id');
        console.log('üìä [TASKS-INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è ID:', userIdElements.length);

        var self = this;
        userIdElements.forEach(function(element, index) {
            if (element) {
                var value = self.userId || '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ';
                console.log('üè∑Ô∏è [TASKS-INTEGRATION] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –≤ –µ–ª–µ–º–µ–Ω—Ç ' + index + ':', {
                    element: element,
                    oldValue: element.textContent,
                    newValue: value
                });
                element.textContent = value;
            }
        });

        console.log('‚úÖ [TASKS-INTEGRATION] === setUserIdInHeader COMPLETE ===');
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–∞–≤–¥–∞–Ω—å
     */
    TasksIntegration.prototype.initializeManagers = function() {
        console.log('üîß [TASKS-INTEGRATION] === initializeManagers START ===');

        var self = this;

        // FlexEarnManager
        if (window.FlexEarnManager) {
            console.log('üíé [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FlexEarnManager...');
            try {
                this.managers.flexEarn = window.FlexEarnManager;
                this.managers.flexEarn.init(this.userId);
                console.log('‚úÖ [TASKS-INTEGRATION] FlexEarnManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó FlexEarnManager:', error);
            }
        }

        // DailyBonusManager
        if (window.DailyBonusManager) {
            console.log('üìÖ [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DailyBonusManager...');
            try {
                this.managers.dailyBonus = window.DailyBonusManager;
                this.managers.dailyBonus.init(this.userId);
                console.log('‚úÖ [TASKS-INTEGRATION] DailyBonusManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó DailyBonusManager:', error);
            }
        }

        // TasksManager
        if (window.TasksManager) {
            console.log('üìã [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TasksManager...');
            try {
                this.managers.tasks = window.TasksManager;
                this.managers.tasks.init(this.userId);
                console.log('‚úÖ [TASKS-INTEGRATION] TasksManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TasksManager:', error);
            }
        }

        // WalletChecker
        if (window.WalletChecker) {
            console.log('üëõ [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WalletChecker...');
            try {
                this.managers.wallet = window.WalletChecker;
                this.managers.wallet.init(this.userId);
                console.log('‚úÖ [TASKS-INTEGRATION] WalletChecker —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WalletChecker:', error);
            }
        }

        console.log('‚úÖ [TASKS-INTEGRATION] === initializeManagers COMPLETE ===');
    };

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
     */
    TasksIntegration.prototype.loadInitialData = function() {
        var self = this;
        console.log('üìä [TASKS-INTEGRATION] === loadInitialData START ===');

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        var promises = [];

        // –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (window.TasksAPI && window.TasksAPI.user && window.TasksAPI.user.getBalance) {
            promises.push(
                window.TasksAPI.user.getBalance(this.userId)
                    .then(function(balance) {
                        console.log('üí∞ [TASKS-INTEGRATION] –ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ:', balance);
                        self.updateBalanceDisplay(balance);
                        return balance;
                    })
                    .catch(function(error) {
                        console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
                        return null;
                    })
            );
        }

        // –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è
        if (window.TasksAPI && window.TasksAPI.wallet && window.TasksAPI.wallet.checkStatus) {
            promises.push(
                window.TasksAPI.wallet.checkStatus(this.userId)
                    .then(function(status) {
                        console.log('üëõ [TASKS-INTEGRATION] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è:', status);
                        return status;
                    })
                    .catch(function(error) {
                        console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è:', error);
                        return null;
                    })
            );
        }

        // –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
        if (window.TasksAPI && window.TasksAPI.tasks && window.TasksAPI.tasks.getList) {
            promises.push(
                window.TasksAPI.tasks.getList(this.userId, 'all')
                    .then(function(tasks) {
                        console.log('üìã [TASKS-INTEGRATION] –ó–∞–≤–¥–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ:', tasks);
                        return tasks;
                    })
                    .catch(function(error) {
                        console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
                        return null;
                    })
            );
        }

        return Promise.all(promises)
            .then(function(results) {
                console.log('‚úÖ [TASKS-INTEGRATION] –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
                return results;
            });
    };

    /**
     * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
     */
    TasksIntegration.prototype.updateBalanceDisplay = function(balance) {
        console.log('üí∞ [TASKS-INTEGRATION] === updateBalanceDisplay START ===');

        if (!balance) return;

        // –û–Ω–æ–≤–ª—é—î–º–æ WINIX
        var winixElement = document.getElementById('user-winix');
        if (winixElement && balance.winix !== undefined) {
            winixElement.textContent = balance.winix;
            console.log('üíé [TASKS-INTEGRATION] WINIX –æ–Ω–æ–≤–ª–µ–Ω–æ:', balance.winix);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ Tickets
        var ticketsElement = document.getElementById('user-tickets');
        if (ticketsElement && balance.tickets !== undefined) {
            ticketsElement.textContent = balance.tickets;
            console.log('üéüÔ∏è [TASKS-INTEGRATION] Tickets –æ–Ω–æ–≤–ª–µ–Ω–æ:', balance.tickets);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ FLEX
        var flexElement = document.getElementById('user-flex');
        if (flexElement && balance.flex !== undefined) {
            flexElement.textContent = balance.flex;
            console.log('üíé [TASKS-INTEGRATION] FLEX –æ–Ω–æ–≤–ª–µ–Ω–æ:', balance.flex);
        }

        console.log('‚úÖ [TASKS-INTEGRATION] === updateBalanceDisplay COMPLETE ===');
    };

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    TasksIntegration.prototype.setupEventListeners = function() {
        console.log('üéØ [TASKS-INTEGRATION] === setupEventListeners START ===');

        var self = this;

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        var tabs = document.querySelectorAll('.main-tabs .tab-button');
        console.log('üìë [TASKS-INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫:', tabs.length);

        tabs.forEach(function(tab) {
            tab.addEventListener('click', function(e) {
                e.preventDefault();
                var tabName = tab.getAttribute('data-tab');
                console.log('üìë [TASKS-INTEGRATION] –ö–ª—ñ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
                self.showTab(tabName);
            });
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ (–¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
        document.addEventListener('click', function(event) {
            // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–¥–∞–Ω—å
            if (event.target.classList.contains('task-action-button')) {
                var taskId = event.target.getAttribute('data-task-id');
                var action = event.target.getAttribute('data-action');
                console.log('üìã [TASKS-INTEGRATION] –î—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', action, 'ID:', taskId);
                self.handleTaskAction(taskId, action);
            }

            // –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
            if (event.target.id === 'connect-wallet-button') {
                console.log('üëõ [TASKS-INTEGRATION] –ö–ª—ñ–∫ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');
                self.handleWalletConnect();
            }

            // –û–±—Ä–æ–±–∫–∞ claim –±–æ–Ω—É—Å—ñ–≤
            if (event.target.classList.contains('claim-bonus-button')) {
                var bonusType = event.target.getAttribute('data-bonus-type');
                console.log('üéÅ [TASKS-INTEGRATION] Claim –±–æ–Ω—É—Å:', bonusType);
                self.handleClaimBonus(bonusType);
            }
        });

        console.log('‚úÖ [TASKS-INTEGRATION] === setupEventListeners COMPLETE ===');
    };

    /**
     * –ü–æ–∫–∞–∑—É—î –≤–∫–ª–∞–¥–∫—É
     */
    TasksIntegration.prototype.showTab = function(tabName) {
        console.log('üìë [TASKS-INTEGRATION] === showTab:', tabName, '===');

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –≤–∫–ª–∞–¥–∫–∏
        var allPanes = document.querySelectorAll('.main-tab-pane');
        allPanes.forEach(function(pane) {
            pane.style.display = 'none';
            pane.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∫–ª–∞–¥–∫—É
        var targetPane = document.getElementById(tabName + '-tab');
        if (targetPane) {
            targetPane.style.display = 'block';
            targetPane.classList.add('active');
            console.log('‚úÖ [TASKS-INTEGRATION] –í–∫–ª–∞–¥–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞:', tabName);
        } else {
            console.error('‚ùå [TASKS-INTEGRATION] –í–∫–ª–∞–¥–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞:', tabName);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∫–Ω–æ–ø–∫—É
        var allTabs = document.querySelectorAll('.main-tabs .tab-button');
        allTabs.forEach(function(tab) {
            tab.classList.remove('active');
        });

        var activeTab = document.querySelector('.main-tabs .tab-button[data-tab="' + tabName + '"]');
        if (activeTab) {
            activeTab.classList.add('active');
        }

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        this.onTabChange(tabName);
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –≤–∫–ª–∞–¥–∫–∏
     */
    TasksIntegration.prototype.onTabChange = function(tabName) {
        console.log('üîÑ [TASKS-INTEGRATION] === onTabChange:', tabName, '===');

        switch(tabName) {
            case 'flex':
                if (this.managers.flexEarn && this.managers.flexEarn.checkWalletConnection) {
                    this.managers.flexEarn.checkWalletConnection();
                }
                break;

            case 'daily':
                if (this.managers.dailyBonus && this.managers.dailyBonus.updateDailyBonusUI) {
                    this.managers.dailyBonus.updateDailyBonusUI();
                }
                break;

            case 'social':
            case 'limited':
            case 'partner':
                if (this.managers.tasks && this.managers.tasks.updateTasksUI) {
                    this.managers.tasks.updateTasksUI();
                }
                break;

            default:
                console.log('‚ö†Ô∏è [TASKS-INTEGRATION] –ù–µ–≤—ñ–¥–æ–º–∞ –≤–∫–ª–∞–¥–∫–∞:', tabName);
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∑–∞–≤–¥–∞–Ω—å
     */
    TasksIntegration.prototype.handleTaskAction = function(taskId, action) {
        console.log('üìã [TASKS-INTEGRATION] === handleTaskAction ===');
        console.log('üìä [TASKS-INTEGRATION] Task ID:', taskId, 'Action:', action);

        if (!this.managers.tasks) {
            console.error('‚ùå [TASKS-INTEGRATION] TasksManager –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return;
        }

        switch(action) {
            case 'start':
                this.managers.tasks.startTask(taskId);
                break;
            case 'verify':
                this.managers.tasks.verifyTask(taskId);
                break;
            case 'claim':
                this.managers.tasks.claimReward(taskId);
                break;
            default:
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è:', action);
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    TasksIntegration.prototype.handleWalletConnect = function() {
        console.log('üëõ [TASKS-INTEGRATION] === handleWalletConnect ===');

        if (this.managers.wallet && this.managers.wallet.connectWallet) {
            this.managers.wallet.connectWallet();
        } else {
            console.error('‚ùå [TASKS-INTEGRATION] WalletChecker –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            this.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤
     */
    TasksIntegration.prototype.handleClaimBonus = function(bonusType) {
        console.log('üéÅ [TASKS-INTEGRATION] === handleClaimBonus ===');
        console.log('üìä [TASKS-INTEGRATION] Bonus type:', bonusType);

        switch(bonusType) {
            case 'daily':
                if (this.managers.dailyBonus && this.managers.dailyBonus.claimDailyBonus) {
                    this.managers.dailyBonus.claimDailyBonus();
                }
                break;

            case 'flex':
                if (this.managers.flexEarn && this.managers.flexEarn.claimFlexReward) {
                    this.managers.flexEarn.claimFlexReward();
                }
                break;

            default:
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –±–æ–Ω—É—Å—É:', bonusType);
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É Store
     */
    TasksIntegration.prototype.handleStateChange = function(state, prevState, action) {
        console.log('üîÑ [TASKS-INTEGRATION] Store state –∑–º—ñ–Ω–∏–≤—Å—è');

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è
        if (state && prevState && state.user && prevState.user) {
            if (state.user.balance !== prevState.user.balance) {
                console.log('üí∞ [TASKS-INTEGRATION] –ë–∞–ª–∞–Ω—Å –∑–º—ñ–Ω–∏–≤—Å—è');
                this.updateBalanceDisplay(state.user.balance);
            }
        }
    };

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
     */
    TasksIntegration.prototype.showSuccessMessage = function(message) {
        console.log('‚úÖ [TASKS-INTEGRATION] showSuccessMessage:', message);

        if (window.TasksUtils && window.TasksUtils.showToast) {
            window.TasksUtils.showToast(message, 'success');
        } else {
            // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π toast
            var toast = document.getElementById('toast-message');
            if (toast) {
                toast.textContent = message;
                toast.classList.add('show', 'success');
                setTimeout(function() {
                    toast.classList.remove('show', 'success');
                }, 3000);
            }
        }
    };

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     */
    TasksIntegration.prototype.showErrorMessage = function(message) {
        console.error('‚ùå [TASKS-INTEGRATION] showErrorMessage:', message);

        if (window.TasksUtils && window.TasksUtils.showToast) {
            window.TasksUtils.showToast(message, 'error');
        } else {
            // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π toast
            var toast = document.getElementById('toast-message');
            if (toast) {
                toast.textContent = message;
                toast.classList.add('show', 'error');
                setTimeout(function() {
                    toast.classList.remove('show', 'error');
                }, 5000);
            }
        }
    };

    console.log('‚úÖ [TASKS-INTEGRATION] –ú–æ–¥—É–ª—å TasksIntegration –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    return TasksIntegration;
})();

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
window.initTasksSystem = function() {
    console.log('üé¨ [GLOBAL] === initTasksSystem START ===');
    console.log('üïê [GLOBAL] –ß–∞—Å –≤–∏–∫–ª–∏–∫—É:', new Date().toISOString());

    return new Promise(function(resolve, reject) {
        try {
            console.log('üèóÔ∏è [GLOBAL] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É TasksIntegration...');
            var integration = new window.TasksIntegration();

            console.log('üöÄ [GLOBAL] –ó–∞–ø—É—Å–∫ integration.init()...');
            integration.init()
                .then(function() {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
                    window.TasksIntegrationInstance = integration;
                    console.log('‚úÖ [GLOBAL] –ï–∫–∑–µ–º–ø–ª—è—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ window.TasksIntegrationInstance');

                    console.log('üèÅ [GLOBAL] === initTasksSystem SUCCESS ===');
                    resolve(integration);
                })
                .catch(function(error) {
                    console.error('üí• [GLOBAL] === initTasksSystem FAILED ===');
                    console.error('üí• [GLOBAL] –ü–æ–º–∏–ª–∫–∞:', error);
                    reject(error);
                });
        } catch (error) {
            console.error('üí• [GLOBAL] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ try-catch –±–ª–æ—Ü—ñ');
            console.error('üí• [GLOBAL] –î–µ—Ç–∞–ª—ñ:', error);
            reject(error);
        }
    });
};

console.log('‚úÖ [GLOBAL] window.initTasksSystem —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞');