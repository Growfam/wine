/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - Ultra Universal Version
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø—ñ–¥–º–æ–¥—É–ª—ñ–≤ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≥–Ω—É—á–∫—ñ—Å—Ç—é
 */

window.TasksIntegration = (function() {
    'use strict';

    console.log('üöÄ [TASKS-INTEGRATION] ===== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ú–û–î–£–õ–Ø TASKS INTEGRATION =====');
    console.log('üì¶ [TASKS-INTEGRATION] –í–µ—Ä—Å—ñ—è: Ultra Universal 2.0');
    console.log('üïê [TASKS-INTEGRATION] –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', new Date().toISOString());

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
     */
    function TasksIntegration() {
        console.log('üèóÔ∏è [TASKS-INTEGRATION] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É TasksIntegration');

        // –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
        this.state = {
            userId: null,
            isInitialized: false,
            initializationAttempts: 0,
            maxRetries: 5,
            currentTab: 'flex',
            walletConnected: false,
            serverAvailable: false,
            moduleStatuses: {
                flexEarn: false,
                dailyBonus: false,
                tasksManager: false,
                taskVerification: false,
                walletChecker: false,
                services: false,
                store: false,
                api: false
            },
            lastSyncTime: null,
            errorCount: 0
        };

        // –ú–µ–Ω–µ–¥–∂–µ—Ä–∏
        this.managers = {
            flexEarn: null,
            dailyBonus: null,
            tasksManager: null,
            taskVerification: null,
            walletChecker: null
        };

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        this.config = {
            autoSaveInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            syncInterval: 60000,     // 1 —Ö–≤–∏–ª–∏–Ω–∞
            healthCheckInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            retryDelay: 5000,        // 5 —Å–µ–∫—É–Ω–¥
            debugMode: false,
            fallbackMode: false
        };

        // –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏
        this.intervals = {
            autoSave: null,
            sync: null,
            healthCheck: null
        };

        console.log('‚úÖ [TASKS-INTEGRATION] –ï–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ:', this);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≥–Ω—É—á–∫—ñ—Å—Ç—é
     */
    TasksIntegration.prototype.init = async function() {
        console.log('üéØ [TASKS-INTEGRATION] ===== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –°–ò–°–¢–ï–ú–ò =====');
        console.log('üïê [TASKS-INTEGRATION] –ß–∞—Å –ø–æ—á–∞—Ç–∫—É:', new Date().toISOString());
        console.log('üìä [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó #' + (this.state.initializationAttempts + 1));

        this.state.initializationAttempts++;

        try {
            // –ö–†–û–ö 1: –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            console.log('üîç [TASKS-INTEGRATION] –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...');
            const envCheck = this.checkEnvironment();
            console.log('üìä [TASKS-INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:', envCheck);

            // –ö–†–û–ö 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è User ID –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            console.log('üîç [TASKS-INTEGRATION] –ö—Ä–æ–∫ 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
            this.state.userId = await this.getUserId();
            console.log('üìä [TASKS-INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç getUserId:', {
                userId: this.state.userId,
                type: typeof this.state.userId,
                isValid: !!this.state.userId
            });

            if (!this.state.userId) {
                console.error('‚ùå [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

                if (this.state.initializationAttempts < this.state.maxRetries) {
                    console.log('‚è≥ [TASKS-INTEGRATION] –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ' + (this.config.retryDelay/1000) + ' —Å–µ–∫—É–Ω–¥...');
                    setTimeout(() => this.init(), this.config.retryDelay);
                    return null;
                } else {
                    this.showCriticalError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è ' + this.state.maxRetries + ' —Å–ø—Ä–æ–±');
                    throw new Error('User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–±');
                }
            }

            console.log('‚úÖ [TASKS-INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ:', this.state.userId);

            // –ö–†–û–ö 3: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            console.log('üìÇ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 3: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É...');
            this.loadSavedState();

            // –ö–†–û–ö 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—ñ–≤
            console.log('üîç [TASKS-INTEGRATION] –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤...');
            this.checkModulesAvailability();

            // –ö–†–û–ö 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üåê [TASKS-INTEGRATION] –ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
            this.state.serverAvailable = await this.checkServerAvailability();

            if (!this.state.serverAvailable) {
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ');
                this.config.fallbackMode = true;
                this.showOfflineNotice();
            }

            // –ö–†–û–ö 6: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            console.log('üè™ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 6: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store...');
            await this.initStore();

            // –ö–†–û–ö 7: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ fallback)
            if (this.state.serverAvailable) {
                console.log('üîê [TASKS-INTEGRATION] –ö—Ä–æ–∫ 7: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
                await this.authenticateUser();
            } else {
                console.log('‚è∏Ô∏è [TASKS-INTEGRATION] –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é - –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
            }

            // –ö–†–û–ö 8: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
            console.log('üîß [TASKS-INTEGRATION] –ö—Ä–æ–∫ 8: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...');
            await this.initializeManagers();

            // –ö–†–û–ö 9: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
            console.log('üé® [TASKS-INTEGRATION] –ö—Ä–æ–∫ 9: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI...');
            this.initUI();

            // –ö–†–û–ö 10: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
            console.log('üéØ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 10: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π...');
            this.setupEventHandlers();

            // –ö–†–û–ö 11: –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
            if (this.state.serverAvailable) {
                console.log('üîÑ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 11: –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...');
                await this.initialSync();
            }

            // –ö–†–û–ö 12: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
            console.log('‚è∞ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 12: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø—Ä–æ—Ü–µ—Å—ñ–≤...');
            this.startAutoProcesses();

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            this.state.isInitialized = true;
            this.state.initializationAttempts = 0;

            console.log('üéâ [TASKS-INTEGRATION] ===== –°–ò–°–¢–ï–ú–ê –£–°–ü–Ü–®–ù–û –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–ê =====');
            console.log('üìä [TASKS-INTEGRATION] –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:', {
                userId: this.state.userId,
                serverAvailable: this.state.serverAvailable,
                moduleStatuses: this.state.moduleStatuses,
                fallbackMode: this.config.fallbackMode
            });

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
            this.saveState();

            return this;

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á:', error);
            console.error('‚ùå [TASKS-INTEGRATION] Stack trace:', error.stack);
            console.error('‚ùå [TASKS-INTEGRATION] –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏:', this.state);

            this.state.errorCount++;

            // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ —è–∫—â–æ —î —Å–ø—Ä–æ–±–∏
            if (this.state.initializationAttempts < this.state.maxRetries) {
                console.log('‚è≥ [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ #' + (this.state.initializationAttempts + 1) + ' —á–µ—Ä–µ–∑ ' + (this.config.retryDelay/1000) + ' —Å–µ–∫—É–Ω–¥...');
                setTimeout(() => this.init(), this.config.retryDelay);
                return null;
            } else {
                console.error('‚ùå [TASKS-INTEGRATION] –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±');
                this.showCriticalError(error.message);
                return null;
            }
        }
    };

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è User ID –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (—è–∫ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ)
     */
    TasksIntegration.prototype.getUserId = async function() {
        console.log('üîç [TASKS-INTEGRATION] === getUserId START ===');
        console.log('üîç [TASKS-INTEGRATION] –î–æ—Å—Ç—É–ø–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±\'—î–∫—Ç–∏:', {
            hasWindow: typeof window !== 'undefined',
            hasWinixAPI: typeof window.WinixAPI !== 'undefined',
            hasTasksAPI: typeof window.TasksAPI !== 'undefined',
            hasTelegram: typeof window.Telegram !== 'undefined',
            hasTelegramWebApp: window.Telegram && typeof window.Telegram.WebApp !== 'undefined'
        });

        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑ WinixAPI
        if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
            console.log('üîç [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ WinixAPI...');
            try {
                const apiId = window.WinixAPI.getUserId();
                console.log('üîç [TASKS-INTEGRATION] WinixAPI.getUserId() –ø–æ–≤–µ—Ä–Ω—É–≤:', {
                    value: apiId,
                    type: typeof apiId,
                    isValid: apiId && apiId !== 'undefined' && apiId !== 'null'
                });

                if (apiId && apiId !== 'undefined' && apiId !== 'null') {
                    const numericId = parseInt(apiId);
                    console.log('‚úÖ [TASKS-INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ WinixAPI:', numericId);
                    return numericId;
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É WinixAPI.getUserId():', e);
            }
        }

        // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –∑ Telegram
        console.log('üîç [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ Telegram WebApp...');
        if (window.Telegram && window.Telegram.WebApp) {
            console.log('üìä [TASKS-INTEGRATION] Telegram WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π. initDataUnsafe:',
                window.Telegram.WebApp.initDataUnsafe);

            if (window.Telegram.WebApp.initDataUnsafe &&
                window.Telegram.WebApp.initDataUnsafe.user &&
                window.Telegram.WebApp.initDataUnsafe.user.id) {
                const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id;
                console.log('‚úÖ [TASKS-INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Telegram:', tgUserId);
                return parseInt(tgUserId);
            }
        }

        // –ü–æ—Ç—ñ–º –∑—ñ Store —è–∫—â–æ –≤–∂–µ –±—É–≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
        if (window.TasksStore && window.TasksStore.selectors && window.TasksStore.selectors.getUserId) {
            console.log('üîç [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ TasksStore...');
            const storeId = window.TasksStore.selectors.getUserId();
            if (storeId) {
                console.log('‚úÖ [TASKS-INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Store:', storeId);
                return parseInt(storeId);
            }
        }

        // –ü–æ—Ç—ñ–º –∑ localStorage/sessionStorage
        console.log('üîç [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ localStorage...');
        const telegramId = localStorage.getItem('telegram_user_id');
        const userId = localStorage.getItem('user_id');
        const sessionId = sessionStorage.getItem('winix_user_id');

        console.log('üìä [TASKS-INTEGRATION] –î–∞–Ω—ñ –∑—ñ —Å—Ö–æ–≤–∏—â:', {
            telegram_user_id: telegramId,
            user_id: userId,
            session_user_id: sessionId
        });

        const storedId = sessionId || telegramId || userId;
        if (storedId) {
            const numericId = parseInt(storedId);
            console.log('üìä [TASKS-INTEGRATION] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ID:', {
                original: storedId,
                numeric: numericId,
                isNaN: isNaN(numericId)
            });

            if (!isNaN(numericId)) {
                console.log('‚úÖ [TASKS-INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑—ñ —Å—Ö–æ–≤–∏—â–∞:', numericId);
                return numericId;
            }
        }

        // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
        console.error('‚ùå [TASKS-INTEGRATION] === getUserId FAILED - ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—ñ ===');
        return null;
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
     */
    TasksIntegration.prototype.checkEnvironment = function() {
        console.log('üåç [TASKS-INTEGRATION] === –ü–ï–†–ï–í–Ü–†–ö–ê –°–ï–†–ï–î–û–í–ò–©–ê ===');

        const env = {
            isTelegram: !!(window.Telegram && window.Telegram.WebApp),
            isWebApp: window.location.protocol.includes('http'),
            hasLocalStorage: typeof localStorage !== 'undefined',
            hasSessionStorage: typeof sessionStorage !== 'undefined',
            hasIndexedDB: 'indexedDB' in window,
            screenWidth: window.innerWidth,
            screenHeight: window.innerHeight,
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language
        };

        console.log('üìä [TASKS-INTEGRATION] –°–µ—Ä–µ–¥–æ–≤–∏—â–µ:', env);
        return env;
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—ñ–≤
     */
    TasksIntegration.prototype.checkModulesAvailability = function() {
        console.log('üì¶ [TASKS-INTEGRATION] === –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–Ü –ú–û–î–£–õ–Ü–í ===');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –º–æ–¥—É–ª—å
        const modules = {
            flexEarn: window.FlexEarnManager,
            dailyBonus: window.DailyBonusManager,
            tasksManager: window.TasksManager,
            taskVerification: window.TaskVerification,
            walletChecker: window.WalletChecker,
            services: window.TasksServices,
            store: window.TasksStore,
            api: window.TasksAPI
        };

        Object.entries(modules).forEach(([name, module]) => {
            const isAvailable = !!module;
            this.state.moduleStatuses[name] = isAvailable;

            console.log(`${isAvailable ? '‚úÖ' : '‚ùå'} [TASKS-INTEGRATION] –ú–æ–¥—É–ª—å ${name}: ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∏–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}`);
        });

        // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalModules = Object.keys(this.state.moduleStatuses).length;
        const availableModules = Object.values(this.state.moduleStatuses).filter(status => status).length;

        console.log('üìä [TASKS-INTEGRATION] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—ñ–≤:', {
            –≤—Å—å–æ–≥–æ: totalModules,
            –¥–æ—Å—Ç—É–ø–Ω–æ: availableModules,
            –≤—ñ–¥—Å—É—Ç–Ω—ñ: totalModules - availableModules,
            –≤—ñ–¥—Å–æ—Ç–æ–∫: Math.round((availableModules / totalModules) * 100) + '%'
        });

        return this.state.moduleStatuses;
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
     */
    TasksIntegration.prototype.checkServerAvailability = async function() {
    console.log('üåê [TASKS-INTEGRATION] === –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–Ü –°–ï–†–í–ï–†–ê ===');

    try {
        if (!window.WinixAPI && !window.TasksAPI) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] API –º–æ–¥—É–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
            return false;
        }

        let response;
        if (window.WinixAPI && window.WinixAPI.apiRequest) {
            console.log('üîÑ [TASKS-INTEGRATION] Ping —á–µ—Ä–µ–∑ WinixAPI...');
            response = await window.WinixAPI.apiRequest('/api/ping', 'GET', null, {
                suppressErrors: true,
                timeout: 5000,
                skipHealthCheck: true
            });
        }

        // –û–ù–û–í–õ–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê - –¥–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ status === 'ok'
        const isAvailable = !!(response && (
            response.status === 'success' ||
            response.status === 'ok' ||      // –î–û–î–ê–ù–û
            response.pong === true ||
            response.message === 'API is running'  // –î–û–î–ê–ù–û
        ));

        console.log(`${isAvailable ? '‚úÖ' : '‚ùå'} [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∏–π' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}`);
        console.log('üìä [TASKS-INTEGRATION] Ping response:', response);

        return isAvailable;

    } catch (error) {
        console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        return false;
    }
};

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store
     */
    TasksIntegration.prototype.initStore = async function() {
        console.log('üè™ [TASKS-INTEGRATION] === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø STORE ===');

        if (!window.TasksStore) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] TasksStore –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            this.state.moduleStatuses.store = false;
            return;
        }

        try {
            // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
            const unsubscribe = window.TasksStore.subscribe((state, prevState, action) => {
                console.log('üîÑ [TASKS-INTEGRATION] Store –∑–º—ñ–Ω–∏–≤—Å—è:', action.type);
                this.handleStateChange(state, prevState, action);
            });

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–ø–∏—Å–∫–∏
            this._storeUnsubscribe = unsubscribe;

            console.log('‚úÖ [TASKS-INTEGRATION] Store —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            this.state.moduleStatuses.store = true;

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Store:', error);
            this.state.moduleStatuses.store = false;
        }
    };

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ fallback)
     */
    TasksIntegration.prototype.authenticateUser = async function() {
        console.log('üîê [TASKS-INTEGRATION] === –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');

        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ TasksServices —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (window.TasksServices && window.TasksServices.Auth) {
                console.log('üîÑ [TASKS-INTEGRATION] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ TasksServices...');
                const user = await window.TasksServices.Auth.initUser();

                console.log('‚úÖ [TASKS-INTEGRATION] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Services:', user);
                this.updateUserUI(user);
                return;
            }

            // Fallback –Ω–∞ TelegramValidator
            if (window.TelegramValidator) {
                console.log('üîÑ [TASKS-INTEGRATION] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ TelegramValidator...');
                const validation = await window.TelegramValidator.validateTelegramAuth();

                if (validation.valid) {
                    console.log('‚úÖ [TASKS-INTEGRATION] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Telegram');
                    this.updateUserUI(validation.user);
                    return;
                }
            }

            // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –∞–ª–µ —É –Ω–∞—Å —î userId - –ø—Ä–∞—Ü—é—î–º–æ –∑ –Ω–∏–º
            if (this.state.userId) {
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü—Ä–∞—Ü—é—î–º–æ –∑ userId –±–µ–∑ –ø–æ–≤–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
                this.updateUserUI({ id: this.state.userId });
            }

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
            // –ù–µ –±–ª–æ–∫—É—î–º–æ —Ä–æ–±–æ—Ç—É —Å–∏—Å—Ç–µ–º–∏
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≥–Ω—É—á–∫—ñ—Å—Ç—é
     */
    TasksIntegration.prototype.initializeManagers = async function() {
        console.log('üîß [TASKS-INTEGRATION] === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–ï–ù–ï–î–ñ–ï–†–Ü–í ===');

        const userId = this.state.userId;
        let successCount = 0;
        let failureCount = 0;


// WalletChecker
// –í —Ñ—É–Ω–∫—Ü—ñ—ó initializeManagers (—Ä—è–¥–æ–∫ ~920)
// WalletChecker –ø–æ–≤–∏–Ω–µ–Ω —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è –∑ userId
if (window.WalletChecker) {
    console.log('  üîß [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WalletChecker...');
    console.log('  üë§ [TASKS-INTEGRATION] –ü–µ—Ä–µ–¥–∞—î–º–æ userId:', userId);
    try {
        this.managers.walletChecker = window.WalletChecker;
        await this.managers.walletChecker.init(userId); // –ü–µ—Ä–µ–¥–∞—î–º–æ userId!
        console.log('  ‚úÖ [TASKS-INTEGRATION] WalletChecker —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        successCount++;
    } catch (error) {
        console.warn('  ‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ WalletChecker:', error.message);
        failureCount++;
    }
}
        // FlexEarnManager
    if (window.FlexEarnManager) {
        console.log('  üîß [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FlexEarnManager...');
        try {
            this.managers.flexEarn = window.FlexEarnManager;
            // –ü–µ—Ä–µ–¥–∞—î–º–æ userId —Ç–∞ –≤–∫–∞–∑—É—î–º–æ —â–æ WalletChecker –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
            this.managers.flexEarn.init(userId, { skipWalletInit: true });
            console.log('  ‚úÖ [TASKS-INTEGRATION] FlexEarnManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            successCount++;
        } catch (error) {
            console.warn('  ‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ FlexEarnManager:', error.message);
            failureCount++;
        }
    }

        // DailyBonusManager
        if (window.DailyBonusManager) {
            console.log('  üîß [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DailyBonusManager...');
            try {
                this.managers.dailyBonus = window.DailyBonusManager;
                await this.managers.dailyBonus.init(userId);
                console.log('  ‚úÖ [TASKS-INTEGRATION] DailyBonusManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                successCount++;
            } catch (error) {
                console.warn('  ‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ DailyBonusManager:', error.message);
                failureCount++;
            }
        }

        // TasksManager
        if (window.TasksManager) {
            console.log('  üîß [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TasksManager...');
            try {
                this.managers.tasksManager = window.TasksManager;
                await this.managers.tasksManager.init(userId);
                console.log('  ‚úÖ [TASKS-INTEGRATION] TasksManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                successCount++;
            } catch (error) {
                console.warn('  ‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ TasksManager:', error.message);
                failureCount++;
            }
        }

        // TaskVerification
        if (window.TaskVerification) {
            console.log('  üîß [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TaskVerification...');
            try {
                this.managers.taskVerification = window.TaskVerification;
                this.managers.taskVerification.init();
                console.log('  ‚úÖ [TASKS-INTEGRATION] TaskVerification —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                successCount++;
            } catch (error) {
                console.warn('  ‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ TaskVerification:', error.message);
                failureCount++;
            }
        }

        console.log('üìä [TASKS-INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:', {
            —É—Å–ø—ñ—à–Ω–æ: successCount,
            –ø–æ–º–∏–ª–∫–∏: failureCount,
            –≤—Å—å–æ–≥–æ: successCount + failureCount
        });

        // –Ø–∫—â–æ –∂–æ–¥–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–≤—Å—è - —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
        if (successCount === 0) {
            console.error('‚ùå [TASKS-INTEGRATION] –ñ–æ–¥–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –±—É–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!');
            // –ê–ª–µ –Ω–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É - –º–æ–∂–ª–∏–≤–æ —Å–∏—Å—Ç–µ–º–∞ –∑–º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –æ–±–º–µ–∂–µ–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
     */
    TasksIntegration.prototype.initUI = function() {
        console.log('üé® [TASKS-INTEGRATION] === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø UI ===');

        try {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
            this.setUserIdInHeader();

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
            this.showCurrentTab();

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –º–æ–¥—É–ª—ñ–≤
            this.updateModuleStatusUI();

            console.log('‚úÖ [TASKS-INTEGRATION] UI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó UI:', error);
        }
    };

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
     */
    TasksIntegration.prototype.setUserIdInHeader = function() {
        console.log('üè∑Ô∏è [TASKS-INTEGRATION] === setUserIdInHeader START ===');

        const userIdElements = document.querySelectorAll('.user-id-value, #header-user-id');
        console.log('üìä [TASKS-INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è ID:', userIdElements.length);

        userIdElements.forEach((element, index) => {
            if (element) {
                const value = this.state.userId || '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ';
                console.log('üè∑Ô∏è [TASKS-INTEGRATION] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –≤ –µ–ª–µ–º–µ–Ω—Ç ' + index + ':', {
                    element: element,
                    oldValue: element.textContent,
                    newValue: value
                });
                element.textContent = value;
            }
        });

        console.log('‚úÖ [TASKS-INTEGRATION] === setUserIdInHeader COMPLETE ===');
    };

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.updateUserUI = function(user) {
        console.log('üîÑ [TASKS-INTEGRATION] === updateUserUI START ===');
        console.log('üìä [TASKS-INTEGRATION] –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', user);

        try {
            // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userIdElement = document.getElementById('header-user-id');
            if (userIdElement && user) {
                userIdElement.textContent = user.id || user.telegram_id || this.state.userId || '';
            }

            // –ê–≤–∞—Ç–∞—Ä
            const avatarElement = document.querySelector('.profile-avatar');
            if (avatarElement && user?.username) {
                avatarElement.textContent = user.username.charAt(0).toUpperCase();
            }

            // –ë–∞–ª–∞–Ω—Å–∏
            if (user?.balance) {
                const winixElement = document.getElementById('user-winix');
                const ticketsElement = document.getElementById('user-tickets');

                if (winixElement) {
                    winixElement.textContent = user.balance.winix || 0;
                }

                if (ticketsElement) {
                    ticketsElement.textContent = user.balance.tickets || 0;
                }
            }

            console.log('‚úÖ [TASKS-INTEGRATION] UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI:', error);
        }
    };

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –º–æ–¥—É–ª—ñ–≤ –≤ UI
     */
    TasksIntegration.prototype.updateModuleStatusUI = function() {
        console.log('üìä [TASKS-INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –º–æ–¥—É–ª—ñ–≤ –≤ UI');

        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω—É —ñ–Ω–¥–∏–∫–∞—Ü—ñ—é —Å—Ç–∞—Ç—É—Å—É –º–æ–¥—É–ª—ñ–≤
        const statusContainer = document.getElementById('module-status');
        if (statusContainer) {
            const activeModules = Object.values(this.state.moduleStatuses).filter(status => status).length;
            const totalModules = Object.keys(this.state.moduleStatuses).length;

            statusContainer.innerHTML = `
                <div class="module-status-indicator">
                    <span class="status-text">–ú–æ–¥—É–ª—ñ: ${activeModules}/${totalModules}</span>
                    <span class="status-icon ${activeModules === totalModules ? 'all-active' : 'partial-active'}"></span>
                </div>
            `;
        }
    };

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    TasksIntegration.prototype.setupEventHandlers = function() {
        console.log('üéØ [TASKS-INTEGRATION] === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í –ü–û–î–Ü–ô ===');

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        const tabs = document.querySelectorAll('.main-tabs .tab-button');
        console.log(`  üìë [TASKS-INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ ${tabs.length} –≤–∫–ª–∞–¥–æ–∫`);

        tabs.forEach((tab, index) => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();

                const tabName = tab.getAttribute('data-tab');
                console.log(`  üìë [TASKS-INTEGRATION] –ö–ª—ñ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫—É ${index}: ${tabName}`);

                this.switchTab(tabName);
            });
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.state.isInitialized) {
                console.log('üëÅÔ∏è [TASKS-INTEGRATION] –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ—é');
                this.onPageVisible();
            } else {
                console.log('üëÅÔ∏è [TASKS-INTEGRATION] –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞');
                this.onPageHidden();
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
        window.addEventListener('online', () => {
            console.log('üåê [TASKS-INTEGRATION] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
            this.onOnline();
        });

        window.addEventListener('offline', () => {
            console.log('üìµ [TASKS-INTEGRATION] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ');
            this.onOffline();
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        window.addEventListener('beforeunload', () => {
            console.log('üö™ [TASKS-INTEGRATION] –ó–∞–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏');
            this.saveState();
        });

        console.log('‚úÖ [TASKS-INTEGRATION] –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    };

    /**
     * –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
     */
    TasksIntegration.prototype.initialSync = async function() {
        console.log('üîÑ [TASKS-INTEGRATION] === –ü–û–ß–ê–¢–ö–û–í–ê –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø ===');

        try {
            if (window.TasksServices && window.TasksServices.Sync) {
                await window.TasksServices.Sync.syncData();
                console.log('‚úÖ [TASKS-INTEGRATION] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Services –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            } else {
                console.log('‚è∏Ô∏è [TASKS-INTEGRATION] TasksServices –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é');
            }

            this.state.lastSyncTime = Date.now();

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            // –ù–µ –±–ª–æ–∫—É—î–º–æ —Ä–æ–±–æ—Ç—É —Å–∏—Å—Ç–µ–º–∏
        }
    };

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
     */
    TasksIntegration.prototype.startAutoProcesses = function() {
        console.log('‚è∞ [TASKS-INTEGRATION] === –ó–ê–ü–£–°–ö –ê–í–¢–û–ü–†–û–¶–ï–°–Ü–í ===');

        // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
        this.intervals.autoSave = setInterval(() => {
            console.log('üíæ [TASKS-INTEGRATION] –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É');
            this.saveState();
        }, this.config.autoSaveInterval);

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        if (this.state.serverAvailable) {
            this.intervals.sync = setInterval(() => {
                console.log('üîÑ [TASKS-INTEGRATION] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è');
                this.syncData();
            }, this.config.syncInterval);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
        this.intervals.healthCheck = setInterval(() => {
            console.log('üè• [TASKS-INTEGRATION] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è —Å–∏—Å—Ç–µ–º–∏');
            this.performHealthCheck();
        }, this.config.healthCheckInterval);

        console.log('‚úÖ [TASKS-INTEGRATION] –ê–≤—Ç–æ–ø—Ä–æ—Ü–µ—Å–∏ –∑–∞–ø—É—â–µ–Ω–æ');
    };

    /**
     * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏
     */
    TasksIntegration.prototype.switchTab = function(tabName) {
        console.log(`üìë [TASKS-INTEGRATION] === –ü–ï–†–ï–ú–ò–ö–ê–ù–ù–Ø –í–ö–õ–ê–î–ö–ò –ù–ê: ${tabName} ===`);

        const prevTab = this.state.currentTab;
        this.state.currentTab = tabName;

        // –û–Ω–æ–≤–ª—é—î–º–æ Store —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (window.TasksStore) {
            window.TasksStore.actions.setCurrentTab(tabName);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        this.updateTabUI(tabName);

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        this.onTabSwitch(tabName);

        console.log('‚úÖ [TASKS-INTEGRATION] –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∞ –∑', prevTab, '–Ω–∞', tabName);
    };

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –≤–∫–ª–∞–¥–æ–∫
     */
    TasksIntegration.prototype.updateTabUI = function(activeTab) {
        console.log('üé® [TASKS-INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –≤–∫–ª–∞–¥–æ–∫');

        const tabs = document.querySelectorAll('.main-tabs .tab-button');
        const panes = document.querySelectorAll('.main-tab-pane');

        tabs.forEach(tab => {
            const isActive = tab.getAttribute('data-tab') === activeTab;
            tab.classList.toggle('active', isActive);
        });

        panes.forEach(pane => {
            const paneId = pane.id;
            const shouldBeActive = paneId === `${activeTab}-tab`;
            pane.classList.toggle('active', shouldBeActive);
            pane.style.display = shouldBeActive ? 'block' : 'none';
        });
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏
     */
    TasksIntegration.prototype.onTabSwitch = function(tabName) {
        console.log(`üîÑ [TASKS-INTEGRATION] –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);

        try {
            switch(tabName) {
                case 'flex':
                    if (this.managers.flexEarn?.checkWalletConnection) {
                        this.managers.flexEarn.checkWalletConnection();
                    }
                    break;

                case 'daily':
                    if (this.managers.dailyBonus?.updateDailyBonusUI) {
                        this.managers.dailyBonus.updateDailyBonusUI();
                    }
                    break;

                case 'social':
                case 'limited':
                case 'partner':
                    if (this.managers.tasksManager?.updateTasksUI) {
                        this.managers.tasksManager.updateTasksUI();
                    }
                    break;

                default:
                    console.warn(`‚ö†Ô∏è [TASKS-INTEGRATION] –ù–µ–≤—ñ–¥–æ–º–∞ –≤–∫–ª–∞–¥–∫–∞: ${tabName}`);
            }
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
     */
    TasksIntegration.prototype.showCurrentTab = function() {
        console.log('üìë [TASKS-INTEGRATION] –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É:', this.state.currentTab);
        this.updateTabUI(this.state.currentTab);
    };

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
     */
    TasksIntegration.prototype.saveState = function() {
        console.log('üíæ [TASKS-INTEGRATION] === –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –°–¢–ê–ù–£ ===');

        try {
            const stateToSave = {
                userId: this.state.userId,
                currentTab: this.state.currentTab,
                walletConnected: this.state.walletConnected,
                lastSyncTime: this.state.lastSyncTime,
                moduleStatuses: this.state.moduleStatuses,
                timestamp: Date.now()
            };

            localStorage.setItem('tasksIntegrationState', JSON.stringify(stateToSave));
            console.log('‚úÖ [TASKS-INTEGRATION] –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', stateToSave);

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
        }
    };

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
     */
    TasksIntegration.prototype.loadSavedState = function() {
        console.log('üìÇ [TASKS-INTEGRATION] === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ë–ï–†–ï–ñ–ï–ù–û–ì–û –°–¢–ê–ù–£ ===');

        try {
            const savedState = localStorage.getItem('tasksIntegrationState');

            if (savedState) {
                const parsed = JSON.parse(savedState);
                console.log('üìä [TASKS-INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω:', parsed);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Å—Ç–∞–Ω –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if (parsed.userId === this.state.userId) {
                    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–µ—è–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                    this.state.currentTab = parsed.currentTab || 'flex';
                    this.state.walletConnected = parsed.walletConnected || false;
                    this.state.lastSyncTime = parsed.lastSyncTime || null;

                    console.log('‚úÖ [TASKS-INTEGRATION] –°—Ç–∞–Ω –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
                } else {
                    console.log('üîÑ [TASKS-INTEGRATION] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —ñ–≥–Ω–æ—Ä—É—î–º–æ');
                }
            } else {
                console.log('üì≠ [TASKS-INTEGRATION] –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
        }
    };

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
     */
    TasksIntegration.prototype.syncData = async function() {
        console.log('üîÑ [TASKS-INTEGRATION] === –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• ===');

        if (!this.state.serverAvailable) {
            console.log('‚è∏Ô∏è [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é');
            return;
        }

        try {
            if (window.TasksServices && window.TasksServices.Sync) {
                await window.TasksServices.Sync.syncData();
            }

            this.state.lastSyncTime = Date.now();
            console.log('‚úÖ [TASKS-INTEGRATION] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
     */
    TasksIntegration.prototype.performHealthCheck = async function() {
        console.log('üè• [TASKS-INTEGRATION] === –ü–ï–†–ï–í–Ü–†–ö–ê –ó–î–û–†–û–í\'–Ø ===');

        const health = {
            serverAvailable: await this.checkServerAvailability(),
            modulesActive: Object.values(this.state.moduleStatuses).filter(s => s).length,
            errorCount: this.state.errorCount,
            uptime: Date.now() - (this.state.initTime || Date.now()),
            lastSync: this.state.lastSyncTime ? Date.now() - this.state.lastSyncTime : null
        };

        console.log('üìä [TASKS-INTEGRATION] –°—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤\'—è:', health);

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
        if (health.serverAvailable && !this.state.serverAvailable) {
            console.log('üåê [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏–π!');
            this.state.serverAvailable = true;
            this.hideOfflineNotice();
            await this.syncData();
        }

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (!health.serverAvailable && this.state.serverAvailable) {
            console.log('üìµ [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä —Å—Ç–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!');
            this.state.serverAvailable = false;
            this.showOfflineNotice();
        }

        return health;
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É Store
     */
    TasksIntegration.prototype.handleStateChange = function(state, prevState, action) {
        console.log('üîÑ [TASKS-INTEGRATION] Store state –∑–º—ñ–Ω–∏–≤—Å—è:', action.type);

        // –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–º—ñ–Ω–∏
        if (state.wallet.connected !== prevState.wallet.connected) {
            console.log('üëõ [TASKS-INTEGRATION] –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è –∑–º—ñ–Ω–∏–≤—Å—è:', state.wallet.connected);
            this.state.walletConnected = state.wallet.connected;
        }

        if (state.ui.currentTab !== prevState.ui.currentTab) {
            console.log('üìë [TASKS-INTEGRATION] –í–∫–ª–∞–¥–∫–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è —á–µ—Ä–µ–∑ Store:', state.ui.currentTab);
            this.state.currentTab = state.ui.currentTab;
            this.updateTabUI(state.ui.currentTab);
        }
    };

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –≤–∏–¥–∏–º–æ—Å—Ç—ñ
     */
    TasksIntegration.prototype.onPageVisible = function() {
        console.log('üëÅÔ∏è [TASKS-INTEGRATION] === –°–¢–û–†–Ü–ù–ö–ê –í–ò–î–ò–ú–ê ===');

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ —è–∫—â–æ –¥–∞–≤–Ω–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞–ª–∏
        if (this.state.lastSyncTime) {
            const timeSinceSync = Date.now() - this.state.lastSyncTime;
            if (timeSinceSync > 60000) { // 1 —Ö–≤–∏–ª–∏–Ω–∞
                this.syncData();
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
        this.onTabSwitch(this.state.currentTab);
    };

    TasksIntegration.prototype.onPageHidden = function() {
        console.log('üëÅÔ∏è [TASKS-INTEGRATION] === –°–¢–û–†–Ü–ù–ö–ê –ü–†–ò–•–û–í–ê–ù–ê ===');
        this.saveState();
    };

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫–∏ –º–µ—Ä–µ–∂—ñ
     */
    TasksIntegration.prototype.onOnline = async function() {
        console.log('üåê [TASKS-INTEGRATION] === –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –í–Ü–î–ù–û–í–õ–ï–ù–û ===');

        this.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ', 'success');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤–µ—Ä
        this.state.serverAvailable = await this.checkServerAvailability();

        if (this.state.serverAvailable) {
            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
            await this.syncData();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–ø—Ä–æ—Ü–µ—Å–∏ —è–∫—â–æ –≤–æ–Ω–∏ –∑—É–ø–∏–Ω–µ–Ω—ñ
            if (!this.intervals.sync) {
                this.intervals.sync = setInterval(() => {
                    this.syncData();
                }, this.config.syncInterval);
            }
        }
    };

    TasksIntegration.prototype.onOffline = function() {
        console.log('üìµ [TASKS-INTEGRATION] === –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –í–¢–†–ê–ß–ï–ù–û ===');

        this.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞', 'warning');
        this.state.serverAvailable = false;

        // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        if (this.intervals.sync) {
            clearInterval(this.intervals.sync);
            this.intervals.sync = null;
        }
    };

    /**
     * UI –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    TasksIntegration.prototype.showToast = function(message, type = 'info') {
        console.log(`üí¨ [TASKS-INTEGRATION] Toast: ${type} - ${message}`);

        if (window.TasksUtils && window.TasksUtils.showToast) {
            window.TasksUtils.showToast(message, type);
        } else {
            // Fallback –Ω–∞ alert
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] TasksUtils –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ console');
            console.log(`[${type.toUpperCase()}] ${message}`);
        }
    };

    TasksIntegration.prototype.showOfflineNotice = function() {
        console.log('üìµ [TASKS-INTEGRATION] –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');

        const notice = document.getElementById('offline-notice');
        if (notice) {
            notice.style.display = 'block';
        } else {
            this.showToast('–ü—Ä–∞—Ü—é—î–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ', 'warning');
        }
    };

    TasksIntegration.prototype.hideOfflineNotice = function() {
        console.log('üåê [TASKS-INTEGRATION] –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');

        const notice = document.getElementById('offline-notice');
        if (notice) {
            notice.style.display = 'none';
        }
    };

    TasksIntegration.prototype.showCriticalError = function(message) {
        console.error('üí• [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', message);

        const errorDiv = document.createElement('div');
        errorDiv.className = 'critical-error-overlay';
        errorDiv.innerHTML = `
            <div class="critical-error-content">
                <div class="error-icon">‚ö†Ô∏è</div>
                <h2>–ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∏</h2>
                <p>${message}</p>
                <button onclick="window.location.reload()">–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É</button>
            </div>
        `;

        document.body.appendChild(errorDiv);
    };

    /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
     */
    TasksIntegration.prototype.destroy = function() {
        console.log('üóëÔ∏è [TASKS-INTEGRATION] === –ó–ù–ò–©–ï–ù–ù–Ø –°–ò–°–¢–ï–ú–ò ===');

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        this.saveState();

        // –û—á–∏—â–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏
        Object.values(this.intervals).forEach(interval => {
            if (interval) clearInterval(interval);
        });

        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –≤—ñ–¥ Store
        if (this._storeUnsubscribe) {
            this._storeUnsubscribe();
        }

        // –ó–Ω–∏—â—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
        Object.entries(this.managers).forEach(([name, manager]) => {
            if (manager && typeof manager.destroy === 'function') {
                try {
                    console.log(`üóëÔ∏è [TASKS-INTEGRATION] –ó–Ω–∏—â–µ–Ω–Ω—è ${name}...`);
                    manager.destroy();
                } catch (error) {
                    console.error(`‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è ${name}:`, error);
                }
            }
        });

        console.log('‚úÖ [TASKS-INTEGRATION] –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∏—â–µ–Ω–∞');
    };

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏
     */
    TasksIntegration.prototype.getStatistics = function() {
        const stats = {
            userId: this.state.userId,
            isInitialized: this.state.isInitialized,
            serverAvailable: this.state.serverAvailable,
            moduleStatuses: this.state.moduleStatuses,
            activeModules: Object.values(this.state.moduleStatuses).filter(s => s).length,
            totalModules: Object.keys(this.state.moduleStatuses).length,
            errorCount: this.state.errorCount,
            lastSyncTime: this.state.lastSyncTime,
            uptime: Date.now() - (this.state.initTime || Date.now())
        };

        console.log('üìä [TASKS-INTEGRATION] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏:', stats);
        return stats;
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä
    const integration = new TasksIntegration();

    console.log('‚úÖ [TASKS-INTEGRATION] –ú–æ–¥—É–ª—å TasksIntegration –≥–æ—Ç–æ–≤–∏–π –¥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return integration;

})();

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
window.initTasksSystem = function() {
    console.log('üé¨ [GLOBAL] === initTasksSystem START ===');
    console.log('üïê [GLOBAL] –ß–∞—Å –≤–∏–∫–ª–∏–∫—É:', new Date().toISOString());

    return new Promise(function(resolve, reject) {
        try {
            console.log('üèóÔ∏è [GLOBAL] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É TasksIntegration...');

            console.log('üöÄ [GLOBAL] –ó–∞–ø—É—Å–∫ integration.init()...');
            window.TasksIntegration.init()
                .then(function(result) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
                    window.TasksIntegrationInstance = result;
                    console.log('‚úÖ [GLOBAL] –ï–∫–∑–µ–º–ø–ª—è—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ window.TasksIntegrationInstance');

                    console.log('üèÅ [GLOBAL] === initTasksSystem SUCCESS ===');
                    resolve(result);
                })
                .catch(function(error) {
                    console.error('üí• [GLOBAL] === initTasksSystem FAILED ===');
                    console.error('üí• [GLOBAL] –ü–æ–º–∏–ª–∫–∞:', error);
                    reject(error);
                });
        } catch (error) {
            console.error('üí• [GLOBAL] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ try-catch –±–ª–æ—Ü—ñ');
            console.error('üí• [GLOBAL] –î–µ—Ç–∞–ª—ñ:', error);
            reject(error);
        }
    });
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üìÑ [GLOBAL] DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...');

    try {
        window.tasksIntegration = await window.initTasksSystem();

        if (window.tasksIntegration) {
            console.log('üéâ [GLOBAL] –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–¥–∞–Ω—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
        } else {
            console.log('‚ö†Ô∏è [GLOBAL] –°–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∂–∏–º—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
        }
    } catch (error) {
        console.error('‚ùå [GLOBAL] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error);
    }
});

console.log('‚úÖ [GLOBAL] window.initTasksSystem —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞');