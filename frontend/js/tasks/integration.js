/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - Ultra Universal Version
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø—ñ–¥–º–æ–¥—É–ª—ñ–≤ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≥–Ω—É—á–∫—ñ—Å—Ç—é
 */

window.TasksIntegration = (function() {
    'use strict';

    console.log('üöÄ [TASKS-INTEGRATION] ===== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ú–û–î–£–õ–Ø TASKS INTEGRATION =====');
    console.log('üì¶ [TASKS-INTEGRATION] –í–µ—Ä—Å—ñ—è: Ultra Universal 2.0');
    console.log('üïê [TASKS-INTEGRATION] –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', new Date().toISOString());

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
     */
    function TasksIntegration() {
        console.log('üèóÔ∏è [TASKS-INTEGRATION] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É TasksIntegration');

        // –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
        this.state = {
            userId: null,
            isInitialized: false,
            initializationAttempts: 0,
            maxRetries: 5,
            currentTab: 'flex',
            walletConnected: false,
            serverAvailable: false,
            moduleStatuses: {
                flexEarn: false,
                dailyBonus: false,
                tasksManager: false,
                taskVerification: false,
                walletChecker: false,
                services: false,
                store: false,
                api: false
            },
            lastSyncTime: null,
            errorCount: 0
        };

        // –ú–µ–Ω–µ–¥–∂–µ—Ä–∏
        this.managers = {
            flexEarn: null,
            dailyBonus: null,
            tasksManager: null,
            taskVerification: null,
            walletChecker: null
        };

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        this.config = {
            autoSaveInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            syncInterval: 60000,     // 1 —Ö–≤–∏–ª–∏–Ω–∞
            healthCheckInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            retryDelay: 5000,        // 5 —Å–µ–∫—É–Ω–¥
            debugMode: false,
            fallbackMode: false
        };

        // –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏
        this.intervals = {
            autoSave: null,
            sync: null,
            healthCheck: null
        };

        console.log('‚úÖ [TASKS-INTEGRATION] –ï–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ:', this);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≥–Ω—É—á–∫—ñ—Å—Ç—é
     */
    TasksIntegration.prototype.init = async function() {
        console.log('üéØ [TASKS-INTEGRATION] ===== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –°–ò–°–¢–ï–ú–ò =====');
        console.log('üïê [TASKS-INTEGRATION] –ß–∞—Å –ø–æ—á–∞—Ç–∫—É:', new Date().toISOString());
        console.log('üìä [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó #' + (this.state.initializationAttempts + 1));

        this.state.initializationAttempts++;

        try {
            // –ö–†–û–ö 0: –ß–µ–∫–∞—î–º–æ –Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
            console.log('‚è≥ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 0: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—ñ–≤...');

            let moduleWaitAttempts = 0;
            const maxWaitAttempts = 20; // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º (20 * 500ms)

            while (moduleWaitAttempts < maxWaitAttempts) {
                const modulesReady = (
                    window.WinixAPI &&
                    typeof window.WinixAPI.apiRequest === 'function' &&
                    window.TasksAPI &&
                    window.TasksConstants &&
                    window.TasksUtils
                );

                if (modulesReady) {
                    console.log('‚úÖ [TASKS-INTEGRATION] –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –º–æ–¥—É–ª—ñ –≥–æ—Ç–æ–≤—ñ');
                    break;
                }

                moduleWaitAttempts++;
                console.log(`‚è≥ [TASKS-INTEGRATION] –ß–µ–∫–∞—î–º–æ –Ω–∞ –º–æ–¥—É–ª—ñ... (${moduleWaitAttempts}/${maxWaitAttempts})`);

                // –ü–æ–∫–∞–∑—É—î–º–æ —è–∫—ñ –º–æ–¥—É–ª—ñ —â–µ –Ω–µ –≥–æ—Ç–æ–≤—ñ
                if (moduleWaitAttempts % 4 === 0) {
                    console.log('üìä [TASKS-INTEGRATION] –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—ñ–≤:', {
                        WinixAPI: !!window.WinixAPI,
                        WinixAPI_apiRequest: !!(window.WinixAPI && typeof window.WinixAPI.apiRequest === 'function'),
                        TasksAPI: !!window.TasksAPI,
                        TasksConstants: !!window.TasksConstants,
                        TasksUtils: !!window.TasksUtils
                    });
                }

                await new Promise(resolve => setTimeout(resolve, 500));
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—è
            if (!window.WinixAPI || !window.TasksAPI) {
                console.error('‚ùå [TASKS-INTEGRATION] –ö—Ä–∏—Ç–∏—á–Ω—ñ –º–æ–¥—É–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—è');

                if (this.state.initializationAttempts < this.state.maxRetries) {
                    console.log('‚è≥ [TASKS-INTEGRATION] –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ' + (this.config.retryDelay/1000) + ' —Å–µ–∫—É–Ω–¥...');
                    setTimeout(() => this.init(), this.config.retryDelay);
                    return null;
                } else {
                    this.showCriticalError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ');
                    throw new Error('–ö—Ä–∏—Ç–∏—á–Ω—ñ –º–æ–¥—É–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—è');
                }
            }

            // –ö–†–û–ö 1: –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            console.log('üîç [TASKS-INTEGRATION] –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...');
            const envCheck = this.checkEnvironment();
            console.log('üìä [TASKS-INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:', envCheck);

            // –ö–†–û–ö 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è User ID –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            console.log('üîç [TASKS-INTEGRATION] –ö—Ä–æ–∫ 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
            this.state.userId = await this.getUserId();
            console.log('üìä [TASKS-INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç getUserId:', {
                userId: this.state.userId,
                type: typeof this.state.userId,
                isValid: !!this.state.userId
            });

            if (!this.state.userId) {
                console.error('‚ùå [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

                if (this.state.initializationAttempts < this.state.maxRetries) {
                    console.log('‚è≥ [TASKS-INTEGRATION] –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ' + (this.config.retryDelay/1000) + ' —Å–µ–∫—É–Ω–¥...');
                    setTimeout(() => this.init(), this.config.retryDelay);
                    return null;
                } else {
                    this.showCriticalError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è ' + this.state.maxRetries + ' —Å–ø—Ä–æ–±');
                    throw new Error('User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–±');
                }
            }

            console.log('‚úÖ [TASKS-INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ:', this.state.userId);

            // –ö–†–û–ö 3: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            console.log('üìÇ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 3: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É...');
            this.loadSavedState();

            // –ö–†–û–ö 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—ñ–≤
            console.log('üîç [TASKS-INTEGRATION] –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤...');
            this.checkModulesAvailability();

            // –ö–†–û–ö 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üåê [TASKS-INTEGRATION] –ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
            this.state.serverAvailable = await this.checkServerAvailability();

            if (!this.state.serverAvailable) {
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ');
                this.config.fallbackMode = true;
                this.showOfflineNotice();
            }

            // –ö–†–û–ö 6: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            console.log('üè™ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 6: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store...');
            await this.initStore();

            // –ö–†–û–ö 7: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ fallback)
            if (this.state.serverAvailable) {
                console.log('üîê [TASKS-INTEGRATION] –ö—Ä–æ–∫ 7: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
                await this.authenticateUser();
            } else {
                console.log('‚è∏Ô∏è [TASKS-INTEGRATION] –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é - –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
            }

            // –ö–†–û–ö 8: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
            console.log('üîß [TASKS-INTEGRATION] –ö—Ä–æ–∫ 8: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...');
            await this.initializeManagers();

            // –ö–†–û–ö 9: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
            console.log('üé® [TASKS-INTEGRATION] –ö—Ä–æ–∫ 9: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI...');
            this.initUI();

            // –ö–†–û–ö 10: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
            console.log('üéØ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 10: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π...');
            this.setupEventHandlers();

            // –ö–†–û–ö 11: –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
            if (this.state.serverAvailable) {
                console.log('üîÑ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 11: –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...');
                await this.initialSync();
            }

            // –ö–†–û–ö 12: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
            console.log('‚è∞ [TASKS-INTEGRATION] –ö—Ä–æ–∫ 12: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø—Ä–æ—Ü–µ—Å—ñ–≤...');
            this.startAutoProcesses();

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            this.state.isInitialized = true;
            this.state.initializationAttempts = 0;

            console.log('üéâ [TASKS-INTEGRATION] ===== –°–ò–°–¢–ï–ú–ê –£–°–ü–Ü–®–ù–û –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–ê =====');
            console.log('üìä [TASKS-INTEGRATION] –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:', {
                userId: this.state.userId,
                serverAvailable: this.state.serverAvailable,
                moduleStatuses: this.state.moduleStatuses,
                fallbackMode: this.config.fallbackMode
            });

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
            this.saveState();

            return this;

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á:', error);
            this.state.errorCount++;

            if (this.state.initializationAttempts < this.state.maxRetries) {
                console.log('‚è≥ [TASKS-INTEGRATION] –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —á–µ—Ä–µ–∑ ' + (this.config.retryDelay/1000) + ' —Å–µ–∫—É–Ω–¥...');
                setTimeout(() => this.init(), this.config.retryDelay);
            } else {
                this.showCriticalError('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–º–æ–≥–ª–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è: ' + error.message);
            }

            throw error;
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
     */
    TasksIntegration.prototype.checkEnvironment = function() {
        const checks = {
            telegram: !!(window.Telegram && window.Telegram.WebApp),
            tonconnect: !!window.TON_CONNECT_UI,
            winixApi: !!window.WinixAPI,
            tasksApi: !!window.TasksAPI,
            localStorage: this.testLocalStorage(),
            online: navigator.onLine
        };

        console.log('üîç [TASKS-INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:', checks);
        return checks;
    };

    /**
     * –¢–µ—Å—Ç localStorage
     */
    TasksIntegration.prototype.testLocalStorage = function() {
        try {
            const test = '__localStorage_test__';
            localStorage.setItem(test, test);
            localStorage.removeItem(test);
            return true;
        } catch(e) {
            return false;
        }
    };

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     */
    TasksIntegration.prototype.getUserId = async function() {
        console.log('üîç [TASKS-INTEGRATION] –ü–æ—à—É–∫ User ID...');

        // –°–ø—Ä–æ–±–∞ 1: WinixAPI
        if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
            try {
                const apiUserId = window.WinixAPI.getUserId();
                if (apiUserId) {
                    console.log('‚úÖ [TASKS-INTEGRATION] User ID –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ WinixAPI:', apiUserId);
                    return apiUserId;
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —á–µ—Ä–µ–∑ WinixAPI:', e);
            }
        }

        // –°–ø—Ä–æ–±–∞ 2: Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            try {
                const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
                if (tgUser && tgUser.id) {
                    const tgUserId = tgUser.id.toString();
                    console.log('‚úÖ [TASKS-INTEGRATION] User ID –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram:', tgUserId);
                    return tgUserId;
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —á–µ—Ä–µ–∑ Telegram:', e);
            }
        }

        // –°–ø—Ä–æ–±–∞ 3: LocalStorage
        try {
            const localUserId = localStorage.getItem('telegram_user_id') || localStorage.getItem('userId');
            if (localUserId) {
                console.log('‚úÖ [TASKS-INTEGRATION] User ID –∑–Ω–∞–π–¥–µ–Ω–æ –≤ localStorage:', localUserId);
                return localUserId;
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è localStorage:', e);
        }

        // –°–ø—Ä–æ–±–∞ 4: URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const urlUserId = urlParams.get('user_id') || urlParams.get('userId') || urlParams.get('id');
            if (urlUserId) {
                console.log('‚úÖ [TASKS-INTEGRATION] User ID –∑–Ω–∞–π–¥–µ–Ω–æ –≤ URL:', urlUserId);
                return urlUserId;
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:', e);
        }

        console.error('‚ùå [TASKS-INTEGRATION] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—ñ');
        return null;
    };

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
     */
    TasksIntegration.prototype.loadSavedState = function() {
        try {
            const savedState = localStorage.getItem('tasksIntegrationState');
            if (savedState) {
                const parsed = JSON.parse(savedState);
                console.log('üìÇ [TASKS-INTEGRATION] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω:', parsed);

                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ –¥–µ—è–∫—ñ –ø–æ–ª—è
                this.state.walletConnected = parsed.walletConnected || false;
                this.state.currentTab = parsed.currentTab || 'flex';
                this.state.lastSyncTime = parsed.lastSyncTime || null;
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', e);
        }
    };

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
     */
    TasksIntegration.prototype.saveState = function() {
        try {
            const stateToSave = {
                walletConnected: this.state.walletConnected,
                currentTab: this.state.currentTab,
                lastSyncTime: this.state.lastSyncTime,
                savedAt: new Date().toISOString()
            };

            localStorage.setItem('tasksIntegrationState', JSON.stringify(stateToSave));
            console.log('üíæ [TASKS-INTEGRATION] –°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
        } catch (e) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', e);
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—ñ–≤
     */
    TasksIntegration.prototype.checkModulesAvailability = function() {
        this.state.moduleStatuses = {
            flexEarn: !!(window.FlexEarn || (window.TasksModules && window.TasksModules.FlexEarn)),
            dailyBonus: !!(window.DailyBonus || (window.TasksModules && window.TasksModules.DailyBonus)),
            tasksManager: !!(window.TasksManager || (window.TasksModules && window.TasksModules.TasksManager)),
            taskVerification: !!(window.TaskVerification || (window.TasksModules && window.TasksModules.TaskVerification)),
            walletChecker: !!(window.WalletChecker || (window.TasksModules && window.TasksModules.WalletChecker)),
            services: !!window.TasksServices,
            store: !!window.TasksStore,
            api: !!window.TasksAPI
        };

        console.log('üìä [TASKS-INTEGRATION] –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—ñ–≤:', this.state.moduleStatuses);
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
     */
    TasksIntegration.prototype.checkServerAvailability = async function() {
        if (!window.TasksAPI) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] TasksAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return false;
        }

        try {
            const startTime = Date.now();
            const result = await window.TasksAPI.checkServerHealth();
            const responseTime = Date.now() - startTime;

            console.log(`‚úÖ [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ ${responseTime}ms)`);
            return true;
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
            return false;
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store
     */
    TasksIntegration.prototype.initStore = async function() {
        if (!window.TasksStore) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] TasksStore –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return;
        }

        try {
            console.log('üè™ [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store...');

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ userId
            window.TasksStore.setUserId(this.state.userId);

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
            await window.TasksStore.loadFromLocalStorage();

            console.log('‚úÖ [TASKS-INTEGRATION] Store —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Store:', error);
        }
    };

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.authenticateUser = async function() {
        if (!window.WinixAuth) {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION] WinixAuth –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return;
        }

        try {
            console.log('üîê [TASKS-INTEGRATION] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
            const authResult = await window.WinixAuth.init();
            console.log('‚úÖ [TASKS-INTEGRATION] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π:', authResult);
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
            throw error;
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
     */
    TasksIntegration.prototype.initializeManagers = async function() {
        console.log('üîß [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...');

        // FlexEarn
        if (this.state.moduleStatuses.flexEarn) {
            try {
                const FlexEarnModule = window.FlexEarn || (window.TasksModules && window.TasksModules.FlexEarn);
                if (FlexEarnModule) {
                    this.managers.flexEarn = new FlexEarnModule(this.state.userId);
                    await this.managers.flexEarn.init();
                    console.log('‚úÖ [TASKS-INTEGRATION] FlexEarn —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                }
            } catch (e) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó FlexEarn:', e);
            }
        }

        // DailyBonus
        if (this.state.moduleStatuses.dailyBonus) {
            try {
                const DailyBonusModule = window.DailyBonus || (window.TasksModules && window.TasksModules.DailyBonus);
                if (DailyBonusModule) {
                    this.managers.dailyBonus = new DailyBonusModule(this.state.userId);
                    await this.managers.dailyBonus.init();
                    console.log('‚úÖ [TASKS-INTEGRATION] DailyBonus —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                }
            } catch (e) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó DailyBonus:', e);
            }
        }

        // TasksManager
        if (this.state.moduleStatuses.tasksManager) {
            try {
                const TasksManagerModule = window.TasksManager || (window.TasksModules && window.TasksModules.TasksManager);
                if (TasksManagerModule) {
                    this.managers.tasksManager = new TasksManagerModule(this.state.userId);
                    await this.managers.tasksManager.init();
                    console.log('‚úÖ [TASKS-INTEGRATION] TasksManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                }
            } catch (e) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TasksManager:', e);
            }
        }

        // TaskVerification
        if (this.state.moduleStatuses.taskVerification) {
            try {
                const TaskVerificationModule = window.TaskVerification || (window.TasksModules && window.TasksModules.TaskVerification);
                if (TaskVerificationModule) {
                    this.managers.taskVerification = new TaskVerificationModule(this.state.userId);
                    console.log('‚úÖ [TASKS-INTEGRATION] TaskVerification —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                }
            } catch (e) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TaskVerification:', e);
            }
        }

        // WalletChecker
        if (this.state.moduleStatuses.walletChecker) {
            try {
                const WalletCheckerModule = window.WalletChecker || (window.TasksModules && window.TasksModules.WalletChecker);
                if (WalletCheckerModule) {
                    this.managers.walletChecker = new WalletCheckerModule(this.state.userId);
                    console.log('‚úÖ [TASKS-INTEGRATION] WalletChecker —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                }
            } catch (e) {
                console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WalletChecker:', e);
            }
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
     */
    TasksIntegration.prototype.initUI = function() {
        console.log('üé® [TASKS-INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI...');

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ loader —è–∫—â–æ —î
        const loader = document.getElementById('loader');
        if (loader) {
            loader.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const mainContent = document.getElementById('main-content') || document.querySelector('.container');
        if (mainContent) {
            mainContent.style.display = 'block';
        }

        // –ê–∫—Ç–∏–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É
        this.switchTab(this.state.currentTab);

        console.log('‚úÖ [TASKS-INTEGRATION] UI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    };

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    TasksIntegration.prototype.setupEventHandlers = function() {
        console.log('üéØ [TASKS-INTEGRATION] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–∞–±—ñ–≤
        const tabButtons = document.querySelectorAll('[data-tab]');
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const tabId = button.getAttribute('data-tab');
                this.switchTab(tabId);
            });
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ online/offline
        window.addEventListener('online', () => this.handleOnline());
        window.addEventListener('offline', () => this.handleOffline());

        // –û–±—Ä–æ–±–Ω–∏–∫ visibility change
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                this.handleVisibilityChange();
            }
        });

        // Custom events
        document.addEventListener('wallet-connected', (e) => this.handleWalletConnected(e));
        document.addEventListener('wallet-disconnected', (e) => this.handleWalletDisconnected(e));
        document.addEventListener('task-completed', (e) => this.handleTaskCompleted(e));
        document.addEventListener('balance-updated', (e) => this.handleBalanceUpdated(e));

        console.log('‚úÖ [TASKS-INTEGRATION] –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    };

    /**
     * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
     */
    TasksIntegration.prototype.switchTab = function(tabId) {
        console.log('üîÑ [TASKS-INTEGRATION] –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabId);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
        this.state.currentTab = tabId;
        this.saveState();

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        const allTabs = document.querySelectorAll('.tab-content');
        const allButtons = document.querySelectorAll('[data-tab]');

        allTabs.forEach(tab => {
            tab.classList.remove('active');
            if (tab.id === tabId || tab.getAttribute('data-tab-content') === tabId) {
                tab.classList.add('active');
            }
        });

        allButtons.forEach(button => {
            button.classList.remove('active');
            if (button.getAttribute('data-tab') === tabId) {
                button.classList.add('active');
            }
        });

        // –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        switch(tabId) {
            case 'flex':
                if (this.managers.flexEarn) {
                    this.managers.flexEarn.onTabActivated();
                }
                break;
            case 'daily':
                if (this.managers.dailyBonus) {
                    this.managers.dailyBonus.onTabActivated();
                }
                break;
            case 'tasks':
                if (this.managers.tasksManager) {
                    this.managers.tasksManager.onTabActivated();
                }
                break;
        }
    };

    /**
     * –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
     */
    TasksIntegration.prototype.initialSync = async function() {
        console.log('üîÑ [TASKS-INTEGRATION] –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...');

        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (window.TasksServices && window.TasksServices.syncUserData) {
                await window.TasksServices.syncUserData(this.state.userId);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            this.state.lastSyncTime = new Date().toISOString();
            this.saveState();

            console.log('‚úÖ [TASKS-INTEGRATION] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
        }
    };

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
     */
    TasksIntegration.prototype.startAutoProcesses = function() {
        console.log('‚è∞ [TASKS-INTEGRATION] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤...');

        // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        this.intervals.autoSave = setInterval(() => {
            this.saveState();
        }, this.config.autoSaveInterval);

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
        if (this.state.serverAvailable) {
            this.intervals.sync = setInterval(() => {
                this.syncData();
            }, this.config.syncInterval);
        }

        // Health check
        this.intervals.healthCheck = setInterval(() => {
            this.performHealthCheck();
        }, this.config.healthCheckInterval);

        console.log('‚úÖ [TASKS-INTEGRATION] –ê–≤—Ç–æ–ø—Ä–æ—Ü–µ—Å–∏ –∑–∞–ø—É—â–µ–Ω–æ');
    };

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
     */
    TasksIntegration.prototype.syncData = async function() {
        if (!this.state.serverAvailable) return;

        try {
            console.log('üîÑ [TASKS-INTEGRATION] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...');

            if (window.TasksServices && window.TasksServices.syncUserData) {
                await window.TasksServices.syncUserData(this.state.userId);
                this.state.lastSyncTime = new Date().toISOString();
                this.saveState();
            }
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
        }
    };

    /**
     * Health check
     */
    TasksIntegration.prototype.performHealthCheck = async function() {
        const wasAvailable = this.state.serverAvailable;
        this.state.serverAvailable = await this.checkServerAvailability();

        if (!wasAvailable && this.state.serverAvailable) {
            console.log('üü¢ [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏–π');
            this.handleOnline();
        } else if (wasAvailable && !this.state.serverAvailable) {
            console.log('üî¥ [TASKS-INTEGRATION] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            this.handleOffline();
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω
     */
    TasksIntegration.prototype.handleOnline = function() {
        console.log('üü¢ [TASKS-INTEGRATION] –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω');

        this.hideOfflineNotice();
        this.config.fallbackMode = false;

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        this.syncData();

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏
        if (!this.intervals.sync) {
            this.intervals.sync = setInterval(() => {
                this.syncData();
            }, this.config.syncInterval);
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –æ—Ñ–ª–∞–π–Ω
     */
    TasksIntegration.prototype.handleOffline = function() {
        console.log('üî¥ [TASKS-INTEGRATION] –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');

        this.showOfflineNotice();
        this.config.fallbackMode = true;

        // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
        if (this.intervals.sync) {
            clearInterval(this.intervals.sync);
            this.intervals.sync = null;
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
     */
    TasksIntegration.prototype.handleVisibilityChange = function() {
        console.log('üëÅÔ∏è [TASKS-INTEGRATION] –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–æ–¥–∞—Ç–∫—É');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–∞
        this.performHealthCheck();

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        const timeSinceLastSync = Date.now() - new Date(this.state.lastSyncTime).getTime();
        if (timeSinceLastSync > 60000) { // –ë—ñ–ª—å—à–µ —Ö–≤–∏–ª–∏–Ω–∏
            this.syncData();
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    TasksIntegration.prototype.handleWalletConnected = function(event) {
        console.log('üíº [TASKS-INTEGRATION] –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', event.detail);

        this.state.walletConnected = true;
        this.saveState();

        // –û–ø–æ–≤—ñ—â–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
        if (this.managers.flexEarn) {
            this.managers.flexEarn.onWalletConnected(event.detail);
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
     */
    TasksIntegration.prototype.handleWalletDisconnected = function(event) {
        console.log('üíº [TASKS-INTEGRATION] –ì–∞–º–∞–Ω–µ—Ü—å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');

        this.state.walletConnected = false;
        this.saveState();

        // –û–ø–æ–≤—ñ—â–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
        if (this.managers.flexEarn) {
            this.managers.flexEarn.onWalletDisconnected();
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    TasksIntegration.prototype.handleTaskCompleted = function(event) {
        console.log('‚úÖ [TASKS-INTEGRATION] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ:', event.detail);

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
        this.syncData();
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
     */
    TasksIntegration.prototype.handleBalanceUpdated = function(event) {
        console.log('üí∞ [TASKS-INTEGRATION] –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ:', event.detail);

        // –ú–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏ UI –∞–±–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ —ñ–Ω—à—ñ –¥—ñ—ó
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
     */
    TasksIntegration.prototype.showOfflineNotice = function() {
        const notice = document.getElementById('offline-notice');
        if (notice) {
            notice.style.display = 'block';
        } else {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            const div = document.createElement('div');
            div.id = 'offline-notice';
            div.className = 'offline-notice';
            div.innerHTML = '‚ö†Ô∏è –ü—Ä–∞—Ü—é—î–º–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.';
            document.body.insertBefore(div, document.body.firstChild);
        }
    };

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
     */
    TasksIntegration.prototype.hideOfflineNotice = function() {
        const notice = document.getElementById('offline-notice');
        if (notice) {
            notice.style.display = 'none';
        }
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
     */
    TasksIntegration.prototype.showCriticalError = function(message) {
        console.error('üí• [TASKS-INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', message);

        const errorDiv = document.createElement('div');
        errorDiv.className = 'critical-error';
        errorDiv.innerHTML = `
            <h3>‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞</h3>
            <p>${message}</p>
            <button onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</button>
        `;

        document.body.innerHTML = '';
        document.body.appendChild(errorDiv);
    };

    /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
     */
    TasksIntegration.prototype.destroy = function() {
        console.log('üßπ [TASKS-INTEGRATION] –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤...');

        // –ó—É–ø–∏–Ω—è—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏
        Object.values(this.intervals).forEach(interval => {
            if (interval) clearInterval(interval);
        });

        // –ó–Ω–∏—â—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
        Object.values(this.managers).forEach(manager => {
            if (manager && typeof manager.destroy === 'function') {
                manager.destroy();
            }
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        this.saveState();

        console.log('‚úÖ [TASKS-INTEGRATION] –†–µ—Å—É—Ä—Å–∏ –æ—á–∏—â–µ–Ω–æ');
    };

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    return TasksIntegration;

})();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
console.log('‚úÖ [TASKS-INTEGRATION] –ú–æ–¥—É–ª—å TasksIntegration –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');