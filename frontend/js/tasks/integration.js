/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - Production Version
 * –ö–æ–æ—Ä–¥–∏–Ω—É—î —Ä–æ–±–æ—Ç—É –≤—Å—ñ—Ö –ø—ñ–¥–º–æ–¥—É–ª—ñ–≤ –∑ proper error handling —Ç–∞ server readiness check
 */

window.TasksIntegration = (function() {
    'use strict';

    console.log('üöÄ [TasksIntegration] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–ô–ù–û–ì–û –ú–û–î–£–õ–Ø (PRODUCTION) =====');

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
     */
    function TasksIntegration() {
        console.log('üîß [TasksIntegration] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ TasksIntegration');

        this.managers = {
            flexEarn: null,
            dailyBonus: null,
            tasks: null,
            verification: null,
            tasksManager: null,
            walletChecker: null
        };

        this.state = {
            userId: null,
            isInitialized: false,
            currentTab: 'flex',
            walletConnected: false,
            isAuthenticating: false,
            serverAvailable: false,
            initializationAttempts: 0,
            maxRetries: 3
        };

        this.config = {
            autoSaveInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            syncInterval: 60000,     // 1 —Ö–≤–∏–ª–∏–Ω–∞
            debugMode: window.TasksConstants?.DEBUG?.ENABLED || false,
            serverCheckTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            retryDelay: 5000 // 5 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
        };

        console.log('üìä [TasksIntegration] –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', this.config);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
     */
    TasksIntegration.prototype.checkServerAvailability = async function() {
        console.log('üîç [TasksIntegration] === –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–Ü –°–ï–†–í–ï–†–ê ===');

        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π API –¥–ª—è ping-–∑–∞–ø–∏—Ç—É
            if (!window.WinixAPI || typeof window.WinixAPI.apiRequest !== 'function') {
                console.error('‚ùå [TasksIntegration] –ë–∞–∑–æ–≤–∏–π API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
                return false;
            }

            // –ü—Ä–æ—Å—Ç–∏–π ping –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
            const response = await Promise.race([
                window.WinixAPI.apiRequest('api/ping', 'GET', null, {
                    suppressErrors: true,
                    timeout: this.config.serverCheckTimeout
                }),
                new Promise((_, reject) =>
                    setTimeout(() => reject(new Error('Server check timeout')), this.config.serverCheckTimeout)
                )
            ]);

            if (response && (response.status === 'success' || response.pong)) {
                console.log('‚úÖ [TasksIntegration] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π');
                this.state.serverAvailable = true;
                return true;
            }

            console.warn('‚ö†Ô∏è [TasksIntegration] –°–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤, –∞–ª–µ —Å—Ç–∞—Ç—É—Å –Ω–µ–≤—ñ—Ä–Ω–∏–π');
            return false;

        } catch (error) {
            console.error('‚ùå [TasksIntegration] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
            this.state.serverAvailable = false;
            return false;
        }
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    TasksIntegration.prototype.showServerUnavailableUI = function() {
        console.log('üö´ [TasksIntegration] –ü–æ–∫–∞–∑—É—î–º–æ UI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞');

        const container = document.querySelector('.container') || document.body;

        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —î
        const existingNotice = document.getElementById('server-unavailable-notice');
        if (existingNotice) {
            existingNotice.remove();
        }

        const notice = document.createElement('div');
        notice.id = 'server-unavailable-notice';
        notice.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            padding: 15px;
            text-align: center;
            z-index: 10000;
            font-size: 14px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        `;

        const attemptsText = this.state.initializationAttempts > 0
            ? ` (–°–ø—Ä–æ–±–∞ ${this.state.initializationAttempts}/${this.state.maxRetries})`
            : '';

        notice.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; gap: 10px;">
                <div style="animation: spin 1s linear infinite;">‚ö†Ô∏è</div>
                <div>
                    <strong>–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π${attemptsText}</strong><br>
                    <small>–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ</small>
                </div>
                <button id="manual-retry" style="
                    background: rgba(255,255,255,0.2);
                    border: 1px solid rgba(255,255,255,0.3);
                    color: white;
                    padding: 5px 10px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 12px;
                ">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
            </div>
            <style>
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        `;

        container.insertBefore(notice, container.firstChild);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä—É
        document.getElementById('manual-retry').addEventListener('click', () => {
            console.log('üîÑ [TasksIntegration] –†—É—á–Ω–∏–π –ø–æ–≤—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
            this.init();
        });
    };

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    TasksIntegration.prototype.hideServerUnavailableUI = function() {
        const notice = document.getElementById('server-unavailable-notice');
        if (notice) {
            notice.remove();
            console.log('‚úÖ [TasksIntegration] UI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ');
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
     */
    TasksIntegration.prototype.init = async function() {
        console.log('üéØ [TasksIntegration] ===== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –°–ò–°–¢–ï–ú–ò =====');
        console.log('üïê [TasksIntegration] –ß–∞—Å –ø–æ—á–∞—Ç–∫—É:', new Date().toISOString());

        this.state.initializationAttempts++;

        if (this.state.initializationAttempts > this.state.maxRetries) {
            console.error('‚ùå [TasksIntegration] –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
            this.showCriticalError('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
            return null;
        }

        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —è–∫—â–æ —Ü–µ –Ω–µ –ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞
            if (this.state.initializationAttempts > 1) {
                this.showServerUnavailableUI();
            }

            // –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üîç [TasksIntegration] –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            const serverAvailable = await this.checkServerAvailability();

            if (!serverAvailable) {
                console.warn('‚ö†Ô∏è [TasksIntegration] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –ø—ñ–∑–Ω—ñ—à–µ');

                if (this.state.initializationAttempts < this.state.maxRetries) {
                    console.log(`‚è≥ [TasksIntegration] –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${this.config.retryDelay/1000} —Å–µ–∫—É–Ω–¥`);
                    setTimeout(() => this.init(), this.config.retryDelay);
                    return null;
                } else {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±');
                }
            }

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
            this.hideServerUnavailableUI();

            // –ö–†–û–ö 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
            console.log('üîç [TasksIntegration] –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤');
            this.checkRequiredServices();

            // –ö–†–û–ö 3: –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            console.log('üîê [TasksIntegration] –ö—Ä–æ–∫ 3: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
            await this.authenticateUser();

            // –ö–†–û–ö 4: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
            console.log('üîç [TasksIntegration] –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤');
            this.checkRequiredModules();

            // –ö–†–û–ö 5: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
            console.log('üîß [TasksIntegration] –ö—Ä–æ–∫ 5: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤');
            await this.initializeManagers();

            // –ö–†–û–ö 6: –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            console.log('üéØ [TasksIntegration] –ö—Ä–æ–∫ 6: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π');
            this.setupEventHandlers();

            // –ö–†–û–ö 7: –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            console.log('üíæ [TasksIntegration] –ö—Ä–æ–∫ 7: –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            this.setupAutoSave();

            // –ö–†–û–ö 8: –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
            console.log('üîÑ [TasksIntegration] –ö—Ä–æ–∫ 8: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è');
            await this.initialSync();

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            this.state.isInitialized = true;
            this.state.initializationAttempts = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ —É—Å–ø—ñ—Ö—É

            console.log('‚úÖ [TasksIntegration] ===== –°–ò–°–¢–ï–ú–ê –£–°–ü–Ü–®–ù–û –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–ê =====');
            console.log('üìä [TasksIntegration] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:', this.state);

            // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
            if (window.TasksServices?.Analytics) {
                window.TasksServices.Analytics.trackEvent('System', 'initialized', 'success');
            }

            return this;

        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á:', error);
            console.error('‚ùå [TasksIntegration] Stack trace:', error.stack);

            // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —ñ —â–µ —î —Å–ø—Ä–æ–±–∏
            if (error.message.includes('authentication') && this.state.initializationAttempts < this.state.maxRetries) {
                console.log(`‚è≥ [TasksIntegration] –ü–æ–≤—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ ${this.config.retryDelay/1000} —Å–µ–∫—É–Ω–¥`);
                setTimeout(() => this.init(), this.config.retryDelay);
                return null;
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
            this.showCriticalError(error.message);
            return null;
        }
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
     */
    TasksIntegration.prototype.showCriticalError = function(message) {
        console.error('üí• [TasksIntegration] –ü–æ–∫–∞–∑ –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏:', message);

        const container = document.querySelector('.container') || document.body;

        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const existingNotice = document.getElementById('server-unavailable-notice');
        if (existingNotice) existingNotice.remove();

        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
            z-index: 10000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        `;

        errorDiv.innerHTML = `
            <div style="max-width: 400px;">
                <div style="font-size: 48px; margin-bottom: 20px;">‚ö†Ô∏è</div>
                <h2 style="color: #e74c3c; margin-bottom: 20px; font-size: 24px;">–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è</h2>
                <p style="margin-bottom: 20px; font-size: 16px; line-height: 1.5; color: #bdc3c7;">
                    ${message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞'}
                </p>
                <div style="margin-bottom: 30px;">
                    <p style="color: #95a5a6; font-size: 14px; margin-bottom: 15px;">
                        –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                    </p>
                    <ul style="color: #95a5a6; font-size: 14px; text-align: left; display: inline-block;">
                        <li>–ü—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è–º</li>
                        <li>–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ</li>
                        <li>–ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ –≤–µ—Ä—Å—ñ—è –¥–æ–¥–∞—Ç–∫—É</li>
                    </ul>
                </div>
                <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
                    <button onclick="window.location.reload()" style="
                        background: linear-gradient(135deg, #3498db, #2980b9);
                        color: white;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                        transition: transform 0.2s;
                    " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                    </button>
                    <button onclick="this.parentElement.parentElement.parentElement.remove()" style="
                        background: rgba(255,255,255,0.1);
                        color: white;
                        border: 1px solid rgba(255,255,255,0.2);
                        padding: 12px 24px;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                        transition: background 0.2s;
                    " onmouseover="this.style.background='rgba(255,255,255,0.2)'" onmouseout="this.style.background='rgba(255,255,255,0.1)'">
                        ‚ùå –ó–∞–∫—Ä–∏—Ç–∏
                    </button>
                </div>
            </div>
        `;

        container.appendChild(errorDiv);
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
    TasksIntegration.prototype.checkRequiredServices = function() {
        console.log('üîç [TasksIntegration] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤...');

        const requiredServices = [
            'WinixAPI', // –ë–∞–∑–æ–≤–∏–π API (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
            'TasksConstants'
        ];

        const optionalServices = [
            'TasksStore',
            'TelegramValidator',
            'TasksUtils'
        ];

        const missing = requiredServices.filter(service => !window[service]);

        if (missing.length > 0) {
            console.error('‚ùå [TasksIntegration] –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:', missing);
            throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏: ${missing.join(', ')}`);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ
        optionalServices.forEach(service => {
            if (!window[service]) {
                console.warn(`‚ö†Ô∏è [TasksIntegration] –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å ${service} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π`);
            }
        });

        console.log('‚úÖ [TasksIntegration] –í—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
    };

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.authenticateUser = async function() {
        console.log('üîê [TasksIntegration] === –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===');

        if (this.state.isAuthenticating) {
            console.log('‚è∏Ô∏è [TasksIntegration] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
            return;
        }

        this.state.isAuthenticating = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å TelegramValidator
            if (!window.TelegramValidator) {
                console.warn('‚ö†Ô∏è [TasksIntegration] TelegramValidator –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback');

                // Fallback: –æ—Ç—Ä–∏–º—É—î–º–æ ID –Ω–∞–ø—Ä—è–º—É –∑ WinixAPI
                const userId = window.WinixAPI?.getUserId?.();
                if (!userId) {
                    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                }

                this.state.userId = userId;
                console.log('‚úÖ [TasksIntegration] Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:', userId);
                return;
            }

            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ TelegramValidator
            const validation = await window.TelegramValidator.validateTelegramAuth();

            if (!validation.valid) {
                throw new Error('Telegram authentication failed: ' + validation.error);
            }

            this.state.userId = validation.user.id || validation.user.telegram_id;
            console.log('‚úÖ [TasksIntegration] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π:', this.state.userId);

            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            this.updateUserUI(validation.user);

        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);

            // –°–ø—Ä–æ–±—É—î–º–æ fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
            try {
                const userId = window.WinixAPI?.getUserId?.();
                if (userId) {
                    this.state.userId = userId;
                    console.log('‚úÖ [TasksIntegration] Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');
                    return;
                }
            } catch (fallbackError) {
                console.error('‚ùå [TasksIntegration] Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', fallbackError);
            }

            throw new Error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É');
        } finally {
            this.state.isAuthenticating = false;
        }
    };

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.updateUserUI = function(user) {
        console.log('üîÑ [TasksIntegration] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

        try {
            // –û–Ω–æ–≤–ª—é—î–º–æ ID
            const userIdElement = document.getElementById('header-user-id');
            if (userIdElement && user) {
                userIdElement.textContent = user.id || user.telegram_id || '';
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–≤–∞—Ç–∞—Ä
            const avatarElement = document.querySelector('.profile-avatar');
            if (avatarElement && user?.username) {
                avatarElement.textContent = user.username.charAt(0).toUpperCase();
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏
            const winixElement = document.getElementById('user-winix');
            const ticketsElement = document.getElementById('user-tickets');

            if (winixElement && user?.balance) {
                winixElement.textContent = user.balance.winix || 0;
            }

            if (ticketsElement && user?.balance) {
                ticketsElement.textContent = user.balance.tickets || 0;
            }

            console.log('‚úÖ [TasksIntegration] UI –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.warn('‚ö†Ô∏è [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI:', error);
        }
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
     */
    TasksIntegration.prototype.checkRequiredModules = function() {
        console.log('üîç [TasksIntegration] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤...');

        const requiredModules = {
            'TasksConstants': window.TasksConstants,
            'TasksUtils': window.TasksUtils
        };

        const optionalModules = [
            'FlexEarnManager', 'TasksManager', 'TaskVerification',
            'DailyBonusManager', 'TasksAPI', 'TasksStore',
            'TelegramValidator', 'WalletChecker', 'TasksServices'
        ];

        const missingRequired = [];

        Object.entries(requiredModules).forEach(([name, module]) => {
            if (!module) {
                missingRequired.push(name);
                console.error(`‚ùå [TasksIntegration] –í—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –º–æ–¥—É–ª—å: ${name}`);
            } else {
                console.log(`‚úÖ [TasksIntegration] –ú–æ–¥—É–ª—å ${name} –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ
        optionalModules.forEach(name => {
            if (!window[name]) {
                console.warn(`‚ö†Ô∏è [TasksIntegration] –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å ${name} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π`);
            }
        });

        if (missingRequired.length > 0) {
            throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ: ${missingRequired.join(', ')}`);
        }

        console.log('‚úÖ [TasksIntegration] –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∏
     */
    TasksIntegration.prototype.initializeManagers = async function() {
        console.log('üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤...');

        const userId = this.state.userId;

        try {
            // WalletChecker (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
            if (window.WalletChecker) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WalletChecker...');
                try {
                    this.managers.walletChecker = window.WalletChecker;
                    await this.managers.walletChecker.init();
                    console.log('  ‚úÖ [TasksIntegration] WalletChecker —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                } catch (error) {
                    console.warn('  ‚ö†Ô∏è [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WalletChecker:', error);
                    // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –≥–∞–º–∞–Ω—Ü—è
                }
            }

            // FlexEarn Manager (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
            if (window.FlexEarnManager) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FlexEarnManager...');
                try {
                    this.managers.flexEarn = window.FlexEarnManager;
                    this.managers.flexEarn.init(userId);
                    console.log('  ‚úÖ [TasksIntegration] FlexEarnManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                } catch (error) {
                    console.warn('  ‚ö†Ô∏è [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó FlexEarnManager:', error);
                }
            }

            // Daily Bonus Manager (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
            if (window.DailyBonusManager) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DailyBonusManager...');
                try {
                    this.managers.dailyBonus = window.DailyBonusManager;
                    await this.managers.dailyBonus.init(userId);
                    console.log('  ‚úÖ [TasksIntegration] DailyBonusManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                } catch (error) {
                    console.warn('  ‚ö†Ô∏è [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó DailyBonusManager:', error);
                }
            }

            // Tasks Manager (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
            if (window.TasksManager) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TasksManager...');
                try {
                    this.managers.tasksManager = window.TasksManager;
                    await this.managers.tasksManager.init(userId);
                    console.log('  ‚úÖ [TasksIntegration] TasksManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
                } catch (error) {
                    console.warn('  ‚ö†Ô∏è [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TasksManager:', error);
                }
            }

            // Task Verification (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
            if (window.TaskVerification) {
                console.log('  üîß [TasksIntegration] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TaskVerification...');
                try {
                    this.managers.verification = window.TaskVerification;
                    this.managers.verification.init();
                    console.log('  ‚úÖ [TasksIntegration] TaskVerification –≥–æ—Ç–æ–≤–∏–π');
                } catch (error) {
                    console.warn('  ‚ö†Ô∏è [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó TaskVerification:', error);
                }
            }

            console.log('‚úÖ [TasksIntegration] –í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:', error);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ —Ç–∏–º —â–æ —î
            console.warn('‚ö†Ô∏è [TasksIntegration] –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –æ–±–º–µ–∂–µ–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é');
        }
    };

    /**
     * –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
     */
    TasksIntegration.prototype.initialSync = async function() {
        console.log('üîÑ [TasksIntegration] === –ü–û–ß–ê–¢–ö–û–í–ê –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø ===');

        try {
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ SyncService —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (window.TasksServices?.Sync) {
                await window.TasksServices.Sync.syncData();
                console.log('‚úÖ [TasksIntegration] –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            } else {
                console.warn('‚ö†Ô∏è [TasksIntegration] SyncService –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É
        }
    };

    // –†–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
    TasksIntegration.prototype.setupEventHandlers = function() {
        console.log('üéØ [TasksIntegration] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

        const self = this;

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        const tabs = document.querySelectorAll('.main-tabs .tab-button');
        console.log(`  üìë [TasksIntegration] –ó–Ω–∞–π–¥–µ–Ω–æ ${tabs.length} –≤–∫–ª–∞–¥–æ–∫`);

        tabs.forEach((tab, index) => {
            tab.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                const tabName = this.getAttribute('data-tab');
                console.log(`  üìë [TasksIntegration] –ö–ª—ñ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫—É ${index}: ${tabName}`);

                self.switchTab(tabName);

                if (window.TasksServices?.Analytics) {
                    window.TasksServices.Analytics.trackEvent('Navigation', 'tab_switch', tabName);
                }
            });
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.state.isInitialized) {
                console.log('üëÅÔ∏è [TasksIntegration] –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ—é');
                this.onPageVisible();
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
        window.addEventListener('online', () => {
            console.log('üåê [TasksIntegration] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
            this.onOnline();
        });

        window.addEventListener('offline', () => {
            console.log('üìµ [TasksIntegration] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ');
            this.onOffline();
        });

        console.log('‚úÖ [TasksIntegration] –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    };

    TasksIntegration.prototype.switchTab = function(tabName) {
        console.log(`üìë [TasksIntegration] === –ü–ï–†–ï–ú–ò–ö–ê–ù–ù–Ø –í–ö–õ–ê–î–ö–ò ===`);
        console.log(`üìë [TasksIntegration] –¶—ñ–ª—å–æ–≤–∞ –≤–∫–ª–∞–¥–∫–∞: ${tabName}`);

        if (this.state.currentTab === tabName) {
            console.log('‚ÑπÔ∏è [TasksIntegration] –í–∫–ª–∞–¥–∫–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞');
            return;
        }

        this.state.currentTab = tabName;

        if (window.TasksStore) {
            window.TasksStore.actions.setCurrentTab(tabName);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ UI –≤–∫–ª–∞–¥–æ–∫
        const tabs = document.querySelectorAll('.main-tabs .tab-button');
        const panes = document.querySelectorAll('.main-tab-pane');

        tabs.forEach(tab => {
            const isActive = tab.getAttribute('data-tab') === tabName;
            if (isActive) {
                tab.classList.add('active');
            } else {
                tab.classList.remove('active');
            }
        });

        panes.forEach(pane => {
            const paneId = pane.id;
            const shouldBeActive = paneId === `${tabName}-tab`;

            if (shouldBeActive) {
                pane.classList.add('active');
                pane.style.display = 'block';
            } else {
                pane.classList.remove('active');
                pane.style.display = 'none';
            }
        });

        try {
            this.onTabSwitch(tabName);
        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏:', error);
        }

        console.log('‚úÖ [TasksIntegration] –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    };

    TasksIntegration.prototype.onTabSwitch = function(tabName) {
        console.log(`üîÑ [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);

        try {
            switch(tabName) {
                case 'flex':
                    if (this.managers.flexEarn?.checkWalletConnection) {
                        this.managers.flexEarn.checkWalletConnection();
                    }
                    break;

                case 'daily':
                    if (this.managers.dailyBonus?.updateDailyBonusUI) {
                        this.managers.dailyBonus.updateDailyBonusUI();
                    }
                    break;

                case 'social':
                case 'limited':
                case 'partner':
                    if (this.managers.tasksManager?.updateTasksUI) {
                        this.managers.tasksManager.updateTasksUI();
                    }
                    break;

                default:
                    console.warn(`  ‚ö†Ô∏è [TasksIntegration] –ù–µ–≤—ñ–¥–æ–º–∞ –≤–∫–ª–∞–¥–∫–∞: ${tabName}`);
            }
        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∫–ª–∞–¥–∫–∏:', error);
        }
    };

    TasksIntegration.prototype.setupAutoSave = function() {
        console.log('üíæ [TasksIntegration] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');

        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
        }

        this.autoSaveInterval = setInterval(() => {
            this.saveState();
        }, this.config.autoSaveInterval);

        console.log(`‚úÖ [TasksIntegration] –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–∫–æ–∂–Ω—ñ ${this.config.autoSaveInterval/1000} —Å–µ–∫)`);
    };

    TasksIntegration.prototype.saveState = function() {
        try {
            const stateToSave = {
                userId: this.state.userId,
                currentTab: this.state.currentTab,
                timestamp: Date.now()
            };

            if (window.TasksUtils?.storage) {
                window.TasksUtils.storage.setSecure('tasksSystemState', stateToSave);
            }
        } catch (error) {
            console.error('‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É:', error);
        }
    };

    TasksIntegration.prototype.onPageVisible = function() {
        console.log('üëÅÔ∏è [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ...');

        if (window.TasksServices?.Auth?.checkSession) {
            window.TasksServices.Auth.checkSession();
        }

        if (window.TasksServices?.Sync?.syncData) {
            window.TasksServices.Sync.syncData();
        }

        this.onTabSwitch(this.state.currentTab);
    };

    TasksIntegration.prototype.onPageHidden = function() {
        this.saveState();
    };

    TasksIntegration.prototype.onOnline = function() {
        console.log('üåê [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑\'—î–¥–Ω–∞–Ω–Ω—è...');

        this.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ', 'success');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤–µ—Ä —ñ –º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ
        this.checkServerAvailability().then(available => {
            if (available && !this.state.isInitialized) {
                console.log('üîÑ [TasksIntegration] –°–µ—Ä–≤–µ—Ä –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é');
                this.init();
            }
        });

        if (window.TasksServices?.Sync?.syncData) {
            window.TasksServices.Sync.syncData();
        }

        this.onTabSwitch(this.state.currentTab);
    };

    TasksIntegration.prototype.onOffline = function() {
        console.log('üìµ [TasksIntegration] –û–±—Ä–æ–±–∫–∞ –≤—Ç—Ä–∞—Ç–∏ –∑\'—î–¥–Ω–∞–Ω–Ω—è...');
        this.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –æ–±–º–µ–∂–µ–Ω–∞', 'warning');
    };

    TasksIntegration.prototype.showToast = function(message, type = 'info') {
        console.log(`üí¨ [TasksIntegration] Toast: ${type} - ${message}`);
        if (window.TasksUtils?.showToast) {
            window.TasksUtils.showToast(message, type);
        }
    };

    TasksIntegration.prototype.destroy = function() {
        console.log('üßπ [TasksIntegration] –ó–Ω–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...');

        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
        }

        Object.entries(this.managers).forEach(([name, manager]) => {
            if (manager && typeof manager.destroy === 'function') {
                try {
                    manager.destroy();
                } catch (error) {
                    console.error(`‚ùå [TasksIntegration] –ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è ${name}:`, error);
                }
            }
        });

        this.saveState();
        console.log('‚úÖ [TasksIntegration] –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∏—â–µ–Ω–∞');
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä
    const integration = new TasksIntegration();

    console.log('‚úÖ [TasksIntegration] –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π –¥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó (Production)');

    return integration;

})();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üìÑ [TasksIntegration] DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...');

    try {
        window.tasksIntegration = await window.TasksIntegration.init();

        if (window.tasksIntegration) {
            console.log('üéâ [TasksIntegration] –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–¥–∞–Ω—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
        } else {
            console.log('‚ö†Ô∏è [TasksIntegration] –°–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∂–∏–º—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } catch (error) {
        console.error('‚ùå [TasksIntegration] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error);
        // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –≤ init(), –Ω–µ –¥—É–±–ª—é—î–º–æ UI
    }
});