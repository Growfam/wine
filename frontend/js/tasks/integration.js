/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø V4 - –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç–∞ —É—Å—É–Ω–µ–Ω–Ω—è–º —Ü–∏–∫–ª—ñ—á–Ω–æ—Å—Ç–µ–π
 */
window.TasksIntegration = (function() {
    'use strict';

    console.log('üì¶ [TASKS-INTEGRATION-V4] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –º–æ–¥—É–ª—è...');

    // –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à –º–µ–Ω–µ–¥–∂–µ—Ä
    const CacheManager = {
        cache: new Map(),
        timestamps: new Map(),
        ttl: {
            profile: 5 * 60 * 1000,      // 5 —Ö–≤–∏–ª–∏–Ω
            balance: 30 * 1000,          // 30 —Å–µ–∫—É–Ω–¥
            tasks: 2 * 60 * 1000,        // 2 —Ö–≤–∏–ª–∏–Ω–∏
            walletStatus: 60 * 1000,     // 1 —Ö–≤–∏–ª–∏–Ω–∞
            dailyStatus: 60 * 1000       // 1 —Ö–≤–∏–ª–∏–Ω–∞
        },

        set(key, data, customTTL) {
            this.cache.set(key, data);
            this.timestamps.set(key, Date.now());

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è TTL
            const ttl = customTTL || this.ttl[key.split('_')[0]] || 60000;
            setTimeout(() => this.invalidate(key), ttl);
        },

        get(key) {
            const timestamp = this.timestamps.get(key);
            if (!timestamp) return null;

            const age = Date.now() - timestamp;
            const ttl = this.ttl[key.split('_')[0]] || 60000;

            if (age > ttl) {
                this.invalidate(key);
                return null;
            }

            return this.cache.get(key);
        },

        invalidate(key) {
            this.cache.delete(key);
            this.timestamps.delete(key);
        },

        clear() {
            this.cache.clear();
            this.timestamps.clear();
        }
    };

    // Request Queue –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    const RequestQueue = {
        pending: new Map(),

        async enqueue(key, requestFn) {
            // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π Promise
            if (this.pending.has(key)) {
                console.log(`üì¶ [RequestQueue] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Ç: ${key}`);
                return this.pending.get(key);
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
            const promise = requestFn().finally(() => {
                this.pending.delete(key);
            });

            this.pending.set(key, promise);
            return promise;
        }
    };

    function TasksIntegration() {
        console.log('üèóÔ∏è [TASKS-INTEGRATION-V4] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É');
        this.userId = null;
        this.store = null;
        this.isInitialized = false;
        this.managers = {};
        this.updateTimers = new Map();
        this.lastUpdateTimes = new Map();
        this.storeUnsubscribe = null;

        // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        this.pendingUIUpdates = new Set();
        this.uiUpdateFrame = null;

        console.log('‚úÖ [TASKS-INTEGRATION-V4] –ï–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    TasksIntegration.prototype.init = function() {
        var self = this;
        console.log('üöÄ [TASKS-INTEGRATION-V4] ===== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á =====');

        return new Promise(function(resolve, reject) {
            try {
                // –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.userId = self.getUserId();
                if (!self.userId) {
                    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                }

                console.log('‚úÖ [TASKS-INTEGRATION-V4] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', self.userId);

                // –ö—Ä–æ–∫ 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ö–æ–≤–∏—â–∞
                self.initStore();

                // –ö—Ä–æ–∫ 3: –®–≤–∏–¥–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                self.initUIWithCache();

                // –ö—Ä–æ–∫ 4: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ smart-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
                self.smartDataLoad().then(function() {
                    // –ö—Ä–æ–∫ 5: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
                    self.initializeManagers();

                    // –ö—Ä–æ–∫ 6: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è smart polling
                    self.setupSmartPolling();

                    // –ö—Ä–æ–∫ 7: –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
                    self.setupOptimizedEventListeners();

                    self.isInitialized = true;
                    console.log('üéâ [TASKS-INTEGRATION-V4] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê =====');
                    resolve(self);
                }).catch(reject);

            } catch (error) {
                console.error('‚ùå [TASKS-INTEGRATION-V4] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
                reject(error);
            }
        });
    };

    /**
     * –®–≤–∏–¥–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
     */
    TasksIntegration.prototype.initUIWithCache = function() {
        console.log('üé® [TASKS-INTEGRATION-V4] –®–≤–∏–¥–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI –∑ –∫–µ—à—É');

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID
        this.setUserIdInHeader();

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑—ñ sessionStorage
        var cachedData = window.TasksUtils.storage.get('lastUserData');
        if (cachedData && cachedData.userId === this.userId) {
            console.log('üì¶ [TASKS-INTEGRATION-V4] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ');
            this.updateBalanceDisplay(cachedData.balance || { balance: 0, coins: 0 });
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –≤–∫–ª–∞–¥–∫—É
        this.showTab('flex');
    };

    /**
     * Smart –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö - —Ç—ñ–ª—å–∫–∏ —Ç–µ —â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—å
     */
    TasksIntegration.prototype.smartDataLoad = async function() {
        console.log('üß† [TASKS-INTEGRATION-V4] Smart –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');

        var self = this;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        var cachedProfile = CacheManager.get(`profile_${this.userId}`);
        if (cachedProfile) {
            console.log('‚úÖ [TASKS-INTEGRATION-V4] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å');
            self.processProfileData(cachedProfile);
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        try {
            // –û–±'—î–¥–Ω–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –±–∞–ª–∞–Ω—Å—É
            const profileData = await RequestQueue.enqueue(
                `profile_${this.userId}`,
                () => this.loadUserProfile()
            );

            // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ
            this.processProfileData(profileData);

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—à—Ç—É –¥–∞–Ω–∏—Ö
            this.loadSecondaryData();

        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION-V4] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –¥–∞–Ω—ñ
            this.updateBalanceDisplay({ balance: 0, coins: 0 });
        }
    };

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û
     */
    TasksIntegration.prototype.loadUserProfile = async function() {
        console.log('üë§ [TASKS-INTEGRATION-V4] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é');

        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        var cached = CacheManager.get(`profile_${this.userId}`);
        if (cached) {
            return cached;
        }

        // –Ø–∫—â–æ –∫–µ—à—É –Ω–µ–º–∞—î - —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç
        const response = await window.TasksAPI.user.getProfile(this.userId);

        if (response && response.status === 'success' && response.data) {
            // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            CacheManager.set(`profile_${this.userId}`, response);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ sessionStorage –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É
            window.TasksUtils.storage.set('lastUserData', {
                userId: this.userId,
                balance: response.data,
                timestamp: Date.now()
            });

            return response;
        }

        throw new Error('Failed to load profile');
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é
     */
    TasksIntegration.prototype.processProfileData = function(response) {
        if (!response || !response.data) return;

        console.log('üìä [TASKS-INTEGRATION-V4] –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é');

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥
        this.scheduleUIUpdate('balance', () => {
            this.updateBalanceDisplay(response.data);
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ Store
        if (window.TasksStore) {
            window.TasksStore.actions.updateBalance(response.data);

            const userData = {
                id: this.userId,
                telegramId: this.userId,
                username: response.data.username || 'User',
                balance: response.data
            };
            window.TasksStore.actions.setUser(userData);
        }
    };

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Ç–æ—Ä–∏–Ω–Ω–∏—Ö –¥–∞–Ω–∏—Ö
     */
    TasksIntegration.prototype.loadSecondaryData = function() {
        console.log('üìã [TASKS-INTEGRATION-V4] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Ç–æ—Ä–∏–Ω–Ω–∏—Ö –¥–∞–Ω–∏—Ö');

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ, –∞–ª–µ –∑ –Ω–∏–∑—å–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
        setTimeout(() => {
            // –°—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è
            this.checkWalletStatus();

            // –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
            this.loadTasksList();
        }, 500);
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è - –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
     */
    TasksIntegration.prototype.checkWalletStatus = async function() {
        const cacheKey = `wallet_${this.userId}`;

        try {
            const response = await RequestQueue.enqueue(cacheKey, async () => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
                const cached = CacheManager.get(cacheKey);
                if (cached) return cached;

                // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç
                const result = await window.TasksAPI.wallet.checkStatus(this.userId);
                CacheManager.set(cacheKey, result);
                return result;
            });

            if (response.status === 'success' && response.data) {
                if (response.data.balance && response.data.balance.flex !== undefined) {
                    window.TasksStore?.actions.setFlexBalance(response.data.balance.flex);
                }
            }
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION-V4] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è:', error);
        }
    };

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å - –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
     */
    TasksIntegration.prototype.loadTasksList = async function() {
        const cacheKey = `tasks_${this.userId}`;

        try {
            const response = await RequestQueue.enqueue(cacheKey, async () => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
                const cached = CacheManager.get(cacheKey);
                if (cached) return cached;

                // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç
                const result = await window.TasksAPI.tasks.getList(this.userId, 'all');
                CacheManager.set(cacheKey, result);
                return result;
            });

            console.log('üìã [TASKS-INTEGRATION-V4] –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION-V4] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
        }
    };

    /**
     * –ë–∞—Ç—á–∏–Ω–≥ UI –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ requestAnimationFrame
     */
    TasksIntegration.prototype.scheduleUIUpdate = function(updateType, updateFn) {
        this.pendingUIUpdates.add({ type: updateType, fn: updateFn });

        if (!this.uiUpdateFrame) {
            this.uiUpdateFrame = requestAnimationFrame(() => {
                this.processPendingUIUpdates();
            });
        }
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö pending UI –æ–Ω–æ–≤–ª–µ–Ω—å
     */
    TasksIntegration.prototype.processPendingUIUpdates = function() {
        console.log(`üé® [TASKS-INTEGRATION-V4] –û–±—Ä–æ–±–∫–∞ ${this.pendingUIUpdates.size} UI –æ–Ω–æ–≤–ª–µ–Ω—å`);

        // –ì—Ä—É–ø—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ —Ç–∏–ø—É
        const updatesByType = new Map();

        this.pendingUIUpdates.forEach(update => {
            if (!updatesByType.has(update.type)) {
                updatesByType.set(update.type, []);
            }
            updatesByType.get(update.type).push(update.fn);
        });

        // –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        updatesByType.forEach((updates, type) => {
            console.log(`  üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è ${type}: ${updates.length} –æ–ø–µ—Ä–∞—Ü—ñ–π`);
            updates.forEach(fn => fn());
        });

        // –û—á–∏—â–∞—î–º–æ
        this.pendingUIUpdates.clear();
        this.uiUpdateFrame = null;
    };

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –∑ debounce
     */
    TasksIntegration.prototype.updateBalanceDisplay = window.TasksUtils.debounce(function(data) {
        console.log('üí∞ [TASKS-INTEGRATION-V4] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (debounced)');

        if (!data) return;

        var balance = parseInt(data.balance) || 0;
        var coins = parseInt(data.coins) || 0;

        var tokensElement = document.getElementById('user-tokens');
        if (tokensElement && tokensElement.textContent !== balance.toLocaleString()) {
            tokensElement.textContent = balance.toLocaleString();
        }

        var coinsElement = document.getElementById('user-coins');
        if (coinsElement && coinsElement.textContent !== coins.toLocaleString()) {
            coinsElement.textContent = coins.toLocaleString();
        }
    }, 300);

    /**
     * Smart Polling - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
     */
    TasksIntegration.prototype.setupSmartPolling = function() {
        console.log('üîÑ [TASKS-INTEGRATION-V4] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Smart Polling');

        var self = this;

        // –ë–∞–ª–∞–Ω—Å - –∫–æ–∂–Ω—ñ 30 —Å–µ–∫, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        this.setupPollingTimer('balance', 30000, async () => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π
            if (this.isUserActive()) {
                await this.updateBalance();
            }
        });

        // –ó–∞–≤–¥–∞–Ω–Ω—è - –∫–æ–∂–Ω—ñ 2 —Ö–≤
        this.setupPollingTimer('tasks', 120000, () => {
            if (window.TasksStore?.selectors.getCurrentTab() === 'social' ||
                window.TasksStore?.selectors.getCurrentTab() === 'limited' ||
                window.TasksStore?.selectors.getCurrentTab() === 'partner') {
                this.loadTasksList();
            }
        });
    };

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
     */
    TasksIntegration.prototype.setupPollingTimer = function(name, interval, callback) {
        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —Ç–∞–π–º–µ—Ä
        if (this.updateTimers.has(name)) {
            clearInterval(this.updateTimers.get(name));
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        const timerId = setInterval(() => {
            const lastUpdate = this.lastUpdateTimes.get(name) || 0;
            const now = Date.now();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∏–Ω—É–≤ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            if (now - lastUpdate >= interval) {
                this.lastUpdateTimes.set(name, now);
                callback();
            }
        }, interval);

        this.updateTimers.set(name, timerId);
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    TasksIntegration.prototype.isUserActive = function() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        const lastActivity = parseInt(sessionStorage.getItem('lastUserActivity') || '0');
        const now = Date.now();
        const inactiveTime = now - lastActivity;

        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –±—ñ–ª—å—à–µ 5 —Ö–≤ - –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ
        return inactiveTime < 5 * 60 * 1000;
    };

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    TasksIntegration.prototype.updateBalance = async function() {
        if (!this.userId) return;

        const cacheKey = `balance_${this.userId}`;

        try {
            const response = await RequestQueue.enqueue(cacheKey, async () => {
                // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É (30 —Å–µ–∫ TTL)
                const cached = CacheManager.get(cacheKey);
                if (cached) return cached;

                const result = await window.TasksAPI.user.getBalance(this.userId);

                if (result && result.status === 'success') {
                    CacheManager.set(cacheKey, result, 30000); // 30 —Å–µ–∫ –∫–µ—à
                }

                return result;
            });

            if (response && response.status === 'success' && response.data) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –±–∞–ª–∞–Ω—Å
                const currentBalance = window.TasksStore?.selectors.getUserBalance();
                const newBalance = response.data;

                if (currentBalance &&
                    currentBalance.winix === (newBalance.balance || 0) &&
                    currentBalance.tickets === (newBalance.coins || 0)) {
                    console.log('  ‚úÖ –ë–∞–ª–∞–Ω—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI');
                    return;
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥
                this.scheduleUIUpdate('balance', () => {
                    this.updateBalanceDisplay(response.data);
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ Store
                window.TasksStore?.actions.updateBalance(response.data);
            }
        } catch (error) {
            console.error('‚ùå [TASKS-INTEGRATION-V4] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    TasksIntegration.prototype.initializeManagers = function() {
        console.log('üîß [TASKS-INTEGRATION-V4] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤');

        var self = this;

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
        const initManager = async (name, managerClass) => {
            if (window[managerClass]) {
                try {
                    console.log(`  üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ${name}...`);
                    this.managers[name] = window[managerClass];

                    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
                    const initResult = this.managers[name].init(this.userId);

                    if (initResult && initResult.then) {
                        await initResult;
                    }

                    console.log(`  ‚úÖ ${name} —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ`);
                } catch (error) {
                    console.error(`  ‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ${name}:`, error);
                }
            }
        };

        // –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è race conditions
        (async () => {
            await initManager('flexEarn', 'FlexEarnManager');
            await initManager('dailyBonus', 'DailyBonusManager');
            await initManager('tasks', 'TasksManager');
            await initManager('wallet', 'WalletChecker');
        })();
    };

    /**
     * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    TasksIntegration.prototype.setupOptimizedEventListeners = function() {
        console.log('üéØ [TASKS-INTEGRATION-V4] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤');

        var self = this;

        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const activityEvents = ['click', 'keypress', 'mousemove', 'touchstart'];
        const updateActivity = window.TasksUtils.throttle(() => {
            sessionStorage.setItem('lastUserActivity', Date.now().toString());
        }, 1000);

        activityEvents.forEach(event => {
            document.addEventListener(event, updateActivity, { passive: true });
        });

        // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        const tabContainer = document.querySelector('.main-tabs');
        if (tabContainer) {
            tabContainer.addEventListener('click', (e) => {
                const tab = e.target.closest('.tab-button');
                if (tab) {
                    const tabName = tab.getAttribute('data-tab');
                    self.showTab(tabName);
                }
            });
        }

        // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ Store –∑ debounce
        if (window.TasksStore) {
            const handleStoreChange = window.TasksUtils.debounce((state, prevState, action) => {
                // –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ –∑–º—ñ–Ω–∏
                if (action.type === 'UPDATE_BALANCE' &&
                    state.user.balance !== prevState.user.balance) {
                    self.scheduleUIUpdate('balance', () => {
                        self.updateBalanceDisplay(state.user.balance);
                    });
                }
            }, 100);

            this.storeUnsubscribe = window.TasksStore.subscribe(handleStoreChange);
        }

        // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                // –ó—É–ø–∏–Ω—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ
                this.pausePolling();
            } else {
                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ
                this.resumePolling();
            }
        });
    };

    /**
     * –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–Ω—è polling
     */
    TasksIntegration.prototype.pausePolling = function() {
        console.log('‚è∏Ô∏è [TASKS-INTEGRATION-V4] –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–Ω—è polling');

        this.updateTimers.forEach((timerId, name) => {
            clearInterval(timerId);
        });
    };

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è polling
     */
    TasksIntegration.prototype.resumePolling = function() {
        console.log('‚ñ∂Ô∏è [TASKS-INTEGRATION-V4] –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è polling');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø—Ä–æ–π—à–ª–æ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        const now = Date.now();

        this.lastUpdateTimes.forEach((lastTime, name) => {
            const elapsed = now - lastTime;

            // –Ø–∫—â–æ –ø—Ä–æ–π—à–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É - –æ–Ω–æ–≤–ª—é—î–º–æ –æ–¥—Ä–∞–∑—É
            if (elapsed > 60000) { // 1 —Ö–≤
                if (name === 'balance') this.updateBalance();
                else if (name === 'tasks') this.loadTasksList();
            }
        });

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä–∏
        this.setupSmartPolling();
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∫–ª–∞–¥–∫—É - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    TasksIntegration.prototype.showTab = function(tabName) {
        console.log('üìë [TASKS-INTEGRATION-V4] –ü–æ–∫–∞–∑ –≤–∫–ª–∞–¥–∫–∏:', tabName);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è UI –æ–Ω–æ–≤–ª–µ–Ω—å
        this.scheduleUIUpdate('tab', () => {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.main-tab-pane').forEach(pane => {
                pane.style.display = 'none';
                pane.classList.remove('active');
            });

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É
            const targetPane = document.getElementById(tabName + '-tab');
            if (targetPane) {
                targetPane.style.display = 'block';
                targetPane.classList.add('active');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.main-tabs .tab-button').forEach(tab => {
                tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
            });
        });

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        requestIdleCallback(() => {
            this.onTabChange(tabName);
        });
    };

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –≤–∫–ª–∞–¥–∫–∏ - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê
     */
    TasksIntegration.prototype.onTabChange = function(tabName) {
        console.log('üîÑ [TASKS-INTEGRATION-V4] –ó–º—ñ–Ω–∞ –≤–∫–ª–∞–¥–∫–∏:', tabName);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤–∏–π
        switch(tabName) {
            case 'flex':
                if (this.managers.flexEarn?.checkWalletConnection) {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º
                    const cached = CacheManager.get(`wallet_${this.userId}`);
                    if (!cached) {
                        this.managers.flexEarn.checkWalletConnection();
                    }
                }
                break;

            case 'daily':
                if (this.managers.dailyBonus?.updateDailyBonusUI) {
                    this.managers.dailyBonus.updateDailyBonusUI();
                }
                break;

            case 'social':
            case 'limited':
            case 'partner':
                if (this.managers.tasks?.updateTasksUI) {
                    // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó
                    setTimeout(() => {
                        this.managers.tasks.updateTasksUI();
                    }, 100);
                }
                break;
        }
    };

    // –†–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ –∑ minor –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è–º–∏...

    /**
     * –û—Ç—Ä–∏–º—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     */
    TasksIntegration.prototype.getUserId = function() {
        console.log('üîç [TASKS-INTEGRATION-V4] –û—Ç—Ä–∏–º–∞–Ω–Ω—è userId');

        // –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (this.userId) return this.userId;

        var sources = [
            function() { return window.Telegram?.WebApp?.initDataUnsafe?.user?.id; },
            function() { return window.WinixAPI?.getUserId?.(); },
            function() { return localStorage.getItem('telegram_user_id'); },
            function() { return localStorage.getItem('user_id'); },
            function() { return window.TasksAPI?.getUserId?.(); }
        ];

        for (var i = 0; i < sources.length; i++) {
            try {
                var id = sources[i]();
                if (id && id !== 'undefined' && id !== 'null') {
                    var numericId = parseInt(id);
                    if (!isNaN(numericId) && numericId > 0) {
                        this.userId = numericId; // –ö–µ—à—É—î–º–æ
                        return numericId;
                    }
                }
            } catch (e) {
                console.warn(`‚ö†Ô∏è [TASKS-INTEGRATION-V4] –ü–æ–º–∏–ª–∫–∞ –≤ –¥–∂–µ—Ä–µ–ª—ñ ${i + 1}:`, e);
            }
        }

        return null;
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Redux —Å—Ö–æ–≤–∏—â–µ
     */
    TasksIntegration.prototype.initStore = function() {
        console.log('üîß [TASKS-INTEGRATION-V4] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Store');

        if (window.TasksStore) {
            this.store = window.TasksStore;
        } else {
            console.warn('‚ö†Ô∏è [TASKS-INTEGRATION-V4] TasksStore –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }
    };

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
     */
    TasksIntegration.prototype.setUserIdInHeader = function() {
        var userIdElements = document.querySelectorAll('.user-id-value, #header-user-id');
        var value = this.userId || '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ';

        userIdElements.forEach(function(element) {
            if (element && element.textContent !== value) {
                element.textContent = value;
            }
        });
    };

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
     */
    TasksIntegration.prototype.showSuccessMessage = function(message) {
        window.TasksUtils?.showToast?.(message, 'success') || console.log('‚úÖ', message);
    };

    /**
     * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     */
    TasksIntegration.prototype.showErrorMessage = function(message) {
        window.TasksUtils?.showToast?.(message, 'error') || console.error('‚ùå', message);
    };

    /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
     */
    TasksIntegration.prototype.destroy = function() {
        console.log('üóëÔ∏è [TASKS-INTEGRATION-V4] –ó–Ω–∏—â–µ–Ω–Ω—è –º–æ–¥—É–ª—è');

        // –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏
        this.updateTimers.forEach(timerId => clearInterval(timerId));
        this.updateTimers.clear();

        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—å –≤—ñ–¥ Store
        if (this.storeUnsubscribe) {
            this.storeUnsubscribe();
        }

        // –°–∫–∞—Å–æ–≤—É—î–º–æ pending UI –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (this.uiUpdateFrame) {
            cancelAnimationFrame(this.uiUpdateFrame);
        }

        // –û—á–∏—â–∞—î–º–æ –∫–µ—à
        CacheManager.clear();

        console.log('‚úÖ [TASKS-INTEGRATION-V4] –ú–æ–¥—É–ª—å –∑–Ω–∏—â–µ–Ω–æ');
    };

    console.log('‚úÖ [TASKS-INTEGRATION-V4] –ú–æ–¥—É–ª—å TasksIntegration –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    return TasksIntegration;
})();

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
window.initTasksSystem = function() {
    console.log('üé¨ [GLOBAL] === initTasksSystem START (V4) ===');

    return new Promise(function(resolve, reject) {
        try {
            var integration = new window.TasksIntegration();

            integration.init()
                .then(function() {
                    window.TasksIntegrationInstance = integration;
                    console.log('üèÅ [GLOBAL] === initTasksSystem SUCCESS (V4) ===');
                    resolve(integration);
                })
                .catch(reject);
        } catch (error) {
            console.error('üí• [GLOBAL] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            reject(error);
        }
    });
};

console.log('‚úÖ [GLOBAL] window.initTasksSystem —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ (V4)');