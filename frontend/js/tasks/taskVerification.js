/**
 * –ú–æ–¥—É–ª—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ WINIX
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
 */

window.TaskVerification = (function() {
    'use strict';

    console.log('üîç [TaskVerification] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–á =====');

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        activeVerifications: new Map(),
        verificationQueue: [],
        isProcessing: false,
        telegramBotUsername: '@WinixVerifyBot',
        taskTimestamps: new Map() // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –∑–∞–≤–¥–∞–Ω—å
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        maxRetries: 3,
        retryDelay: 2000,
        verificationTimeout: 30000,
        queueProcessInterval: 1000,
        socialVerificationDelay: 15000 // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
     */
    function init() {
        console.log('üöÄ [TaskVerification] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
        console.log('‚öôÔ∏è [TaskVerification] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', config);

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ timestamps
        loadTaskTimestamps();

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏
        startQueueProcessor();

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        setupEventHandlers();

        console.log('‚úÖ [TaskVerification] –ú–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ timestamps
     */
    function loadTaskTimestamps() {
        const saved = window.TasksUtils.storage.get(window.TasksConstants.STORAGE_KEYS.TASK_TIMESTAMPS, {});
        Object.entries(saved).forEach(([taskId, timestamp]) => {
            state.taskTimestamps.set(taskId, timestamp);
        });
        console.log('üìÇ [TaskVerification] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ timestamps –¥–ª—è', state.taskTimestamps.size, '–∑–∞–≤–¥–∞–Ω—å');
    }

    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ timestamps
     */
    function saveTaskTimestamps() {
        const timestamps = {};
        state.taskTimestamps.forEach((timestamp, taskId) => {
            timestamps[taskId] = timestamp;
        });
        window.TasksUtils.storage.set(window.TasksConstants.STORAGE_KEYS.TASK_TIMESTAMPS, timestamps);
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function verifyTask(taskId, taskType, platform, data = {}) {
        console.log('üîç [TaskVerification] === –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –ó–ê–í–î–ê–ù–ù–Ø ===');
        console.log('üìã [TaskVerification] –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:', {
            taskId,
            taskType,
            platform,
            data
        });

        const verificationId = generateVerificationId();
        const userId = window.TasksStore.selectors.getUserId();

        if (!userId) {
            console.error('‚ùå [TaskVerification] User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            throw new Error('User not authenticated');
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        const verification = {
            id: verificationId,
            taskId,
            taskType,
            platform,
            userId,
            data,
            status: 'pending',
            attempts: 0,
            createdAt: Date.now()
        };

        // –î–æ–¥–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        state.activeVerifications.set(verificationId, verification);

        // –í–∏–±–∏—Ä–∞—î–º–æ –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
        try {
            let result;

            switch(platform.toLowerCase()) {
                case 'telegram':
                    result = await verifyTelegramTask(verification);
                    break;

                case 'youtube':
                case 'twitter':
                case 'discord':
                    result = await verifySocialTask(verification);
                    break;

                default:
                    console.warn('‚ö†Ô∏è [TaskVerification] –ù–µ–≤—ñ–¥–æ–º–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:', platform);
                    result = await verifySocialTask(verification);
            }

            console.log('‚úÖ [TaskVerification] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', result);
            return result;

        } catch (error) {
            console.error('‚ùå [TaskVerification] –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
            verification.status = 'failed';
            verification.error = error.message;
            throw error;
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Telegram –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function verifyTelegramTask(verification) {
        console.log('üì± [TaskVerification] === TELEGRAM –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø ===');

        const { taskId, data, userId } = verification;
        const { channelUsername, actionType } = data;

        console.log('üìä [TaskVerification] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
            –∫–∞–Ω–∞–ª: channelUsername,
            –¥—ñ—è: actionType
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ UI - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        updateTaskUI(taskId, 'verifying');

        try {
            // –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞
            console.log('üîÑ [TaskVerification] –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞');
            const botStarted = await checkBotStarted(userId);

            if (!botStarted) {
                console.log('‚ùå [TaskVerification] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞');
                throw new Error('–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ ' + state.telegramBotUsername);
            }

            // –ö—Ä–æ–∫ 2: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ API
            console.log('üîÑ [TaskVerification] –ö—Ä–æ–∫ 2: –ó–∞–ø–∏—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
            const response = await window.TasksAPI.verify.telegram(userId, channelUsername);

            if (response.verified) {
                console.log('‚úÖ [TaskVerification] Telegram –∑–∞–≤–¥–∞–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ');

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
                await completeTask(taskId, verification);

                // –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                await claimReward(taskId, response.reward);

                return {
                    success: true,
                    verified: true,
                    reward: response.reward
                };
            } else {
                console.log('‚ùå [TaskVerification] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
                throw new Error(response.message || '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå [TaskVerification] –ü–æ–º–∏–ª–∫–∞ Telegram –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
            updateTaskUI(taskId, 'failed', error.message);
            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞
     */
    async function checkBotStarted(userId) {
        console.log('ü§ñ [TaskVerification] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);

        try {
            const response = await window.TasksAPI.verify.checkBot(userId);
            return response.botStarted || false;
        } catch (error) {
            console.error('‚ùå [TaskVerification] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ç–∞:', error);
            return false;
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å (YouTube, Twitter, Discord)
     */
    async function verifySocialTask(verification) {
        console.log('üåê [TaskVerification] === –°–û–¶–Ü–ê–õ–¨–ù–ê –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø ===');
        console.log('üìä [TaskVerification] –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', verification.platform);

        const { taskId, userId, platform } = verification;

        try {
            // –û–Ω–æ–≤–ª—é—î–º–æ UI
            updateTaskUI(taskId, 'verifying');

            // –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ timestamp –ø–æ—á–∞—Ç–∫—É
            let startTimestamp = state.taskTimestamps.get(taskId);

            if (!startTimestamp) {
                console.log('‚è∞ [TaskVerification] –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ª—ñ–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è');
                startTimestamp = Date.now();
                state.taskTimestamps.set(taskId, startTimestamp);
                saveTaskTimestamps();

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–≤–¥–∞–Ω–Ω—è
                await window.TasksAPI.tasks.start(userId, taskId);

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                window.TasksUtils.showToast(
                    window.TasksConstants.MESSAGES.INFO.WAIT_VERIFICATION,
                    'info',
                    5000
                );

                // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                if (verification.data.url) {
                    console.log('üîó [TaskVerification] –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ URL:', verification.data.url);
                    window.open(verification.data.url, '_blank');
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä
                showVerificationTimer(taskId, config.socialVerificationDelay);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∏–Ω—É–≤ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —á–∞—Å
            const elapsedTime = Date.now() - startTimestamp;
            const remainingTime = config.socialVerificationDelay - elapsedTime;

            console.log('‚è±Ô∏è [TaskVerification] –ß–∞—Å –∑ –ø–æ—á–∞—Ç–∫—É:', Math.floor(elapsedTime / 1000), '—Å–µ–∫');

            if (remainingTime > 0) {
                console.log('‚è≥ [TaskVerification] –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—á–µ–∫–∞—Ç–∏ —â–µ:', Math.ceil(remainingTime / 1000), '—Å–µ–∫');

                // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä
                showVerificationTimer(taskId, remainingTime);

                throw new Error(`–ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ ${Math.ceil(remainingTime / 1000)} —Å–µ–∫—É–Ω–¥`);
            }

            // –ß–∞—Å –ø—Ä–æ–π—à–æ–≤, –≤–∏–∫–æ–Ω—É—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
            console.log('‚úÖ [TaskVerification] –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ...');

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            const response = await window.TasksAPI.tasks.complete(userId, taskId);

            if (response.success) {
                console.log('‚úÖ [TaskVerification] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ');

                // –í–∏–¥–∞–ª—è—î–º–æ timestamp
                state.taskTimestamps.delete(taskId);
                saveTaskTimestamps();

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
                await completeTask(taskId, verification);

                // –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                await claimReward(taskId, response.reward);

                return {
                    success: true,
                    verified: true,
                    reward: response.reward
                };
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è');
            }

        } catch (error) {
            console.error('‚ùå [TaskVerification] –ü–æ–º–∏–ª–∫–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
            updateTaskUI(taskId, 'failed', error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–π–º–µ—Ä –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
     */
    function showVerificationTimer(taskId, duration) {
        console.log('‚è≤Ô∏è [TaskVerification] –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è:', taskId);

        const taskCard = document.querySelector(`[data-task-id="${taskId}"]`);
        if (!taskCard) return;

        const button = taskCard.querySelector('.task-button');
        if (!button) return;

        let remainingTime = Math.ceil(duration / 1000);

        const updateTimer = () => {
            if (remainingTime <= 0) {
                button.textContent = '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏';
                button.disabled = false;
                return;
            }

            button.textContent = `–ó–∞—á–µ–∫–∞–π—Ç–µ ${remainingTime} —Å–µ–∫...`;
            button.disabled = true;
            remainingTime--;

            setTimeout(updateTimer, 1000);
        };

        updateTimer();
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function completeTask(taskId, verification) {
        console.log('‚úÖ [TaskVerification] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', taskId);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ —Å—Ç–æ—Ä—ñ
        window.TasksStore.actions.updateTaskStatus(
            verification.taskType,
            taskId,
            'completed'
        );

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        updateTaskUI(taskId, 'completed');

        // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π
        state.activeVerifications.delete(verification.id);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        saveCompletedTask(taskId, verification);
    }

    /**
     * –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
     */
    async function claimReward(taskId, reward) {
        console.log('üí∞ [TaskVerification] === –ù–ê–†–ê–•–£–í–ê–ù–ù–Ø –í–ò–ù–ê–ì–û–†–û–î–ò ===');
        console.log('üéÅ [TaskVerification] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞:', reward);

        if (!reward || (!reward.winix && !reward.tickets)) {
            console.warn('‚ö†Ô∏è [TaskVerification] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –≤—ñ–¥—Å—É—Ç–Ω—è');
            return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        const currentBalance = window.TasksStore.selectors.getUserBalance();
        const newBalance = {
            winix: currentBalance.winix + (reward.winix || 0),
            tickets: currentBalance.tickets + (reward.tickets || 0)
        };

        window.TasksStore.actions.updateBalance(newBalance);

        // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        showRewardAnimation(reward);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        window.TasksServices?.Notification?.showReward(reward);

        console.log('‚úÖ [TaskVerification] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞');
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function updateTaskUI(taskId, status, message = '') {
        console.log('üîÑ [TaskVerification] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –∑–∞–≤–¥–∞–Ω–Ω—è:', {
            taskId,
            status,
            message
        });

        const taskCard = document.querySelector(`[data-task-id="${taskId}"]`);
        if (!taskCard) {
            console.warn('‚ö†Ô∏è [TaskVerification] –ö–∞—Ä—Ç–∫–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–ª–∞—Å–∏ —Å—Ç–∞—Ç—É—Å—É
        taskCard.classList.remove('verifying', 'claiming', 'completed', 'failed');

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–ª–∞—Å —Å—Ç–∞—Ç—É—Å—É
        taskCard.classList.add(status);

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
        const button = taskCard.querySelector('.task-button');
        if (button) {
            switch(status) {
                case 'verifying':
                    button.textContent = '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...';
                    button.disabled = true;
                    break;

                case 'claiming':
                    button.textContent = '–û—Ç—Ä–∏–º–∞–Ω–Ω—è...';
                    button.disabled = true;
                    break;

                case 'completed':
                    button.textContent = '–í–∏–∫–æ–Ω–∞–Ω–æ ‚úì';
                    button.disabled = true;
                    break;

                case 'failed':
                    button.textContent = '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É';
                    button.disabled = false;
                    if (message) {
                        window.TasksUtils.showToast(message, 'error');
                    }
                    break;
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function showRewardAnimation(reward) {
        console.log('üéä [TaskVerification] –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏');

        const animDiv = document.createElement('div');
        animDiv.className = 'task-reward-animation';

        let content = '';
        if (reward.winix) {
            content += `<div class="reward-winix">+${reward.winix} WINIX</div>`;
        }
        if (reward.tickets) {
            content += `<div class="reward-tickets">+${reward.tickets} TICKETS</div>`;
        }

        animDiv.innerHTML = content;
        document.body.appendChild(animDiv);

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        setTimeout(() => {
            animDiv.classList.add('show');
        }, 10);

        // –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            animDiv.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(animDiv);
            }, 500);
        }, 2500);
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π
     */
    function startQueueProcessor() {
        console.log('üîÑ [TaskVerification] –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–Ω–∏–∫–∞ —á–µ—Ä–≥–∏');

        setInterval(() => {
            if (state.isProcessing || state.verificationQueue.length === 0) {
                return;
            }

            processNextVerification();
        }, config.queueProcessInterval);
    }

    /**
     * –û–±—Ä–æ–±–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑ —á–µ—Ä–≥–∏
     */
    async function processNextVerification() {
        if (state.verificationQueue.length === 0) return;

        state.isProcessing = true;
        const verification = state.verificationQueue.shift();

        console.log('üîÑ [TaskVerification] –û–±—Ä–æ–±–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ —á–µ—Ä–≥–∏:', verification);

        try {
            await verifyTask(
                verification.taskId,
                verification.taskType,
                verification.platform,
                verification.data
            );
        } catch (error) {
            console.error('‚ùå [TaskVerification] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏:', error);
        }

        state.isProcessing = false;
    }

    /**
     * –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
     */
    function addToQueue(taskId, taskType, platform, data) {
        console.log('üì• [TaskVerification] –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É:', {
            taskId,
            taskType,
            platform
        });

        state.verificationQueue.push({
            taskId,
            taskType,
            platform,
            data,
            addedAt: Date.now()
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    function setupEventHandlers() {
        console.log('üéØ [TaskVerification] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π');

        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–¥–∞–Ω—å
        document.addEventListener('click', async (e) => {
            const taskButton = e.target.closest('.task-button');
            if (!taskButton) return;

            const taskCard = taskButton.closest('[data-task-id]');
            if (!taskCard) return;

            const taskId = taskCard.getAttribute('data-task-id');
            const taskType = taskCard.getAttribute('data-task-type');
            const platform = taskCard.getAttribute('data-platform');

            console.log('üñ±Ô∏è [TaskVerification] –ö–ª—ñ–∫ –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è:', {
                taskId,
                taskType,
                platform
            });

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
            if (taskCard.classList.contains('completed')) {
                console.log('‚ÑπÔ∏è [TaskVerification] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ');
                return;
            }

            // –ó–±–∏—Ä–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
            const data = {
                channelUsername: taskCard.getAttribute('data-channel'),
                actionType: taskCard.getAttribute('data-action'),
                url: taskCard.getAttribute('data-url')
            };

            try {
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                await verifyTask(taskId, taskType, platform, data);
            } catch (error) {
                console.error('‚ùå [TaskVerification] –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:', error);
            }
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ID –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
     */
    function generateVerificationId() {
        return `ver_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function saveCompletedTask(taskId, verification) {
        console.log('üíæ [TaskVerification] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è');

        const completedTasks = window.TasksUtils.storage.get('completedTasks', {});
        completedTasks[taskId] = {
            taskId,
            platform: verification.platform,
            completedAt: Date.now(),
            reward: verification.reward
        };

        window.TasksUtils.storage.set('completedTasks', completedTasks);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ
     */
    function isTaskCompleted(taskId) {
        const completedTasks = window.TasksUtils.storage.get('completedTasks', {});
        return !!completedTasks[taskId];
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π
     */
    function getStatistics() {
        const completedTasks = window.TasksUtils.storage.get('completedTasks', {});
        const platforms = {};

        Object.values(completedTasks).forEach(task => {
            platforms[task.platform] = (platforms[task.platform] || 0) + 1;
        });

        return {
            totalCompleted: Object.keys(completedTasks).length,
            byPlatform: platforms,
            activeVerifications: state.activeVerifications.size,
            queueLength: state.verificationQueue.length,
            pendingTimers: state.taskTimestamps.size
        };
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
     */
    function clearCompletedCache() {
        console.log('üßπ [TaskVerification] –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å');
        window.TasksUtils.storage.remove('completedTasks');
        window.TasksUtils.storage.remove(window.TasksConstants.STORAGE_KEYS.TASK_TIMESTAMPS);
        state.taskTimestamps.clear();
    }

    console.log('‚úÖ [TaskVerification] –ú–æ–¥—É–ª—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        verifyTask,
        isTaskCompleted,
        getStatistics,
        addToQueue,
        clearCompletedCache
    };

})();

console.log('‚úÖ [TaskVerification] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');