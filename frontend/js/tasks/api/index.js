/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å API –∑–∞–≤–¥–∞–Ω—å
 *
 * –Ü–Ω—Ç–µ–≥—Ä—É—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ API –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:
 * - –°–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π
 * - –ë–∞–∑–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —ñ –∫–µ—à—É–≤–∞–Ω–Ω—è
 * - –ú–æ–¥–µ–ª—ñ –¥–∞–Ω–∏—Ö
 *
 * @version 3.1.0
 */

// –Ü–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
import requestService from './core/request.js';
import cacheService from './core/cache.js';
import { CONFIG, API_VERSION } from './core/config.js';

// –Ü–º–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤
import taskService from './services/task-service.js';
import actionService from './services/action-service.js';
import progressService from './services/progress-service.js';

// –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
import taskTypesModel from './models/task-types.js';

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å API –∑–∞–≤–¥–∞–Ω—å
 */
class TaskAPI {
    constructor() {
        // –í–µ—Ä—Å—ñ—è API
        this.version = API_VERSION;

        // –ë–∞–∑–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        this.request = requestService;
        this.cache = cacheService;

        // –°–µ—Ä–≤—ñ—Å–∏
        this.tasks = taskService;
        this.actions = actionService;
        this.progress = progressService;

        // –ú–æ–¥–µ–ª—ñ
        this.types = taskTypesModel;

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        this.config = CONFIG;
        this.baseUrl = requestService.baseUrl;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –∑–∞–≤–¥–∞–Ω—å
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    init(options = {}) {
        // –õ–æ–≥—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
        console.log(`üîÑ Task API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –∑–∞–≤–¥–∞–Ω—å v${this.version}`);

        // –ú–æ–∂–µ–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (options.apiPaths) {
            Object.assign(CONFIG.API_PATHS, options.apiPaths);
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if (typeof document !== 'undefined') {
            document.dispatchEvent(new CustomEvent('task-api-initialized', {
                detail: {
                    timestamp: Date.now(),
                    version: this.version
                }
            }));
        }

        return this;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    getUserId() {
        return this.request.getUserId();
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∫–µ—à—É API
     */
    clearCache() {
        this.cache.clearCache();
        console.log('‚úì Task API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω—å
     */
    async getAllTasks(options = {}) {
        return this.tasks.loadAllTasks(options);
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É
     * @param {string} type - –¢–∏–ø –∑–∞–≤–¥–∞–Ω—å
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω—å
     */
    async getTasksByType(type, options = {}) {
        return this.tasks.loadTasksByType(type, options);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async getTaskDetails(taskId, options = {}) {
        return this.tasks.getTaskDetails(taskId, options);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async getTaskProgress(taskId, options = {}) {
        return this.tasks.getTaskProgress(taskId, options);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async getTaskStatus(taskId, options = {}) {
        return this.tasks.getTaskStatus(taskId, options);
    }

    /**
     * –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async startTask(taskId, options = {}) {
        return this.actions.startTask(taskId, options);
    }

    /**
     * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} verificationData - –î–∞–Ω—ñ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
     */
    async verifyTask(taskId, verificationData = {}, options = {}) {
        return this.actions.verifyTask(taskId, verificationData, options);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} progressData - –î–∞–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å—É
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async updateTaskProgress(taskId, progressData = {}, options = {}) {
        return this.actions.updateTaskProgress(taskId, progressData, options);
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
     */
    async cancelTask(taskId, options = {}) {
        return this.actions.cancelTask(taskId, options);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    async claimTaskReward(taskId, options = {}) {
        return this.actions.claimTaskReward(taskId, options);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {number} interval - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–º—Å)
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {string} ID –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
     */
    startProgressMonitoring(taskId, interval, callback) {
        return this.progress.startProgressMonitoring(taskId, interval, callback);
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–≥—Ä–µ—Å—É
     * @param {string} monitoringId - ID –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    stopProgressMonitoring(monitoringId) {
        return this.progress.stopProgressMonitoring(monitoringId);
    }

    /**
     * –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞–Ω—É –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É
     */
    async analyzeTaskProgress(taskId, options = {}) {
        return this.progress.analyzeTaskProgress(taskId, options);
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä API
const taskApi = new TaskAPI();

// –í–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
if (typeof window !== 'undefined') {
    // –ü—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => taskApi.init());
    } else {
        // DOM –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
        setTimeout(() => taskApi.init(), 0);
    }

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    window.TaskAPI = taskApi;
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export default taskApi;

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ–∫—Ä–µ–º—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export {
    requestService,
    cacheService,
    taskService,
    actionService,
    progressService,
    taskTypesModel,
    CONFIG,
    API_VERSION
};