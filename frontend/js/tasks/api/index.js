/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å API –∑–∞–≤–¥–∞–Ω—å
 *
 * –Ü–Ω—Ç–µ–≥—Ä—É—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ API –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:
 * - –°–µ—Ä–≤—ñ—Å–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π
 * - –ë–∞–∑–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —ñ –∫–µ—à—É–≤–∞–Ω–Ω—è
 * - –ú–æ–¥–µ–ª—ñ –¥–∞–Ω–∏—Ö
 *
 * @version 3.1.0
 */

// –Ü–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ core
import coreModule from './core/index.js';

// –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –∑ –±–∞–∑–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
const {
  request: requestService,
  cache: cacheService,
  config: { CONFIG, API_VERSION, API_ERROR_CODES }
} = coreModule;

// –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ª—ñ–Ω–∏–≤–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –º–æ–¥—É–ª—ñ–≤
const lazyModules = {
  taskService: null,
  actionService: null,
  progressService: null,
  taskTypesModel: null,
  dailyBonusModels: null
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–µ–¥–∞—á–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤
const getTaskService = () => {
  if (!lazyModules.taskService) {
    lazyModules.taskService = require('./services/task-service.js').default;
  }
  return lazyModules.taskService;
};

const getActionService = () => {
  if (!lazyModules.actionService) {
    lazyModules.actionService = require('./services/action-service.js').default;
  }
  return lazyModules.actionService;
};

const getProgressService = () => {
  if (!lazyModules.progressService) {
    lazyModules.progressService = require('./services/progress-service.js').default;
  }
  return lazyModules.progressService;
};

const getTaskTypesModel = () => {
  if (!lazyModules.taskTypesModel) {
    lazyModules.taskTypesModel = require('./models/task-types.js').default;
  }
  return lazyModules.taskTypesModel;
};

// –§—É–Ω–∫—Ü—ñ—ó —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –∑ –ø—Ä–æ–º—ñ–∂–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
export const getDailyBonusStatus = async (userId) => {
  if (!lazyModules.dailyBonusModels) {
    lazyModules.dailyBonusModels = await import('./models/daily-bonus.js');
  }
  return lazyModules.dailyBonusModels.getDailyBonusStatus(userId);
};

export const claimDailyBonus = async (userId) => {
  if (!lazyModules.dailyBonusModels) {
    lazyModules.dailyBonusModels = await import('./models/daily-bonus.js');
  }
  return lazyModules.dailyBonusModels.claimDailyBonus(userId);
};

export const getDailyBonusHistory = async (userId, options) => {
  if (!lazyModules.dailyBonusModels) {
    lazyModules.dailyBonusModels = await import('./models/daily-bonus.js');
  }
  return lazyModules.dailyBonusModels.getDailyBonusHistory(userId, options);
};

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å API –∑–∞–≤–¥–∞–Ω—å
 */
class TaskAPI {
  constructor() {
    // –í–µ—Ä—Å—ñ—è API
    this.version = API_VERSION;

    // –ë–∞–∑–æ–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    this.request = requestService;
    this.cache = cacheService;

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    this.config = CONFIG;
    this.baseUrl = requestService.baseUrl;

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    this._initialized = false;
  }

  /**
   * –õ–µ–¥–∞—á–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ (–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π)
   */
  get tasks() {
    return getTaskService();
  }

  get actions() {
    return getActionService();
  }

  get progress() {
    return getProgressService();
  }

  get types() {
    return getTaskTypesModel();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –∑–∞–≤–¥–∞–Ω—å
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
   */
  init(options = {}) {
    // –Ø–∫—â–æ –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ this
    if (this._initialized) return this;

    // –õ–æ–≥—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    console.log(`üîÑ Task API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –∑–∞–≤–¥–∞–Ω—å v${this.version}`);

    // –ú–æ–∂–µ–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (options.apiPaths) {
      Object.assign(CONFIG.API_PATHS, options.apiPaths);
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (typeof document !== 'undefined') {
      document.dispatchEvent(
        new CustomEvent('task-api-initialized', {
          detail: {
            timestamp: Date.now(),
            version: this.version,
          },
        })
      );
    }

    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    this._initialized = true;

    return this;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  getUserId() {
    return this.request.getUserId();
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∫–µ—à—É API
   */
  clearCache() {
    this.cache.clearCache();
    console.log('‚úì Task API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω—å
   */
  async getAllTasks(options = {}) {
    return this.tasks.loadAllTasks(options);
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É
   * @param {string} type - –¢–∏–ø –∑–∞–≤–¥–∞–Ω—å
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω—å
   */
  async getTasksByType(type, options = {}) {
    return this.tasks.loadTasksByType(type, options);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async getTaskDetails(taskId, options = {}) {
    return this.tasks.getTaskDetails(taskId, options);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async getTaskProgress(taskId, options = {}) {
    return this.tasks.getTaskProgress(taskId, options);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async getTaskStatus(taskId, options = {}) {
    return this.tasks.getTaskStatus(taskId, options);
  }

  /**
   * –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
   */
  async startTask(taskId, options = {}) {
    return this.actions.startTask(taskId, options);
  }

  /**
   * –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} verificationData - –î–∞–Ω—ñ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  async verifyTask(taskId, verificationData = {}, options = {}) {
    return this.actions.verifyTask(taskId, verificationData, options);
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} progressData - –î–∞–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å—É
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  async updateTaskProgress(taskId, progressData = {}, options = {}) {
    return this.actions.updateTaskProgress(taskId, progressData, options);
  }

  /**
   * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
   */
  async cancelTask(taskId, options = {}) {
    return this.actions.cancelTask(taskId, options);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏
   */
  async claimTaskReward(taskId, options = {}) {
    return this.actions.claimTaskReward(taskId, options);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {number} interval - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–º—Å)
   * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
   * @returns {string} ID –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  startProgressMonitoring(taskId, interval, callback) {
    return this.progress.startProgressMonitoring(taskId, interval, callback);
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–≥—Ä–µ—Å—É
   * @param {string} monitoringId - ID –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
   */
  stopProgressMonitoring(monitoringId) {
    return this.progress.stopProgressMonitoring(monitoringId);
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞–Ω—É –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É
   */
  async analyzeTaskProgress(taskId, options = {}) {
    return this.progress.analyzeTaskProgress(taskId, options);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
   * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
   */
  async getDailyBonusStatus(userId) {
    return getDailyBonusStatus(userId);
  }

  /**
   * –ó–∞–ø–∏—Ç –Ω–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
   * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
   */
  async claimDailyBonus(userId) {
    return claimDailyBonus(userId);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
   * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
   */
  async getDailyBonusHistory(userId, options = {}) {
    return getDailyBonusHistory(userId, options);
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä API
const taskApi = new TaskAPI();

// –í–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
if (typeof window !== 'undefined') {
  // –ü—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => taskApi.init());
  } else {
    // DOM –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
    setTimeout(() => taskApi.init(), 0);
  }

  // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
  window.TaskAPI = taskApi;
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export default taskApi;

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ–∫—Ä–µ–º—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export {
  requestService,
  cacheService,
  CONFIG,
  API_VERSION,
  API_ERROR_CODES
};