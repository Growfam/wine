/**
 * –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–æ–ø–æ–º—ñ–∂–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
 */

window.TasksUtils = (function() {
    'use strict';

    console.log('üõ†Ô∏è [TasksUtils] ===== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –£–¢–ò–õ–Ü–¢–ê–†–ù–ò–• –§–£–ù–ö–¶–Ü–ô =====');

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª –∑ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏ —Ç–∏—Å—è—á
     */
    function formatNumber(num) {
        console.log('üî¢ [TasksUtils] –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞:', num);
        if (typeof num !== 'number' && typeof num !== 'string') {
            console.warn('‚ö†Ô∏è [TasksUtils] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:', typeof num);
            return '0';
        }
        const formatted = num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        console.log('‚úÖ [TasksUtils] –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', formatted);
        return formatted;
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —ñ —á–∞—Å—É
     */
    function formatDate(date, format = 'full') {
        console.log('üìÖ [TasksUtils] –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:', date, '—Ñ–æ—Ä–º–∞—Ç:', format);

        const d = new Date(date);
        if (isNaN(d.getTime())) {
            console.error('‚ùå [TasksUtils] –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞:', date);
            return 'Invalid Date';
        }

        let result;
        switch(format) {
            case 'short':
                result = d.toLocaleDateString('uk-UA');
                break;
            case 'time':
                result = d.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
                break;
            case 'full':
            default:
                result = d.toLocaleString('uk-UA');
        }

        console.log('‚úÖ [TasksUtils] –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞:', result);
        return result;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –¥–æ –ø—ñ–≤–Ω–æ—á—ñ
     */
    function getTimeUntilMidnight() {
        console.log('‚è∞ [TasksUtils] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –¥–æ –ø—ñ–≤–Ω–æ—á—ñ...');

        const now = new Date();
        const midnight = new Date();
        midnight.setHours(24, 0, 0, 0);

        const msUntilMidnight = midnight.getTime() - now.getTime();
        const hours = Math.floor(msUntilMidnight / (1000 * 60 * 60));
        const minutes = Math.floor((msUntilMidnight % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((msUntilMidnight % (1000 * 60)) / 1000);

        const result = {
            total: msUntilMidnight,
            hours: hours,
            minutes: minutes,
            seconds: seconds,
            formatted: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
        };

        console.log('‚úÖ [TasksUtils] –ß–∞—Å –¥–æ –ø—ñ–≤–Ω–æ—á—ñ:', result);
        return result;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –Ω–æ–≤–∏–π –¥–µ–Ω—å
     */
    function isNewDay(lastDate) {
        console.log('üìÖ [TasksUtils] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è...');
        console.log('  üìä –û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞:', lastDate);

        if (!lastDate) {
            console.log('  ‚úÖ [TasksUtils] –û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è - —Ü–µ –Ω–æ–≤–∏–π –¥–µ–Ω—å');
            return true;
        }

        const last = new Date(lastDate);
        const now = new Date();

        const lastDay = last.toDateString();
        const today = now.toDateString();

        const isNew = lastDay !== today;

        console.log('  üìä –û—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å:', lastDay);
        console.log('  üìä –°—å–æ–≥–æ–¥–Ω—ñ:', today);
        console.log('  ‚úÖ [TasksUtils] –ù–æ–≤–∏–π –¥–µ–Ω—å:', isNew);

        return isNew;
    }

    /**
     * Debounce —Ñ—É–Ω–∫—Ü—ñ—è
     */
    function debounce(func, wait) {
        console.log('‚è±Ô∏è [TasksUtils] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è debounce —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é:', wait);

        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                console.log('üîÑ [TasksUtils] –í–∏–∫–æ–Ω–∞–Ω–Ω—è debounced —Ñ—É–Ω–∫—Ü—ñ—ó');
                clearTimeout(timeout);
                func(...args);
            };

            console.log('‚è∏Ô∏è [TasksUtils] –í—ñ–¥–∫–ª–∞–¥–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó');
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    /**
     * Throttle —Ñ—É–Ω–∫—Ü—ñ—è
     */
    function throttle(func, limit) {
        console.log('‚è±Ô∏è [TasksUtils] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è throttle —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ª—ñ–º—ñ–ø–æ–º:', limit);

        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                console.log('üîÑ [TasksUtils] –í–∏–∫–æ–Ω–∞–Ω–Ω—è throttled —Ñ—É–Ω–∫—Ü—ñ—ó');
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => {
                    console.log('‚úÖ [TasksUtils] Throttle –ø–µ—Ä—ñ–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                    inThrottle = false;
                }, limit);
            } else {
                console.log('‚è∏Ô∏è [TasksUtils] –§—É–Ω–∫—Ü—ñ—è –≤ throttle –ø–µ—Ä—ñ–æ–¥—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
            }
        };
    }

    /**
     * –ì–ª–∏–±–æ–∫–µ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞
     */
    function deepClone(obj) {
        console.log('üìã [TasksUtils] –ì–ª–∏–±–æ–∫–µ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –æ–±\'—î–∫—Ç–∞:', obj);

        if (obj === null || typeof obj !== 'object') {
            return obj;
        }

        if (obj instanceof Date) {
            return new Date(obj.getTime());
        }

        if (obj instanceof Array) {
            console.log('  üîÑ [TasksUtils] –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –¥–æ–≤–∂–∏–Ω–æ—é:', obj.length);
            return obj.map(item => deepClone(item));
        }

        if (obj instanceof Object) {
            console.log('  üîÑ [TasksUtils] –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –æ–±\'—î–∫—Ç–∞ –∑ –∫–ª—é—á–∞–º–∏:', Object.keys(obj));
            const clonedObj = {};
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    clonedObj[key] = deepClone(obj[key]);
                }
            }
            return clonedObj;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID
     */
    function generateId() {
        const id = Date.now().toString(36) + Math.random().toString(36).substr(2);
        console.log('üÜî [TasksUtils] –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID:', id);
        return id;
    }

    /**
     * –õ–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
     */
    const storage = {
        set: function(key, value) {
            console.log('üíæ [TasksUtils] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage:', key);
            try {
                const serialized = JSON.stringify(value);
                localStorage.setItem(key, serialized);
                console.log('‚úÖ [TasksUtils] –ó–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ, —Ä–æ–∑–º—ñ—Ä:', serialized.length, '–±–∞–π—Ç');
                return true;
            } catch (error) {
                console.error('‚ùå [TasksUtils] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
                return false;
            }
        },

        get: function(key, defaultValue = null) {
            console.log('üìÇ [TasksUtils] –ß–∏—Ç–∞–Ω–Ω—è –∑ localStorage:', key);
            try {
                const item = localStorage.getItem(key);
                if (item === null) {
                    console.log('üì≠ [TasksUtils] –ö–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º');
                    return defaultValue;
                }
                const parsed = JSON.parse(item);
                console.log('‚úÖ [TasksUtils] –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                return parsed;
            } catch (error) {
                console.error('‚ùå [TasksUtils] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è:', error);
                return defaultValue;
            }
        },

        remove: function(key) {
            console.log('üóëÔ∏è [TasksUtils] –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ localStorage:', key);
            try {
                localStorage.removeItem(key);
                console.log('‚úÖ [TasksUtils] –í–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                return true;
            } catch (error) {
                console.error('‚ùå [TasksUtils] –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', error);
                return false;
            }
        },

        clear: function() {
            console.log('üßπ [TasksUtils] –û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ localStorage');
            try {
                localStorage.clear();
                console.log('‚úÖ [TasksUtils] –û—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                return true;
            } catch (error) {
                console.error('‚ùå [TasksUtils] –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', error);
                return false;
            }
        }
    };

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
     */
    const validate = {
        isNumber: function(value) {
            const result = typeof value === 'number' && !isNaN(value) && isFinite(value);
            console.log('üîç [TasksUtils] –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∏—Å–ª–∞:', value, '‚Üí', result);
            return result;
        },

        isPositiveNumber: function(value) {
            const result = this.isNumber(value) && value > 0;
            console.log('üîç [TasksUtils] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —á–∏—Å–ª–∞:', value, '‚Üí', result);
            return result;
        },

        isString: function(value) {
            const result = typeof value === 'string';
            console.log('üîç [TasksUtils] –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä—è–¥–∫–∞:', value, '‚Üí', result);
            return result;
        },

        isArray: function(value) {
            const result = Array.isArray(value);
            console.log('üîç [TasksUtils] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–∞—Å–∏–≤—É:', value, '‚Üí', result);
            return result;
        },

        isObject: function(value) {
            const result = value !== null && typeof value === 'object' && !Array.isArray(value);
            console.log('üîç [TasksUtils] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±\'—î–∫—Ç–∞:', value, '‚Üí', result);
            return result;
        },

        isWalletAddress: function(address) {
            const result = /^0x[a-fA-F0-9]{40}$/.test(address);
            console.log('üîç [TasksUtils] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è:', address, '‚Üí', result);
            return result;
        }
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function showToast(message, type = 'info', duration = 3000) {
        console.log(`üí¨ [TasksUtils] –ü–æ–∫–∞–∑ toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${type} - "${message}"`);

        const toast = document.getElementById('toast-message');
        if (!toast) {
            console.error('‚ùå [TasksUtils] –ï–ª–µ–º–µ–Ω—Ç toast –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–ª–∞—Å–∏
        toast.className = 'toast-message';

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞ —Å—Ç–∏–ª—å
        toast.textContent = message;
        toast.classList.add(type);

        // –ü–æ–∫–∞–∑—É—î–º–æ toast
        setTimeout(() => {
            toast.classList.add('show');
            console.log('‚úÖ [TasksUtils] Toast –ø–æ–∫–∞–∑–∞–Ω–æ');
        }, 10);

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏
        setTimeout(() => {
            toast.classList.remove('show');
            console.log('‚úÖ [TasksUtils] Toast –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ');
        }, duration);
    }

    /**
     * –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
     */
    function msToReadable(ms) {
        console.log('‚è±Ô∏è [TasksUtils] –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥:', ms);

        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        let result;
        if (days > 0) {
            result = `${days} ${days === 1 ? '–¥–µ–Ω—å' : '–¥–Ω—ñ–≤'}`;
        } else if (hours > 0) {
            result = `${hours} ${hours === 1 ? '–≥–æ–¥–∏–Ω–∞' : '–≥–æ–¥–∏–Ω'}`;
        } else if (minutes > 0) {
            result = `${minutes} ${minutes === 1 ? '—Ö–≤–∏–ª–∏–Ω–∞' : '—Ö–≤–∏–ª–∏–Ω'}`;
        } else {
            result = `${seconds} ${seconds === 1 ? '—Å–µ–∫—É–Ω–¥–∞' : '—Å–µ–∫—É–Ω–¥'}`;
        }

        console.log('‚úÖ [TasksUtils] –ß–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç:', result);
        return result;
    }

    /**
     * API –≤–∏–∫–ª–∏–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
     */
    async function apiCall(endpoint, options = {}) {
        console.log('üåê [TasksUtils] API –≤–∏–∫–ª–∏–∫:', endpoint);
        console.log('  üìä –û–ø—Ü—ñ—ó:', options);

        const baseUrl = window.TasksConstants?.API_ENDPOINTS?.BASE_URL || '/api';
        const url = baseUrl + endpoint;

        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        };

        const finalOptions = { ...defaultOptions, ...options };

        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É —è–∫—â–æ —î
        if (finalOptions.body && typeof finalOptions.body === 'object') {
            finalOptions.body = JSON.stringify(finalOptions.body);
        }

        console.log('  üîó –ü–æ–≤–Ω–∏–π URL:', url);
        console.log('  üìã –§—ñ–Ω–∞–ª—å–Ω—ñ –æ–ø—Ü—ñ—ó:', finalOptions);

        try {
            const startTime = Date.now();
            const response = await fetch(url, finalOptions);
            const endTime = Date.now();

            console.log(`  ‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${endTime - startTime}–º—Å`);
            console.log(`  üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.status} ${response.statusText}`);

            if (!response.ok) {
                const error = await response.json().catch(() => ({ message: 'Unknown error' }));
                console.error('‚ùå [TasksUtils] API –ø–æ–º–∏–ª–∫–∞:', error);
                throw new Error(error.message || `HTTP ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ [TasksUtils] API –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', data);
            return data;

        } catch (error) {
            console.error('‚ùå [TasksUtils] –ü–æ–º–∏–ª–∫–∞ API –≤–∏–∫–ª–∏–∫—É:', error);
            throw error;
        }
    }

    console.log('‚úÖ [TasksUtils] –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        formatNumber,
        formatDate,
        getTimeUntilMidnight,
        isNewDay,
        debounce,
        throttle,
        deepClone,
        generateId,
        storage,
        validate,
        showToast,
        msToReadable,
        apiCall
    };

})();

console.log('‚úÖ [TasksUtils] –ú–æ–¥—É–ª—å —É—Ç–∏–ª—ñ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');