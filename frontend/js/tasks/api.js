/**
 * API –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
 * –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ JSON –¥–∞–Ω–∏—Ö –¥–ª—è wallet endpoints
 */
window.TasksAPI = (function() {
    'use strict';

    console.log('üì¶ [TasksAPI] ========== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ú–û–î–£–õ–Ø TasksAPI ==========');
    console.log('üïê [TasksAPI] –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', new Date().toISOString());

    // –ë–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API
    const API_CONFIG = {
        baseUrl: '',
        timeout: 15000,
        retryAttempts: 3,
        retryDelay: 1000
    };

    console.log('‚öôÔ∏è [TasksAPI] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', API_CONFIG);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ WinixAPI
    console.log('üîç [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ WinixAPI...');
    if (typeof window.WinixAPI !== 'undefined') {
        console.log('‚úÖ [TasksAPI] WinixAPI –∑–Ω–∞–π–¥–µ–Ω–æ:', Object.keys(window.WinixAPI));
    } else {
        console.log('‚ö†Ô∏è [TasksAPI] WinixAPI –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –ø—Ä—è–º–∏–π API');
    }

    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    function getAuthToken() {
        console.log('üîë [TasksAPI] === getAuthToken START ===');

        const authToken = localStorage.getItem('auth_token');
        const jwtToken = localStorage.getItem('jwt_token');
        const token = localStorage.getItem('token');

        console.log('üìä [TasksAPI] –¢–æ–∫–µ–Ω–∏ –≤ localStorage:', {
            auth_token: authToken ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
            jwt_token: jwtToken ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
            token: token ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'
        });

        const result = authToken || jwtToken || token;
        console.log('üîë [TasksAPI] –†–µ–∑—É–ª—å—Ç–∞—Ç getAuthToken:', result ? '—Ç–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ' : '—Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

        return result;
    }

    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    function getUserId() {
        console.log('üë§ [TasksAPI] === getUserId START ===');

        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
        if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
            console.log('üîç [TasksAPI] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ WinixAPI...');
            const apiId = window.WinixAPI.getUserId();
            console.log('üìä [TasksAPI] WinixAPI.getUserId —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', apiId);

            if (apiId && apiId !== 'undefined' && apiId !== 'null') {
                console.log('‚úÖ [TasksAPI] ID –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ WinixAPI:', apiId);
                return apiId;
            }
        }

        const telegramId = localStorage.getItem('telegram_user_id');
        const userId = localStorage.getItem('user_id');

        console.log('üìä [TasksAPI] ID –≤ localStorage:', {
            telegram_user_id: telegramId,
            user_id: userId
        });

        const result = telegramId || userId;
        console.log('üë§ [TasksAPI] –†–µ–∑—É–ª—å—Ç–∞—Ç getUserId:', result || 'ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

        return result;
    }

    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤
    function apiRequest(url, options) {
        console.log('üåê [TasksAPI] === apiRequest START ===');
        console.log('üìä [TasksAPI] URL:', url);
        console.log('üìä [TasksAPI] Options:', JSON.stringify(options, null, 2));

        options = options || {};
        const controller = new AbortController();
        const timeoutId = setTimeout(function() {
            console.warn('‚è±Ô∏è [TasksAPI] –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É! –í—ñ–¥–º—ñ–Ω–∞...');
            controller.abort();
        }, API_CONFIG.timeout);

        // –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ–π–Ω–∏–π —Ç–æ–∫–µ–Ω —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const token = getAuthToken();
        const userId = getUserId();

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        };

        console.log('üìä [TasksAPI] –ë–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (token) {
            headers['Authorization'] = 'Bearer ' + token;
            console.log('üîë [TasksAPI] –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
        } else {
            console.warn('‚ö†Ô∏è [TasksAPI] –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
        }

        // –î–æ–¥–∞—î–º–æ Telegram User ID –∑–∞–≥–æ–ª–æ–≤–æ–∫, —è–∫—â–æ ID –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (userId) {
            headers['X-Telegram-User-Id'] = userId;
            console.log('üë§ [TasksAPI] –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-User-Id:', userId);
        } else {
            console.warn('‚ö†Ô∏è [TasksAPI] User ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
        }

        // –û–±'—î–¥–Ω—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –æ–ø—Ü—ñ—è–º–∏ –∑–∞–ø–∏—Ç—É
        const fetchOptions = Object.assign({
            signal: controller.signal,
            headers: headers
        }, options);

        console.log('üåê [TasksAPI REQUEST] –§—ñ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
            url: url,
            method: fetchOptions.method || 'GET',
            hasAuth: !!token,
            userId: userId,
            headers: fetchOptions.headers,
            hasBody: !!fetchOptions.body
        });

        // –õ–æ–≥—É—î–º–æ body —è–∫—â–æ —î
        if (fetchOptions.body) {
            try {
                console.log('üì§ [TasksAPI] Request Body:', JSON.parse(fetchOptions.body));
            } catch (e) {
                console.log('üì§ [TasksAPI] Request Body (raw):', fetchOptions.body);
            }
        }

        let retryCount = 0;

        function executeRequest() {
            console.log(`üîÑ [TasksAPI] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É (—Å–ø—Ä–æ–±–∞ ${retryCount + 1}/${API_CONFIG.retryAttempts})...`);

            // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä timestamp –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
            const urlWithTimestamp = url.includes('?')
                ? url + '&t=' + Date.now()
                : url + '?t=' + Date.now();

            console.log('üåê [TasksAPI] –§—ñ–Ω–∞–ª—å–Ω–∏–π URL –∑ timestamp:', urlWithTimestamp);
            console.log('üïê [TasksAPI] –ß–∞—Å –∑–∞–ø–∏—Ç—É:', new Date().toISOString());

            return fetch(urlWithTimestamp, fetchOptions)
                .then(function(response) {
                    clearTimeout(timeoutId);
                    console.log('üì• [TasksAPI] –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ!');
                    console.log('üìä [TasksAPI] Response details:', {
                        status: response.status,
                        statusText: response.statusText,
                        ok: response.ok,
                        headers: response.headers
                    });

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    if (!response.ok) {
                        console.error('‚ùå [TasksAPI] HTTP –ø–æ–º–∏–ª–∫–∞:', {
                            status: response.status,
                            statusText: response.statusText
                        });

                        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                        return response.text().then(function(text) {
                            console.error('üìÑ [TasksAPI] Response body:', text);

                            // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
                            try {
                                const errorData = JSON.parse(text);
                                const error = new Error(errorData.message || 'HTTP ' + response.status + ': ' + response.statusText);
                                error.status = response.status;
                                error.statusText = response.statusText;
                                error.data = errorData;
                                throw error;
                            } catch (e) {
                                // –Ø–∫—â–æ –Ω–µ JSON, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
                                const error = new Error('HTTP ' + response.status + ': ' + response.statusText);
                                error.status = response.status;
                                error.statusText = response.statusText;
                                error.responseText = text;
                                throw error;
                            }
                        });
                    }

                    // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    console.log('üìÑ [TasksAPI] –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...');
                    return response.json().catch(function(err) {
                        console.error('‚ùå [TasksAPI] –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON:', err);
                        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
                    });
                })
                .then(function(data) {
                    console.log('‚úÖ [TasksAPI] JSON —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ');
                    console.log('üìä [TasksAPI] –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', JSON.stringify(data, null, 2));
                    return data;
                })
                .catch(function(error) {
                    clearTimeout(timeoutId);
                    console.error('‚ùå [TasksAPI] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);

                    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫
                    if (error.name === 'AbortError') {
                        console.error('‚è±Ô∏è [TasksAPI] –ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç');
                        throw new Error('–ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (' + API_CONFIG.timeout + '–º—Å)');
                    }

                    throw error;
                });
        }

        return executeRequest();
    }

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è User
    const user = {
        getProfile: function(userId) {
            console.log('üë§ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/user/' + userId);
        },

        getBalance: function(userId) {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/user/' + userId + '/balance');
        },

        updateBalance: function(userId, balances) {
            console.log('üí∞ [TasksAPI] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', userId, balances);
            if (!userId || !balances) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/user/' + userId + '/update-balance', {
                method: 'POST',
                body: JSON.stringify(balances)
            });
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Wallet - –í–ò–ü–†–ê–í–õ–ï–ù–û
    const wallet = {
        checkStatus: function(userId) {
            console.log('üëõ [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/status/' + userId);
        },

        connect: function(userId, walletData) {
            console.log('üîå [TasksAPI] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', userId);
            console.log('üìä [TasksAPI] –î–∞–Ω—ñ –≥–∞–º–∞–Ω—Ü—è:', walletData);

            if (!userId || !walletData || !walletData.address) {
                console.error('‚ùå [TasksAPI] –ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }

            // –§–æ—Ä–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
            const requestData = {
                address: walletData.address,
                chain: walletData.chain || '-239',
                publicKey: walletData.publicKey || '',
                provider: walletData.provider || '',
                timestamp: walletData.timestamp || Date.now()
            };

            console.log('üì§ [TasksAPI] –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', requestData);

            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/connect/' + userId, {
                method: 'POST',
                body: JSON.stringify(requestData)
            });
        },

        disconnect: function(userId) {
            console.log('üîå [TasksAPI] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/disconnect/' + userId, {
                method: 'POST',
                body: JSON.stringify({})
            });
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Flex
    const flex = {
        getBalance: function(userId, walletAddress) {
            console.log('üíé [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX:', userId);
            if (!userId || !walletAddress) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/flex/balance/' + userId + '?wallet=' + walletAddress);
        },

        claimReward: function(userId, level) {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ FLEX:', userId, level);
            if (!userId || !level) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/flex/claim/' + userId, {
                method: 'POST',
                body: JSON.stringify({ level: level, timestamp: Date.now() })
            });
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Daily
    const daily = {
        getStatus: function(userId) {
            console.log('üìÖ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/daily/status/' + userId);
        },

        claim: function(userId) {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/daily/claim/' + userId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            });
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Tasks
    const tasks = {
        getList: function(userId, type) {
            console.log('üìã [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å:', userId, type);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            type = type || 'all';
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/list/' + userId + '?type=' + type);
        },

        start: function(userId, taskId) {
            console.log('‚ñ∂Ô∏è [TasksAPI] –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/start/' + userId + '/' + taskId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            });
        },

        verify: function(userId, taskId, verificationData) {
            console.log('üîç [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/verify/' + userId + '/' + taskId, {
                method: 'POST',
                body: JSON.stringify(verificationData || {})
            });
        },

        complete: function(userId, taskId) {
            console.log('‚úÖ [TasksAPI] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/complete/' + userId + '/' + taskId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            });
        },

        claim: function(userId, taskId) {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/claim/' + userId + '/' + taskId, {
                method: 'POST'
            });
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Verification
    const verify = {
        telegram: function(userId, channelUsername) {
            console.log('üì± [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Telegram –ø—ñ–¥–ø–∏—Å–∫–∏:', userId);
            if (!userId || !channelUsername) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/verify/telegram/' + userId, {
                method: 'POST',
                body: JSON.stringify({ channelUsername: channelUsername })
            });
        },

        checkBot: function(userId) {
            console.log('ü§ñ [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/verify/check-bot/' + userId);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (—Å–ø—Ä–æ—â–µ–Ω–∞)
    const auth = {
        validateTelegram: function(telegramData) {
            console.log('üîê [TasksAPI] –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram –¥–∞–Ω–∏—Ö');

            // –Ø–∫—â–æ —î Telegram WebApp - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData) {
                const initData = window.Telegram.WebApp.initData;
                const userId = getUserId();

                return apiRequest(API_CONFIG.baseUrl + '/api/auth/telegram', {
                    method: 'POST',
                    body: JSON.stringify({
                        initData: initData,
                        telegram_id: userId,
                        timestamp: Date.now()
                    })
                });
            }

            // –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö –∑ userId
            const userId = getUserId();
            if (userId) {
                return Promise.resolve({
                    valid: true,
                    user: { id: userId, telegram_id: userId }
                });
            }

            return Promise.reject(new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'));
        }
    };

    console.log('‚úÖ [TasksAPI] ========== –ú–û–î–£–õ–¨ TasksAPI –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û –£–°–ü–Ü–®–ù–û ==========');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: API_CONFIG,

        // –£—Ç–∏–ª—ñ—Ç–∏
        apiRequest: apiRequest,
        getAuthToken: getAuthToken,
        getUserId: getUserId,

        // API –º–µ—Ç–æ–¥–∏
        auth: auth,
        user: user,
        wallet: wallet,
        flex: flex,
        daily: daily,
        tasks: tasks,
        verify: verify
    };
})();

console.log('‚úÖ [GLOBAL] window.TasksAPI –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');