/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 * –í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è –ë–ï–ó undefined –ø—Ä–æ–±–ª–µ–º —Ç–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
 * @version 2.0.0
 */

(function() {
    'use strict';

    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –í–ò–ü–†–ê–í–õ–ï–ù–û–ì–û API –º–æ–¥—É–ª—è");

    // ======== API-–®–õ–Ø–•–ò ========

    const API_PATHS = {
        // Health check
        HEALTH: 'health',
        PING: 'ping',

        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —à–ª—è—Ö–∏
        USER: {
            DATA: (userId) => `user/${userId}`,
            BALANCE: (userId) => `user/${userId}/balance`,
            SETTINGS: (userId) => `user/${userId}/settings`
        },

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
        AUTH: {
            LOGIN: 'auth',
            REFRESH_TOKEN: 'auth/refresh-token',
            VALIDATE: 'auth/validate'
        }
    };

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ë–∞–∑–æ–≤–∏–π URL API
    const API_BASE_URL = (() => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥
        if (window.WinixConfig && window.WinixConfig.apiBaseUrl) {
            let url = window.WinixConfig.apiBaseUrl;
            return url.endsWith('/api') ? url.slice(0, -4) : url;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        const hostname = window.location.hostname;

        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            return `http://${hostname}:8080`;
        } else if (hostname.includes('testenv') || hostname.includes('staging')) {
            return `https://${hostname}`;
        } else {
            return 'https://winixbot.com';
        }
    })();

    // –°—Ç–∞–Ω API
    let _apiState = {
        isHealthy: false,
        lastHealthCheck: 0,
        consecutiveFailures: 0,
        maxFailures: 3
    };

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    let _userCache = null;
    let _userCacheTime = 0;
    const USER_CACHE_TTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω

    // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–º–∏
    let _pendingRequests = new Map();
    let _requestCounter = {
        total: 0,
        errors: 0,
        lastReset: Date.now()
    };

    // –°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
    let _connectionState = {
        isConnected: true,
        lastSuccessTime: Date.now(),
        failedAttempts: 0
    };

    // –¢–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    let _authToken = null;
    let _authTokenExpiry = 0;

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –í–ò–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ê –§–£–ù–ö–¶–Ü–Ø - —Ç—É—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ undefined –ø—Ä–æ–±–ª–µ–º—É
     */
    function getUserId() {
        try {
            console.log("üîç API: getUserId - –ø–æ—á–∞—Ç–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID");

            // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
            function isValidId(id) {
                if (!id) return false;
                if (typeof id === 'function') return false;
                if (id === 'undefined' || id === 'null') return false;

                const idStr = String(id).trim();
                if (!idStr || idStr === '' || idStr === 'undefined' || idStr === 'null') return false;

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ —á–∏—Å–ª–æ
                const idNum = parseInt(idStr);
                if (isNaN(idNum) || idNum <= 0) return false;

                console.log(`‚úÖ API: –í–∞–ª—ñ–¥–Ω–∏–π ID –∑–Ω–∞–π–¥–µ–Ω–æ: ${idStr}`);
                return true;
            }

            // 1. –ü–†–Ü–û–†–ò–¢–ï–¢: Telegram WebApp (–Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–µ –¥–∂–µ—Ä–µ–ª–æ)
            if (window.Telegram && window.Telegram.WebApp) {
                console.log("üîç API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram WebApp...");

                // –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ WebApp
                if (window.Telegram.WebApp.initDataUnsafe &&
                    window.Telegram.WebApp.initDataUnsafe.user &&
                    window.Telegram.WebApp.initDataUnsafe.user.id) {

                    const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id;
                    console.log(`üîç API: Telegram WebApp ID: ${tgUserId}`);

                    if (isValidId(tgUserId)) {
                        const validId = String(tgUserId);

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å
                        try {
                            localStorage.setItem('telegram_user_id', validId);
                            console.log(`üíæ API: ID –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage: ${validId}`);
                        } catch (e) {
                            console.warn("‚ö†Ô∏è API: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ localStorage:", e);
                        }

                        return validId;
                    }
                }
            }

            // 2. localStorage (—è–∫—â–æ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
            console.log("üîç API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ localStorage...");
            try {
                const localId = localStorage.getItem('telegram_user_id');
                if (isValidId(localId)) {
                    console.log(`üíæ API: ID –∑ localStorage: ${localId}`);
                    return String(localId);
                }
            } catch (e) {
                console.warn("‚ö†Ô∏è API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è localStorage:", e);
            }

            // 3. DOM –µ–ª–µ–º–µ–Ω—Ç (fallback)
            console.log("üîç API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DOM –µ–ª–µ–º–µ–Ω—Ç–∞...");
            try {
                const userIdElement = document.getElementById('user-id');
                if (userIdElement && userIdElement.textContent) {
                    const domId = userIdElement.textContent.trim();
                    if (isValidId(domId)) {
                        console.log(`üè∑Ô∏è API: ID –∑ DOM: ${domId}`);

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                        try {
                            localStorage.setItem('telegram_user_id', domId);
                        } catch (e) {}

                        return String(domId);
                    }
                }
            } catch (e) {
                console.warn("‚ö†Ô∏è API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è DOM:", e);
            }

            // 4. URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ–π fallback)
            console.log("üîç API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤...");
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
                if (isValidId(urlId)) {
                    console.log(`üîó API: ID –∑ URL: ${urlId}`);

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                    try {
                        localStorage.setItem('telegram_user_id', urlId);
                    } catch (e) {}

                    return String(urlId);
                }
            } catch (e) {
                console.warn("‚ö†Ô∏è API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è URL:", e);
            }

            // ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            console.error("‚ùå API: –ñ–æ–¥–Ω–µ –≤–∞–ª—ñ–¥–Ω–µ –¥–∂–µ—Ä–µ–ª–æ ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            return null;

        } catch (e) {
            console.error("üí• API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
            return null;
        }
    }

    /**
     * –ß–µ–∫–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ Telegram WebApp
     */
    function waitForTelegramReady(timeout = 5000) {
        return new Promise((resolve) => {
            const startTime = Date.now();

            function checkTelegram() {
                if (window.Telegram &&
                    window.Telegram.WebApp &&
                    window.Telegram.WebApp.initDataUnsafe &&
                    window.Telegram.WebApp.initDataUnsafe.user) {

                    console.log("‚úÖ API: Telegram WebApp –≥–æ—Ç–æ–≤–∏–π");
                    resolve(true);
                    return;
                }

                if (Date.now() - startTime > timeout) {
                    console.warn("‚ö†Ô∏è API: Timeout –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è Telegram WebApp");
                    resolve(false);
                    return;
                }

                setTimeout(checkTelegram, 100);
            }

            checkTelegram();
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    function getAuthToken() {
        try {
            const now = Date.now();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É –≤ –ø–∞–º'—è—Ç—ñ
            if (_authToken && _authTokenExpiry > now) {
                return _authToken;
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ localStorage
            let token = null;
            let tokenExpiry = 0;

            try {
                token = localStorage.getItem('auth_token');
                tokenExpiry = parseInt(localStorage.getItem('auth_token_expiry') || '0');
            } catch (e) {
                console.warn("‚ö†Ô∏è API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ localStorage:", e);
            }

            if (token && typeof token === 'string' && token.length > 5) {
                if (tokenExpiry > now) {
                    _authToken = token;
                    _authTokenExpiry = tokenExpiry;
                    return token;
                }
            }

            return null;
        } catch (e) {
            console.error("üí• API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
            return null;
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è API endpoint
     */
    function normalizeEndpoint(endpoint) {
        if (!endpoint) return 'api';

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ endpoint –Ω–∞ —Ä—è–¥–æ–∫
        endpoint = String(endpoint);

        // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–µ—à –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        let cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

        // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–µ—à –≤ –∫—ñ–Ω—Ü—ñ
        if (cleanEndpoint.endsWith('/') && cleanEndpoint.length > 1) {
            cleanEndpoint = cleanEndpoint.substring(0, cleanEndpoint.length - 1);
        }

        // –î–æ–¥–∞—î–º–æ 'api/' –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (!cleanEndpoint.startsWith('api/')) {
            cleanEndpoint = cleanEndpoint === 'api' ? cleanEndpoint : `api/${cleanEndpoint}`;
        }

        return cleanEndpoint;
    }

    // ======== API HEALTH CHECK ========

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
     */
    async function checkApiHealth() {
        console.log('üè• API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è API —Å–µ—Ä–≤–µ—Ä–∞');

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);

            const response = await fetch(`${API_BASE_URL}/api/${API_PATHS.HEALTH}`, {
                method: 'GET',
                signal: controller.signal,
                headers: {
                    'Accept': 'application/json'
                }
            });

            clearTimeout(timeoutId);

            if (response.ok) {
                _apiState.isHealthy = true;
                _apiState.lastHealthCheck = Date.now();
                _apiState.consecutiveFailures = 0;
                _connectionState.isConnected = true;

                console.log('‚úÖ API: –°–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤–∏–π');
                return true;
            } else {
                throw new Error(`Health check failed: ${response.status}`);
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
            _apiState.isHealthy = false;
            _apiState.consecutiveFailures++;
            _connectionState.isConnected = false;

            return false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    async function refreshToken() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (_pendingRequests.has('refresh-token')) {
            return _pendingRequests.get('refresh-token');
        }

        const refreshPromise = new Promise(async (resolve, reject) => {
            try {
                const userId = getUserId();
                if (!userId) {
                    throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                console.log("üîÑ API: –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");

                const response = await fetch(`${API_BASE_URL}/${normalizeEndpoint(API_PATHS.AUTH.REFRESH_TOKEN)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-User-Id': userId
                    },
                    body: JSON.stringify({
                        telegram_id: userId,
                        token: _authToken || ''
                    })
                });

                if (!response.ok) {
                    if (response.status === 400 || response.status === 401) {
                        console.warn("‚ö†Ô∏è API: –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –æ—á–∏—â–∞—î–º–æ");
                        clearAuthToken();
                        throw new Error("–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è");
                    }
                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
                }

                const data = await response.json();

                if (data && data.status === 'success' && data.token) {
                    _authToken = data.token;

                    if (data.expires_at) {
                        _authTokenExpiry = new Date(data.expires_at).getTime();
                    } else {
                        _authTokenExpiry = Date.now() + (24 * 60 * 60 * 1000);
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                    try {
                        localStorage.setItem('auth_token', _authToken);
                        localStorage.setItem('auth_token_expiry', _authTokenExpiry.toString());
                    } catch (e) {
                        console.warn("‚ö†Ô∏è API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
                    }

                    console.log("‚úÖ API: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                    document.dispatchEvent(new CustomEvent('token-refreshed', {
                        detail: { token: _authToken, expires_at: _authTokenExpiry }
                    }));

                    resolve(_authToken);
                } else {
                    throw new Error(data.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");
                }
            } catch (error) {
                console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
                reject(error);
            } finally {
                _pendingRequests.delete('refresh-token');
            }
        });

        _pendingRequests.set('refresh-token', refreshPromise);
        return refreshPromise;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    function clearAuthToken() {
        console.log("üóëÔ∏è API: –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó");

        _authToken = null;
        _authTokenExpiry = 0;

        try {
            localStorage.removeItem('auth_token');
            localStorage.removeItem('auth_token_expiry');
        } catch (e) {
            console.warn("‚ö†Ô∏è API: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
        }

        document.dispatchEvent(new CustomEvent('token-cleared'));
    }

    // ======== –û–°–ù–û–í–ù–Ü API –§–£–ù–ö–¶–Ü–á ========

    /**
     * –í–ò–ü–†–ê–í–õ–ï–ù–ê —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
     */
    async function apiRequest(endpoint, method = 'GET', data = null, options = {}) {
        // –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê
        if (!endpoint) {
            console.error("‚ùå API: endpoint —î undefined –∞–±–æ null");
            throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ endpoint –¥–ª—è –∑–∞–ø–∏—Ç—É');
        }

        try {
            console.log(`üîå API: –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É ${method} –¥–æ ${endpoint}`);

            // –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ø–∏—Ç—É
            const normalizedEndpoint = normalizeEndpoint(endpoint);
            const timestamp = Date.now();
            const url = `${API_BASE_URL}/${normalizedEndpoint}?t=${timestamp}`;

            console.log(`üîó API: URL –∑–∞–ø–∏—Ç—É: ${url}`);

            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø–∏—Ç—É
            const headers = {
                'Content-Type': 'application/json',
                ...(options.headers || {})
            };

            // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            if (!options.skipTokenCheck) {
                const token = getAuthToken();
                if (token) {
                    headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
                }
            }

            // –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();
            if (userId && !options.skipUserIdCheck) {
                headers['X-Telegram-User-Id'] = userId;
                console.log(`üë§ API: –î–æ–¥–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${userId}`);
            } else if (!userId) {
                console.warn("‚ö†Ô∏è API: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Ç—É");
            }

            // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: headers,
                timeout: options.timeout || 10000
            };

            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
            if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                requestOptions.body = JSON.stringify(data);
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.showLoading === 'function') {
                window.showLoading();
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), requestOptions.timeout);
            requestOptions.signal = controller.signal;

            const response = await fetch(url, requestOptions);
            clearTimeout(timeoutId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            // –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—ñ–≤
            if (response.status === 401) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É...");

                try {
                    await refreshToken();
                    // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º (—Ç—ñ–ª—å–∫–∏ –æ–¥–Ω—É —Å–ø—Ä–æ–±—É)
                    if (!options._retryAttempt) {
                        options._retryAttempt = true;
                        return apiRequest(endpoint, method, data, options);
                    }
                } catch (tokenError) {
                    console.error("üîå API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", tokenError);
                    clearAuthToken();
                }
            }

            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            const result = await response.json();

            // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
            _requestCounter.total++;
            _connectionState.isConnected = true;
            _connectionState.lastSuccessTime = Date.now();

            return result;

        } catch (error) {
            console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            _requestCounter.errors++;
            _connectionState.isConnected = false;

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            document.dispatchEvent(new CustomEvent('api-error', {
                detail: { error, endpoint, method }
            }));

            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(forceRefresh = false) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
            return {status: 'success', data: _userCache, source: 'cache'};
        }

        const id = getUserId();
        if (!id) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const result = await apiRequest(API_PATHS.USER.DATA(id), 'GET', null, {
                timeout: 15000
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            if (result.status === 'success' && result.data) {
                _userCache = result.data;
                _userCacheTime = Date.now();

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                try {
                    if (_userCache.balance !== undefined) {
                        localStorage.setItem('userTokens', _userCache.balance.toString());
                        localStorage.setItem('winix_balance', _userCache.balance.toString());
                    }

                    if (_userCache.coins !== undefined) {
                        localStorage.setItem('userCoins', _userCache.coins.toString());
                        localStorage.setItem('winix_coins', _userCache.coins.toString());
                    }
                } catch (e) {
                    console.warn("‚ö†Ô∏è API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                }
            }

            return result;
        } catch (error) {
            console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const nocache = Date.now();
            const endpoint = API_PATHS.USER.BALANCE(userId) + `?nocache=${nocache}`;

            const response = await apiRequest(endpoint, 'GET', null, {
                timeout: 10000
            });

            return response;

        } catch (error) {
            console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
            throw error;
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É API
     */
    function clearCache() {
        _userCache = null;
        _userCacheTime = 0;
        console.log("üßπ API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ");
    }

    // ======== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ========

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –º–æ–¥—É–ª—è
     */
    async function initializeAPI() {
        console.log("üöÄ API: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó");

        try {
            // –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ Telegram WebApp
            console.log("‚è≥ API: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ Telegram WebApp...");
            await waitForTelegramReady();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–¥–æ—Ä–æ–≤'—è API
            await checkApiHealth();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();
            if (userId) {
                console.log(`‚úÖ API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userId}`);
            } else {
                console.warn("‚ö†Ô∏è API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞–ª–µ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            return true;
        } catch (error) {
            console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", error);
            return false;
        }
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API ========

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.WinixAPI = {
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: {
            baseUrl: API_BASE_URL,
            version: '2.0.0'
        },

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        initialize: initializeAPI,

        // Health check
        checkApiHealth,
        isApiHealthy: () => _apiState.isHealthy,

        // –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        apiRequest,
        getUserId,
        getAuthToken,
        clearAuthToken,
        refreshToken,
        clearCache,

        // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserData,
        getBalance,

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤
        paths: API_PATHS,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostics: {
            getRequestStats: function() {
                return {..._requestCounter};
            },
            getConnectionState: function() {
                return {..._connectionState};
            },
            getApiState: function() {
                return {..._apiState};
            }
        }
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.apiRequest = apiRequest;
    window.getUserId = getUserId;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeAPI);
    } else {
        // –î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
        setTimeout(initializeAPI, 100);
    }

    console.log(`‚úÖ API: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (URL: ${API_BASE_URL})`);
})();