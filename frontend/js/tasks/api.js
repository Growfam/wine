/**
 * API –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø
 * –ó Rate Limiting, –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç–∞ —á–µ—Ä–≥–æ–≤–æ—é –æ–±—Ä–æ–±–∫–æ—é –∑–∞–ø–∏—Ç—ñ–≤
 */
window.TasksAPI = (function() {
    'use strict';

    console.log('üì¶ [TasksAPI] ========== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ú–û–î–£–õ–Ø TasksAPI (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô) ==========');
    console.log('üïê [TasksAPI] –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', new Date().toISOString());

    // –ë–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API
    const API_CONFIG = {
        baseUrl: 'https://winixbot.com',
        timeout: 15000,
        retryAttempts: 3,
        retryDelay: 1000,
        rateLimitDelay: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        cacheTimeout: 60000 // 1 —Ö–≤–∏–ª–∏–Ω–∞ –∫–µ—à
    };

    console.log('‚öôÔ∏è [TasksAPI] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', API_CONFIG);

    // –ö–µ—à –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
    const requestCache = new Map();
    const cacheTimestamps = new Map();

    // Rate Limiter
    const rateLimiter = {
        queue: [],
        processing: false,
        lastRequestTime: 0,
        minDelay: API_CONFIG.rateLimitDelay,

        async add(fn, priority = 0) {
            return new Promise((resolve, reject) => {
                this.queue.push({ fn, resolve, reject, priority, timestamp: Date.now() });
                // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
                this.queue.sort((a, b) => b.priority - a.priority);
                this.process();
            });
        },

        async process() {
            if (this.processing || this.queue.length === 0) return;

            const now = Date.now();
            const timeSinceLastRequest = now - this.lastRequestTime;

            if (timeSinceLastRequest < this.minDelay) {
                const waitTime = this.minDelay - timeSinceLastRequest;
                setTimeout(() => this.process(), waitTime);
                return;
            }

            this.processing = true;
            const { fn, resolve, reject } = this.queue.shift();

            try {
                this.lastRequestTime = Date.now();
                const result = await fn();
                resolve(result);
            } catch (error) {
                // –Ø–∫—â–æ 429 –ø–æ–º–∏–ª–∫–∞ - –∑–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
                if (error.status === 429) {
                    console.warn('‚ö†Ô∏è [TasksAPI] Rate limit hit, –∑–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É');
                    this.minDelay = Math.min(this.minDelay * 2, 10000); // –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥

                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–ø–∏—Ç –≤ —á–µ—Ä–≥—É –∑ –≤–∏—Å–æ–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
                    this.queue.unshift({ fn, resolve, reject, priority: 10, timestamp: Date.now() });

                    setTimeout(() => {
                        this.minDelay = API_CONFIG.rateLimitDelay; // –°–∫–∏–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
                    }, 60000); // –ß–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É
                } else {
                    reject(error);
                }
            } finally {
                this.processing = false;
                // –ü—Ä–æ—Ü–µ—Å–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç
                setTimeout(() => this.process(), 100);
            }
        }
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    function checkCache(cacheKey) {
        const cached = requestCache.get(cacheKey);
        const timestamp = cacheTimestamps.get(cacheKey);

        if (cached && timestamp && (Date.now() - timestamp < API_CONFIG.cacheTimeout)) {
            console.log('üì¶ [TasksAPI] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è:', cacheKey);
            return cached;
        }

        return null;
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à
    function saveToCache(cacheKey, data) {
        requestCache.set(cacheKey, data);
        cacheTimestamps.set(cacheKey, Date.now());

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–µ—à
        if (requestCache.size > 100) {
            const oldestKey = requestCache.keys().next().value;
            requestCache.delete(oldestKey);
            cacheTimestamps.delete(oldestKey);
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ WinixAPI
    console.log('üîç [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ WinixAPI...');
    if (typeof window.WinixAPI !== 'undefined') {
        console.log('‚úÖ [TasksAPI] WinixAPI –∑–Ω–∞–π–¥–µ–Ω–æ:', Object.keys(window.WinixAPI));
    } else {
        console.log('‚ö†Ô∏è [TasksAPI] WinixAPI –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –ø—Ä—è–º–∏–π API');
    }

    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    function getAuthToken() {
        console.log('üîë [TasksAPI] === getAuthToken START ===');

        const authToken = localStorage.getItem('auth_token');
        const jwtToken = localStorage.getItem('jwt_token');
        const token = localStorage.getItem('token');

        console.log('üìä [TasksAPI] –¢–æ–∫–µ–Ω–∏ –≤ localStorage:', {
            auth_token: authToken ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
            jwt_token: jwtToken ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
            token: token ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'
        });

        const result = authToken || jwtToken || token;
        console.log('üîë [TasksAPI] –†–µ–∑—É–ª—å—Ç–∞—Ç getAuthToken:', result ? '—Ç–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ' : '—Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

        return result;
    }

    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    function getUserId() {
        console.log('üë§ [TasksAPI] === getUserId START ===');

        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
        if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
            console.log('üîç [TasksAPI] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ WinixAPI...');
            const apiId = window.WinixAPI.getUserId();
            console.log('üìä [TasksAPI] WinixAPI.getUserId —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', apiId);

            if (apiId && apiId !== 'undefined' && apiId !== 'null') {
                console.log('‚úÖ [TasksAPI] ID –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ WinixAPI:', apiId);
                return apiId;
            }
        }

        const telegramId = localStorage.getItem('telegram_user_id');
        const userId = localStorage.getItem('user_id');

        console.log('üìä [TasksAPI] ID –≤ localStorage:', {
            telegram_user_id: telegramId,
            user_id: userId
        });

        const result = telegramId || userId;
        console.log('üë§ [TasksAPI] –†–µ–∑—É–ª—å—Ç–∞—Ç getUserId:', result || 'ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

        return result;
    }

    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
    function apiRequest(url, options, useCache = true, priority = 0) {
        console.log('üåê [TasksAPI] === apiRequest START ===');
        console.log('üìä [TasksAPI] URL:', url);
        console.log('üìä [TasksAPI] Options:', JSON.stringify(options, null, 2));

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á –∫–µ—à—É
        const cacheKey = `${options?.method || 'GET'}_${url}_${JSON.stringify(options?.body || {})}`;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤
        if (useCache && (!options?.method || options.method === 'GET')) {
            const cached = checkCache(cacheKey);
            if (cached) {
                return Promise.resolve(cached);
            }
        }

        // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –≤ —á–µ—Ä–≥—É rate limiter
        return rateLimiter.add(async () => {
            options = options || {};
            const controller = new AbortController();
            const timeoutId = setTimeout(function() {
                console.warn('‚è±Ô∏è [TasksAPI] –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É! –í—ñ–¥–º—ñ–Ω–∞...');
                controller.abort();
            }, API_CONFIG.timeout);

            // –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ–π–Ω–∏–π —Ç–æ–∫–µ–Ω —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const token = getAuthToken();
            const userId = getUserId();

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            };

            console.log('üìä [TasksAPI] –ë–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

            // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (token) {
                headers['Authorization'] = 'Bearer ' + token;
                console.log('üîë [TasksAPI] –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
            } else {
                console.warn('‚ö†Ô∏è [TasksAPI] –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            }

            // –î–æ–¥–∞—î–º–æ Telegram User ID –∑–∞–≥–æ–ª–æ–≤–æ–∫, —è–∫—â–æ ID –¥–æ—Å—Ç—É–ø–Ω–∏–π
            if (userId) {
                headers['X-Telegram-User-Id'] = userId;
                console.log('üë§ [TasksAPI] –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-User-Id:', userId);
            } else {
                console.warn('‚ö†Ô∏è [TasksAPI] User ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
            }

            // –û–±'—î–¥–Ω—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –æ–ø—Ü—ñ—è–º–∏ –∑–∞–ø–∏—Ç—É
            const fetchOptions = Object.assign({
                signal: controller.signal,
                headers: headers
            }, options);

            console.log('üåê [TasksAPI REQUEST] –§—ñ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
                url: url,
                method: fetchOptions.method || 'GET',
                hasAuth: !!token,
                userId: userId,
                headers: fetchOptions.headers,
                hasBody: !!fetchOptions.body
            });

            // –õ–æ–≥—É—î–º–æ body —è–∫—â–æ —î
            if (fetchOptions.body) {
                try {
                    console.log('üì§ [TasksAPI] Request Body:', JSON.parse(fetchOptions.body));
                } catch (e) {
                    console.log('üì§ [TasksAPI] Request Body (raw):', fetchOptions.body);
                }
            }

            let retryCount = 0;

            function executeRequest() {
                console.log(`üîÑ [TasksAPI] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É (—Å–ø—Ä–æ–±–∞ ${retryCount + 1}/${API_CONFIG.retryAttempts})...`);

                // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä timestamp –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
                const urlWithTimestamp = url.includes('?')
                    ? url + '&t=' + Date.now()
                    : url + '?t=' + Date.now();

                console.log('üåê [TasksAPI] –§—ñ–Ω–∞–ª—å–Ω–∏–π URL –∑ timestamp:', urlWithTimestamp);
                console.log('üïê [TasksAPI] –ß–∞—Å –∑–∞–ø–∏—Ç—É:', new Date().toISOString());

                return fetch(urlWithTimestamp, fetchOptions)
                    .then(function(response) {
                        clearTimeout(timeoutId);
                        console.log('üì• [TasksAPI] –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ!');
                        console.log('üìä [TasksAPI] Response details:', {
                            status: response.status,
                            statusText: response.statusText,
                            ok: response.ok,
                            headers: response.headers
                        });

                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                        if (!response.ok) {
                            console.error('‚ùå [TasksAPI] HTTP –ø–æ–º–∏–ª–∫–∞:', {
                                status: response.status,
                                statusText: response.statusText
                            });

                            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                            return response.text().then(function(text) {
                                console.error('üìÑ [TasksAPI] Response body:', text);

                                // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
                                try {
                                    const errorData = JSON.parse(text);
                                    const error = new Error(errorData.message || 'HTTP ' + response.status + ': ' + response.statusText);
                                    error.status = response.status;
                                    error.statusText = response.statusText;
                                    error.data = errorData;
                                    throw error;
                                } catch (e) {
                                    // –Ø–∫—â–æ –Ω–µ JSON, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
                                    const error = new Error('HTTP ' + response.status + ': ' + response.statusText);
                                    error.status = response.status;
                                    error.statusText = response.statusText;
                                    error.responseText = text;
                                    throw error;
                                }
                            });
                        }

                        // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                        console.log('üìÑ [TasksAPI] –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...');
                        return response.json().catch(function(err) {
                            console.error('‚ùå [TasksAPI] –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON:', err);
                            throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
                        });
                    })
                    .then(function(data) {
                        console.log('‚úÖ [TasksAPI] JSON —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ');
                        console.log('üìä [TasksAPI] –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', JSON.stringify(data, null, 2));

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à –¥–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤
                        if (useCache && (!fetchOptions.method || fetchOptions.method === 'GET')) {
                            saveToCache(cacheKey, data);
                        }

                        return data;
                    })
                    .catch(function(error) {
                        clearTimeout(timeoutId);
                        console.error('‚ùå [TasksAPI] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);

                        // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫
                        if (error.name === 'AbortError') {
                            console.error('‚è±Ô∏è [TasksAPI] –ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç');
                            throw new Error('–ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (' + API_CONFIG.timeout + '–º—Å)');
                        }

                        // –Ø–∫—â–æ —Ü–µ 429 –ø–æ–º–∏–ª–∫–∞ - –Ω–µ —Ä–æ–±–∏–º–æ retry —Ç—É—Ç, rateLimiter –æ–±—Ä–æ–±–∏—Ç—å
                        if (error.status === 429) {
                            throw error;
                        }

                        // –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ - retry
                        if (retryCount < API_CONFIG.retryAttempts - 1 && error.status >= 500) {
                            retryCount++;
                            console.log(`üîÑ [TasksAPI] –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ${API_CONFIG.retryDelay}–º—Å...`);
                            return new Promise(resolve => {
                                setTimeout(() => resolve(executeRequest()), API_CONFIG.retryDelay);
                            });
                        }

                        throw error;
                    });
            }

            return executeRequest();
        }, priority);
    }

    // –§—É–Ω–∫—Ü—ñ—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É –∑ backend —Ñ–æ—Ä–º–∞—Ç—É –≤ frontend —Ñ–æ—Ä–º–∞—Ç
    function transformBalance(data) {
        console.log('üîÑ [TasksAPI] –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É:', data);

        // –Ø–∫—â–æ –≤–∂–µ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        if (data && data.winix !== undefined && data.tickets !== undefined) {
            return data;
        }

        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ balance/coins –≤ winix/tickets
        if (data && (data.balance !== undefined || data.coins !== undefined)) {
            return {
                winix: data.balance || 0,
                tickets: data.coins || 0
            };
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        return {
            winix: 0,
            tickets: 0
        };
    }

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è User
    const user = {
        getProfile: function(userId) {
            console.log('üë§ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/user/' + userId, null, true, 5)
                .then(function(response) {
                    console.log('üë§ [TasksAPI] –ü—Ä–æ—Ñ—ñ–ª—å –æ—Ç—Ä–∏–º–∞–Ω–æ (raw):', response);

                    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É
                    if (response && response.data) {
                        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –±–∞–ª–∞–Ω—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ data
                        response.data.transformedBalance = transformBalance(response.data);

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–∫–æ–∂ —É –∫–æ—Ä–µ–Ω–µ–≤–æ–º—É –æ–±'—î–∫—Ç—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                        response.balance = response.data.transformedBalance;

                        console.log('üë§ [TasksAPI] –ü—Ä–æ—Ñ—ñ–ª—å –ø—ñ—Å–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', response);
                    }

                    return response;
                });
        },

        getBalance: function(userId) {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/user/' + userId + '/balance', null, true, 3)
                .then(function(response) {
                    console.log('üí∞ [TasksAPI] –ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ (raw):', response);

                    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    if (response) {
                        // –®—É–∫–∞—î–º–æ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É –≤ —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö
                        let balanceData = response.data || response;

                        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –±–∞–ª–∞–Ω—Å
                        const transformedBalance = transformBalance(balanceData);

                        // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å —É —Ä—ñ–∑–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                        response.balance = transformedBalance;

                        if (!response.data) {
                            response.data = {};
                        }
                        response.data.balance = transformedBalance;

                        console.log('üí∞ [TasksAPI] –ë–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', response);
                    }

                    return response;
                });
        },

        updateBalance: function(userId, balances) {
            console.log('üí∞ [TasksAPI] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', userId, balances);
            if (!userId || !balances) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }

            // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î–º–æ –Ω–∞–∑–∞–¥ –¥–ª—è backend —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            const backendData = {
                balance: balances.winix || balances.balance || 0,
                coins: balances.tickets || balances.coins || 0
            };

            return apiRequest(API_CONFIG.baseUrl + '/api/user/' + userId + '/update-balance', {
                method: 'POST',
                body: JSON.stringify(backendData)
            }, false, 10); // –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, –±–µ–∑ –∫–µ—à—É
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Wallet - –í–ò–ü–†–ê–í–õ–ï–ù–û –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é raw —Ç–∞ user-friendly –∞–¥—Ä–µ—Å
    const wallet = {
        checkStatus: function(userId) {
            console.log('üëõ [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/status/' + userId, null, true, 2);
        },

        connect: function(userId, walletData) {
            console.log('üîå [TasksAPI] === –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø ===');
            console.log('üìä [TasksAPI] userId:', userId);
            console.log('üìä [TasksAPI] –î–∞–Ω—ñ –≥–∞–º–∞–Ω—Ü—è:', walletData);

            if (!userId || !walletData) {
                console.error('‚ùå [TasksAPI] –ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è');
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–¥—Ä–µ—Å–∏
            if (!walletData.address) {
                console.error('‚ùå [TasksAPI] –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –≤—ñ–¥—Å—É—Ç–Ω—è');
                return Promise.reject(new Error('–ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞'));
            }

            // –§–æ—Ä–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –∑ –æ–±–æ–º–∞ –∞–¥—Ä–µ—Å–∞–º–∏
            const requestData = {
                address: walletData.address,               // Raw –∞–¥—Ä–µ—Å–∞ (–æ–±–æ–≤'—è–∑–∫–æ–≤–∞)
                addressFriendly: walletData.addressFriendly || walletData.address,  // User-friendly –∞–¥—Ä–µ—Å–∞
                chain: walletData.chain || '-239',
                publicKey: walletData.publicKey || '',
                provider: walletData.provider || '',
                timestamp: walletData.timestamp || Date.now()
            };

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–¥—Ä–µ—Å–∏ –¥–ª—è –¥–µ–±–∞–≥—É
            console.log('üìç [TasksAPI] –ê–¥—Ä–µ—Å–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', {
                raw: requestData.address,
                userFriendly: requestData.addressFriendly,
                areEqual: requestData.address === requestData.addressFriendly,
                rawFormat: requestData.address.startsWith('0:') || requestData.address.startsWith('-1:'),
                friendlyFormat: requestData.addressFriendly.startsWith('UQ') || requestData.addressFriendly.startsWith('EQ')
            });

            console.log('üì§ [TasksAPI] –§—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', requestData);

            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/connect/' + userId, {
                method: 'POST',
                body: JSON.stringify(requestData)
            }, false, 10); // –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, –±–µ–∑ –∫–µ—à—É
        },

        disconnect: function(userId) {
            console.log('üîå [TasksAPI] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/disconnect/' + userId, {
                method: 'POST',
                body: JSON.stringify({})
            }, false, 10);
        },

        verify: function(userId, verificationData) {
            console.log('üîç [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è:', userId);
            if (!userId || !verificationData) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/verify/' + userId, {
                method: 'POST',
                body: JSON.stringify(verificationData)
            }, false, 5);
        },

        getBalance: function(userId) {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/wallet/balance/' + userId, null, true, 2);
        },

        getTransactions: function(userId, limit, beforeLt) {
            console.log('üìã [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≥–∞–º–∞–Ω—Ü—è:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }

            let url = API_CONFIG.baseUrl + '/api/wallet/transactions/' + userId;
            const params = [];

            if (limit) {
                params.push('limit=' + limit);
            }
            if (beforeLt) {
                params.push('before_lt=' + beforeLt);
            }

            if (params.length > 0) {
                url += '?' + params.join('&');
            }

            return apiRequest(url, null, true, 1);
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Flex
    const flex = {
        getBalance: function(userId, walletAddress) {
            console.log('üíé [TasksAPI] === –û–¢–†–ò–ú–ê–ù–ù–Ø –ë–ê–õ–ê–ù–°–£ FLEX ===');
            console.log('üìä [TasksAPI] userId:', userId);
            console.log('üìä [TasksAPI] walletAddress:', walletAddress);

            if (!userId) {
                console.error('‚ùå [TasksAPI] User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }

            if (!walletAddress) {
                console.error('‚ùå [TasksAPI] –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞');
                return Promise.reject(new Error('–ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'));
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏
            const isRawAddress = walletAddress.startsWith('0:') || walletAddress.startsWith('-1:');
            const isUserFriendly = walletAddress.startsWith('UQ') || walletAddress.startsWith('EQ');

            console.log('üìç [TasksAPI] –§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏:', {
                address: walletAddress,
                isRaw: isRawAddress,
                isUserFriendly: isUserFriendly,
                length: walletAddress.length
            });

            // –ö–æ–¥—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è URL
            const encodedAddress = encodeURIComponent(walletAddress);
            const url = API_CONFIG.baseUrl + '/api/flex/balance/' + userId + '?wallet=' + encodedAddress;

            console.log('üåê [TasksAPI] URL –¥–ª—è –∑–∞–ø–∏—Ç—É –±–∞–ª–∞–Ω—Å—É:', url);

            return apiRequest(url, null, true, 3); // –ó –∫–µ—à–µ–º
        },

        claimReward: function(userId, level) {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ FLEX:', userId, level);
            if (!userId || !level) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/flex/claim/' + userId, {
                method: 'POST',
                body: JSON.stringify({
                    level: level,
                    timestamp: Date.now()
                })
            }, false, 10); // –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, –±–µ–∑ –∫–µ—à—É
        },

        getLevels: function() {
            console.log('üìä [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ FLEX');
            return apiRequest(API_CONFIG.baseUrl + '/api/flex/levels', null, true, 1);
        },

        checkLevels: function(userId, flexBalance) {
            console.log('üîç [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤');
            return apiRequest(API_CONFIG.baseUrl + '/api/flex/check-levels/' + userId + '?balance=' + flexBalance, null, true, 2);
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Daily
    const daily = {
        getStatus: function(userId) {
            console.log('üìÖ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/daily/status/' + userId, null, true, 3);
        },

        claim: function(userId) {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/daily/claim/' + userId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            }, false, 10); // –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, –±–µ–∑ –∫–µ—à—É
        },

        getHistory: function(userId, limit) {
            console.log('üìú [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }

            let url = API_CONFIG.baseUrl + '/api/daily/history/' + userId;
            if (limit) {
                url += '?limit=' + limit;
            }

            return apiRequest(url, null, true, 1);
        },

        refresh: function(userId) {
            console.log('üîÑ [TasksAPI] –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/daily/refresh/' + userId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            }, false, 5);
        },

        calculateReward: function(userId, day) {
            console.log('üí∞ [TasksAPI] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –¥–ª—è –¥–Ω—è:', day);
            if (!userId || !day) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/daily/calculate-reward/' + userId + '?day=' + day, null, true, 1);
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Tasks
    const tasks = {
        getList: function(userId, type) {
            console.log('üìã [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å:', userId, type);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            type = type || 'all';
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/list/' + userId + '?type=' + type, null, true, 2);
        },

        start: function(userId, taskId) {
            console.log('‚ñ∂Ô∏è [TasksAPI] –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/start/' + userId + '/' + taskId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            }, false, 5);
        },

        verify: function(userId, taskId, verificationData) {
            console.log('üîç [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/verify/' + userId + '/' + taskId, {
                method: 'POST',
                body: JSON.stringify(verificationData || {})
            }, false, 8);
        },

        complete: function(userId, taskId) {
            console.log('‚úÖ [TasksAPI] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/complete/' + userId + '/' + taskId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            }, false, 8);
        },

        claim: function(userId, taskId) {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            if (!userId || !taskId) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/claim/' + userId + '/' + taskId, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            }, false, 10);
        },

        getProgress: function(userId) {
            console.log('üìà [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω—å:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/tasks/progress/' + userId, null, true, 1);
        }
    };

    // API –º–µ—Ç–æ–¥–∏ –¥–ª—è Verification
    const verify = {
        telegram: function(userId, channelUsername) {
            console.log('üì± [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Telegram –ø—ñ–¥–ø–∏—Å–∫–∏:', userId, channelUsername);
            if (!userId || !channelUsername) {
                return Promise.reject(new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/verify/telegram/' + userId, {
                method: 'POST',
                body: JSON.stringify({
                    channelUsername: channelUsername,
                    timestamp: Date.now()
                })
            }, false, 8);
        },

        checkBot: function(userId) {
            console.log('ü§ñ [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', userId);
            if (!userId) {
                return Promise.reject(new Error('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'));
            }
            return apiRequest(API_CONFIG.baseUrl + '/api/verify/check-bot/' + userId, null, true, 2);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (—Å–ø—Ä–æ—â–µ–Ω–∞)
    const auth = {
        validateTelegram: function(telegramData) {
            console.log('üîê [TasksAPI] –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram –¥–∞–Ω–∏—Ö');

            // –Ø–∫—â–æ —î Telegram WebApp - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData) {
                const initData = window.Telegram.WebApp.initData;
                const userId = getUserId();

                return apiRequest(API_CONFIG.baseUrl + '/api/auth/telegram', {
                    method: 'POST',
                    body: JSON.stringify({
                        initData: initData,
                        telegram_id: userId,
                        timestamp: Date.now()
                    })
                }, false, 10); // –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, –±–µ–∑ –∫–µ—à—É
            }

            // –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö –∑ userId
            const userId = getUserId();
            if (userId) {
                return Promise.resolve({
                    valid: true,
                    user: { id: userId, telegram_id: userId }
                });
            }

            return Promise.reject(new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'));
        },

        refreshToken: function() {
            console.log('üîÑ [TasksAPI] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');
            return apiRequest(API_CONFIG.baseUrl + '/api/auth/refresh-token', {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            }, false, 10);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
    function clearCache() {
        console.log('üßπ [TasksAPI] –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É');
        requestCache.clear();
        cacheTimestamps.clear();
    }

    // –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function getStats() {
        return {
            cacheSize: requestCache.size,
            queueLength: rateLimiter.queue.length,
            currentDelay: rateLimiter.minDelay,
            isProcessing: rateLimiter.processing
        };
    }

    console.log('‚úÖ [TasksAPI] ========== –ú–û–î–£–õ–¨ TasksAPI –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û –£–°–ü–Ü–®–ù–û (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô) ==========');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: API_CONFIG,

        // –£—Ç–∏–ª—ñ—Ç–∏
        apiRequest: apiRequest,
        getAuthToken: getAuthToken,
        getUserId: getUserId,
        transformBalance: transformBalance,
        clearCache: clearCache,
        getStats: getStats,

        // API –º–µ—Ç–æ–¥–∏
        auth: auth,
        user: user,
        wallet: wallet,
        flex: flex,
        daily: daily,
        tasks: tasks,
        verify: verify
    };
})();

console.log('‚úÖ [GLOBAL] window.TasksAPI –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô)');