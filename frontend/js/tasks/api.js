/**
 * API –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ API –≤–∏–∫–ª–∏–∫–∞–º–∏
 */

window.TasksAPI = (function() {
    'use strict';

    console.log('üåê [TasksAPI] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø API –ú–û–î–£–õ–Ø =====');

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        baseURL: window.TasksConstants?.API_ENDPOINTS?.BASE_URL ||
                 (window.location.hostname === 'localhost'
                     ? 'http://localhost:3000/api'
                     : 'https://api.winix.com/api'),
        timeout: 10000,
        retryAttempts: 3,
        retryDelay: 1000
    };

    console.log('‚öôÔ∏è [TasksAPI] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', config);

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        pendingRequests: new Map(),
        requestStats: {
            total: 0,
            success: 0,
            failed: 0,
            avgResponseTime: 0
        }
    };

    /**
     * –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è API –≤–∏–∫–ª–∏–∫—ñ–≤
     */
    async function apiCall(endpoint, options = {}) {
        console.log('üì° [TasksAPI] === API –í–ò–ö–õ–ò–ö ===');
        console.log('üîó [TasksAPI] Endpoint:', endpoint);
        console.log('‚öôÔ∏è [TasksAPI] Options:', options);

        const url = config.baseURL + endpoint;
        const requestId = generateRequestId();

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Ç
        state.pendingRequests.set(requestId, {
            endpoint,
            startTime: Date.now(),
            status: 'pending'
        });

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Request-ID': requestId
            }
        };

        // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —è–∫—â–æ —î
        const authToken = getAuthToken();
        if (authToken) {
            defaultOptions.headers['Authorization'] = `Bearer ${authToken}`;
            console.log('üîê [TasksAPI] –î–æ–¥–∞–Ω–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
        }

        // –î–æ–¥–∞—î–º–æ Telegram –¥–∞–Ω—ñ —è–∫—â–æ —î
        const telegramData = getTelegramData();
        if (telegramData) {
            defaultOptions.headers['X-Telegram-Data'] = telegramData;
            console.log('üì± [TasksAPI] –î–æ–¥–∞–Ω–æ Telegram –¥–∞–Ω—ñ');
        }

        const finalOptions = mergeOptions(defaultOptions, options);

        console.log('üìã [TasksAPI] –§—ñ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É:', {
            url,
            method: finalOptions.method,
            headers: finalOptions.headers
        });

        try {
            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ retry –ª–æ–≥—ñ–∫–æ—é
            const response = await fetchWithRetry(url, finalOptions, requestId);

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateRequestStats(requestId, true, response);

            console.log('‚úÖ [TasksAPI] –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response);
            return response;

        } catch (error) {
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateRequestStats(requestId, false, error);

            console.error('‚ùå [TasksAPI] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);
            throw error;

        } finally {
            // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö
            state.pendingRequests.delete(requestId);
        }
    }

    /**
     * Fetch –∑ retry –ª–æ–≥—ñ–∫–æ—é
     */
    async function fetchWithRetry(url, options, requestId, attempt = 1) {
        console.log(`üîÑ [TasksAPI] –°–ø—Ä–æ–±–∞ ${attempt}/${config.retryAttempts}`);

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), config.timeout);

            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            const responseTime = Date.now() - state.pendingRequests.get(requestId).startTime;
            console.log(`‚è±Ô∏è [TasksAPI] –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${responseTime}–º—Å`);

            if (!response.ok) {
                const error = await response.json().catch(() => ({
                    message: `HTTP ${response.status} ${response.statusText}`
                }));

                console.error('‚ùå [TasksAPI] –ü–æ–º–∏–ª–∫–∞ HTTP:', error);

                // –Ø–∫—â–æ 401 - –æ—á–∏—â–∞—î–º–æ —Ç–æ–∫–µ–Ω
                if (response.status === 401) {
                    console.warn('üîê [TasksAPI] –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –æ—á–∏—â–∞—î–º–æ');
                    clearAuthToken();
                }

                throw new APIError(error.message || 'API Error', response.status, error);
            }

            const data = await response.json();
            return data;

        } catch (error) {
            console.error(`‚ùå [TasksAPI] –ü–æ–º–∏–ª–∫–∞ —Å–ø—Ä–æ–±–∏ ${attempt}:`, error);

            // –Ø–∫—â–æ —Ü–µ timeout –∞–±–æ –º–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ —ñ —î —â–µ —Å–ø—Ä–æ–±–∏
            if (attempt < config.retryAttempts && shouldRetry(error)) {
                console.log(`‚è≥ [TasksAPI] –ó–∞—Ç—Ä–∏–º–∫–∞ ${config.retryDelay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º`);
                await delay(config.retryDelay * attempt);
                return fetchWithRetry(url, options, requestId, attempt + 1);
            }

            throw error;
        }
    }

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è User
     */
    const user = {
        getBalance: async (userId) => {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);
            return apiCall(`/user/balance/${userId}`);
        },

        updateBalance: async (userId, balances) => {
            console.log('üí∞ [TasksAPI] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', userId, balances);
            return apiCall(`/user/update-balance/${userId}`, {
                method: 'POST',
                body: JSON.stringify(balances)
            });
        },

        getProfile: async (userId) => {
            console.log('üë§ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', userId);
            return apiCall(`/user/profile/${userId}`);
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Wallet
     */
    const wallet = {
        checkStatus: async (userId, address) => {
            console.log('üîç [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è:', userId);
            return apiCall(`/wallet/status/${userId}`, {
                method: 'POST',
                body: JSON.stringify({ address, timestamp: Date.now() })
            });
        },

        connect: async (userId, walletData) => {
            console.log('üîå [TasksAPI] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', userId);
            return apiCall(`/wallet/connect/${userId}`, {
                method: 'POST',
                body: JSON.stringify(walletData)
            });
        },

        disconnect: async (userId) => {
            console.log('üîå [TasksAPI] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', userId);
            return apiCall(`/wallet/disconnect/${userId}`, {
                method: 'POST'
            });
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Flex
     */
    const flex = {
        getBalance: async (userId, walletAddress) => {
            console.log('üíé [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX:', userId);
            return apiCall(`/flex/balance/${userId}`, {
                headers: {
                    'X-Wallet-Address': walletAddress
                }
            });
        },

        claimReward: async (userId, level) => {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ FLEX:', userId, level);
            return apiCall(`/flex/claim-reward/${userId}/${level}`, {
                method: 'POST',
                body: JSON.stringify({ timestamp: Date.now() })
            });
        },

        getHistory: async (userId) => {
            console.log('üìú [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó FLEX:', userId);
            return apiCall(`/flex/history/${userId}`);
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Daily Bonus
     */
    const daily = {
        getStatus: async (userId) => {
            console.log('üìÖ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);
            return apiCall(`/daily/status/${userId}`);
        },

        claim: async (userId, claimData) => {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);
            return apiCall(`/daily/claim/${userId}`, {
                method: 'POST',
                body: JSON.stringify(claimData)
            });
        },

        getHistory: async (userId) => {
            console.log('üìú [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤:', userId);
            return apiCall(`/daily/history/${userId}`);
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Tasks
     */
    const tasks = {
        getList: async (userId, type = 'all') => {
            console.log('üìã [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å:', userId, type);
            return apiCall(`/tasks/list/${userId}?type=${type}`);
        },

        claim: async (userId, taskId) => {
            console.log('‚úÖ [TasksAPI] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            return apiCall(`/tasks/claim/${userId}/${taskId}`, {
                method: 'POST'
            });
        },

        verify: async (userId, taskId, verificationData) => {
            console.log('üîç [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);
            return apiCall(`/tasks/verify/${userId}/${taskId}`, {
                method: 'POST',
                body: JSON.stringify(verificationData)
            });
        }
    };

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
     */
    function generateRequestId() {
        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    function getAuthToken() {
        return localStorage.getItem('winix_auth_token');
    }

    function clearAuthToken() {
        localStorage.removeItem('winix_auth_token');
    }

    function getTelegramData() {
        if (window.Telegram?.WebApp?.initData) {
            return window.Telegram.WebApp.initData;
        }
        return null;
    }

    function mergeOptions(defaults, custom) {
        return {
            ...defaults,
            ...custom,
            headers: {
                ...defaults.headers,
                ...custom.headers
            }
        };
    }

    function shouldRetry(error) {
        // Retry –Ω–∞ –º–µ—Ä–µ–∂–µ–≤—ñ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —Ç–∞–π–º–∞—É—Ç–∏
        return error.name === 'AbortError' ||
               error.name === 'TypeError' ||
               error.message.includes('NetworkError') ||
               error.message.includes('Failed to fetch');
    }

    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function updateRequestStats(requestId, success, data) {
        const request = state.pendingRequests.get(requestId);
        if (!request) return;

        const responseTime = Date.now() - request.startTime;

        state.requestStats.total++;
        if (success) {
            state.requestStats.success++;
        } else {
            state.requestStats.failed++;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const prevAvg = state.requestStats.avgResponseTime;
        const totalRequests = state.requestStats.success + state.requestStats.failed;
        state.requestStats.avgResponseTime = ((prevAvg * (totalRequests - 1)) + responseTime) / totalRequests;

        console.log('üìä [TasksAPI] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤:', {
            –≤—Å—å–æ–≥–æ: state.requestStats.total,
            —É—Å–ø—ñ—à–Ω–∏—Ö: state.requestStats.success,
            –Ω–µ–≤–¥–∞–ª–∏—Ö: state.requestStats.failed,
            —Å–µ—Ä–µ–¥–Ω—ñ–π–ß–∞—Å: Math.round(state.requestStats.avgResponseTime) + '–º—Å'
        });
    }

    /**
     * –ö–∞—Å—Ç–æ–º–Ω–∏–π –∫–ª–∞—Å –ø–æ–º–∏–ª–∫–∏
     */
    class APIError extends Error {
        constructor(message, status, data) {
            super(message);
            this.name = 'APIError';
            this.status = status;
            this.data = data;
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     */
    function cancelAllRequests() {
        console.log('üö´ [TasksAPI] –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤');
        state.pendingRequests.clear();
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    function getStatistics() {
        return {
            ...state.requestStats,
            pendingRequests: state.pendingRequests.size
        };
    }

    console.log('‚úÖ [TasksAPI] API –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥
        call: apiCall,

        // –ì—Ä—É–ø–∏ –º–µ—Ç–æ–¥—ñ–≤
        user,
        wallet,
        flex,
        daily,
        tasks,

        // –£—Ç–∏–ª—ñ—Ç–∏
        cancelAllRequests,
        getStatistics,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config
    };

})();

console.log('‚úÖ [TasksAPI] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');