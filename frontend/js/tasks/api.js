/**
 * API –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX - Production Version
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ API –≤–∏–∫–ª–∏–∫–∞–º–∏ –∑ proper dependency checking
 */

window.TasksAPI = (function() {
    'use strict';

    console.log('üåê [TasksAPI] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø API –ú–û–î–£–õ–Ø (PRODUCTION) =====');

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    let dependenciesReady = false;
    let initializationAttempted = false;

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
     */
    function checkDependencies() {
        console.log('üîç [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ API
        if (!window.WinixAPI) {
            console.error('‚ùå [TasksAPI] WinixAPI –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –∫—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—è');
            return false;
        }

        if (typeof window.WinixAPI.apiRequest !== 'function') {
            console.error('‚ùå [TasksAPI] WinixAPI.apiRequest –Ω–µ —î —Ñ—É–Ω–∫—Ü—ñ—î—é');
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        if (!window.TasksConstants) {
            console.warn('‚ö†Ô∏è [TasksAPI] TasksConstants –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —É—Ç–∏–ª—ñ—Ç
        if (!window.TasksUtils) {
            console.warn('‚ö†Ô∏è [TasksAPI] TasksUtils –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏');
        }

        console.log('‚úÖ [TasksAPI] –ë–∞–∑–æ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≥–æ—Ç–æ–≤—ñ');
        return true;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –º–æ–¥—É–ª—è
     */
    function initialize() {
        if (initializationAttempted) {
            return dependenciesReady;
        }

        initializationAttempted = true;
        console.log('üöÄ [TasksAPI] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...');

        dependenciesReady = checkDependencies();

        if (!dependenciesReady) {
            console.error('‚ùå [TasksAPI] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ - –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ –≥–æ—Ç–æ–≤—ñ');
            return false;
        }

        console.log('‚úÖ [TasksAPI] API –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        return true;
    }

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ fallback –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    const config = {
        baseURL: window.TasksConstants?.API_ENDPOINTS?.BASE_URL || '/api',
        timeout: 15000, // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
        retryAttempts: 3,
        retryDelay: 2000 // 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
    };

    console.log('‚öôÔ∏è [TasksAPI] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', config);

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        pendingRequests: new Map(),
        requestStats: {
            total: 0,
            success: 0,
            failed: 0,
            avgResponseTime: 0
        },
        rateLimiter: {
            requests: [],
            window: window.TasksConstants?.SECURITY?.RATE_LIMIT?.WINDOW || 60000,
            maxRequests: window.TasksConstants?.SECURITY?.RATE_LIMIT?.MAX_REQUESTS || 30
        },
        serverAvailable: true
    };

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limit
     */
    function checkRateLimit() {
        const now = Date.now();
        const windowStart = now - state.rateLimiter.window;

        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Ç–∏
        state.rateLimiter.requests = state.rateLimiter.requests.filter(
            timestamp => timestamp > windowStart
        );

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç
        if (state.rateLimiter.requests.length >= state.rateLimiter.maxRequests) {
            console.warn('‚ö†Ô∏è [TasksAPI] Rate limit –¥–æ—Å—è–≥–Ω—É—Ç–æ');
            throw new APIError('–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω—É', 429);
        }

        // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç
        state.rateLimiter.requests.push(now);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async function checkServerHealth() {
        try {
            if (!window.WinixAPI?.apiRequest) {
                console.warn('‚ö†Ô∏è [TasksAPI] WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è health check');
                return false;
            }

            // –ü—Ä–æ—Å—Ç–∏–π ping –∑–∞–ø–∏—Ç
            await window.WinixAPI.apiRequest('api/ping', 'GET', null, {
                timeout: 5000,
                suppressErrors: true
            });

            state.serverAvailable = true;
            return true;
        } catch (error) {
            console.warn('‚ö†Ô∏è [TasksAPI] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
            state.serverAvailable = false;
            return false;
        }
    }

    /**
     * –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è API –≤–∏–∫–ª–∏–∫—ñ–≤ –∑ dependency checking
     */
    async function apiCall(endpoint, options = {}) {
        console.log('üì° [TasksAPI] === API –í–ò–ö–õ–ò–ö ===');
        console.log('üîó [TasksAPI] Endpoint:', endpoint);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –º–æ–¥—É–ª—è
        if (!dependenciesReady && !initialize()) {
            console.error('‚ùå [TasksAPI] API –º–æ–¥—É–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∏–π');
            throw new APIError('API –º–æ–¥—É–ª—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', 500);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ API
        if (!window.WinixAPI?.apiRequest) {
            console.error('‚ùå [TasksAPI] –ë–∞–∑–æ–≤–∏–π API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            throw new APIError('–ë–∞–∑–æ–≤–∏–π API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 503);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ rate limit
        try {
            checkRateLimit();
        } catch (error) {
            if (window.TasksUtils?.showToast) {
                window.TasksUtils.showToast(error.message, 'error');
            }
            throw error;
        }

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –±—É–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–æ–≥–æ —Å—Ç–∞–Ω
        if (!state.serverAvailable) {
            console.log('üîç [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
            const serverHealthy = await checkServerHealth();

            if (!serverHealthy) {
                throw new APIError('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 503);
            }
        }

        const requestId = generateRequestId();

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Ç
        state.pendingRequests.set(requestId, {
            endpoint,
            startTime: Date.now(),
            status: 'pending'
        });

        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π WinixAPI –¥–ª—è –∑–∞–ø–∏—Ç—É
            console.log('üì§ [TasksAPI] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ WinixAPI...');

            const response = await window.WinixAPI.apiRequest(endpoint, options.method || 'GET', options.body || null, {
                timeout: options.timeout || config.timeout,
                suppressErrors: options.suppressErrors || false,
                headers: options.headers || {}
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateRequestStats(requestId, true, response);

            console.log('‚úÖ [TasksAPI] –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response);
            return response;

        } catch (error) {
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateRequestStats(requestId, false, error);

            console.error('‚ùå [TasksAPI] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);

            // –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
            if (error.message?.includes('500') || error.status === 500) {
                state.serverAvailable = false;
                throw new APIError('–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ', 500);
            }

            if (error.message?.includes('400') || error.status === 400) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É', 400);
            }

            if (error.message?.includes('401') || error.status === 401) {
                throw new APIError('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É', 401);
            }

            if (error.message?.includes('403') || error.status === 403) {
                throw new APIError('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ', 403);
            }

            if (error.message?.includes('404') || error.status === 404) {
                throw new APIError('–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 404);
            }

            // –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞
            throw new APIError(error.message || '–ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É', error.status || 500);

        } finally {
            // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö
            state.pendingRequests.delete(requestId);
        }
    }

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è User
     */
    const user = {
        getProfile: async (userId) => {
            console.log('üë§ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`user/${userId}`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        getBalance: async (userId) => {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`user/${userId}/balance`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        updateBalance: async (userId, balances) => {
            console.log('üí∞ [TasksAPI] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', userId, balances);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            if (!balances || typeof balances !== 'object') {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É', 400);
            }

            return apiCall(`user/${userId}/update-balance`, {
                method: 'POST',
                body: balances
            });
        },

        getStats: async (userId) => {
            console.log('üìä [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`user/${userId}/stats`, {
                method: 'GET',
                suppressErrors: true
            });
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Auth
     */
    const auth = {
        validateTelegram: async (initData) => {
            console.log('üîê [TasksAPI] –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram –¥–∞–Ω–∏—Ö');

            if (!initData) {
                throw new APIError('Telegram –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ', 400);
            }

            return apiCall('auth/validate-telegram', {
                method: 'POST',
                body: { initData, timestamp: Date.now() }
            });
        },

        refreshToken: async () => {
            console.log('üîÑ [TasksAPI] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É');

            return apiCall('auth/refresh-token', {
                method: 'POST',
                suppressErrors: true
            });
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Wallet
     */
    const wallet = {
        checkStatus: async (userId) => {
            console.log('üîç [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–∞–º–∞–Ω—Ü—è:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`wallet/status/${userId}`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        connect: async (userId, walletData) => {
            console.log('üîå [TasksAPI] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            if (!walletData || !walletData.address) {
                throw new APIError('–î–∞–Ω—ñ –≥–∞–º–∞–Ω—Ü—è –Ω–µ–≤—ñ—Ä–Ω—ñ', 400);
            }

            return apiCall(`wallet/connect/${userId}`, {
                method: 'POST',
                body: walletData
            });
        },

        disconnect: async (userId) => {
            console.log('üîå [TasksAPI] –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`wallet/disconnect/${userId}`, {
                method: 'POST'
            });
        },

        verify: async (userId, address) => {
            console.log('‚úÖ [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≥–∞–º–∞–Ω—Ü—è:', userId);

            if (!userId || !address) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó', 400);
            }

            return apiCall(`wallet/verify/${userId}`, {
                method: 'POST',
                body: { address, timestamp: Date.now() }
            });
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Flex
     */
    const flex = {
        getBalance: async (userId, walletAddress) => {
            console.log('üíé [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            if (!walletAddress) {
                throw new APIError('–ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', 400);
            }

            return apiCall(`flex/balance/${userId}`, {
                method: 'GET',
                headers: {
                    'X-Wallet-Address': walletAddress
                },
                suppressErrors: true
            });
        },

        claimReward: async (userId, level) => {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ FLEX:', userId, level);

            if (!userId || !level) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏', 400);
            }

            return apiCall(`flex/claim/${userId}`, {
                method: 'POST',
                body: { level, timestamp: Date.now() }
            });
        },

        getHistory: async (userId) => {
            console.log('üìú [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó FLEX:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`flex/history/${userId}`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        checkLevels: async (userId, flexBalance) => {
            console.log('üéØ [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`flex/levels/${userId}`, {
                method: 'GET',
                headers: {
                    'X-Flex-Balance': flexBalance?.toString() || '0'
                },
                suppressErrors: true
            });
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Daily Bonus
     */
    const daily = {
        getStatus: async (userId) => {
            console.log('üìÖ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`daily/status/${userId}`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        claim: async (userId) => {
            console.log('üéÅ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`daily/claim/${userId}`, {
                method: 'POST',
                body: { timestamp: Date.now() }
            });
        },

        getHistory: async (userId) => {
            console.log('üìú [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`daily/history/${userId}`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        calculateReward: async (userId, dayNumber) => {
            console.log('üí∞ [TasksAPI] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', userId, dayNumber);

            if (!userId || typeof dayNumber !== 'number') {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É', 400);
            }

            return apiCall(`daily/calculate-reward/${userId}`, {
                method: 'POST',
                body: { dayNumber }
            });
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Tasks
     */
    const tasks = {
        getList: async (userId, type = 'all') => {
            console.log('üìã [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å:', userId, type);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`tasks/list/${userId}?type=${type}`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        start: async (userId, taskId) => {
            console.log('‚ñ∂Ô∏è [TasksAPI] –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);

            if (!userId || !taskId) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–≤–¥–∞–Ω–Ω—è', 400);
            }

            return apiCall(`tasks/start/${userId}/${taskId}`, {
                method: 'POST',
                body: { timestamp: Date.now() }
            });
        },

        verify: async (userId, taskId, verificationData) => {
            console.log('üîç [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);

            if (!userId || !taskId) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó', 400);
            }

            return apiCall(`tasks/verify/${userId}/${taskId}`, {
                method: 'POST',
                body: verificationData || {}
            });
        },

        complete: async (userId, taskId) => {
            console.log('‚úÖ [TasksAPI] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);

            if (!userId || !taskId) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è', 400);
            }

            return apiCall(`tasks/complete/${userId}/${taskId}`, {
                method: 'POST',
                body: { timestamp: Date.now() }
            });
        },

        claim: async (userId, taskId) => {
            console.log('üí∞ [TasksAPI] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è:', userId, taskId);

            if (!userId || !taskId) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏', 400);
            }

            return apiCall(`tasks/claim/${userId}/${taskId}`, {
                method: 'POST'
            });
        }
    };

    /**
     * API –º–µ—Ç–æ–¥–∏ –¥–ª—è Verification
     */
    const verify = {
        telegram: async (userId, channelUsername) => {
            console.log('üì± [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Telegram –ø—ñ–¥–ø–∏—Å–∫–∏:', userId);

            if (!userId || !channelUsername) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó', 400);
            }

            return apiCall(`verify/telegram/${userId}`, {
                method: 'POST',
                body: { channelUsername }
            });
        },

        checkBot: async (userId) => {
            console.log('ü§ñ [TasksAPI] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', userId);

            if (!userId) {
                throw new APIError('User ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', 400);
            }

            return apiCall(`verify/check-bot/${userId}`, {
                method: 'GET',
                suppressErrors: true
            });
        },

        social: async (userId, platform, data) => {
            console.log('üåê [TasksAPI] –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –º–µ—Ä–µ–∂—ñ:', userId, platform);

            if (!userId || !platform) {
                throw new APIError('–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó', 400);
            }

            return apiCall(`verify/social/${userId}/${platform}`, {
                method: 'POST',
                body: data || {}
            });
        }
    };

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
     */
    function generateRequestId() {
        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    function updateRequestStats(requestId, success, data) {
        const request = state.pendingRequests.get(requestId);
        if (!request) return;

        const responseTime = Date.now() - request.startTime;

        state.requestStats.total++;
        if (success) {
            state.requestStats.success++;
        } else {
            state.requestStats.failed++;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const prevAvg = state.requestStats.avgResponseTime;
        const totalRequests = state.requestStats.success + state.requestStats.failed;
        state.requestStats.avgResponseTime = ((prevAvg * (totalRequests - 1)) + responseTime) / totalRequests;

        console.log('üìä [TasksAPI] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤:', {
            –≤—Å—å–æ–≥–æ: state.requestStats.total,
            —É—Å–ø—ñ—à–Ω–∏—Ö: state.requestStats.success,
            –Ω–µ–≤–¥–∞–ª–∏—Ö: state.requestStats.failed,
            —Å–µ—Ä–µ–¥–Ω—ñ–π–ß–∞—Å: Math.round(state.requestStats.avgResponseTime) + '–º—Å'
        });
    }

    /**
     * –ö–∞—Å—Ç–æ–º–Ω–∏–π –∫–ª–∞—Å –ø–æ–º–∏–ª–∫–∏
     */
    class APIError extends Error {
        constructor(message, status, data) {
            super(message);
            this.name = 'APIError';
            this.status = status;
            this.data = data;
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     */
    function cancelAllRequests() {
        console.log('üö´ [TasksAPI] –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤');
        state.pendingRequests.clear();
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    function getStatistics() {
        return {
            ...state.requestStats,
            pendingRequests: state.pendingRequests.size,
            rateLimitRemaining: state.rateLimiter.maxRequests - state.rateLimiter.requests.length,
            serverAvailable: state.serverAvailable,
            dependenciesReady: dependenciesReady
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å API
     */
    function isReady() {
        return dependenciesReady && state.serverAvailable;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
     */
    setTimeout(() => {
        try {
            initialize();
        } catch (error) {
            console.error('‚ùå [TasksAPI] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
        }
    }, 100);

    console.log('‚úÖ [TasksAPI] API –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (Production)');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥
        call: apiCall,

        // –ì—Ä—É–ø–∏ –º–µ—Ç–æ–¥—ñ–≤
        auth,
        user,
        wallet,
        flex,
        daily,
        tasks,
        verify,

        // –£—Ç–∏–ª—ñ—Ç–∏
        cancelAllRequests,
        getStatistics,
        isReady,
        checkServerHealth,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config,

        // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        initialize
    };

})();

console.log('‚úÖ [TasksAPI] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ (Production)');