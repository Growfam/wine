/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 * –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º health check —Ç–∞ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∞–º–∏
 * @version 2.0.0
 */

(function() {
    'use strict';
    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –í–ò–ü–†–ê–í–õ–ï–ù–û–ì–û API –º–æ–¥—É–ª—è");

    // ======== API-–®–õ–Ø–•–ò ========

    const API_PATHS = {
        // Health check
        HEALTH: 'health',
        PING: 'ping',

        // –ó–∞–≤–¥–∞–Ω–Ω—è
        TASKS: {
            ALL: 'quests/tasks',
            BY_TYPE: (type) => `quests/tasks/${type}`,
            SOCIAL: 'quests/tasks/social',
            LIMITED: 'quests/tasks/limited',
            PARTNER: 'quests/tasks/partner',
            REFERRAL: 'quests/tasks/referral',
            DETAILS: (taskId) => `quests/tasks/${taskId}/details`,
            START: (taskId) => `quests/tasks/${taskId}/start`,
            VERIFY: (taskId) => `quests/tasks/${taskId}/verify`,
            PROGRESS: (taskId) => `quests/tasks/${taskId}/progress`
        },

        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —à–ª—è—Ö–∏
        USER: {
            DATA: (userId) => `user/${userId}`,
            BALANCE: (userId) => `user/${userId}/balance`,
            TASKS: (userId) => `user/${userId}/tasks`,
            PROGRESS: (userId) => `user/${userId}/progress`,
            TASK_STATUS: (userId, taskId) => `user/${userId}/tasks/${taskId}/status`,
            SETTINGS: (userId) => `user/${userId}/settings`
        },

        // –©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
        DAILY_BONUS: {
            STATUS: (userId) => `user/${userId}/daily-bonus`,
            CLAIM: (userId) => `user/${userId}/claim-daily-bonus`,
            STREAK: (userId) => `user/${userId}/claim-streak-bonus`,
            HISTORY: (userId) => `user/${userId}/bonus-history`
        },

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        STAKING: {
            DATA: (userId) => `user/${userId}/staking`,
            HISTORY: (userId) => `user/${userId}/staking/history`,
            CANCEL: (userId, stakingId) => `user/${userId}/staking/${stakingId}/cancel`
        },

        // –Ü–Ω—à—ñ
        AUTH: {
            REFRESH_TOKEN: 'auth/refresh-token'
        },

        // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        TRANSACTIONS: (userId) => `user/${userId}/transactions`
    };

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ë–∞–∑–æ–≤–∏–π URL
    const API_BASE_URL = (() => {
        if (window.WinixConfig && window.WinixConfig.apiBaseUrl) {
            let url = window.WinixConfig.apiBaseUrl;
            return url.endsWith('/api') ? url.slice(0, -4) : url;
        }

        const hostname = window.location.hostname;
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            return `http://${hostname}:8080`;
        } else if (hostname.includes('testenv') || hostname.includes('staging')) {
            return `https://${hostname}`;
        } else {
            return 'https://winixbot.com';
        }
    })();

    // –°—Ç–∞–Ω API - –ó–ú–ï–ù–®–ï–ù–ê –ê–ì–†–ï–°–ò–í–ù–Ü–°–¢–¨
    let _apiState = {
        isHealthy: null, // null = –Ω–µ–≤—ñ–¥–æ–º–æ, true = –∑–¥–æ—Ä–æ–≤–∏–π, false = –Ω–µ–∑–¥–æ—Ä–æ–≤–∏–π
        lastHealthCheck: 0,
        healthCheckInterval: null,
        healthCheckInProgress: false,
        consecutiveFailures: 0,
        maxFailures: 5, // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –º–µ–Ω—à–æ—ó —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ
        healthCheckEnabled: true // –î–æ–¥–∞–Ω–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–º–∏–∫–∞—Ç–∏ health check
    };

    // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    let _debugMode = false;

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
    let _userCache = null;
    let _userCacheTime = 0;
    const USER_CACHE_TTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω

    let _stakingCache = null;
    let _stakingCacheTime = 0;
    const STAKING_CACHE_TTL = 180000; // 3 —Ö–≤–∏–ª–∏–Ω–∏

    // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–º–∏
    let _pendingRequests = {};
    let _activeEndpoints = new Set();

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
    let _requestCounter = {
        total: 0,
        errors: 0,
        current: 0,
        lastReset: Date.now()
    };

    // –°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
    let _connectionState = {
        isConnected: true,
        lastSuccessTime: Date.now(),
        failedAttempts: 0,
        maxRetries: 3
    };

    // –¢–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    let _authToken = null;
    let _authTokenExpiry = 0;

    // ======== HEALTH CHECK –§–£–ù–ö–¶–Ü–á (–ü–û–ö–†–ê–©–ï–ù–Ü) ========

    /**
     * –ú'—è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
     */
    async function checkApiHealth() {
        if (_apiState.healthCheckInProgress || !_apiState.healthCheckEnabled) {
            return _apiState.isHealthy !== false; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ true —è–∫—â–æ –Ω–µ –∑–Ω–∞—î–º–æ –∞–±–æ –∑–¥–æ—Ä–æ–≤–∏–π
        }

        _apiState.healthCheckInProgress = true;
        console.log("üè• API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞");

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 3000); // –°–∫–æ—Ä–æ—á–µ–Ω–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥

            const response = await fetch(`${API_BASE_URL}/api/${API_PATHS.HEALTH}`, {
                method: 'GET',
                signal: controller.signal,
                headers: {
                    'Accept': 'application/json'
                }
            });

            clearTimeout(timeoutId);

            const isHealthy = response.ok;
            _apiState.isHealthy = isHealthy;
            _apiState.lastHealthCheck = Date.now();

            if (isHealthy) {
                console.log("‚úÖ API: –°–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤–∏–π");
                _apiState.consecutiveFailures = 0;
                _connectionState.isConnected = true;
                _connectionState.lastSuccessTime = Date.now();
                hideServerUnavailableMessage();
            } else {
                console.warn(`‚ö†Ô∏è API: –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å ${response.status}`);
                _apiState.consecutiveFailures++;
            }

            return isHealthy;

        } catch (error) {
            console.warn("‚ö†Ô∏è API: Health check –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π:", error.message);

            _apiState.isHealthy = false;
            _apiState.consecutiveFailures++;
            _connectionState.isConnected = false;

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–º–∏–ª–æ–∫
            if (_apiState.consecutiveFailures >= _apiState.maxFailures) {
                showServerUnavailableMessage();
            }

            return false;
        } finally {
            _apiState.healthCheckInProgress = false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –º'—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    function showServerUnavailableMessage() {
        console.warn("‚ö†Ô∏è API: –ü–æ–∫–∞–∑—É—î–º–æ –º'—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞");

        let banner = document.getElementById('server-unavailable-banner');
        if (!banner) {
            banner = document.createElement('div');
            banner.id = 'server-unavailable-banner';
            banner.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                background: linear-gradient(135deg, #f39c12, #e67e22);
                color: white;
                text-align: center;
                padding: 10px;
                z-index: 10000;
                font-size: 13px;
                font-weight: 500;
                border-bottom: 2px solid #d35400;
                transition: transform 0.3s ease;
            `;
            banner.innerHTML = `
                <div>‚ö†Ô∏è –°–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º...</div>
                <div style="font-size: 11px; margin-top: 3px; opacity: 0.9;">
                    –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –º–æ–∂–µ –±—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω–∞
                </div>
            `;
            document.body.insertBefore(banner, document.body.firstChild);
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    function hideServerUnavailableMessage() {
        const banner = document.getElementById('server-unavailable-banner');
        if (banner) {
            banner.remove();
            console.log("‚úÖ API: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ");
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è (–º–µ–Ω—à –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–π)
     */
    function startHealthCheck() {
        console.log("üè• API: –ó–∞–ø—É—Å–∫ –º'—è–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è");

        if (_apiState.healthCheckInterval) {
            clearInterval(_apiState.healthCheckInterval);
        }

        // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            checkApiHealth();
        }, 2000);

        // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥ (–∑–±—ñ–ª—å—à–µ–Ω–æ)
        _apiState.healthCheckInterval = setInterval(async () => {
            if (_apiState.healthCheckEnabled) {
                const isHealthy = await checkApiHealth();

                if (isHealthy && _apiState.consecutiveFailures === 0) {
                    hideServerUnavailableMessage();
                }
            }
        }, 60000); // 1 —Ö–≤–∏–ª–∏–Ω–∞ –∑–∞–º—ñ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –ù–ï –±–ª–æ–∫—É—é—á–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API
     */
    async function ensureApiReady() {
        // –Ø–∫—â–æ health check –≤–∏–º–∫–Ω–µ–Ω–æ, –≤–≤–∞–∂–∞—î–º–æ —â–æ API –≥–æ—Ç–æ–≤–∏–π
        if (!_apiState.healthCheckEnabled) {
            return true;
        }

        // –Ø–∫—â–æ –Ω–µ—â–æ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–∏ —ñ –≤—Å–µ –¥–æ–±—Ä–µ, –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–Ω–æ–≤—É
        const healthCheckAge = Date.now() - _apiState.lastHealthCheck;
        if (_apiState.isHealthy === true && healthCheckAge < 120000) { // 2 —Ö–≤–∏–ª–∏–Ω–∏
            return true;
        }

        // –Ø–∫—â–æ –∑–¥–æ—Ä–æ–≤'—è –Ω–µ–≤—ñ–¥–æ–º–µ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–µ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
        if (_apiState.isHealthy === null || healthCheckAge > 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
            console.log("üîç API: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å API...");
            const isHealthy = await checkApiHealth();

            // –ù–ï –ë–õ–û–ö–£–Ñ–ú–û –∑–∞–ø–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ health check –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π
            if (!isHealthy) {
                console.warn("‚ö†Ô∏è API: Health check –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É");
            }
        }

        return true; // –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ true —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     */
    function getUserId() {
        try {
            function isValidId(id) {
                return id &&
                       id !== 'undefined' &&
                       id !== 'null' &&
                       id !== undefined &&
                       id !== null &&
                       typeof id !== 'function' &&
                       id.toString().trim() !== '';
            }

            // 1. Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    if (window.Telegram.WebApp.initDataUnsafe &&
                        window.Telegram.WebApp.initDataUnsafe.user &&
                        window.Telegram.WebApp.initDataUnsafe.user.id) {

                        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();

                        if (isValidId(tgUserId)) {
                            try {
                                localStorage.setItem('telegram_user_id', tgUserId);
                            } catch (e) {}
                            return tgUserId;
                        }
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
                }
            }

            // 2. localStorage
            try {
                const localId = localStorage.getItem('telegram_user_id');
                if (isValidId(localId)) {
                    return localId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage:", e);
            }

            // 3. DOM –µ–ª–µ–º–µ–Ω—Ç
            try {
                const userIdElement = document.getElementById('user-id');
                if (userIdElement && userIdElement.textContent) {
                    const domId = userIdElement.textContent.trim();
                    if (isValidId(domId)) {
                        try {
                            localStorage.setItem('telegram_user_id', domId);
                        } catch (e) {}
                        return domId;
                    }
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ DOM:", e);
            }

            // 4. URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
                if (isValidId(urlId)) {
                    try {
                        localStorage.setItem('telegram_user_id', urlId);
                    } catch (e) {}
                    return urlId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ URL:", e);
            }

            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    function getAuthToken() {
        try {
            const now = Date.now();

            // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω –≤ –ø–∞–º'—è—Ç—ñ
            if (_authToken && _authTokenExpiry > now) {
                return _authToken;
            }

            // 2. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ StorageUtils
            let token = null;
            let tokenExpiry = 0;

            if (window.StorageUtils) {
                token = window.StorageUtils.getItem('auth_token');
                tokenExpiry = parseInt(window.StorageUtils.getItem('auth_token_expiry') || '0');
            } else {
                // 3. localStorage
                token = localStorage.getItem('auth_token');
                tokenExpiry = parseInt(localStorage.getItem('auth_token_expiry') || '0');
            }

            if (token && typeof token === 'string' && token.length > 5) {
                if (tokenExpiry > now) {
                    _authToken = token;
                    _authTokenExpiry = tokenExpiry;
                    return token;
                }

                // –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ
                if (!_authToken) {
                    _authToken = token;
                }
            }

            // 4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞
            if (window.WinixConfig && window.WinixConfig.authToken) {
                _authToken = window.WinixConfig.authToken;
                return _authToken;
            }

            // 5. URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlToken = urlParams.get('token') || urlParams.get('auth_token');
                if (urlToken && urlToken.length > 5) {
                    _authToken = urlToken;

                    if (window.StorageUtils) {
                        window.StorageUtils.setItem('auth_token', urlToken);
                    } else {
                        localStorage.setItem('auth_token', urlToken);
                    }

                    return urlToken;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ URL:", e);
            }

            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
            return null;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ includes
     */
    function safeIncludes(str, substring) {
        if (!str || typeof str !== 'string') return false;
        return str.includes(substring);
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è API endpoint
     */
    function normalizeEndpoint(endpoint) {
        if (!endpoint) return 'api';

        if (typeof endpoint === 'function') {
            try {
                endpoint = endpoint();
                if (!endpoint) return 'api';
            } catch (e) {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É endpoint —Ñ—É–Ω–∫—Ü—ñ—ó:", e);
                return 'api';
            }
        }

        endpoint = String(endpoint);
        let cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

        if (cleanEndpoint.endsWith('/') && cleanEndpoint.length > 1) {
            cleanEndpoint = cleanEndpoint.substring(0, cleanEndpoint.length - 1);
        }

        if (cleanEndpoint.startsWith('api/')) {
            return cleanEndpoint;
        } else if (cleanEndpoint === 'api') {
            return cleanEndpoint;
        } else if (cleanEndpoint.startsWith('api')) {
            return `api/${cleanEndpoint.substring(3)}`;
        } else {
            return `api/${cleanEndpoint}`;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID
     */
    function isValidUUID(id) {
        if (!id || typeof id !== 'string') return false;

        const normalized = id.trim().toLowerCase();
        const patterns = {
            standard: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
            noHyphens: /^[0-9a-f]{32}$/i,
            braced: /^\{[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\}$/i
        };

        return patterns.standard.test(normalized) ||
               patterns.noHyphens.test(normalized) ||
               patterns.braced.test(normalized);
    }

    /**
     * –ü–û–ö–†–ê–©–ï–ù–ï –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    async function refreshToken() {
        // –ù–ï –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å API —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        console.log("üîÑ API: –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (_pendingRequests['refresh-token']) {
            return _pendingRequests['refresh-token'];
        }

        const refreshPromise = new Promise(async (resolve, reject) => {
            try {
                const userId = getUserId();
                if (!userId) {
                    throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                console.log("üîÑ API: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");

                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ health check
                const response = await fetch(`${API_BASE_URL}/${normalizeEndpoint(API_PATHS.AUTH.REFRESH_TOKEN)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-User-Id': userId
                    },
                    body: JSON.stringify({
                        telegram_id: userId,
                        token: _authToken || ''
                    }),
                    timeout: 10000
                });

                if (!response.ok) {
                    if (response.status === 400 || response.status === 401) {
                        console.warn("‚ö†Ô∏è API: –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –æ—á–∏—â–∞—î–º–æ");
                        clearAuthToken();
                        throw new Error("–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è");
                    }
                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
                }

                const data = await response.json();

                if (data && data.status === 'success' && data.token) {
                    _authToken = data.token;

                    if (data.expires_at) {
                        _authTokenExpiry = new Date(data.expires_at).getTime();
                    } else if (data.expires_in) {
                        _authTokenExpiry = Date.now() + (data.expires_in * 1000);
                    } else {
                        _authTokenExpiry = Date.now() + (24 * 60 * 60 * 1000);
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω
                    try {
                        if (window.StorageUtils) {
                            window.StorageUtils.setItem('auth_token', _authToken, {
                                persist: true,
                                expires: _authTokenExpiry - Date.now()
                            });
                            window.StorageUtils.setItem('auth_token_expiry', _authTokenExpiry.toString(), {
                                persist: true,
                                expires: _authTokenExpiry - Date.now()
                            });
                        } else {
                            localStorage.setItem('auth_token', _authToken);
                            localStorage.setItem('auth_token_expiry', _authTokenExpiry.toString());
                        }
                    } catch (e) {
                        console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
                    }

                    console.log("‚úÖ API: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");

                    document.dispatchEvent(new CustomEvent('token-refreshed', {
                        detail: { token: _authToken, expires_at: _authTokenExpiry }
                    }));

                    resolve(_authToken);
                } else {
                    throw new Error(data.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");
                }
            } catch (error) {
                console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
                reject(error);
            } finally {
                delete _pendingRequests['refresh-token'];
            }
        });

        _pendingRequests['refresh-token'] = refreshPromise;
        return refreshPromise;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    function clearAuthToken() {
        console.log("üóëÔ∏è API: –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó");

        _authToken = null;
        _authTokenExpiry = 0;

        try {
            if (window.StorageUtils) {
                window.StorageUtils.removeItem('auth_token');
                window.StorageUtils.removeItem('auth_token_expiry');
            } else {
                localStorage.removeItem('auth_token');
                localStorage.removeItem('auth_token_expiry');
            }
        } catch (e) {
            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
        }

        document.dispatchEvent(new CustomEvent('token-cleared'));
    }

    // ======== –ü–û–ö–†–ê–©–ï–ù–Ü –§–£–ù–ö–¶–Ü–á API-–ó–ê–ü–ò–¢–£ ========

    /**
     * –ü–û–ö–†–ê–©–ï–ù–ê —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
     */
    async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 2) {
        try {
            if (!endpoint) {
                console.error("üîå API: endpoint —î undefined –∞–±–æ null");
                return Promise.reject({
                    status: 'error',
                    message: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ endpoint –¥–ª—è –∑–∞–ø–∏—Ç—É',
                    code: 'missing_endpoint'
                });
            }

            // –í–ò–î–ê–õ–ï–ù–û –±–ª–æ–∫—É—é—á—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–¥–æ—Ä–æ–≤'—è API
            // –¢–µ–ø–µ—Ä –∑–∞–≤–∂–¥–∏ –ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç

            if (_debugMode) {
                console.log(`üîå API: –ó–∞–ø–∏—Ç ${method} –¥–æ ${endpoint}`);
            }

            const telegramId = getUserId();
            if (!telegramId) {
                console.error("‚ùå API: –ù–µ–º–∞—î Telegram ID –¥–ª—è –∑–∞–ø–∏—Ç—É");
                throw new Error('No Telegram ID');
            }

            // –§–æ—Ä–º—É—î–º–æ URL
            let url;
            if (safeIncludes(endpoint, 'http')) {
                url = endpoint;
            } else {
                const normalizedEndpoint = normalizeEndpoint(endpoint);
                const hasQuery = safeIncludes(normalizedEndpoint, '?');
                const timestamp = Date.now();

                url = `${API_BASE_URL}/${normalizedEndpoint}`
                    .replace(/([^:]\/)\/+/g, "$1")
                    + (hasQuery ? '&' : '?') + `t=${timestamp}`;
            }

            // –ó–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = {
                'Content-Type': 'application/json',
                ...(options.headers || {})
            };

            // –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            if (!options.skipTokenCheck) {
                const token = getAuthToken();
                if (token) {
                    headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
                }
            }

            // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!options.skipUserIdCheck) {
                headers['X-Telegram-User-Id'] = telegramId;
            }

            // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: headers,
                timeout: options.timeout || 15000 // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç
            };

            // –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É
            if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                requestOptions.body = JSON.stringify(data);
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.showLoading === 'function') {
                window.showLoading();
            }

            let response;
            let lastError;

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ retry –ª–æ–≥—ñ–∫–æ—é
            for (let attempt = 1; attempt <= retries + 1; attempt++) {
                try {
                    if (attempt > 1) {
                        const delay = Math.min(1000 * Math.pow(1.5, attempt - 1), 5000);
                        console.log(`‚è≥ API: –ó–∞—Ç—Ä–∏–º–∫–∞ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ø—Ä–æ–±–æ—é ${attempt}`);
                        await new Promise(resolve => setTimeout(resolve, delay));
                    }

                    // –ö–æ–Ω—Ç—Ä–æ–ª —Ç–∞–π–º–∞—É—Ç—É
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), requestOptions.timeout);
                    requestOptions.signal = controller.signal;

                    const fetchResponse = await fetch(url, requestOptions);
                    clearTimeout(timeoutId);

                    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 401 - —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
                    if (fetchResponse.status === 401 && attempt === 1) {
                        console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É...");
                        try {
                            await refreshToken();
                            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏
                            const newToken = getAuthToken();
                            if (newToken) {
                                headers['Authorization'] = newToken.startsWith('Bearer ') ? newToken : `Bearer ${newToken}`;
                            }
                            continue; // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
                        } catch (tokenError) {
                            console.error("üîå API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", tokenError);
                            clearAuthToken();
                        }
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
                    if (!fetchResponse.ok) {
                        throw new Error(`HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);
                    }

                    // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    response = await fetchResponse.json();

                    // –£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç
                    _connectionState.isConnected = true;
                    _connectionState.lastSuccessTime = Date.now();
                    _connectionState.failedAttempts = 0;
                    _apiState.consecutiveFailures = Math.max(0, _apiState.consecutiveFailures - 1);

                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ
                    if (_apiState.isHealthy !== true) {
                        _apiState.isHealthy = true;
                        hideServerUnavailableMessage();
                    }

                    break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É retry

                } catch (error) {
                    lastError = error;
                    console.warn(`‚ö†Ô∏è API: –°–ø—Ä–æ–±–∞ ${attempt}/${retries + 1} –Ω–µ—É—Å–ø—ñ—à–Ω–∞:`, error.message);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
                    _connectionState.failedAttempts++;
                    _apiState.consecutiveFailures++;

                    // –î–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–ø—Ä–æ–±–∏ –Ω–µ —á–µ–∫–∞—î–º–æ
                    if (attempt === retries + 1) {
                        break;
                    }
                }
            }

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            // –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ—É—Å–ø—ñ—à–Ω—ñ
            if (!response) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è
                if (_apiState.consecutiveFailures >= _apiState.maxFailures) {
                    _apiState.isHealthy = false;
                    showServerUnavailableMessage();
                }

                if (options.suppressErrors) {
                    return {
                        status: 'error',
                        message: lastError?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
                        source: 'api_error'
                    };
                }

                throw lastError || new Error('–í—Å—ñ —Å–ø—Ä–æ–±–∏ –∑–∞–ø–∏—Ç—É –Ω–µ—É—Å–ø—ñ—à–Ω—ñ');
            }

            return response;

        } catch (error) {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            document.dispatchEvent(new CustomEvent('api-error', {
                detail: { error, endpoint, method }
            }));

            if (options.suppressErrors) {
                return {
                    status: 'error',
                    message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                    source: 'api_error'
                };
            }

            throw error;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(forceRefresh = false) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
            return {status: 'success', data: _userCache, source: 'cache'};
        }

        const id = getUserId();
        if (!id) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const result = await apiRequest(API_PATHS.USER.DATA(id), 'GET', null, {
                timeout: 10000,
                suppressErrors: false
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            if (result.status === 'success' && result.data) {
                _userCache = result.data;
                _userCacheTime = Date.now();

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                try {
                    if (_userCache.balance !== undefined) {
                        localStorage.setItem('userTokens', _userCache.balance.toString());
                        localStorage.setItem('winix_balance', _userCache.balance.toString());
                    }

                    if (_userCache.coins !== undefined) {
                        localStorage.setItem('userCoins', _userCache.coins.toString());
                        localStorage.setItem('winix_coins', _userCache.coins.toString());
                    }

                    if (_userCache.notifications_enabled !== undefined) {
                        localStorage.setItem('notifications_enabled', _userCache.notifications_enabled.toString());
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                }
            }

            return result;
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const nocache = Date.now();
            const endpoint = API_PATHS.USER.BALANCE(userId) + `?nocache=${nocache}`;

            const response = await apiRequest(endpoint, 'GET', null, {
                suppressErrors: false,
                timeout: 8000
            });

            return response;

        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
            throw error;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingData() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (_stakingCache && (Date.now() - _stakingCacheTime < STAKING_CACHE_TTL)) {
            return {status: 'success', data: _stakingCache, source: 'cache'};
        }

        return apiRequest(API_PATHS.STAKING.DATA(userId));
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingHistory() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(API_PATHS.STAKING.HISTORY(userId));
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function createStaking(amount, period) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        if (![7, 14, 28].includes(period)) {
            throw new Error("–ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–æ–∂–µ –±—É—Ç–∏ 7, 14 –∞–±–æ 28 –¥–Ω—ñ–≤");
        }

        return apiRequest(API_PATHS.STAKING.DATA(userId), 'POST', {
            stakingAmount: parseInt(amount),
            period: period
        });
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function addToStaking(amount, stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingData = await getStakingData();
                if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                    throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
                targetStakingId = stakingData.data.stakingId;
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(`${API_PATHS.STAKING.DATA(userId)}/${targetStakingId}`, 'PUT', {
            additionalAmount: parseInt(amount)
        });
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function cancelStaking(stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingData = await getStakingData();
                if (stakingData.status === 'success' && stakingData.data && stakingData.data.hasActiveStaking) {
                    targetStakingId = stakingData.data.stakingId;
                } else {
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    if (stakingDataStr) {
                        try {
                            const localData = JSON.parse(stakingDataStr);
                            if (localData && localData.stakingId) {
                                targetStakingId = localData.stakingId;
                            }
                        } catch (e) {
                            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage:", e);
                        }
                    }
                }

                if (!targetStakingId) {
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(API_PATHS.STAKING.CANCEL(userId, targetStakingId), 'POST', {
            confirm: true,
            timestamp: Date.now()
        });
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    async function calculateExpectedReward(amount, period) {
        amount = parseInt(amount) || 0;
        period = parseInt(period) || 14;

        if (amount <= 0) {
            return { status: 'success', data: { reward: 0 } };
        }

        if (![7, 14, 28].includes(period)) {
            period = 14;
        }

        const rewardRates = { 7: 4, 14: 9, 28: 15 };
        const rewardPercent = rewardRates[period] || 9;
        const reward = (amount * rewardPercent) / 100;

        return {
            status: 'success',
            data: {
                reward: parseFloat(reward.toFixed(2)),
                rewardPercent: rewardPercent,
                amount: amount,
                period: period,
                source: 'local_calculation'
            }
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getTransactions(limit = 100) {
        const userId = getUserId();
        if (!userId) {
            return {
                status: 'error',
                message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            };
        }

        try {
            return await apiRequest(`${API_PATHS.TRANSACTIONS(userId)}?limit=${limit}`, 'GET', null, {
                suppressErrors: true
            });
        } catch (error) {
            console.warn("üîå API: –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:", error);
            return {
                status: 'success',
                data: [],
                message: '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            };
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function updateSettings(settings) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            return await apiRequest(API_PATHS.USER.SETTINGS(userId), 'POST', settings);
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);
            throw error;
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É API
     */
    function clearCache() {
        _userCache = null;
        _userCacheTime = 0;
        _stakingCache = null;
        _stakingCacheTime = 0;
        console.log("üîå API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ");
    }

    /**
     * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     */
    function forceCleanupRequests() {
        _activeEndpoints.clear();
        _pendingRequests = {};
        console.log("üîå API: –ü—Ä–∏–º—É—Å–æ–≤–æ –æ—á–∏—â–µ–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤");
        return true;
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async function reconnect() {
        console.log("üîÑ API: –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è...");

        forceCleanupRequests();
        _apiState.isHealthy = null;
        _apiState.consecutiveFailures = 0;

        const isHealthy = await checkApiHealth();

        if (isHealthy) {
            try {
                await refreshToken();
            } catch (error) {
                console.warn("‚ö†Ô∏è API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", error);
            }

            try {
                await getUserData(true);
                _connectionState.isConnected = true;
                _connectionState.lastSuccessTime = Date.now();
                _connectionState.failedAttempts = 0;

                console.log("‚úÖ API: –ó'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");
                return true;
            } catch (error) {
                console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è:", error);
                return false;
            }
        } else {
            console.error("‚ùå API: –°–µ—Ä–≤–µ—Ä –≤—Å–µ —â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
            return false;
        }
    }

    // ======== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ========

    // –ú'—è–∫–∏–π –∑–∞–ø—É—Å–∫ health check
    startHealthCheck();

    // ======== –ï–ö–°–ü–û–†–¢ API ========

    window.API_PATHS = API_PATHS;

    window.WinixAPI = {
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: {
            baseUrl: API_BASE_URL,
            version: '2.0.0',
            environment: API_BASE_URL.includes('localhost') ? 'development' : 'production'
        },

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },

        // Health check
        checkApiHealth,
        ensureApiReady,
        isApiHealthy: () => _apiState.isHealthy === true,
        enableHealthCheck: () => { _apiState.healthCheckEnabled = true; },
        disableHealthCheck: () => { _apiState.healthCheckEnabled = false; },

        // –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        apiRequest,
        getUserId,
        getAuthToken,
        clearAuthToken,
        refreshToken,
        clearCache,
        forceCleanupRequests,
        reconnect,
        isValidUUID,
        safeIncludes,

        // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserData,
        getBalance,
        updateSettings,

        // –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        getStakingData,
        getStakingHistory,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,

        // –§—É–Ω–∫—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        getTransactions,

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤
        paths: API_PATHS,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostics: {
            getRequestStats: function() {
                return {..._requestCounter};
            },
            getConnectionState: function() {
                return {..._connectionState};
            },
            getApiState: function() {
                return {..._apiState};
            },
            getActiveEndpoints: function() {
                return Array.from(_activeEndpoints);
            },
            resetState: function() {
                _activeEndpoints.clear();
                _pendingRequests = {};
                _connectionState.failedAttempts = 0;
                _apiState.consecutiveFailures = 0;
                _apiState.isHealthy = null;
                return true;
            }
        }
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.apiRequest = apiRequest;
    window.getUserId = getUserId;

    window.API = {
        get: function(endpoint, options = {}) {
            return window.WinixAPI.apiRequest(endpoint, 'GET', null, options);
        },
        post: function(endpoint, data = null, options = {}) {
            return window.WinixAPI.apiRequest(endpoint, 'POST', data, options);
        }
    };

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    window.addEventListener('online', () => {
        console.log("üîÑ API: –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");
        reconnect();
    });

    console.log(`‚úÖ API: –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (URL: ${API_BASE_URL})`);
})();