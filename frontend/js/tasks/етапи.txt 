
Необхідно створити систему завдань для платформи WINIX, яка буде інтегрована в сторінку earn.html. Система повинна бути побудована за принципами, аналогічними до реферальної системи, з використанням тієї ж архітектури та стилістики (iOS 18 Premium style з фіолетовою темою).
Структура системи завдань
1. Головні вкладки системи:

Flex Earn (головна вкладка) - завдання з FLEX токенами
Daily Bonus (Щоденний бонус)
Social Tasks (Соціальні завдання)
Limited Tasks (Лімітовані завдання)
Partner Tasks (Партнерські завдання)

2. Flex Earn - детальні вимоги:
Базова механіка:

Перевірка підключення TON кошелька
Якщо не підключено - редирект на сторінку wallet.html
Якщо підключено - відображення 5 рівнів завдань з FLEX токенами
Автоматична перевірка балансу кожні 5 хвилин

П'ять рівнів Flex завдань:

Flex Holder Bronze - 100,000 FLEX → 500 winix + 5 tickets щодня
Flex Holder Silver - 500,000 FLEX → 1,500 winix + 10 tickets щодня
Flex Holder Gold - 1,000,000 FLEX → 3,000 winix + 20 tickets щодня
Flex Holder Platinum - 5,000,000 FLEX → 10,000 winix + 50 tickets щодня
Flex Holder Diamond - 10,000,000 FLEX → 25,000 winix + 100 tickets щодня

3. Щоденний бонус - оновлені вимоги:
Базова механіка:

Тривалість: 30 днів
Базова нагорода: 20 winix щодня (без tickets)
Прогресивна система: winix збільшуються з кожним днем (до 2000)

Tickets (дефіцитна валюта):

Частота: тільки 3 рази на тиждень (рандомні дні)
Кількість: від 1 до 5 tickets (прогресивно)
Механіка: повністю рандомні дні, користувач не знає коли отримає tickets

4. Типи завдань (без змін):
Соціальні завдання:

Підписка на Telegram канали
Приєднання до Telegram ботів
Підписка на YouTube канал
Follow у Twitter

Лімітовані завдання:

Обмежені за часом
Обмежені за кількістю учасників

Партнерські завдання:

Завдання від партнерів
Промо-акції

5. Система верифікації (без змін):
Telegram (з верифікацією):

Перевірка через бота-адміністратора
Автоматична перевірка підписки
Миттєве нарахування після підтвердження

Інші платформи (без верифікації):

YouTube, Twitter, інші
Нарахування одразу після натискання

Файлова структура (оновлена)
frontend/
├── earn.html
├── css/
│   └── tasks/
│       ├── styles.css              # Основні стилі
│       ├── animations.css          # Анімації iOS 18 Premium
│       ├── flex-earn.css           # Стилі Flex Earn
│       ├── daily-bonus.css         # Стилі щоденного бонусу
│       ├── tasks.css               # Стилі завдань
│       ├── tasks-cards.css         # Картки завдань
│       ├── verification.css        # Стилі верифікації
│       └── responsive.css          # Адаптивність
└── js/
    └── tasks/
        ├── constants.js            # Константи системи
        ├── api.js                  # API функції
        ├── store.js                # Redux-подібний стор
        ├── services.js             # Сервісні функції
        ├── utils.js                # Утиліти
        ├── flexEarn.js             # Логіка Flex Earn
        ├── dailyBonus.js           # Логіка щоденного бонусу
        ├── taskVerification.js     # Верифікація завдань
        └── integration.js          # Головний інтеграційний модуль
Оновлені промпти для етапів
Етап 1: Базова HTML структура та навігація
Файли для розробки:

earn.html - основна сторінка

Завдання:

Створити базову HTML структуру з header та nav-bar (скопіювати з referrals.html)
Додати систему з 5 вкладок (Flex Earn активна за замовчуванням)
Встановити правильну навігацію в nav-bar (вкладка Earn активна)
Підключити базові скрипти telegram-web-app.js, api.js, auth.js, core.js

Етап 2: Базові стилі та CSS архітектура
Файли для розробки:

css/tasks/styles.css - основні стилі (копія з referrals)
css/tasks/animations.css - анімації iOS 18 Premium CSS змінні

Завдання:

Скопіювати базові стилі з реферальної системи
Адаптувати кольори та змінні для системи завдань
Створити стилі для системи вкладок
Налаштувати glassmorphism ефекти

Етап 3: Flex Earn вкладка - верстка
Файли для розробки:

css/tasks/flex-earn.css - стилі для Flex Earn- стилі статусу гаманця

Завдання:

Створити блок перевірки статусу гаманця
Додати візуальний індикатор підключення
Створити кнопку "Перейти до Wallet" для непідключених
Додати блок відображення винагороди для підключених

Етап 4: Daily Bonus - верстка та стилі
Файли для розробки:

css/tasks/daily-bonus.css - стилі щоденного бонусу- стилі календаря

Завдання:

Створити календар на 30 днів
Додати статистичні картки (серія, зібрано днів, наступний бонус)
Створити стилі для різних станів днів
Додати кнопку отримання бонусу

Етап 5: Картки завдань - верстка
Файли для розробки:

css/tasks/tasks-cards.css - стилі карток завдань - стилі для різних типів завдань

Завдання:

Створити універсальну картку завдання
Додати варіації для Social, Limited, Partner
Створити стани карток (available, completed, expired)
Додати іконки платформ та таймери

Етап 6: JavaScript архітектура - базові модулі
Файли для розробки:

js/tasks/constants.js - константи системи
js/tasks/utils.js - утилітарні функції
js/tasks/store.js - Redux-подібний стор

Завдання:

Створити константи для всіх типів завдань
Додати конфігурацію щоденних бонусів (з обмеженням білетів)
Створити базовий стор для управління станом
Додати reducers для кожного компонента

Етап 7: Flex Earn - логіка перевірки
Файли для розробки:

js/tasks/flexEarn.js - логіка Flex Earn
js/tasks/walletChecker.js - перевірка статусу гаманця

Завдання:

Створити функцію перевірки підключення TON гаманця
Реалізувати переадресацію на wallet.html якщо не підключено
Додати автоматичне нарахування винагороди за підключений гаманець
Зберігати статус перевірки в localStorage

Етап 8: Daily Bonus - логіка
Файли для розробки:

js/tasks/dailyBonus.js - логіка щоденного бонусу
js/tasks/bonusCalculator.js - розрахунок бонусів

Завдання:

Реалізувати календар з відстеженням днів
Додати логіку рандомного розподілу білетів (3 рази на тиждень)
Створити прогресивну систему winix (20-2000)
Реалізувати збереження прогресу в localStorage

Етап 9: Система завдань та верифікація
Файли для розробки:

js/tasks/tasksManager.js - управління завданнями
js/tasks/taskVerification.js - верифікація
js/tasks/api.js - API функції

Завдання:

Створити систему завантаження завдань з API
Реалізувати верифікацію для Telegram (через бота)
Додати миттєве нарахування для інших платформ
Створити систему оновлення статусів

Етап 10: Інтеграція та фінальна оптимізація
Файли для розробки:

js/tasks/integration.js - головний модуль інтеграції
css/tasks/responsive.css - адаптивність
js/tasks/errorHandler.js - обробка помилок

Завдання:

Об'єднати всі модулі в єдину систему
Додати детальне логування (як у реферальній системі)
Інтегрувати з WinixAPI та системою авторизації
Протестувати всі сценарії та оптимізувати продуктивність

API endpoints (додаткові):

/api/wallet/status/{userId}
/api/flex/balance/{userId}
/api/flex/claim-reward/{userId}/{level}
Важливі моменти:

Flex Earn - тільки перевірка та винагорода, без можливості підключення
Білети - дефіцитний ресурс, доступний тільки 3 дні на тиждень
Верифікація - автоматична для всіх платформ крім Telegram, телгшрам перевіряється через підлючення нашого бота до їхнього кнаалу, і якщо все окей то нагорода автоматично видається
Логування - детальне як у реферальній системі для відлагодження
Дизайн - повна відповідність iOS 18 Premium стилю з фіолетовою темою