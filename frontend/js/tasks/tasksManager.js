/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ WINIX
 * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ —Ç–∏–ø–∞–º–∏ –∑–∞–≤–¥–∞–Ω—å
 */

window.TasksManager = (function() {
    'use strict';

    console.log('üìã [TasksManager] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –ó–ê–í–î–ê–ù–¨ =====');

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const state = {
        userId: null,
        isInitialized: false,
        isLoading: false,
        currentFilter: 'all',
        updateInterval: null,
        lastUpdate: null
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const config = {
        updateIntervalMs: 5 * 60 * 1000, // 5 —Ö–≤–∏–ª–∏–Ω
        taskTypes: ['social', 'limited', 'partner'],
        platforms: {
            telegram: { icon: 'üì±', name: 'Telegram', color: '#0088cc' },
            youtube: { icon: 'üì∫', name: 'YouTube', color: '#ff0000' },
            twitter: { icon: 'üê¶', name: 'Twitter', color: '#1da1f2' },
            discord: { icon: 'üí¨', name: 'Discord', color: '#5865f2' }
        }
    };

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async function init(userId) {
        console.log('üöÄ [TasksManager] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
        console.log('üë§ [TasksManager] User ID:', userId);

        state.userId = userId;

        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            await loadAllTasks();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            setupAutoUpdate();

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            setupEventHandlers();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥—É–ª—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            if (window.TaskVerification) {
                window.TaskVerification.init();
            }

            state.isInitialized = true;
            console.log('‚úÖ [TasksManager] –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TasksManager] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function loadAllTasks() {
        console.log('üìÇ [TasksManager] === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –í–°–Ü–• –ó–ê–í–î–ê–ù–¨ ===');

        state.isLoading = true;
        window.TasksStore.actions.setTasksLoading(true);

        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ API
            const response = await window.TasksAPI.tasks.getList(state.userId, 'all');
            console.log('‚úÖ [TasksManager] –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è:', response);

            // –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ —Ç–∏–ø–∞—Ö
            if (response.tasks) {
                processTasks(response.tasks);
            }

            state.lastUpdate = Date.now();
            console.log('‚úÖ [TasksManager] –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ');

        } catch (error) {
            console.error('‚ùå [TasksManager] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
            window.TasksUtils.showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å', 'error');

        } finally {
            state.isLoading = false;
            window.TasksStore.actions.setTasksLoading(false);
        }
    }

    /**
     * –û–±—Ä–æ–±–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function processTasks(tasksData) {
        console.log('üîÑ [TasksManager] –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–¥–∞–Ω—å...');

        // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ —Ç–∏–ø–∞—Ö
        const tasksByType = {
            social: [],
            limited: [],
            partner: []
        };

        // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        Object.entries(tasksData).forEach(([taskId, task]) => {
            // –î–æ–¥–∞—î–º–æ ID –¥–æ –æ–±'—î–∫—Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
            task.id = taskId;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
            if (window.TaskVerification?.isTaskCompleted(taskId)) {
                task.status = 'completed';
            }

            // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö
            const taskType = task.type || 'social';
            if (tasksByType[taskType]) {
                tasksByType[taskType].push(task);
            }

            console.log(`üìã [TasksManager] –ó–∞–≤–¥–∞–Ω–Ω—è ${taskId}:`, {
                —Ç–∏–ø: taskType,
                –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: task.platform,
                —Å—Ç–∞—Ç—É—Å: task.status
            });
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Å—Ç–æ—Ä—ñ
        Object.entries(tasksByType).forEach(([type, tasks]) => {
            window.TasksStore.actions.setTasks(type, tasks);
            console.log(`‚úÖ [TasksManager] –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${tasks.length} –∑–∞–≤–¥–∞–Ω—å —Ç–∏–ø—É ${type}`);
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        updateTasksUI();
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –∑–∞–≤–¥–∞–Ω—å
     */
    function updateTasksUI() {
        console.log('üîÑ [TasksManager] === –û–ù–û–í–õ–ï–ù–ù–Ø UI –ó–ê–í–î–ê–ù–¨ ===');

        const currentTab = window.TasksStore.selectors.getCurrentTab();
        console.log('üìë [TasksManager] –ü–æ—Ç–æ—á–Ω–∞ –≤–∫–ª–∞–¥–∫–∞:', currentTab);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É
        switch(currentTab) {
            case 'social':
                updateSocialTasks();
                break;
            case 'limited':
                updateLimitedTasks();
                break;
            case 'partner':
                updatePartnerTasks();
                break;
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function updateSocialTasks() {
        console.log('üì± [TasksManager] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å');

        const container = document.getElementById('social-tab');
        if (!container) return;

        const tasks = window.TasksStore.getState().tasks.social;
        console.log(`üìä [TasksManager] –ó–Ω–∞–π–¥–µ–Ω–æ ${Object.keys(tasks).length} —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å`);

        // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';

        // –ì—Ä—É–ø—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        const tasksByPlatform = groupTasksByPlatform(tasks);

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
        Object.entries(tasksByPlatform).forEach(([platform, platformTasks]) => {
            const section = createPlatformSection(platform, platformTasks);
            container.appendChild(section);
        });
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function updateLimitedTasks() {
        console.log('‚è∞ [TasksManager] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å');

        const container = document.getElementById('limited-tab');
        if (!container) return;

        const tasks = window.TasksStore.getState().tasks.limited;
        console.log(`üìä [TasksManager] –ó–Ω–∞–π–¥–µ–Ω–æ ${Object.keys(tasks).length} –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å`);

        container.innerHTML = '';

        // –°–æ—Ä—Ç—É—î–º–æ –ø–æ —á–∞—Å—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
        const sortedTasks = Object.values(tasks).sort((a, b) => {
            return (a.expiresAt || Infinity) - (b.expiresAt || Infinity);
        });

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫–∏ –∑–∞–≤–¥–∞–Ω—å
        sortedTasks.forEach(task => {
            const card = createTaskCard(task, 'limited');
            container.appendChild(card);
        });
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function updatePartnerTasks() {
        console.log('ü§ù [TasksManager] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å');

        const container = document.getElementById('partner-tab');
        if (!container) return;

        const tasks = window.TasksStore.getState().tasks.partner;
        console.log(`üìä [TasksManager] –ó–Ω–∞–π–¥–µ–Ω–æ ${Object.keys(tasks).length} –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å`);

        container.innerHTML = '';

        // –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö
        const tasksByPartner = {};
        Object.values(tasks).forEach(task => {
            const partner = task.partner || 'Unknown';
            if (!tasksByPartner[partner]) {
                tasksByPartner[partner] = [];
            }
            tasksByPartner[partner].push(task);
        });

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        Object.entries(tasksByPartner).forEach(([partner, partnerTasks]) => {
            const section = createPartnerSection(partner, partnerTasks);
            container.appendChild(section);
        });
    }

    /**
     * –ì—Ä—É–ø—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
     */
    function groupTasksByPlatform(tasks) {
        const grouped = {};

        Object.values(tasks).forEach(task => {
            const platform = task.platform || 'other';
            if (!grouped[platform]) {
                grouped[platform] = [];
            }
            grouped[platform].push(task);
        });

        return grouped;
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ–∫—Ü—ñ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
     */
    function createPlatformSection(platform, tasks) {
        console.log(`üèóÔ∏è [TasksManager] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –¥–ª—è ${platform}`);

        const section = document.createElement('div');
        section.className = 'platform-section';
        section.setAttribute('data-platform', platform);

        const platformInfo = config.platforms[platform] || { icon: 'üåê', name: platform };

        section.innerHTML = `
            <div class="platform-header">
                <div class="platform-info">
                    <span class="platform-icon">${platformInfo.icon}</span>
                    <span class="platform-name">${platformInfo.name}</span>
                    <span class="platform-count">${tasks.length} –∑–∞–≤–¥–∞–Ω—å</span>
                </div>
            </div>
            <div class="platform-tasks"></div>
        `;

        const tasksContainer = section.querySelector('.platform-tasks');

        // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫–∏ –∑–∞–≤–¥–∞–Ω—å
        tasks.forEach(task => {
            const card = createTaskCard(task, 'social');
            tasksContainer.appendChild(card);
        });

        return section;
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ–∫—Ü—ñ—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
     */
    function createPartnerSection(partner, tasks) {
        console.log(`üèóÔ∏è [TasksManager] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ${partner}`);

        const section = document.createElement('div');
        section.className = 'partner-section';
        section.setAttribute('data-partner', partner);

        section.innerHTML = `
            <div class="partner-header">
                <div class="partner-info">
                    <span class="partner-name">${partner}</span>
                    <span class="partner-count">${tasks.length} –∑–∞–≤–¥–∞–Ω—å</span>
                </div>
            </div>
            <div class="partner-tasks"></div>
        `;

        const tasksContainer = section.querySelector('.partner-tasks');

        // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫–∏ –∑–∞–≤–¥–∞–Ω—å
        tasks.forEach(task => {
            const card = createTaskCard(task, 'partner');
            tasksContainer.appendChild(card);
        });

        return section;
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function createTaskCard(task, type) {
        console.log(`üé® [TasksManager] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:`, task.id);

        const card = document.createElement('div');
        card.className = `task-card ${type}-task ${task.status || 'available'}`;
        card.setAttribute('data-task-id', task.id);
        card.setAttribute('data-task-type', type);
        card.setAttribute('data-platform', task.platform || '');

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        if (task.channelUsername) {
            card.setAttribute('data-channel', task.channelUsername);
        }
        if (task.action) {
            card.setAttribute('data-action', task.action);
        }
        if (task.url) {
            card.setAttribute('data-url', task.url);
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
        const platformInfo = config.platforms[task.platform] || { icon: 'üåê' };

        // –§–æ—Ä–º—É—î–º–æ –≤–º—ñ—Å—Ç –∫–∞—Ä—Ç–∫–∏
        let cardContent = `
            <div class="task-header">
                <div class="task-icon">${platformInfo.icon}</div>
                <div class="task-info">
                    <h3 class="task-title">${task.title || '–ó–∞–≤–¥–∞–Ω–Ω—è'}</h3>
                    <p class="task-description">${task.description || ''}</p>
                </div>
            </div>
            <div class="task-rewards">
        `;

        // –î–æ–¥–∞—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        if (task.reward) {
            if (task.reward.winix) {
                cardContent += `
                    <div class="reward-item">
                        <span class="reward-icon">üíé</span>
                        <span class="reward-text">${task.reward.winix} WINIX</span>
                    </div>
                `;
            }
            if (task.reward.tickets) {
                cardContent += `
                    <div class="reward-item">
                        <span class="reward-icon">üéüÔ∏è</span>
                        <span class="reward-text">${task.reward.tickets} TICKETS</span>
                    </div>
                `;
            }
        }

        cardContent += '</div>';

        // –î–æ–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –ª—ñ–º—ñ—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        if (type === 'limited' && task.expiresAt) {
            cardContent += `
                <div class="task-timer" data-expires="${task.expiresAt}">
                    <span class="timer-icon">‚è∞</span>
                    <span class="timer-text">–ó–∞–ª–∏—à–∏–ª–æ—Å—å: <span class="time-remaining"></span></span>
                </div>
            `;
        }

        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥—ñ—ó
        const buttonText = getTaskButtonText(task);
        const buttonClass = getTaskButtonClass(task);

        cardContent += `
            <button class="task-button ${buttonClass}" ${task.status === 'completed' ? 'disabled' : ''}>
                ${buttonText}
            </button>
        `;

        card.innerHTML = cardContent;

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (type === 'limited' && task.expiresAt) {
            startTaskTimer(card, task.expiresAt);
        }

        return card;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
     */
    function getTaskButtonText(task) {
        switch(task.status) {
            case 'completed':
                return '–í–∏–∫–æ–Ω–∞–Ω–æ ‚úì';
            case 'in_progress':
                return '–í –ø—Ä–æ—Ü–µ—Å—ñ...';
            case 'expired':
                return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
            default:
                return task.buttonText || '–í–∏–∫–æ–Ω–∞—Ç–∏';
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª–∞—Å –∫–Ω–æ–ø–∫–∏
     */
    function getTaskButtonClass(task) {
        switch(task.status) {
            case 'completed':
                return 'button-completed';
            case 'in_progress':
                return 'button-progress';
            case 'expired':
                return 'button-expired';
            default:
                return 'button-available';
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function startTaskTimer(card, expiresAt) {
        const timerElement = card.querySelector('.time-remaining');
        if (!timerElement) return;

        const updateTimer = () => {
            const now = Date.now();
            const timeLeft = expiresAt - now;

            if (timeLeft <= 0) {
                timerElement.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
                card.classList.add('expired');
                clearInterval(timerId);
                return;
            }

            const hours = Math.floor(timeLeft / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

            timerElement.textContent = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        };

        updateTimer();
        const timerId = setInterval(updateTimer, 1000);
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function setupAutoUpdate() {
        console.log('‚è∞ [TasksManager] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è');

        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if (state.updateInterval) {
            clearInterval(state.updateInterval);
        }

        state.updateInterval = setInterval(async () => {
            console.log('üîÑ [TasksManager] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
            await loadAllTasks();
        }, config.updateIntervalMs);

        console.log(`‚úÖ [TasksManager] –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–∫–æ–∂–Ω—ñ ${config.updateIntervalMs/1000/60} —Ö–≤)`);
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
     */
    function setupEventHandlers() {
        console.log('üéØ [TasksManager] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π');

        // –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
        document.addEventListener('tab-switched', (e) => {
            console.log('üìë [TasksManager] –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏:', e.detail);
            updateTasksUI();
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        document.addEventListener('task-completed', (e) => {
            console.log('‚úÖ [TasksManager] –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ:', e.detail);
            const { taskId, reward } = e.detail;

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ UI
            const card = document.querySelector(`[data-task-id="${taskId}"]`);
            if (card) {
                card.classList.remove('available', 'in_progress');
                card.classList.add('completed');

                const button = card.querySelector('.task-button');
                if (button) {
                    button.textContent = '–í–∏–∫–æ–Ω–∞–Ω–æ ‚úì';
                    button.disabled = true;
                }
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
        const unsubscribe = window.TasksStore.subscribe((state, prevState, action) => {
            if (action.type === 'UPDATE_BALANCE') {
                console.log('üí∞ [TasksManager] –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ');
                // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É
            }
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≤–¥–∞–Ω—å
     */
    function getTasksStatistics() {
        const state = window.TasksStore.getState();
        const stats = {
            total: 0,
            completed: 0,
            available: 0,
            byType: {},
            byPlatform: {},
            totalRewards: { winix: 0, tickets: 0 }
        };

        // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        config.taskTypes.forEach(type => {
            const tasks = Object.values(state.tasks[type] || {});
            stats.byType[type] = tasks.length;
            stats.total += tasks.length;

            tasks.forEach(task => {
                // –°—Ç–∞—Ç—É—Å
                if (task.status === 'completed') {
                    stats.completed++;
                } else if (task.status !== 'expired') {
                    stats.available++;
                }

                // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
                const platform = task.platform || 'other';
                stats.byPlatform[platform] = (stats.byPlatform[platform] || 0) + 1;

                // –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö)
                if (task.status !== 'completed' && task.status !== 'expired' && task.reward) {
                    stats.totalRewards.winix += task.reward.winix || 0;
                    stats.totalRewards.tickets += task.reward.tickets || 0;
                }
            });
        });

        return stats;
    }

    /**
     * –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function filterTasks(filter) {
        console.log('üîç [TasksManager] –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å:', filter);

        state.currentFilter = filter;
        updateTasksUI();
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –æ–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function refreshTask(taskId) {
        console.log('üîÑ [TasksManager] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', taskId);

        try {
            const response = await window.TasksAPI.tasks.getList(state.userId, 'single', { taskId });

            if (response.task) {
                // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è
                const taskType = response.task.type || 'social';

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤ —Å—Ç–æ—Ä—ñ
                window.TasksStore.actions.updateTaskStatus(
                    taskType,
                    taskId,
                    response.task.status
                );

                // –û–Ω–æ–≤–ª—é—î–º–æ UI
                updateTasksUI();
            }
        } catch (error) {
            console.error('‚ùå [TasksManager] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
        }
    }

    /**
     * –ó–Ω–∏—â–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
     */
    function destroy() {
        console.log('üóëÔ∏è [TasksManager] === –ó–ù–ò–©–ï–ù–ù–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê ===');

        // –û—á–∏—â–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if (state.updateInterval) {
            clearInterval(state.updateInterval);
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        const stats = getTasksStatistics();
        console.log('üìä [TasksManager] –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);

        console.log('‚úÖ [TasksManager] –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–Ω–∏—â–µ–Ω–æ');
    }

    console.log('‚úÖ [TasksManager] –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–¥–∞–Ω—å –≥–æ—Ç–æ–≤–∏–π');

    // –ü—É–±–ª—ñ—á–Ω–∏–π API
    return {
        init,
        loadAllTasks,
        updateTasksUI,
        filterTasks,
        refreshTask,
        getTasksStatistics,
        destroy
    };

})();

console.log('‚úÖ [TasksManager] –ú–æ–¥—É–ª—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');