/**
 * core.js - –ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å WINIX
 * –í–µ—Ä—Å—ñ—è –±–µ–∑ –∑–∞–≥–ª—É—à–æ–∫ - —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –±–µ–∫–µ–Ω–¥—É
 * @version 3.0.0
 */

(function() {
    'use strict';

    console.log("üîÑ Core: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —è–¥—Ä–∞ WINIX");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let _userData = null;

    // –°—Ç–∞–Ω –º–æ–¥—É–ª—è
    const _state = {
        initialized: false,
        refreshInterval: null,
        requestInProgress: false,
        lastRequestTime: 0,
        errorCounter: 0,
        maxErrorsBeforeReset: 5,
        apiStats: {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0
        }
    };

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    const _config = {
        minRequestInterval: 5000,
        autoRefreshInterval: 300000, // 5 —Ö–≤–∏–ª–∏–Ω
        requestTimeout: 15000,
        maxRetries: 3,
        retryInterval: 2000
    };

    // ======== –£–¢–ò–õ–Ü–¢–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM
     */
    function getElement(selector, multiple = false) {
        try {
            if (multiple) {
                return document.querySelectorAll(selector);
            }
            if (selector.startsWith('#')) {
                return document.getElementById(selector.substring(1));
            }
            return document.querySelector(selector);
        } catch (e) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM:', e);
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞ —è–∫ –≤–∞–ª—é—Ç–∏
     */
    function formatCurrency(amount, decimals = 2) {
        try {
            const numberFormat = new Intl.NumberFormat('uk-UA', {
                maximumFractionDigits: decimals,
                minimumFractionDigits: decimals
            });
            return numberFormat.format(parseFloat(amount) || 0);
        } catch (e) {
            return (parseFloat(amount) || 0).toFixed(decimals);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API –º–æ–¥—É–ª—è
     */
    function hasApiModule() {
        try {
            return window.WinixAPI &&
                   typeof window.WinixAPI.apiRequest === 'function';
        } catch (e) {
            console.warn("‚ö†Ô∏è Core: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API –º–æ–¥—É–ª—è:", e);
            return false;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è Telegram User ID
     */
    function getTelegramUserId() {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ auth.js
        if (window.WinixAuth && typeof window.WinixAuth.getTelegramUserId === 'function') {
            return window.WinixAuth.getTelegramUserId();
        }

        // –Ø–∫—â–æ auth.js —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π, –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É
        try {
            if (window.Telegram &&
                window.Telegram.WebApp &&
                window.Telegram.WebApp.initDataUnsafe &&
                window.Telegram.WebApp.initDataUnsafe.user &&
                window.Telegram.WebApp.initDataUnsafe.user.id) {

                return window.Telegram.WebApp.initDataUnsafe.user.id.toString();
            }
        } catch (e) {
            console.error("‚ö†Ô∏è Core: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Telegram ID:", e);
        }

        return null;
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     */
    function showErrorMessage(errorMessage, type = 'error') {
        const message = typeof errorMessage === 'string' ? errorMessage : '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞';

        if (typeof window.showToast === 'function') {
            window.showToast(message, type);
            return;
        }

        if (window.DailyBonus && typeof window.DailyBonus.showNotification === 'function') {
            window.DailyBonus.showNotification(message, type);
            return;
        }

        if (type === 'error') {
            alert(message);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }

    // ======== API –§–£–ù–ö–¶–Ü–á ========

    /**
     * –í–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
     */
    async function executeApiRequest(endpoint, method = 'GET', data = null, options = {}) {
        if (!endpoint) {
            console.error("‚ùå Core: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π endpoint –¥–ª—è –∑–∞–ø–∏—Ç—É");
            throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π endpoint');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram ID
        const telegramId = getTelegramUserId();
        if (!telegramId) {
            console.error("‚ùå Core: –ù–µ–º–∞—î Telegram ID –¥–ª—è –∑–∞–ø–∏—Ç—É");
            throw new Error('No Telegram ID');
        }

        const defaultOptions = {
            timeout: _config.requestTimeout,
            retries: _config.maxRetries,
            retryInterval: _config.retryInterval,
            suppressErrors: false
        };

        const requestOptions = { ...defaultOptions, ...options };
        _state.apiStats.totalRequests++;

        let lastError = null;
        let attempt = 0;

        while (attempt < requestOptions.retries) {
            attempt++;

            try {
                if (attempt > 1) {
                    const delay = requestOptions.retryInterval * Math.pow(1.5, attempt - 1);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –º–æ–¥—É–ª—è
                if (!hasApiModule()) {
                    throw new Error('API module not available');
                }

                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ WinixAPI
                const apiResult = await window.WinixAPI.apiRequest(endpoint, method, data, {
                    timeout: requestOptions.timeout,
                    suppressErrors: requestOptions.suppressErrors
                });

                if (apiResult.error) {
                    throw new Error(apiResult.message || apiResult.error);
                }

                _state.apiStats.successfulRequests++;
                _state.errorCounter = 0;

                return apiResult;
            } catch (error) {
                lastError = error;
                _state.apiStats.failedRequests++;
                console.error(`‚ùå Core: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ ${method} ${endpoint} (—Å–ø—Ä–æ–±–∞ ${attempt}/${requestOptions.retries}):`, error);
            }
        }

        _state.errorCounter++;

        if (_state.errorCounter >= _state.maxErrorsBeforeReset && !options.preventReset) {
            console.warn(`‚ö†Ô∏è Core: –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–º–∏–ª–æ–∫ (${_state.errorCounter}), –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...`);
            showErrorMessage('–í–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...', 'warning');

            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }

        if (requestOptions.suppressErrors) {
            return {
                status: 'error',
                message: lastError?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
                error: lastError
            };
        }

        throw lastError;
    }

    // ======== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(forceRefresh = false) {
        try {
            console.log("üîÑ Core: –ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram ID
            const telegramId = getTelegramUserId();
            if (!telegramId) {
                console.error("‚ùå Core: –ù–µ–º–∞—î Telegram ID");
                return {};
            }

            const now = Date.now();
            if (!forceRefresh && (now - _state.lastRequestTime < _config.minRequestInterval)) {
                console.log("‚è≥ Core: –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
                return _userData || {};
            }

            if (_state.requestInProgress && !forceRefresh) {
                console.log("‚è≥ Core: –ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
                return _userData || {};
            }

            _state.lastRequestTime = now;
            _state.requestInProgress = true;

            const response = await executeApiRequest(`user/${telegramId}`, 'GET', null, {
                suppressErrors: true
            });

            _state.requestInProgress = false;

            if (response && response.status === 'success' && response.data) {
                _userData = response.data;

                // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                document.dispatchEvent(new CustomEvent('user-data-updated', {
                    detail: { userData: _userData },
                    source: 'core.js'
                }));

                return _userData;
            } else {
                console.error("‚ùå Core: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", response);
                return {};
            }
        } catch (error) {
            console.error("‚ùå Core: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ getUserData:", error);
            _state.requestInProgress = false;
            return {};
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function updateUserDisplay() {
        try {
            const userData = _userData || {};
            const userId = userData.telegram_id || getTelegramUserId() || '';
            const username = userData.username || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';

            // –û–Ω–æ–≤–ª—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userIdElement = getElement('#header-user-id');
            if (userIdElement && userIdElement.textContent !== userId) {
                userIdElement.textContent = userId;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const usernameElement = getElement('#username');
            if (usernameElement && usernameElement.textContent !== username) {
                usernameElement.textContent = username;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–≤–∞—Ç–∞—Ä
            updateUserAvatar(username);
        } catch (e) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', e);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function updateUserAvatar(username) {
        try {
            const avatarElement = getElement('#profile-avatar');
            if (!avatarElement) return;

            username = username || _userData?.username || 'User';

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—É –ª—ñ—Ç–µ—Ä—É —ñ–º–µ–Ω—ñ
            avatarElement.innerHTML = '';
            avatarElement.textContent = username[0].toUpperCase();
        } catch (e) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞:', e);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function getBalance() {
        return _userData?.balance || 0;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∂–µ—Ç–æ–Ω—ñ–≤
     */
    function getCoins() {
        return _userData?.coins || 0;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
     */
    function updateBalanceDisplay(animate = false) {
        try {
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
            const tokensElement = getElement('#user-tokens');
            if (tokensElement) {
                const balance = getBalance();
                const formattedBalance = formatCurrency(balance);
                tokensElement.textContent = formattedBalance;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
            const coinsElement = getElement('#user-coins');
            if (coinsElement) {
                const coins = getCoins();
                coinsElement.textContent = coins;

                // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ
                if (animate) {
                    coinsElement.classList.add('updated');
                    setTimeout(() => {
                        coinsElement.classList.remove('updated');
                    }, 1000);
                }
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É (—Ç—ñ–ª—å–∫–∏ –≤—ñ–∑—É–∞–ª—å–Ω–æ, –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
     */
    function updateLocalBalance(newBalance, source = 'unknown', animate = true) {
        if (typeof newBalance !== 'number' || isNaN(newBalance) || newBalance < 0) {
            console.warn('‚ö†Ô∏è –°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –±–∞–ª–∞–Ω—Å:', newBalance);
            return false;
        }

        try {
            const coinsElement = getElement('#user-coins');
            if (!coinsElement) return false;

            const oldBalance = parseInt(coinsElement.textContent) || 0;
            if (oldBalance === newBalance) return true;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            coinsElement.textContent = newBalance;

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ª–æ–∫–∞–ª—å–Ω–æ
            if (_userData) {
                _userData.coins = newBalance;
            }

            // –ê–Ω—ñ–º–∞—Ü—ñ—è
            if (animate) {
                coinsElement.classList.remove('increasing', 'decreasing', 'updated');

                if (newBalance > oldBalance) {
                    coinsElement.classList.add('increasing');
                } else if (newBalance < oldBalance) {
                    coinsElement.classList.add('decreasing');
                }

                setTimeout(() => {
                    coinsElement.classList.remove('increasing', 'decreasing');
                }, 1000);
            }

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            document.dispatchEvent(new CustomEvent('balance-updated', {
                detail: {
                    oldBalance: oldBalance,
                    newBalance: newBalance,
                    source: source || 'core.js',
                    timestamp: Date.now()
                }
            }));

            return true;
        } catch (e) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É:', e);
            return false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async function refreshBalance(forceRefresh = false) {
        console.log("üîÑ Core: –ó–∞–ø–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram ID
        const telegramId = getTelegramUserId();
        if (!telegramId) {
            console.error("‚ùå Core: –ù–µ–º–∞—î Telegram ID –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É");
            return {
                success: false,
                message: 'No Telegram ID'
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
        if (!forceRefresh && (Date.now() - _state.lastRequestTime < _config.minRequestInterval)) {
            console.log("‚è≥ Core: –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç –±–∞–ª–∞–Ω—Å—É");
            return {
                success: true,
                cached: true,
                data: {
                    coins: getCoins()
                }
            };
        }

        if (_state.requestInProgress && !forceRefresh) {
            console.log("‚è≥ Core: –ó–∞–ø–∏—Ç –±–∞–ª–∞–Ω—Å—É –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
            return {
                success: true,
                inProgress: true,
                data: {
                    coins: getCoins()
                }
            };
        }

        _state.lastRequestTime = Date.now();
        _state.requestInProgress = true;

        const oldBalance = getCoins();

        try {
            const endpoint = `user/${telegramId}/balance?t=${Date.now()}`;
            const response = await executeApiRequest(endpoint, 'GET', null, {
                suppressErrors: true,
                timeout: 10000
            });

            _state.requestInProgress = false;

            if (response && response.status === 'success' && response.data) {
                const newBalance = response.data.coins !== undefined ? response.data.coins : oldBalance;

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                updateLocalBalance(newBalance, 'core.js', true);

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if (_userData) {
                    _userData.coins = newBalance;
                }

                _state.errorCounter = 0;

                return {
                    success: true,
                    data: {
                        coins: newBalance,
                        oldCoins: oldBalance
                    }
                };
            } else {
                throw new Error(response?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å');
            }
        } catch (error) {
            console.error('‚ùå Core: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
            _state.requestInProgress = false;
            _state.errorCounter++;

            if (_state.errorCounter >= _state.maxErrorsBeforeReset) {
                console.warn(`‚ö†Ô∏è Core: –î–æ—Å—è–≥–Ω—É—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–º–∏–ª–æ–∫, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...`);
                showErrorMessage('–í–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...', 'warning');

                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }

            return {
                success: false,
                message: error.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å'
            };
        }
    }

    // ======== –ù–ê–í–Ü–ì–ê–¶–Ü–Ø ========

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
    function initNavigation() {
        try {
            const navItems = getElement('.nav-item', true);
            if (!navItems || navItems.length === 0) return;

            const currentPath = window.location.pathname;
            const currentPage = currentPath.split('/').pop().split('.')[0];

            navItems.forEach(item => {
                const section = item.getAttribute('data-section');

                if ((currentPage === section) ||
                    (currentPage === '' && section === 'home') ||
                    (currentPage === 'index' && section === 'home')) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }

                if (!item.hasAttribute('data-initialized')) {
                    item.setAttribute('data-initialized', 'true');

                    item.addEventListener('click', () => {
                        let url;
                        if (section === 'home') {
                            url = 'index.html';
                        } else {
                            url = `${section}.html`;
                        }

                        window.location.href = url;
                    });
                }
            });
        } catch (e) {
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:', e);
        }
    }

    // ======== –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• ========

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async function syncUserData(forceRefresh = false) {
        try {
            console.log('üîÑ Core: –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userData = await getUserData(forceRefresh);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            updateUserDisplay();
            updateBalanceDisplay();

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            document.dispatchEvent(new CustomEvent('user-data-updated', {
                detail: { userData },
                source: 'core.js'
            }));

            return {
                success: true,
                data: userData
            };
        } catch (error) {
            console.error('‚ùå Core: –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);

            showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ', 'warning');

            return {
                success: false,
                message: error.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
                error: error
            };
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
     */
    function startAutoSync(interval = 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
        if (_state.refreshInterval) {
            clearInterval(_state.refreshInterval);
            _state.refreshInterval = null;
        }

        _state.refreshInterval = setInterval(async () => {
            try {
                if (Date.now() - _state.lastRequestTime >= _config.minRequestInterval && !_state.requestInProgress) {
                    await syncUserData();
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è Core: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', e);
            }
        }, interval);

        console.log(`üîÑ Core: –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${interval}ms)`);
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
     */
    function stopAutoSync() {
        if (_state.refreshInterval) {
            clearInterval(_state.refreshInterval);
            _state.refreshInterval = null;
            console.log("‚èπÔ∏è Core: –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ");
        }
    }

    // ======== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ========

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —è–¥—Ä–∞ WINIX
     */
    async function init(options = {}) {
        try {
            if (_state.initialized) {
                console.log("‚úÖ Core: –Ø–¥—Ä–æ WINIX –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ");
                return true;
            }

            console.log("üîÑ Core: –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —è–¥—Ä–∞ WINIX");

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            Object.assign(_config, options);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram ID
            const telegramId = getTelegramUserId();
            if (!telegramId) {
                console.error("‚ùå Core: –ù–µ–º–∞—î Telegram ID, –±–ª–æ–∫—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é");
                return false;
            }

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    window.Telegram.WebApp.ready();
                    window.Telegram.WebApp.expand();
                    console.log("‚úÖ Core: Telegram WebApp —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
                } catch (e) {
                    console.warn("‚ö†Ô∏è Core: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram WebApp:", e);
                }
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await getUserData();
            console.log("‚úÖ Core: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ");

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            updateUserDisplay();
            updateBalanceDisplay();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
            initNavigation();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
            startAutoSync();

            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —è–¥—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            _state.initialized = true;

            console.log("‚úÖ Core: –Ø–¥—Ä–æ WINIX —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            document.dispatchEvent(new CustomEvent('winix-initialized'));

            return true;
        } catch (error) {
            console.error('‚ùå Core: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —è–¥—Ä–∞ WINIX:', error);

            document.dispatchEvent(new CustomEvent('winix-initialization-error', { detail: error }));

            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —è–¥—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
     */
    function isInitialized() {
        return _state.initialized;
    }

    // ======== –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ========

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    document.addEventListener('user-data-updated', function(event) {
        if (event.detail && event.detail.userData && event.source !== 'core.js') {
            console.log("üîÑ Core: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            _userData = event.detail.userData;
            updateUserDisplay();
            updateBalanceDisplay();
        }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    document.addEventListener('balance-updated', function(event) {
        if (event.detail && event.source !== 'core.js') {
            console.log("üîÑ Core: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É");

            if (!_userData) _userData = {};

            if (event.detail.newBalance !== undefined) {
                _userData.coins = event.detail.newBalance;
            }

            updateBalanceDisplay();
        }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    window.addEventListener('load', function() {
        if (!_state.initialized) {
            init().catch(e => {
                console.error("‚ùå Core: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", e);
            });
        }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó DOMContentLoaded
    document.addEventListener('DOMContentLoaded', function() {
        if (!_state.initialized) {
            init().catch(e => {
                console.error("‚ùå Core: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", e);
            });
        }
    });

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API ========

    window.WinixCore = {
        // –ú–µ—Ç–∞–¥–∞–Ω—ñ
        version: '3.0.0',
        isInitialized: isInitialized,

        // –£—Ç–∏–ª—ñ—Ç–∏
        getElement,
        formatCurrency,
        executeApiRequest,
        showErrorMessage,

        // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserData,
        getTelegramUserId,
        updateUserDisplay,
        getBalance,
        getCoins,
        updateBalanceDisplay,
        updateLocalBalance,
        refreshBalance,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
        syncUserData,
        startAutoSync,
        stopAutoSync,

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        init,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: _config,

        // –°—Ç–∞–Ω –º–æ–¥—É–ª—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è)
        getState: () => ({ ..._state })
    };

    console.log("‚úÖ Core: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
})();