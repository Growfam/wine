/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–æ—Å—Ç—ñ—à–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
 * @version 2.1.0
 */

(function() {
    'use strict';
    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –º–æ–¥—É–ª—è");

    // ======== API-–®–õ–Ø–•–ò ========

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    const API_PATHS = {
        // –ó–∞–≤–¥–∞–Ω–Ω—è
        TASKS: {
            ALL: 'quests/tasks',
            BY_TYPE: (type) => `quests/tasks/${type}`,
            SOCIAL: 'quests/tasks/social',
            LIMITED: 'quests/tasks/limited',
            PARTNER: 'quests/tasks/partner',
            REFERRAL: 'quests/tasks/referral',
            DETAILS: (taskId) => `quests/tasks/${taskId}/details`,
            START: (taskId) => `quests/tasks/${taskId}/start`,
            VERIFY: (taskId) => `quests/tasks/${taskId}/verify`,
            PROGRESS: (taskId) => `quests/tasks/${taskId}/progress`
        },

        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —à–ª—è—Ö–∏
        USER: {
            DATA: (userId) => `user/${userId}`,
            BALANCE: (userId) => `user/${userId}/balance`,
            TASKS: (userId) => `user/${userId}/tasks`,
            PROGRESS: (userId) => `user/${userId}/progress`,
            TASK_STATUS: (userId, taskId) => `user/${userId}/tasks/${taskId}/status`,
            SETTINGS: (userId) => `user/${userId}/settings`
        },

        // –©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
        DAILY_BONUS: {
            STATUS: (userId) => `user/${userId}/daily-bonus`,
            CLAIM: (userId) => `user/${userId}/claim-daily-bonus`,
            STREAK: (userId) => `user/${userId}/claim-streak-bonus`,
            HISTORY: (userId) => `user/${userId}/bonus-history`
        },

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        STAKING: {
            DATA: (userId) => `user/${userId}/staking`,
            HISTORY: (userId) => `user/${userId}/staking/history`,
            CANCEL: (userId, stakingId) => `user/${userId}/staking/${stakingId}/cancel`
        },

        // –Ü–Ω—à—ñ
        AUTH: {
            REFRESH_TOKEN: 'auth/refresh-token'
        },

        // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        TRANSACTIONS: (userId) => `user/${userId}/transactions`,

        // –õ—ñ–¥–µ—Ä–±–æ—Ä–¥
        LEADERBOARD: {
            REFERRALS: 'leaderboard/referrals',
            TASKS: 'leaderboard/tasks',
            POSITION: (userId) => `user/${userId}/leaderboard-position`
        }
    };

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ë–∞–∑–æ–≤–∏–π URL - –±–µ–∑ /api –Ω–∞ –∫—ñ–Ω—Ü—ñ!
    const API_BASE_URL = (() => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        if (window.WinixConfig && window.WinixConfig.apiBaseUrl) {
            // –í–∏–¥–∞–ª—è—î–º–æ /api —è–∫—â–æ –≤—ñ–Ω —î –Ω–∞ –∫—ñ–Ω—Ü—ñ
            let url = window.WinixConfig.apiBaseUrl;
            return url.endsWith('/api') ? url.slice(0, -4) : url;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        const hostname = window.location.hostname;

        // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            // –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä—Ç 8080
            return `http://${hostname}:8080`;
        } else if (hostname.includes('testenv') || hostname.includes('staging')) {
            // –¢–µ—Å—Ç–æ–≤—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            return `https://${hostname}`;
        } else {
            // –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
            return 'https://winixbot.com';
        }
    })();

    // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    let _debugMode = false;

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let _userCache = null;
    let _userCacheTime = 0;
    const USER_CACHE_TTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
    let _requestCounter = {
        total: 0,
        errors: 0,
        current: 0,
        lastReset: Date.now()
    };

    // –¢–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    let _authToken = null;
    let _authTokenExpiry = 0;

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
     */
    function getUserId() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
            function isValidId(id) {
                return id &&
                       id !== 'undefined' &&
                       id !== 'null' &&
                       id !== undefined &&
                       id !== null &&
                       typeof id !== 'function' &&
                       id.toString().trim() !== '';
            }

            // 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    if (window.Telegram.WebApp.initDataUnsafe &&
                        window.Telegram.WebApp.initDataUnsafe.user &&
                        window.Telegram.WebApp.initDataUnsafe.user.id) {

                        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();

                        if (isValidId(tgUserId)) {
                            try {
                                localStorage.setItem('telegram_user_id', tgUserId);
                            } catch (e) {}

                            return tgUserId;
                        }
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
                }
            }

            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            try {
                const localId = localStorage.getItem('telegram_user_id');
                if (isValidId(localId)) {
                    return localId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage:", e);
            }

            // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
            try {
                const userIdElement = document.getElementById('user-id');
                if (userIdElement && userIdElement.textContent) {
                    const domId = userIdElement.textContent.trim();
                    if (isValidId(domId)) {
                        try {
                            localStorage.setItem('telegram_user_id', domId);
                        } catch (e) {}

                        return domId;
                    }
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ DOM:", e);
            }

            // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
                if (isValidId(urlId)) {
                    try {
                        localStorage.setItem('telegram_user_id', urlId);
                    } catch (e) {}

                    return urlId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ URL:", e);
            }

            // ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     * @returns {string|null} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ null
     */
    function getAuthToken() {
        try {
            const now = Date.now();

            // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É –≤ –ø–∞–º'—è—Ç—ñ
            if (_authToken && _authTokenExpiry > now) {
                return _authToken;
            }

            // 2. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ localStorage
            let token = localStorage.getItem('auth_token');
            let tokenExpiry = parseInt(localStorage.getItem('auth_token_expiry') || '0');

            if (token && typeof token === 'string' && token.length > 5) {
                if (tokenExpiry > now) {
                    _authToken = token;
                    _authTokenExpiry = tokenExpiry;
                    return token;
                }

                // –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                if (!_authToken) {
                    _authToken = token;
                }
            }

            // 3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ —Ç–æ–∫–µ–Ω—É
            if (window.WinixConfig && window.WinixConfig.authToken) {
                _authToken = window.WinixConfig.authToken;
                return _authToken;
            }

            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
            return null;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä—è–¥–æ–∫ –º—ñ—Å—Ç–∏—Ç—å –ø–µ–≤–Ω–∏–π –ø—ñ–¥—Ä—è–¥–æ–∫
     * @param {string|undefined} str - –†—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @param {string} substring - –ü—ñ–¥—Ä—è–¥–æ–∫, —è–∫–∏–π —à—É–∫–∞—î–º–æ
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function safeIncludes(str, substring) {
        // –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ includes –∑ –æ–±—Ä–æ–±–∫–æ—é undefined
        if (!str || typeof str !== 'string') return false;
        return str.includes(substring);
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è API endpoint –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ URL
     * @param {string} endpoint - –≤—Ö—ñ–¥–Ω–∏–π endpoint
     * @returns {string} –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π endpoint
     */
    function normalizeEndpoint(endpoint) {
        // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ undefined
        if (!endpoint) return 'api';

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ endpoint —î —Ñ—É–Ω–∫—Ü—ñ—î—é —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ó—ó, —è–∫—â–æ —Ü–µ —Ç–∞–∫
        if (typeof endpoint === 'function') {
            try {
                endpoint = endpoint();
                // –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ undefined –∞–±–æ null
                if (!endpoint) return 'api';
            } catch (e) {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É endpoint —Ñ—É–Ω–∫—Ü—ñ—ó:", e);
                return 'api';
            }
        }

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ endpoint –Ω–∞ —Ä—è–¥–æ–∫, —è–∫—â–æ —Ü–µ —â–µ –Ω–µ —Ä—è–¥–æ–∫
        endpoint = String(endpoint);

        // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–µ—à –Ω–∞ –ø–æ—á–∞—Ç–∫—É, —è–∫—â–æ –≤—ñ–Ω —î
        let cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

        // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–µ—à –≤ –∫—ñ–Ω—Ü—ñ, —è–∫—â–æ –≤—ñ–Ω —î
        if (cleanEndpoint.endsWith('/') && cleanEndpoint.length > 1) {
            cleanEndpoint = cleanEndpoint.substring(0, cleanEndpoint.length - 1);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —à–ª—è—Ö –∑ 'api/'
        if (cleanEndpoint.startsWith('api/')) {
            return cleanEndpoint;
        } else if (cleanEndpoint === 'api') {
            // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ 'api', –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω
            return cleanEndpoint;
        } else if (cleanEndpoint.startsWith('api')) {
            // –Ø–∫—â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 'api' –∞–ª–µ –±–µ–∑ —Å–ª–µ—à—É –ø—ñ—Å–ª—è
            return `api/${cleanEndpoint.substring(3)}`;
        } else {
            // –í —É—Å—ñ—Ö —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –¥–æ–¥–∞—î–º–æ 'api/' –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
            return `api/${cleanEndpoint}`;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     * @returns {Promise<string|null>} –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∞–±–æ null
     */
    async function refreshToken() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();
            if (!userId) {
                throw new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            console.log("üîÑ API: –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
            const response = await fetch(`${API_BASE_URL}/${normalizeEndpoint(API_PATHS.AUTH.REFRESH_TOKEN)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': userId
                },
                body: JSON.stringify({
                    telegram_id: userId,
                    token: _authToken || ''
                })
            });

            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
            }

            const data = await response.json();

            if (data && data.status === 'success' && data.token) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω
                _authToken = data.token;

                // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                if (data.expires_at) {
                    _authTokenExpiry = new Date(data.expires_at).getTime();
                } else if (data.expires_in) {
                    _authTokenExpiry = Date.now() + (data.expires_in * 1000);
                } else {
                    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 24 –≥–æ–¥–∏–Ω–∏
                    _authTokenExpiry = Date.now() + (24 * 60 * 60 * 1000);
                }

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                try {
                    localStorage.setItem('auth_token', _authToken);
                    localStorage.setItem('auth_token_expiry', _authTokenExpiry.toString());
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
                }

                console.log("‚úÖ API: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                document.dispatchEvent(new CustomEvent('token-refreshed', {
                    detail: { token: _authToken, expires_at: _authTokenExpiry }
                }));

                return _authToken;
            } else {
                throw new Error(data.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");
            }
        } catch (error) {
            console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
            throw error;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á API-–ó–ê–ü–ò–¢–£ ========

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function apiRequest(endpoint, method = 'GET', data = null, options = {}) {
        try {
            // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ undefined endpoint
            if (!endpoint) {
                console.error("üîå API: endpoint —î undefined –∞–±–æ null");
                return Promise.reject({
                    status: 'error',
                    message: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ endpoint –¥–ª—è –∑–∞–ø–∏—Ç—É',
                    code: 'missing_endpoint'
                });
            }

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—ñ
            if (_debugMode) {
                console.log(`üîå API: –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É ${method} –¥–æ ${endpoint}`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–µ—Ä–µ–∂—ñ
            if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
                return Promise.reject({
                    message: "–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω",
                    source: 'offline'
                });
            }

            // –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ø–∏—Ç—É
            let url;

            // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ URL —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ
            if (safeIncludes(endpoint, 'http')) {
                // Endpoint –≤–∂–µ —î –ø–æ–≤–Ω–∏–º URL - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
                url = endpoint;
            } else {
                // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ endpoint –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
                const normalizedEndpoint = normalizeEndpoint(endpoint);

                // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ –¥–æ URL –Ω–µ –¥–æ–¥–∞—é—Ç—å—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
                const hasQuery = safeIncludes(normalizedEndpoint, '?');

                // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π URL –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —à–ª—è—Ö–æ–º
                url = `${API_BASE_URL}/${normalizedEndpoint}`
                    .replace(/([^:]\/)\/+/g, "$1"); // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ —Å–ª–µ—à—ñ

                // –î–æ–¥–∞—î–º–æ –∫–µ—à–æ–±—Ä–µ–π–∫–µ—Ä –¥–æ URL (–ø–∞—Ä–∞–º–µ—Ç—Ä t=timestamp) —Ç—ñ–ª—å–∫–∏ –¥–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤
                if (method === 'GET') {
                    url += (hasQuery ? '&' : '?') + `t=${Date.now()}`;
                }
            }

            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø–∏—Ç—É
            const headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                ...(options.headers || {})
            };

            // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ –≤—ñ–Ω —î
            if (!options.skipTokenCheck) {
                const token = getAuthToken();
                if (token) {
                    headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
                }
            }

            // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω —î
            const userId = options.skipUserIdCheck ? null : getUserId();
            if (userId && !options.skipUserIdCheck) {
                headers['X-Telegram-User-Id'] = userId;
            }

            // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: headers,
                timeout: options.timeout || 20000 // 20 —Å–µ–∫—É–Ω–¥
            };

            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
            if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                requestOptions.body = JSON.stringify(data);
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∞–π–º–∞—É—Ç–∞
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), requestOptions.timeout);

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–∏–≥–Ω–∞–ª
            requestOptions.signal = controller.signal;

            // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
            _requestCounter.total++;
            _requestCounter.current++;

            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.showLoading === 'function') {
                window.showLoading();
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const response = await fetch(url, requestOptions);

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            clearTimeout(timeoutId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            // –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            _requestCounter.current = Math.max(0, _requestCounter.current - 1);

            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è 401 (Unauthorized)
            if (response.status === 401) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É...");

                try {
                    await refreshToken();

                    // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
                    return apiRequest(endpoint, method, data, options);
                } catch (tokenError) {
                    console.error("üîå API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", tokenError);

                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
                    return Promise.reject({
                        status: 'error',
                        message: "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.",
                        statusCode: 401
                    });
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ HTTP —Å—Ç–∞—Ç—É—Å
            if (!response.ok) {
                // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                let errorData = {};
                let errorMessage = `–ü–æ–º–∏–ª–∫–∞: ${response.status} ${response.statusText}`;

                try {
                    errorData = await response.json();
                    errorMessage = errorData.message || errorMessage;
                } catch (e) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É JSON
                }

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é
                return Promise.reject({
                    status: 'error',
                    message: errorMessage,
                    statusCode: response.status,
                    data: errorData
                });
            }

            // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            const responseData = await response.json();
            return responseData;

        } catch (error) {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
            _requestCounter.errors++;

            console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            document.dispatchEvent(new CustomEvent('api-error', {
                detail: {
                    error,
                    endpoint,
                    method
                }
            }));

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ suppressErrors
            if (options.suppressErrors) {
                return {
                    status: 'error',
                    message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                    source: 'api_error'
                };
            }

            throw error;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –∫–µ—à
     * @returns {Promise<Object>} –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(forceRefresh = false) {
        const isSettingsPage = window.location.pathname.includes('general.html');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
        if (typeof navigator.onLine !== 'undefined' && !navigator.onLine && !forceRefresh) {
            console.warn("üîå API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ");

            // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
            if (_userCache) {
                return {status: 'success', data: _userCache, source: 'cache_offline'};
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
            return {
                status: 'success',
                data: {
                    telegram_id: getUserId() || 'unknown',
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0')
                },
                source: 'local_storage_offline'
            };
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
            return {status: 'success', data: _userCache, source: 'cache'};
        }

        const id = getUserId();
        if (!id) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const result = await apiRequest(API_PATHS.USER.DATA(id), 'GET', null, {
                timeout: 5000, // –ó–º–µ–Ω—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
                suppressErrors: isSettingsPage // –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            if (result.status === 'success' && result.data) {
                _userCache = result.data;
                _userCacheTime = Date.now();

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                try {
                    if (_userCache.balance !== undefined) {
                        localStorage.setItem('userTokens', _userCache.balance.toString());
                        localStorage.setItem('winix_balance', _userCache.balance.toString());
                    }

                    if (_userCache.coins !== undefined) {
                        localStorage.setItem('userCoins', _userCache.coins.toString());
                        localStorage.setItem('winix_coins', _userCache.coins.toString());
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    if (_userCache.notifications_enabled !== undefined) {
                        localStorage.setItem('notifications_enabled', _userCache.notifications_enabled.toString());
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                }
            }

            return result;
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);

            // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
            if (_userCache) {
                return {status: 'success', data: _userCache, source: 'cache_after_error'};
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
            const localData = {
                telegram_id: id,
                balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                coins: parseInt(localStorage.getItem('userCoins') || '0')
            };

            return {
                status: 'success',
                data: localData,
                source: 'local_storage_fallback'
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
        if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
            console.warn("üîå API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É");

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
            return {
                status: 'success',
                data: {
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0')
                },
                source: 'local_storage_offline'
            };
        }

        try {
            // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
            const endpoint = API_PATHS.USER.BALANCE(userId);

            // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
            const response = await apiRequest(endpoint, 'GET', null, {
                suppressErrors: true,
                timeout: 5000
            });

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (response.status === 'success' && response.data) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–ª–∞–Ω—Å –≤ localStorage
                try {
                    localStorage.setItem('userTokens', response.data.balance.toString());
                    localStorage.setItem('userCoins', response.data.coins.toString());
                    localStorage.setItem('winix_balance', response.data.balance.toString());
                    localStorage.setItem('winix_coins', response.data.coins.toString());
                    localStorage.setItem('winix_balance_update_time', Date.now().toString());
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≤ localStorage:", e);
                }

                // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
                document.dispatchEvent(new CustomEvent('balance-updated', {
                    detail: {
                        newBalance: response.data.coins,
                        oldBalance: parseInt(localStorage.getItem('userCoins') || '0'),
                        source: 'api.js',
                        timestamp: Date.now()
                    }
                }));

                return response;
            }

            // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ–º–∏–ª–∫–æ—é, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å
            return {
                status: 'success',
                data: {
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0')
                },
                source: 'local_storage_fallback_after_error'
            };
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ localStorage –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return {
                status: 'success',
                data: {
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0')
                },
                source: 'local_storage_fallback'
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     * @param {number} limit - –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Å—ñ–≤
     * @param {number} offset - –ó–º—ñ—â–µ–Ω–Ω—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function getLeaderboard(type = 'referrals', limit = 10, offset = 0) {
        try {
            const validTypes = ['referrals', 'tasks'];
            if (!validTypes.includes(type)) {
                type = 'referrals';
            }

            // –§–æ—Ä–º—É—î–º–æ URL –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const endpoint = `${API_PATHS.LEADERBOARD[type.toUpperCase()]}?limit=${limit}&offset=${offset}`;

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const response = await apiRequest(endpoint, 'GET', null, {
                suppressErrors: true,
                timeout: 8000
            });

            return response;
        } catch (error) {
            console.error(`üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É ${type}:`, error);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é
            return {
                status: 'error',
                message: error.message || `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥ ${type}`,
                data: { leaderboard: [] }
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—ñ
     * @param {string} type - –¢–∏–ø –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function getUserLeaderboardPosition(type = 'referrals') {
        try {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –§–æ—Ä–º—É—î–º–æ URL –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const endpoint = `${API_PATHS.LEADERBOARD.POSITION(userId)}?type=${type}`;

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const response = await apiRequest(endpoint, 'GET', null, {
                suppressErrors: true,
                timeout: 5000
            });

            return response;
        } catch (error) {
            console.error(`üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –≤ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—ñ ${type}:`, error);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é
            return {
                status: 'error',
                message: error.message || `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –≤ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—ñ ${type}`,
                data: { position: null }
            };
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–ë–†–û–ë–ö–ò –ü–û–ú–ò–õ–û–ö ========

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string|Object} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –æ–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏
     * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (error, warning, info)
     */
    function showError(message, type = 'error') {
        // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        let errorMessage = typeof message === 'string' ? message :
                          (message.message || '–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if (typeof window.showToast === 'function') {
            window.showToast(errorMessage, type);
        } else if (type === 'error') {
            alert(errorMessage);
        } else {
            console.log(`${type.toUpperCase()}: ${errorMessage}`);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     * @param {Error|Object} error - –û–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏
     * @returns {string} –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function formatErrorMessage(error) {
        if (!error) return '–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';

        // –Ø–∫—â–æ —Ü–µ –º–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞
        if (error.name === 'TypeError' || error.message?.includes('Network') || error.message?.includes('fetch')) {
            return '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.';
        }

        // –Ø–∫—â–æ —Ü–µ —Ç–∞–π–º–∞—É—Ç
        if (error.name === 'AbortError' || error.message?.includes('timeout')) {
            return '–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
        }

        // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        if (error.statusCode === 401 || error.message?.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü')) {
            return '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.';
        }

        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É';
    }

    // ======== –ï–ö–°–ü–û–†–¢ API ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API —à–ª—è—Ö–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
    window.API_PATHS = API_PATHS;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.WinixAPI = {
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: {
            baseUrl: API_BASE_URL,
            version: '2.1.0',
            environment: API_BASE_URL.includes('localhost') ? 'development' : 'production'
        },

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },

        // –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        apiRequest,
        getUserId,
        getAuthToken,
        refreshToken,
        showError,
        formatErrorMessage,

        // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserData,
        getBalance,

        // –§—É–Ω–∫—Ü—ñ—ó –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
        getLeaderboard,
        getUserLeaderboardPosition,

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤
        paths: API_PATHS,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostics: {
            getRequestStats: function() {
                return {..._requestCounter};
            },
            resetState: function() {
                _userCache = null;
                _userCacheTime = 0;
                _requestCounter = {
                    total: 0,
                    errors: 0,
                    current: 0,
                    lastReset: Date.now()
                };
                return true;
            }
        }
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.apiRequest = apiRequest;
    window.getUserId = getUserId;

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –º–æ–¥—É–ª—è–º–∏, —â–æ –æ—á—ñ–∫—É—é—Ç—å window.API
    window.API = {
        get: function(endpoint, options = {}) {
            return window.WinixAPI.apiRequest(endpoint, 'GET', null, options);
        },
        post: function(endpoint, data = null, options = {}) {
            return window.WinixAPI.apiRequest(endpoint, 'POST', data, options);
        }
    };

    console.log(`‚úÖ API: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (URL: ${API_BASE_URL})`);
})();