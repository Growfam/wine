/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 * –í–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
 */

(function() {
    'use strict';

    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ–≥–æ API –º–æ–¥—É–ª—è");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ë–∞–∑–æ–≤–∏–π URL API
    const API_BASE_URL = '';

    // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    let _debugMode = false;

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let _userCache = null;
    let _userCacheTime = 0;
    const USER_CACHE_TTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω (–∑–±—ñ–ª—å—à–µ–Ω–æ)

    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
    let _gettingUserId = false;
    let _apiRequestInProgress = false;

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
    let _lastRequestsByEndpoint = {};
    // –ó–ú–Ü–ù–ï–ù–û: –ó–±—ñ–ª—å—à–∏–ª–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    const REQUEST_THROTTLE = 5000; // –ú—ñ–Ω—ñ–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
    let _requestCounter = {
        total: 0,
        errors: 0,
        current: 0,
        lastReset: Date.now()
    };

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –¥–µ–±–∞–≥—É
    window._winixApiStats = {
        requestCounter: _requestCounter,
        lastRequests: _lastRequestsByEndpoint,
        getCacheStatus: () => {
            return {
                hasCache: !!_userCache,
                cacheTime: _userCacheTime,
                cacheTTL: USER_CACHE_TTL,
                cacheAge: Date.now() - _userCacheTime,
                isExpired: (Date.now() - _userCacheTime) > USER_CACHE_TTL
            };
        }
    };

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
     */
    function getUserId() {
        // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó
        if (_gettingUserId) {
            return null;
        }

        _gettingUserId = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
            function isValidId(id) {
                return id && id !== 'undefined' && id !== 'null' &&
                       id !== undefined && id !== null && id.toString().trim() !== '';
            }

            // 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    if (window.Telegram.WebApp.initDataUnsafe &&
                        window.Telegram.WebApp.initDataUnsafe.user &&
                        window.Telegram.WebApp.initDataUnsafe.user.id) {

                        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();

                        if (isValidId(tgUserId)) {
                            try {
                                localStorage.setItem('telegram_user_id', tgUserId);
                            } catch (e) {}

                            _gettingUserId = false;
                            return tgUserId;
                        }
                    }
                } catch (e) {}
            }

            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            try {
                const localId = localStorage.getItem('telegram_user_id');
                if (isValidId(localId)) {
                    _gettingUserId = false;
                    return localId;
                }
            } catch (e) {}

            // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
            try {
                const userIdElement = document.getElementById('user-id');
                if (userIdElement && userIdElement.textContent) {
                    const domId = userIdElement.textContent.trim();
                    if (isValidId(domId)) {
                        try {
                            localStorage.setItem('telegram_user_id', domId);
                        } catch (e) {}

                        _gettingUserId = false;
                        return domId;
                    }
                }
            } catch (e) {}

            // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
                if (isValidId(urlId)) {
                    try {
                        localStorage.setItem('telegram_user_id', urlId);
                    } catch (e) {}

                    _gettingUserId = false;
                    return urlId;
                }
            } catch (e) {}

            // 5. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            try {
                const savedId = localStorage.getItem('saved_user_id') || localStorage.getItem('userId');
                if (isValidId(savedId)) {
                    _gettingUserId = false;
                    return savedId;
                }
            } catch (e) {}

            // ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            _gettingUserId = false;
            return null;
        } catch (e) {
            _gettingUserId = false;
            return null;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–Ø API-–ó–ê–ü–ò–¢–£ ========

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @param {number} retries - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 2) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const isUserProfileRequest = endpoint.includes('/api/user/') &&
                                    !endpoint.includes('/staking') &&
                                    !endpoint.includes('/balance') &&
                                    !endpoint.includes('/claim');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –±—É–ª–æ —Ç–∞–∫–æ–≥–æ –∂ –∑–∞–ø–∏—Ç—É –Ω–µ—â–æ–¥–∞–≤–Ω–æ
        const requestKey = `${method}:${endpoint}`;
        const now = Date.now();
        const lastRequestTime = _lastRequestsByEndpoint[requestKey] || 0;
        const timeSinceLastRequest = now - lastRequestTime;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
        if (timeSinceLastRequest < REQUEST_THROTTLE && isUserProfileRequest) {
            console.warn(`üîå API: –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–æ ${endpoint}, –º–∏–Ω—É–ª–æ ${timeSinceLastRequest}ms –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É`);

            // –Ø–∫—â–æ —î –∫–µ—à –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
            if (isUserProfileRequest && _userCache) {
                console.log("üìã API: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–∏–π —á–µ—Ä–µ–∑",
                           Math.ceil((REQUEST_THROTTLE - timeSinceLastRequest) / 1000), "—Å–µ–∫.");

                return Promise.resolve({
                    status: 'success',
                    data: _userCache,
                    source: 'cache'
                });
            }

            console.log("‚åõ API: –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ—á–µ–∫–∞—Ç–∏",
                      Math.ceil((REQUEST_THROTTLE - timeSinceLastRequest) / 1000),
                      "—Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º");

            // –ó–ú–Ü–ù–ï–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ –¥—Ä—É–∂–Ω—å–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
            return Promise.reject({
                status: 'error',
                source: 'throttle',
                message: "–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç",
                retryAfter: REQUEST_THROTTLE - timeSinceLastRequest
            });
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
        _lastRequestsByEndpoint[requestKey] = now;

        // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é
        if (_apiRequestInProgress && isUserProfileRequest && !options.allowParallel) {
            if (options.forceContinue) {
                console.warn(`üîå API: –ó–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ: ${endpoint}`);
            } else {
                console.warn(`üîå API: –ó–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à: ${endpoint}`);

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ —î
                if (isUserProfileRequest && _userCache) {
                    return {
                        status: 'success',
                        data: _userCache,
                        source: 'cache_parallel'
                    };
                }

                // –ê–±–æ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –ø—Ä–æ–º—ñ—Å –∑ –¥—Ä—É–∂–Ω—ñ–º —Ñ–æ—Ä–º–∞—Ç–æ–º –ø–æ–º–∏–ª–∫–∏
                return Promise.reject({
                    status: 'error',
                    source: 'parallel',
                    message: "–ó–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è"
                });
            }
        }

        // –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—Ü—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
        if (isUserProfileRequest) {
            _apiRequestInProgress = true;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
        _requestCounter.total++;
        _requestCounter.current++;

        // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
        if (now - _requestCounter.lastReset > 10000) {
            _requestCounter.current = 1;
            _requestCounter.lastReset = now;
        }

        // –Ø–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ - —É–ø–æ–≤—ñ–ª—å–Ω—é—î–º–æ—Å—è
        if (_requestCounter.current > 10) {
            console.warn(`üîå API: –ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ (${_requestCounter.current}), —É–ø–æ–≤—ñ–ª—å–Ω—é—î–º–æ—Å—è`);
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            if (!userId && !options.skipUserIdCheck) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
            const timestamp = Date.now();
            const hasQuery = endpoint.includes('?');
            const url = `${API_BASE_URL}${endpoint}${hasQuery ? '&' : '?'}t=${timestamp}`;

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.showLoading === 'function') {
                    window.showLoading();
                }
            }

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
            if (_debugMode) {
                console.log(`üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø–∏—Ç—É –Ω–∞ ${url}`);
                if (data) {
                    console.log(`üì¶ –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:`, data);
                }
            }

            // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    ...(userId && {'X-Telegram-User-Id': userId}),
                    ...options.headers
                }
            };

            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
            if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                requestOptions.body = JSON.stringify(data);
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
            let response;
            let errorResponse;

            // –°–ø—Ä–æ–±–∏ –∑–∞–ø–∏—Ç—É –∑ exponential backoff
            for (let attempt = 0; attempt < retries; attempt++) {
                try {
                    // –î–æ–¥–∞—î–º–æ timeout –¥–ª—è –∑–∞–ø–∏—Ç—É
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(),
                                                options.timeout || 5000); // –ó–º–µ–Ω—à—É—î–º–æ timeout

                    // –î–æ–¥–∞—î–º–æ signal –¥–æ requestOptions
                    requestOptions.signal = controller.signal;

                    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                    response = await fetch(url, requestOptions);

                    // –û—á–∏—â–∞—î–º–æ timeout
                    clearTimeout(timeoutId);

                    // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É
                    if (response.ok) break;

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É
                    errorResponse = response;

                    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    if (attempt < retries - 1) {
                        const delay = Math.pow(2, attempt) * 300; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                        await new Promise(resolve => setTimeout(resolve, delay));
                    }
                } catch (fetchError) {
                    // –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
                    if (attempt === retries - 1) {
                        throw fetchError;
                    }

                    // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    const delay = Math.pow(2, attempt) * 300;
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }
            }

            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±
            if (!response || !response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorResponse?.status || '–Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'}`);
            }

            // –ü–∞—Ä—Å–∏–º–æ JSON (–∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫)
            let jsonData;
            try {
                jsonData = await response.json();
            } catch (jsonError) {
                console.error(`üîå API: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${jsonError.message}`);

                // –ó–ú–Ü–ù–ï–ù–û: –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–µ—à –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø–∞—Ä—Å–∏–Ω–≥—É
                if (isUserProfileRequest) {
                    if (_userCache) {
                        console.warn("üîå API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É JSON");

                        // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
                        if (isUserProfileRequest) {
                            _apiRequestInProgress = false;
                        }

                        return {
                            status: 'success',
                            data: _userCache,
                            source: 'cache_after_parse_error'
                        };
                    }
                    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ –ø—ñ–¥–º—ñ–Ω—è—î–º–æ –¥–∞–Ω—ñ
                    console.error("üîå API: –ö–µ—à –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Å–µ—Ä–≤–µ—Ä–∞");
                }

                throw new Error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (jsonData && jsonData.status === 'error') {
                throw new Error(jsonData.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
            }

            // –Ø–∫—â–æ —Ü–µ –∑–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            if (isUserProfileRequest && jsonData.status === 'success' && jsonData.data) {
                _userCache = jsonData.data;
                _userCacheTime = now;
            }

            // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é
            if (isUserProfileRequest) {
                _apiRequestInProgress = false;
            }

            return jsonData;

        } catch (error) {
            // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
            _requestCounter.errors++;

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }
            }

            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
            console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            document.dispatchEvent(new CustomEvent('api-error', {
                detail: {
                    error,
                    endpoint,
                    method
                }
            }));

            // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            if (isUserProfileRequest) {
                _apiRequestInProgress = false;
            }

            // –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            if (isUserProfileRequest) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à");

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∫–µ—à, —è–∫—â–æ –≤—ñ–Ω —î
                if (_userCache) {
                    return {
                        status: 'success',
                        data: _userCache,
                        source: 'cache_after_error'
                    };
                }

                // –Ø–∫—â–æ –∫–µ—à—É –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
                try {
                    const userId = localStorage.getItem('telegram_user_id') || localStorage.getItem('userId');
                    const username = localStorage.getItem('username') || 'WINIX User';
                    const balance = parseFloat(localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0');
                    const coins = parseFloat(localStorage.getItem('userCoins') || localStorage.getItem('winix_coins') || '0');
                    const notifications = localStorage.getItem('notifications_enabled') === 'true';

                    console.warn("üîå API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage —è–∫ –∫—Ä–∞–π–Ω—ñ–π –∑–∞—Å—ñ–±");

                    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–µ—à –Ω–∞ –º–∞–π–±—É—Ç–Ω—î
                    _userCache = {
                        telegram_id: userId,
                        username: username,
                        balance: balance,
                        coins: coins,
                        notifications_enabled: notifications
                    };
                    _userCacheTime = now;

                    return {
                        status: 'success',
                        data: _userCache,
                        source: 'localStorage_fallback'
                    };
                } catch (storageError) {
                    console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ localStorage:", storageError);
                }
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ suppressErrors
            if (options.suppressErrors) {
                return {
                    status: 'error',
                    message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É'
                };
            }

            throw error;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏
     * @returns {Promise<Object>} –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(forceRefresh = false) {
        // –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –∑–∞–ø–∏—Ç—É —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        const now = Date.now();
        const timeSinceLastCache = now - _userCacheTime;

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ —ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (!forceRefresh && _userCache && (timeSinceLastCache < USER_CACHE_TTL)) {
            console.log(`üìã API: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤—ñ–∫: ${Math.floor(timeSinceLastCache/1000)}—Å)`);
            return {status: 'success', data: _userCache, source: 'cache'};
        }

        if (forceRefresh) {
            console.log("üîÑ API: –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
        } else if (_userCache) {
            console.log(`üîÑ API: –ö–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–≤ (${Math.floor(timeSinceLastCache/1000)}—Å), –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ`);
        } else {
            console.log("üîÑ API: –ö–µ—à –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
        }

        const id = getUserId();
        if (!id) {
            console.error("‚ùå API: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ —ñ–≤–µ–Ω—Ç
            document.dispatchEvent(new CustomEvent('user-id-missing', {
                detail: { message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" }
            }));

            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const result = await apiRequest(`/api/user/${id}`, 'GET', null, {
                timeout: 5000, // –ó–º–µ–Ω—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
                suppressErrors: true
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            if (result.status === 'success' && result.data) {
                _userCache = result.data;
                _userCacheTime = now;

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                try {
                    if (_userCache.balance !== undefined) {
                        localStorage.setItem('userTokens', _userCache.balance.toString());
                        localStorage.setItem('winix_balance', _userCache.balance.toString());
                    }

                    if (_userCache.coins !== undefined) {
                        localStorage.setItem('userCoins', _userCache.coins.toString());
                        localStorage.setItem('winix_coins', _userCache.coins.toString());
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    if (_userCache.notifications_enabled !== undefined) {
                        localStorage.setItem('notifications_enabled', _userCache.notifications_enabled.toString());
                    }

                    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ —ñ–≤–µ–Ω—Ç
                    document.dispatchEvent(new CustomEvent('user-data-updated', {
                        detail: _userCache
                    }));
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                }
            }

            return result;
        } catch (error) {
            // –ó–ú–Ü–ù–ï–ù–û: –ü–æ–∫—Ä–∞—â–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
            if (error && error.source === 'throttle') {
                console.warn(`‚è≥ API: –û–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤. –ù–∞—Å—Ç—É–ø–Ω–∞ —Å–ø—Ä–æ–±–∞ –º–æ–∂–ª–∏–≤–∞ —á–µ—Ä–µ–∑ ${Math.ceil(error.retryAfter/1000)}—Å`);

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∫–µ—à, —è–∫—â–æ –≤—ñ–Ω —î
                if (_userCache) {
                    return {status: 'success', data: _userCache, source: 'cache_after_throttle'};
                }
            } else {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            if (_userCache) {
                console.warn("üîå API: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø–∏—Ç—É");
                return {status: 'success', data: _userCache, source: 'cache_after_error'};
            }

            // –Ø–∫—â–æ –∫–µ—à—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
            try {
                const userId = localStorage.getItem('telegram_user_id') || localStorage.getItem('userId');
                const username = localStorage.getItem('username') || 'WINIX User';
                const balance = parseFloat(localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0');
                const coins = parseFloat(localStorage.getItem('userCoins') || localStorage.getItem('winix_coins') || '0');
                const notifications = localStorage.getItem('notifications_enabled') === 'true';

                // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–µ—à
                _userCache = {
                    telegram_id: userId,
                    username: username,
                    balance: balance,
                    coins: coins,
                    notifications_enabled: notifications
                };
                _userCacheTime = now;

                return {
                    status: 'success',
                    data: _userCache,
                    source: 'localStorage_fallback'
                };
            } catch (storageError) {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ localStorage:", storageError);
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/balance`);
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingData() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/staking`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingHistory() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/staking/history`);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    async function createStaking(amount, period) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        if (![7, 14, 28].includes(period)) {
            throw new Error("–ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–æ–∂–µ –±—É—Ç–∏ 7, 14 –∞–±–æ 28 –¥–Ω—ñ–≤");
        }

        return apiRequest(`/api/user/${userId}/staking`, 'POST', {
            stakingAmount: parseInt(amount),
            period: period
        });
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     */
    async function addToStaking(amount, stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingData = await getStakingData();
                if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                    throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
                targetStakingId = stakingData.data.stakingId;
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(`/api/user/${userId}/staking/${targetStakingId}`, 'PUT', {
            additionalAmount: parseInt(amount)
        });
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     */
    async function cancelStaking(stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ API
                const stakingData = await getStakingData();
                if (stakingData.status === 'success' && stakingData.data && stakingData.data.hasActiveStaking) {
                    targetStakingId = stakingData.data.stakingId;
                } else {
                    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    if (stakingDataStr) {
                        const localData = JSON.parse(stakingDataStr);
                        if (localData && localData.stakingId) {
                            targetStakingId = localData.stakingId;
                        }
                    }
                }

                if (!targetStakingId) {
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(`/api/user/${userId}/staking/${targetStakingId}/cancel`, 'POST', {
            confirm: true,
            timestamp: Date.now()
        });
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    async function calculateExpectedReward(amount, period) {
        // –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫, –±–µ–∑ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ API
        // –¶–µ –Ω–∞–±–∞–≥–∞—Ç–æ —à–≤–∏–¥—à–µ —ñ –Ω–µ —Å—Ç–≤–æ—Ä—é—î –∑–∞–π–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        amount = parseInt(amount) || 0;
        period = parseInt(period) || 14;

        if (amount <= 0) {
            return { status: 'success', data: { reward: 0 } };
        }

        if (![7, 14, 28].includes(period)) {
            period = 14; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }

        // –í—ñ–¥—Å–æ—Ç–∫–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        const rewardRates = { 7: 4, 14: 9, 28: 15 };
        const rewardPercent = rewardRates[period] || 9;
        const reward = (amount * rewardPercent) / 100;

        return {
            status: 'success',
            data: {
                reward: parseFloat(reward.toFixed(2)),
                rewardPercent: rewardPercent,
                amount: amount,
                period: period,
                source: 'local_calculation'
            }
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {number} limit - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     */
    async function getTransactions(limit = 100) {
        // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–µ–∑ API-–∑–∞–ø–∏—Ç—ñ–≤, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ 404 –ø–æ–º–∏–ª–æ–∫
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤, –æ—Å–∫—ñ–ª—å–∫–∏ API —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ
        return {
            status: 'success',
            data: [], // –ü—É—Å—Ç–∏–π –º–∞—Å–∏–≤
            message: '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        };
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {object} settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async function updateSettings(settings) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            return await apiRequest(`/api/user/${userId}/settings`, 'POST', settings);
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ API –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
            if (settings.notifications_enabled !== undefined) {
                localStorage.setItem('notifications_enabled', settings.notifications_enabled.toString());
            }

            // –Ü–º—ñ—Ç—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return {
                status: 'success',
                message: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ',
                source: 'local'
            };
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É API
     */
    function clearCache() {
        _userCache = null;
        _userCacheTime = 0;
        _lastRequestsByEndpoint = {};
        console.log("üîå API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ");
    }

    // ======== –ï–ö–°–ü–û–†–¢ API ========

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.WinixAPI = {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },

        // –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        apiRequest,
        getUserId,
        clearCache,

        // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserData,
        getBalance,
        updateSettings,

        // –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        getStakingData,
        getStakingHistory,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,

        // –§—É–Ω–∫—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        getTransactions
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.apiRequest = apiRequest;
    window.getUserId = getUserId;

    // –ü—É–±–ª—ñ—á–Ω—ñ –ø–æ–¥—ñ—ó, —è–∫—ñ –º–æ–∂–Ω–∞ —Å–ª—É—Ö–∞—Ç–∏
    // - 'api-error': –≤–∏–Ω–∏–∫–∞—î –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ API –∑–∞–ø–∏—Ç—É
    // - 'user-data-updated': –≤–∏–Ω–∏–∫–∞—î –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    // - 'user-id-missing': –≤–∏–Ω–∏–∫–∞—î, –∫–æ–ª–∏ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –∑–Ω–∞–π—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    console.log("‚úÖ API: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
})();