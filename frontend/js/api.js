/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 *
 * –¶–µ–π –º–æ–¥—É–ª—å —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É—î –≤—Å—ñ API-–∑–∞–ø–∏—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π:
 * - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
 * - –°—Ç–µ–π–∫—ñ–Ω–≥
 * - –†–µ—Ñ–µ—Ä–∞–ª–∏
 * - –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
 * - –ó–∞–≤–¥–∞–Ω–Ω—è
 * - –†–æ–∑—ñ–≥—Ä–∞—à—ñ
 * - –ú–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
 * —Ç–∞ —ñ–Ω—à—ñ.
 */

(function() {
    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ–≥–æ API –º–æ–¥—É–ª—è");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü –¢–ê –ö–û–ù–°–¢–ê–ù–¢–ò ========

    // –ë–∞–∑–æ–≤–∏–π URL API (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—É—Å—Ç–∏–π –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤)
    const API_BASE_URL = '';

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    let _debugMode = false;

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API –º–æ–¥—É–ª—è
    let _isReady = false;

    // –ß–µ—Ä–≥–∞ –∑–∞–ø–∏—Ç—ñ–≤, —è–∫—ñ –±—É–ª–∏ –∑—Ä–æ–±–ª–µ–Ω—ñ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—è
    let _pendingRequests = [];

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    function getUserId() {
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
        let userId = localStorage.getItem('telegram_user_id');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ID
        if (userId && userId !== 'undefined' && userId !== 'null') {
            if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage:", userId);
            return userId;
        }

        // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ DOM –µ–ª–µ–º–µ–Ω—Ç–∞
        const userIdElement = document.getElementById('user-id');
        if (userIdElement && userIdElement.textContent) {
            userId = userIdElement.textContent.trim();
            if (userId && userId !== 'undefined' && userId !== 'null') {
                if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ DOM:", userId);

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                try {
                    localStorage.setItem('telegram_user_id', userId);
                } catch (e) {
                    console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", e);
                }

                return userId;
            }
        }

        // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        const urlParams = new URLSearchParams(window.location.search);
        userId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
        if (userId && userId !== 'undefined' && userId !== 'null') {
            if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:", userId);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            try {
                localStorage.setItem('telegram_user_id', userId);
            } catch (e) {
                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", e);
            }

            return userId;
        }

        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π ID, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
        console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
        return null;
    }

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ API
    function handleApiError(error, operation = 'API –æ–ø–µ—Ä–∞—Ü—ñ—ó') {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}:`, error);

        // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
        let errorMessage = error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ —ñ —Ñ–æ—Ä–º—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (error.name === 'TypeError' && errorMessage.includes('fetch')) {
            return `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.`;
        }

        if (errorMessage.includes('timeout') || errorMessage.includes('timed out')) {
            return `–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.`;
        }

        if (errorMessage.includes('404')) {
            return `–°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–µ—Å—É—Ä—Å (404). –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
        }

        if (errorMessage.includes('500')) {
            return `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (500). –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`;
        }

        if (errorMessage.includes('undefined') || errorMessage.includes('null')) {
            return `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
        }

        if (errorMessage.includes('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
            return `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–π—Ç–∏ —Ç–∞ —É–≤—ñ–π—Ç–∏ –∑–Ω–æ–≤—É.`;
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ —Ç–∏–ø–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏
        return errorMessage;
    }

    // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    function showLoader() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.classList.add('show');
    }

    function hideLoader() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.classList.remove('show');
    }

    // ======== –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø API-–ó–ê–ü–ò–¢–£ ========

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ URL
     * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST/PUT –∑–∞–ø–∏—Ç—ñ–≤)
     * @param {Function|Object} callbackOrOptions - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∞–±–æ –æ–ø—Ü—ñ—ó –∑–∞–ø–∏—Ç—É
     * @param {Object|number} optionsOrRetries - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
     */
    async function apiRequest(endpoint, method = 'GET', data = null, callbackOrOptions = null, optionsOrRetries = 3) {
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∫–æ–ª–±–µ–∫ —á–∏ –æ–ø—Ü—ñ—ó
        let callback = null;
        let options = {};
        let retries = 3;

        if (typeof callbackOrOptions === 'function') {
            callback = callbackOrOptions;
            if (typeof optionsOrRetries === 'object') {
                options = optionsOrRetries;
            } else if (typeof optionsOrRetries === 'number') {
                retries = optionsOrRetries;
            }
        } else if (typeof callbackOrOptions === 'object') {
            options = callbackOrOptions;
            if (typeof optionsOrRetries === 'number') {
                retries = optionsOrRetries;
            }
        }

        // –Ø–∫—â–æ API —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π, –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç —É —á–µ—Ä–≥—É
        if (!_isReady) {
            return new Promise((resolve, reject) => {
                _pendingRequests.push({
                    endpoint, method, data, callback, options, retries,
                    resolve, reject
                });

                if (_debugMode) {
                    console.log(`‚è≥ –ó–∞–ø–∏—Ç –¥–æ ${endpoint} –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–µ—Ä–≥–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API`);
                }
            });
        }

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();

            // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
            const timestamp = Date.now();
            const url = `${API_BASE_URL}${endpoint}${endpoint.includes('?') ? '&' : '?'}t=${timestamp}`;

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤–∏–º–∫–Ω–µ–Ω–∏–π –≤ –æ–ø—Ü—ñ—è—Ö
            if (options && !options.hideLoader) {
                showLoader();
            }

            // –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç —É —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            if (_debugMode) {
                console.log(`üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø–∏—Ç—É –Ω–∞ ${url}`);
                if (data) console.log("üì¶ –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:", data);
            }

            // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-User-Id': userId || '',
                    ...options.headers
                },
                ...options
            };

            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT
            if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                requestOptions.body = JSON.stringify(data);
            }

            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            async function tryRequest(attemptsLeft) {
                try {
                    const response = await fetch(url, requestOptions);

                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    if (options && !options.hideLoader) {
                        hideLoader();
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    if (!response.ok) {
                        const statusText = response.statusText || '';
                        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É: ${response.status} ${statusText}`);

                        // –î–ª—è 401/403 –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                        if (response.status === 401 || response.status === 403) {
                            console.warn('üîê –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                        }

                        // –î–ª—è 404 –ø–æ–º–∏–ª–æ–∫
                        if (response.status === 404) {
                            console.error(`‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${url}`);
                            throw new Error(`–ó–∞–ø–∏—Ç–∞–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (404)`);
                        }

                        // –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Å–ø—Ä–æ–±–∏, –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
                        if (attemptsLeft > 0) {
                            const delay = Math.pow(2, retries - attemptsLeft) * 500; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                            if (_debugMode) {
                                console.log(`‚è±Ô∏è –ü–æ–≤—Ç–æ—Ä –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft})`);
                            }

                            await new Promise(resolve => setTimeout(resolve, delay));
                            return tryRequest(attemptsLeft - 1);
                        }

                        throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${statusText}`);
                    }

                    // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –û–ö, –ø–∞—Ä—Å–∏–º–æ JSON
                    let jsonData;
                    try {
                        jsonData = await response.json();
                    } catch (parseError) {
                        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', parseError);
                        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    if (jsonData && jsonData.status === 'error') {
                        console.error('‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:', jsonData.message);
                        throw new Error(jsonData.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
                    }

                    if (_debugMode) {
                        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏–π API-–∑–∞–ø–∏—Ç –Ω–∞ ${url}`);
                        console.log("üìä –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", jsonData);
                    }

                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–ª–±–µ–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —è–∫—â–æ –≤—ñ–Ω —î
                    if (callback && typeof callback === 'function') {
                        try {
                            callback(null, jsonData);
                        } catch (callbackError) {
                            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫–∞:', callbackError);
                        }
                    }

                    return jsonData;

                } catch (error) {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
                    if (options && !options.hideLoader) {
                        hideLoader();
                    }

                    // –î–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
                    if (error.name === 'TypeError' && attemptsLeft > 0) {
                        const delay = Math.pow(2, retries - attemptsLeft) * 500;
                        console.log(`‚ö†Ô∏è –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft}):`, error.message);

                        await new Promise(resolve => setTimeout(resolve, delay));
                        return tryRequest(attemptsLeft - 1);
                    }

                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–ª–±–µ–∫ –∑ –ø–æ–º–∏–ª–∫–æ—é, —è–∫—â–æ –≤—ñ–Ω —î
                    if (callback && typeof callback === 'function') {
                        try {
                            callback(error, null);
                        } catch (callbackError) {
                            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫–∞ –¥–ª—è –ø–æ–º–∏–ª–∫–∏:', callbackError);
                        }
                    }

                    throw error;
                }
            }

            // –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
            return tryRequest(retries);
        } catch (error) {
            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, —è–∫—ñ –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —É tryRequest
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É:", error);

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–ª–±–µ–∫ –∑ –ø–æ–º–∏–ª–∫–æ—é, —è–∫—â–æ –≤—ñ–Ω —î
            if (callback && typeof callback === 'function') {
                try {
                    callback(error, null);
                } catch (callbackError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏:', callbackError);
                }
            }

            throw error;
        }
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ –∑–∞–ø–∏—Ç—ñ–≤ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    function processPendingRequests() {
        console.log(`‚è© –û–±—Ä–æ–±–∫–∞ ${_pendingRequests.length} –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...`);

        // –ö–æ–ø—ñ—é—î–º–æ —á–µ—Ä–≥—É —ñ –æ—á–∏—â–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª
        const pendingRequests = [..._pendingRequests];
        _pendingRequests = [];

        // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç
        pendingRequests.forEach(async request => {
            try {
                const { endpoint, method, data, callback, options, retries, resolve, reject } = request;
                const result = await apiRequest(endpoint, method, data, callback, options, retries);
                resolve(result);
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É:`, error);
                request.reject(error);
            }
        });
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á –¢–ê –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} userData - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram WebApp
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    function authorize(userData, callback = null) {
        return apiRequest('/api/auth', 'POST', userData, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Function|string} callbackOrUserId - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Function} [callback] - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É, —è–∫—â–æ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä - ID
     * @returns {Promise<Object>} - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function getUserData(callbackOrUserId = null, callback = null) {
        let userId = null;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–µ—Ä—à–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if (typeof callbackOrUserId === 'function') {
            callback = callbackOrUserId;
        } else if (typeof callbackOrUserId === 'string') {
            userId = callbackOrUserId;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        const id = userId || getUserId();

        if (!id) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }

        return apiRequest(`/api/user/${id}`, 'GET', null, callback);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} userData - –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function updateUserData(userData, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}`, 'PUT', userData, callback);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function getStakingData(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/staking`, 'GET', null, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Array>} - –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function getStakingHistory(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/staking/history`, 'GET', null, callback);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function createStaking(amount, period, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/staking`, 'POST', {
            stakingAmount: Math.floor(amount),
            period: period
        }, callback);
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @param {string|Function} stakingIdOrCallback - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
     */
    async function addToStaking(amount, stakingIdOrCallback = null, callback = null) {
        let stakingId = null;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof stakingIdOrCallback === 'function') {
            callback = stakingIdOrCallback;
        } else if (typeof stakingIdOrCallback === 'string') {
            stakingId = stakingIdOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }

        // –Ø–∫—â–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Ç—Ä–∏–º—É—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingResult = await getStakingData();
                const stakingData = stakingResult.data || stakingResult;

                if (stakingResult.status !== 'success' && !stakingResult.hasActiveStaking ||
                    !stakingData || !stakingData.hasActiveStaking) {
                    const error = new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                    if (callback) callback(error, null);
                    return Promise.reject(error);
                }

                targetStakingId = stakingData.stakingId;
            } catch (error) {
                if (callback) callback(error, null);
                return Promise.reject(error);
            }
        }

        return apiRequest(`/api/user/${userId}/staking/${targetStakingId}`, 'PUT', {
            additionalAmount: Math.floor(amount)
        }, callback);
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {string|Function} stakingIdOrCallback - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function cancelStaking(stakingIdOrCallback = null, callback = null) {
        let stakingId = null;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof stakingIdOrCallback === 'function') {
            callback = stakingIdOrCallback;
        } else if (typeof stakingIdOrCallback === 'string') {
            stakingId = stakingIdOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }

        // –Ø–∫—â–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Ç—Ä–∏–º—É—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingResult = await getStakingData();
                const stakingData = stakingResult.data || stakingResult;

                if (stakingResult.status !== 'success' && !stakingResult.hasActiveStaking ||
                    !stakingData || !stakingData.hasActiveStaking) {
                    const error = new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                    if (callback) callback(error, null);
                    return Promise.reject(error);
                }

                targetStakingId = stakingData.stakingId;
            } catch (error) {
                if (callback) callback(error, null);
                return Promise.reject(error);
            }
        }

        return apiRequest(`/api/user/${userId}/staking/${targetStakingId}/cancel`, 'POST', {
            timestamp: Date.now()
        }, callback);
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    function calculateExpectedReward(amount, period, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/staking/calculate-reward?amount=${amount}&period=${period}`, 'GET', null, callback);
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {boolean|Function} forceOrCallback - –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function repairStaking(forceOrCallback = false, callback = null) {
        let force = false;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof forceOrCallback === 'function') {
            callback = forceOrCallback;
        } else if (typeof forceOrCallback === 'boolean') {
            force = forceOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/staking/repair`, 'POST', {
            force: force,
            timestamp: Date.now()
        }, callback);
    }

    /**
     * –ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number|Function} adjustBalanceOrCallback - –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function deepRepairStaking(adjustBalanceOrCallback = 0, callback = null) {
        let adjustBalance = 0;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof adjustBalanceOrCallback === 'function') {
            callback = adjustBalanceOrCallback;
        } else if (typeof adjustBalanceOrCallback === 'number') {
            adjustBalance = adjustBalanceOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/staking/deep-repair`, 'POST', {
            balance_adjustment: adjustBalance,
            timestamp: Date.now()
        }, callback);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ë–ê–õ–ê–ù–°–£ –¢–ê –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function getBalance(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/balance`, 'GET', null, callback);
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {string|Function} descriptionOrCallback - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     */
    function addTokens(amount, descriptionOrCallback = '–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤', callback = null) {
        let description = '–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof descriptionOrCallback === 'function') {
            callback = descriptionOrCallback;
        } else if (typeof descriptionOrCallback === 'string') {
            description = descriptionOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/add-tokens`, 'POST', {
            amount: amount,
            description: description
        }, callback);
    }

    /**
     * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {string|Function} descriptionOrCallback - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     */
    function subtractTokens(amount, descriptionOrCallback = '–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤', callback = null) {
        let description = '–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof descriptionOrCallback === 'function') {
            callback = descriptionOrCallback;
        } else if (typeof descriptionOrCallback === 'string') {
            description = descriptionOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/subtract-tokens`, 'POST', {
            amount: amount,
            description: description
        }, callback);
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     */
    function addCoins(amount, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/add-coins`, 'POST', {
            amount: amount
        }, callback);
    }

    /**
     * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     */
    function subtractCoins(amount, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/subtract-coins`, 'POST', {
            amount: amount
        }, callback);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∂–µ—Ç–æ–Ω—ñ–≤ –≤ —Ç–æ–∫–µ–Ω–∏
     * @param {number} coinsAmount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
     */
    function convertCoinsToTokens(coinsAmount, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/convert-coins`, 'POST', {
            coins_amount: coinsAmount
        }, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     * @param {number|Function} limitOrCallback - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     */
    function getTransactions(limitOrCallback = 100, callback = null) {
        let limit = 100;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof limitOrCallback === 'function') {
            callback = limitOrCallback;
        } else if (typeof limitOrCallback === 'number') {
            limit = limitOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/transactions?limit=${limit}`, 'GET', null, callback);
    }

    /**
     * –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string} recipientId - ID –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {string|Function} descriptionOrCallback - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
     */
    function sendTokens(recipientId, amount, descriptionOrCallback = '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤', callback = null) {
        let description = '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤';

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (typeof descriptionOrCallback === 'function') {
            callback = descriptionOrCallback;
        } else if (typeof descriptionOrCallback === 'string') {
            description = descriptionOrCallback;
        }

        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/send-tokens`, 'POST', {
            recipient_id: recipientId,
            amount: amount,
            description: description
        }, callback);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–á –°–ò–°–¢–ï–ú–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
     */
    function getReferralLink(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/referral-link`, 'GET', null, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     */
    function getReferrals(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/referrals`, 'GET', null, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function claimReferralReward(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/claim-referral-reward`, 'POST', null, callback);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø TODO –°–ò–°–¢–ï–ú–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
     */
    function getTodoList(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/todos`, 'GET', null, callback);
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} task - –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function addTodoItem(task, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/todos`, 'POST', task, callback);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} taskData - –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –û–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function updateTodoItem(taskId, taskData, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/todos/${taskId}`, 'PUT', taskData, callback);
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è
     */
    function deleteTodoItem(taskId, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/todos/${taskId}`, 'DELETE', null, callback);
    }

    /**
     * –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –û–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    function completeTodoItem(taskId, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/todos/${taskId}/complete`, 'POST', null, callback);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ó–Ü–ì–†–ê–®–Ü–í ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function getRaffles(callback = null) {
        return apiRequest('/api/raffles', 'GET', null, callback);
    }

    /**
     * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleType - –¢–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É ('main', 'daily', etc.)
     * @param {number} tokenAmount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
     */
    function participateInRaffle(raffleId, raffleType, tokenAmount, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest('/api/participate', 'POST', {
            userId: userId,
            raffleId: raffleId,
            raffleType: raffleType,
            tokenAmount: tokenAmount
        }, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function getRaffleHistory(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/raffle-history`, 'GET', null, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
     */
    function getRaffleWinners(raffleId, callback = null) {
        return apiRequest(`/api/raffles/${raffleId}/winners`, 'GET', null, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
     */
    function claimNewbieBonus(callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/claim-newbie-bonus`, 'POST', null, callback);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ä–µ–∂—É
     * @param {string} platform - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (twitter, telegram, youtube)
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function verifySocialSubscription(platform, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/verify-social`, 'POST', {
            platform: platform,
            timestamp: Date.now()
        }, callback);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ú–û–í–ù–û–ì–û –ú–û–î–£–õ–Ø ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏
     * @param {string} language - –ö–æ–¥ –º–æ–≤–∏ (uk, en, ru)
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –°–ª–æ–≤–Ω–∏–∫ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏
     */
    function getLanguageDictionary(language, callback = null) {
        return apiRequest(`/api/language/${language}`, 'GET', null, callback);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤
     */
    function getAvailableLanguages(callback = null) {
        return apiRequest('/api/languages', 'GET', null, callback);
    }

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {string} language - –ö–æ–¥ –º–æ–≤–∏ (uk, en, ru)
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     */
    function saveUserLanguage(language, callback = null) {
        const userId = getUserId();
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            if (callback) callback(error, null);
            return Promise.reject(error);
        }
        return apiRequest(`/api/user/${userId}/set-language`, 'POST', {
            language: language
        }, callback);
    }

    // ======== –í–ó–ê–Ñ–ú–û–î–Ü–Ø –ó –°–ò–°–¢–ï–ú–û–Æ –ü–û–î–Ü–ô ========

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –º–æ–¥—É–ª—è
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    function initApi(callback = null) {
        if (_isReady) {
            if (callback) callback(null, { status: 'success', message: 'API –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ' });
            return;
        }

        try {
            console.log("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –º–æ–¥—É–ª—è...");

            // –£—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API
            _isReady = true;

            // –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–≥—É –∑–∞–ø–∏—Ç—ñ–≤
            processPendingRequests();

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é API
            document.dispatchEvent(new CustomEvent('winix-api-initialized'));

            console.log("‚úÖ API –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

            if (callback) callback(null, { status: 'success', message: 'API —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ' });
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API –º–æ–¥—É–ª—è:", error);
            if (callback) callback(error, null);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API –º–æ–¥—É–ª—è
     * @returns {boolean} –°—Ç–∞–Ω –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API
     */
    function isReady() {
        return _isReady;
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API –ú–û–î–£–õ–¨ ========

    // –û–±'—î–∫—Ç –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É API —Ñ—É–Ω–∫—Ü—ñ–π
    const publicApi = {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ —É—Ç–∏–ª—ñ—Ç–∏
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },
        isReady,
        initApi,
        apiRequest,
        getUserId,
        handleApiError,

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        authorize,
        getUserData,
        updateUserData,

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        getStakingData,
        getStakingHistory,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,
        repairStaking,
        deepRepairStaking,

        // –ë–∞–ª–∞–Ω—Å —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        getBalance,
        addTokens,
        subtractTokens,
        addCoins,
        subtractCoins,
        convertCoinsToTokens,
        getTransactions,
        sendTokens,

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
        getReferralLink,
        getReferrals,
        claimReferralReward,

        // –ó–∞–≤–¥–∞–Ω–Ω—è
        getTodoList,
        addTodoItem,
        updateTodoItem,
        deleteTodoItem,
        completeTodoItem,

        // –†–æ–∑—ñ–≥—Ä–∞—à—ñ
        getRaffles,
        participateInRaffle,
        getRaffleHistory,
        getRaffleWinners,
        claimNewbieBonus,
        verifySocialSubscription,

        // –ú–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å
        getLanguageDictionary,
        getAvailableLanguages,
        saveUserLanguage
    };

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç
    window.WinixAPI = publicApi;

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é apiRequest –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.apiRequest = apiRequest;

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é API –º–æ–¥—É–ª—è
    setTimeout(initApi, 0);

    console.log("‚úÖ API: –Ñ–¥–∏–Ω–∏–π API –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó");
})();