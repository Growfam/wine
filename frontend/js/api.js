/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è: —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–º–∏ —Ç–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
 * @version 1.3.1 (–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é race condition)
 */

(function() {
    'use strict';

    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ–≥–æ API –º–æ–¥—É–ª—è");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ë–∞–∑–æ–≤–∏–π URL - –±–µ–∑ /api –Ω–∞ –∫—ñ–Ω—Ü—ñ!
    const API_BASE_URL = (() => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        if (window.WinixConfig && window.WinixConfig.apiBaseUrl) {
            // –í–∏–¥–∞–ª—è—î–º–æ /api —è–∫—â–æ –≤—ñ–Ω —î –Ω–∞ –∫—ñ–Ω—Ü—ñ
            let url = window.WinixConfig.apiBaseUrl;
            return url.endsWith('/api') ? url.slice(0, -4) : url;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        const hostname = window.location.hostname;

        // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            // –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä—Ç 8080
            return `http://${hostname}:8080`;
        } else if (hostname.includes('testenv') || hostname.includes('staging')) {
            // –¢–µ—Å—Ç–æ–≤—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            return `https://${hostname}`;
        } else {
            // –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
            return 'https://winixbot.com';
        }
    })();

    // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    let _debugMode = false;

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let _userCache = null;
    let _userCacheTime = 0;
    const USER_CACHE_TTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    let _stakingCache = null;
    let _stakingCacheTime = 0;
    const STAKING_CACHE_TTL = 180000; // 3 —Ö–≤–∏–ª–∏–Ω–∏

    // –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ (—á–µ—Ä–µ–∑ rate limiting)
    let _blockedEndpoints = {};

    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
    let _pendingRequests = {};
    let _activeEndpoints = new Set();

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
    let _lastRequestsByEndpoint = {};

    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏ (–∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è rate-limiting)
    const REQUEST_THROTTLE = {
        '/user/': 3000,      // 3 —Å–µ–∫—É–Ω–¥
        '/staking': 3000,    // 3 —Å–µ–∫—É–Ω–¥
        '/balance': 3000,    // 3 —Å–µ–∫—É–Ω–¥
        '/transactions': 3000, // 3 —Å–µ–∫—É–Ω–¥
        '/raffles': 500,     // 0.5 —Å–µ–∫—É–Ω–¥ (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ - –∑–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤)
        '/participate-raffle': 5000, // 5 —Å–µ–∫—É–Ω–¥
        'default': 1000      // 1 —Å–µ–∫—É–Ω–¥–∞ (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫—Ä–∞—â–æ—ó —à–≤–∏–¥–∫–æ–¥—ñ—ó)
    };

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
    let _requestCounter = {
        total: 0,
        errors: 0,
        current: 0,
        lastReset: Date.now()
    };

    // –°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
    let _connectionState = {
        isConnected: true,
        lastSuccessTime: Date.now(),
        failedAttempts: 0,
        maxRetries: 5
    };

    // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞—Ç—Ä–∏–º–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤
    let _currentRateLimitTimer = null;

    // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–∏ rate limiting
    let _globalRateLimited = false;
    let _globalRateLimitTime = 0;

    // –¢–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    let _authToken = null;
    let _authTokenExpiry = 0;

    // –î–∞–Ω—ñ –¥–ª—è –µ–º—É–ª—è—Ü—ñ—ó - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    const DUMMY_USER_DATA = {
        telegram_id: "7066583465",
        username: "WINIX User",
        balance: 100,
        coins: 5,
        notifications_enabled: true
    };

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
     */
    function getUserId() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
            function isValidId(id) {
                return id &&
                       id !== 'undefined' &&
                       id !== 'null' &&
                       id !== undefined &&
                       id !== null &&
                       typeof id !== 'function' &&
                       id.toString().trim() !== '';
            }

            // 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    if (window.Telegram.WebApp.initDataUnsafe &&
                        window.Telegram.WebApp.initDataUnsafe.user &&
                        window.Telegram.WebApp.initDataUnsafe.user.id) {

                        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();

                        if (isValidId(tgUserId)) {
                            try {
                                localStorage.setItem('telegram_user_id', tgUserId);
                            } catch (e) {}

                            return tgUserId;
                        }
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
                }
            }

            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            try {
                const localId = localStorage.getItem('telegram_user_id');
                if (isValidId(localId)) {
                    return localId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage:", e);
            }

            // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
            try {
                const userIdElement = document.getElementById('user-id');
                if (userIdElement && userIdElement.textContent) {
                    const domId = userIdElement.textContent.trim();
                    if (isValidId(domId)) {
                        try {
                            localStorage.setItem('telegram_user_id', domId);
                        } catch (e) {}

                        return domId;
                    }
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ DOM:", e);
            }

            // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
                if (isValidId(urlId)) {
                    try {
                        localStorage.setItem('telegram_user_id', urlId);
                    } catch (e) {}

                    return urlId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ URL:", e);
            }

            // 5. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID
            const isSettingsPage = window.location.pathname.includes('general.html');
            if (isSettingsPage) {
                const testId = "7066583465";
                try {
                    localStorage.setItem('telegram_user_id', testId);
                } catch (e) {}

                return testId;
            }

            // ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     * @returns {string|null} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ null
     */
    function getAuthToken() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É –≤ –ø–∞–º'—è—Ç—ñ
            if (_authToken && _authTokenExpiry > Date.now()) {
                return _authToken;
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ localStorage
            const token = localStorage.getItem('auth_token');
            if (token && typeof token === 'string' && token.length > 5) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó, —è–∫—â–æ —î
                const expiryStr = localStorage.getItem('auth_token_expiry');
                if (expiryStr && parseInt(expiryStr) > Date.now()) {
                    _authToken = token;
                    _authTokenExpiry = parseInt(expiryStr);
                    return token;
                } else if (!expiryStr) {
                    // –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó, –≤—Å–µ –æ–¥–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω
                    _authToken = token;
                    return token;
                }
            }

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ —Ç–æ–∫–µ–Ω—É
            // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            if (window.WinixConfig && window.WinixConfig.authToken) {
                _authToken = window.WinixConfig.authToken;
                return _authToken;
            }

            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlToken = urlParams.get('token') || urlParams.get('auth_token');
                if (urlToken && urlToken.length > 5) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
                    _authToken = urlToken;
                    localStorage.setItem('auth_token', urlToken);
                    return urlToken;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ URL:", e);
            }

            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
            return null;
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è API endpoint –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ URL
     * @param {string} endpoint - –≤—Ö—ñ–¥–Ω–∏–π endpoint
     * @returns {string} –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π endpoint
     */
    function normalizeEndpoint(endpoint) {
        if (!endpoint) return 'api';

        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ª–µ—à, —è–∫—â–æ –≤—ñ–Ω —î
        let cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å endpoint 'api'
        if (cleanEndpoint.startsWith('api/')) {
            return cleanEndpoint;
        } else if (cleanEndpoint.startsWith('api')) {
            return `api/${cleanEndpoint.substring(3)}`;
        } else {
            return `api/${cleanEndpoint}`;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID (–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ—Ç–æ–¥)
     * @param {string} id - ID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function isValidUUID(id) {
        if (!id || typeof id !== 'string') return false;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID (–∑–∞–ø–æ–±—ñ–≥–∞—î –ø–æ–º–∏–ª–∫–∞–º –∑ ac, 46 —Ç–∞ —ñ–Ω—à–∏–º–∏)
        if (id.length < 10) return false;

        // –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ UUID
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        return uuidRegex.test(id);
    }

    /**
     * –ü–æ–∫–∞–∑—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –ø—Ä–∏ –æ–±–º–µ–∂–µ–Ω–Ω—ñ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @param {number} retryAfter - —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    function showRateLimitProgress(endpoint, retryAfter) {
        // –ó–∞–ø–∏—Å—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∑ —á–∞—Å–æ–º –¥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        if (window._blockedEndpoints) {
            window._blockedEndpoints[endpoint] = Date.now() + (retryAfter * 1000);
            console.warn(`‚ö†Ô∏è API: –ï–Ω–¥–ø–æ—ñ–Ω—Ç ${endpoint} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –Ω–∞ ${retryAfter} —Å–µ–∫—É–Ω–¥`);
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∏–≥–ª—è–¥—ñ toast (—Å–ø—Ä–æ—â–µ–Ω–æ –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞)
        if (typeof window.showToast === 'function') {
            window.showToast(`–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ ${retryAfter} —Å–µ–∫—É–Ω–¥`, 'warning');
        } else {
            console.warn(`–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ ${retryAfter} —Å–µ–∫—É–Ω–¥`);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     * @returns {Promise<string|null>} –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∞–±–æ null
     */
   async function refreshToken() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (_pendingRequests['refresh-token']) {
            return _pendingRequests['refresh-token'];
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        const refreshPromise = new Promise(async (resolve, reject) => {
            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const userId = getUserId();
                if (!userId) {
                    throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                console.log("üîÑ API: –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ rawApiRequest –±–µ–∑ —Ç–æ–∫–µ–Ω—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ä–µ–∫—É—Ä—Å—ñ—ó
                const response = await fetch(`${API_BASE_URL}/api/auth/refresh-token`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-User-Id': userId
                    },
                    body: JSON.stringify({
                        telegram_id: userId,
                        token: _authToken || ''
                    })
                });

                if (!response.ok) {
                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
                }

                const data = await response.json();

                if (data && data.status === 'success' && data.token) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω
                    _authToken = data.token;

                    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                    if (data.expires_at) {
                        _authTokenExpiry = new Date(data.expires_at).getTime();
                    } else if (data.expires_in) {
                        _authTokenExpiry = Date.now() + (data.expires_in * 1000);
                    } else {
                        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 24 –≥–æ–¥–∏–Ω–∏
                        _authTokenExpiry = Date.now() + (24 * 60 * 60 * 1000);
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                    try {
                        localStorage.setItem('auth_token', _authToken);
                        localStorage.setItem('auth_token_expiry', _authTokenExpiry.toString());
                    } catch (e) {
                        console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –≤ localStorage:", e);
                    }

                    console.log("‚úÖ API: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                    document.dispatchEvent(new CustomEvent('token-refreshed', {
                        detail: { token: _authToken, expires_at: _authTokenExpiry }
                    }));

                    resolve(_authToken);
                } else {
                    throw new Error(data.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");
                }
            } catch (error) {
                console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
                reject(error);
            } finally {
                // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö
                delete _pendingRequests['refresh-token'];
            }
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        _pendingRequests['refresh-token'] = refreshPromise;

        return refreshPromise;
    }

    // ======== –§–£–ù–ö–¶–Ü–á API-–ó–ê–ü–ò–¢–£ ========

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è –∑–∞–≤–∏—Å–∞—é—á–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     * @returns {boolean} –ß–∏ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ —Å–∫–∏–¥–∞–Ω–Ω—è
     */
    function resetPendingRequests() {
        const now = Date.now();

        // –û—á–∏—â–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ —Å—Ç–∞—Ä—à—ñ –∑–∞ 15 —Å–µ–∫—É–Ω–¥
        for (const endpoint of _activeEndpoints) {
            const lastTime = _lastRequestsByEndpoint[`GET:${endpoint}`] ||
                             _lastRequestsByEndpoint[`POST:${endpoint}`] || 0;

            if (now - lastTime > 15000) { // 15 —Å–µ–∫—É–Ω–¥
                console.warn(`üîå API: –°–∫–∏–¥–∞–Ω–Ω—è –∑–∞–≤–∏—Å–∞—é—á–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ ${endpoint}`);
                _activeEndpoints.delete(endpoint);
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        if (_activeEndpoints.size > 3) {
            console.warn(`üîå API: –í–∏—è–≤–ª–µ–Ω–æ ${_activeEndpoints.size} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω`);
            _activeEndpoints.clear();
            _pendingRequests = {};
            return true;
        }
        return false;
    }

    // –†–µ–≥—É–ª—è—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–∏—Å–∞—é—á–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    setInterval(resetPendingRequests, 20000); // –ö–æ–∂–Ω—ñ 20 —Å–µ–∫—É–Ω–¥

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM
     * @param {string} elementId - ID –µ–ª–µ–º–µ–Ω—Ç–∞
     * @param {string|number} value - –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function safeUpdateValue(elementId, value) {
        try {
            const element = document.getElementById(elementId);
            if (element) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ª–∏—à–µ —è–∫—â–æ –≤–æ–Ω–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è
                if (element.textContent !== String(value)) {
                    element.textContent = value;
                }
                return true;
            }
            return false;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ ${elementId}:`, error);
            return false;
        }
    }

    /**
     * –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó –≤ –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
     * @param {string} url - URL –∑–∞–ø–∏—Ç—É
     * @param {string} method - HTTP –º–µ—Ç–æ–¥
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function rawApiRequest(url, method, data, options = {}) {
        // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
        const requestId = `${method}-${url}-${Date.now()}`;
        const controller = new AbortController();
        let timeoutId = null;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            if (_globalRateLimited && !options.bypassThrottle) {
                const remainingTime = Math.ceil((_globalRateLimitTime - Date.now()) / 1000);
                if (remainingTime > 0) {
                    console.warn(`üîå API: –ì–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ, –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${remainingTime}—Å`);
                    throw {
                        status: 429,
                        message: `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥.`,
                        globalRateLimit: true,
                        retryAfter: remainingTime
                    };
                } else {
                    // –Ø–∫—â–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤, –∑–Ω—ñ–º–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
                    _globalRateLimited = false;
                    _globalRateLimitTime = 0;
                }
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.showLoading === 'function') {
                    window.showLoading();
                }
            }

            // –ó–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
            timeoutId = setTimeout(() => {
                console.warn(`üîÑ API: –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É ${requestId}`);
                controller.abort();
            }, options.timeout || 10000);

            // –ó–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = {
                'Content-Type': 'application/json',
                'X-Request-ID': requestId,
                ...(options.headers || {})
            };

            // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (!options.skipTokenCheck) {
                const token = getAuthToken();
                if (token) {
                    headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
                }
            }

            // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω —î
            const userId = getUserId();
            if (userId && !options.skipUserIdCheck) {
                headers['X-Telegram-User-Id'] = userId;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
            if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
                throw new Error("–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω");
            }

            // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: headers,
                signal: controller.signal,
                // –î–æ–¥–∞—î–º–æ cache: 'no-store' –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
                cache: 'no-store'
            };

            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
            if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                const processedData = { ...data };

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è raffle_id –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
                if (url.includes('participate-raffle') && processedData) {
                    // –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ raffle_id - –≤–∞–ª—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫
                    if (processedData.raffle_id) {
                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
                        if (typeof processedData.raffle_id !== 'string') {
                            processedData.raffle_id = String(processedData.raffle_id);
                            console.log("üõ†Ô∏è API: raffle_id –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–æ–∫:", processedData.raffle_id);
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
                        if (!isValidUUID(processedData.raffle_id)) {
                            console.error(`‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${processedData.raffle_id}`);
                            throw new Error(`–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${processedData.raffle_id}`);
                        }
                    } else {
                        console.error("‚ùå API: –í—ñ–¥—Å—É—Ç–Ω—ñ–π raffle_id –≤ –∑–∞–ø–∏—Ç—ñ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ");
                        throw new Error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É");
                    }
                }

                requestOptions.body = JSON.stringify(processedData);
            }

            // –ó–∞–ø–∏—Å—É—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
            const startTime = Date.now();

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            console.log(`üîÑ API: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø–∏—Ç—É ${requestId} –Ω–∞ ${url}`);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ URL –º—ñ—Å—Ç–∏—Ç—å /raffles/ —ñ –¥–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É
            if (url.includes('/raffles/') || url.includes('participate-raffle')) {
                // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è rate limiting
                const delay = Math.floor(Math.random() * 1000) + 500; // 500-1500 –º—Å
                await new Promise(resolve => setTimeout(resolve, delay));
            }

            const response = await fetch(url, requestOptions);

            // –ó–∞–ø–∏—Å—É—î–º–æ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
            const requestDuration = Date.now() - startTime;
            console.log(`‚úÖ API: –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ ${requestDuration}–º—Å –¥–ª—è –∑–∞–ø–∏—Ç—É ${requestId}`);

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (timeoutId) {
                clearTimeout(timeoutId);
                timeoutId = null;
            }

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }
            }

            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è 404 –ø–æ–º–∏–ª–æ–∫ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            if (response.status === 404 && url.includes('raffles')) {
                // –û—á–∏—â—É—î–º–æ –∫–µ—à —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ —Ç–∞–∫–∏–π —î
                if (window.WinixRaffles && window.WinixRaffles.participation) {
                    window.WinixRaffles.participation.clearInvalidRaffleIds();
                }

                // –î–æ–¥–∞—î–º–æ —Ü–µ–π ID –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö
                const raffleIdMatch = url.match(/raffles\/([^/?]+)/i);
                if (raffleIdMatch && raffleIdMatch[1] && window.WinixRaffles && window.WinixRaffles.participation) {
                    window.WinixRaffles.participation.addInvalidRaffleId(raffleIdMatch[1]);
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –±—ñ–ª—å—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if (typeof window.showToast === 'function') {
                    window.showToast('–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–Ω–æ–≤—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.', 'warning');
                }

                throw new Error("–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ID –º–æ–∂–µ –±—É—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º.");
            }

            // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ (rate limiting)
            if (response.status === 429) {
                // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Retry-After, —è–∫—â–æ –≤—ñ–Ω —î
                const retryAfter = parseInt(response.headers.get('Retry-After') || '30');

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
                const endpointBase = url.split('?')[0];

                // –ó–∞–ø–∏—Å—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∑ —á–∞—Å–æ–º –¥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
                _blockedEndpoints[endpointBase] = Date.now() + (retryAfter * 1000);
                console.warn(`‚ö†Ô∏è API: –ï–Ω–¥–ø–æ—ñ–Ω—Ç ${endpointBase} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –Ω–∞ ${retryAfter} —Å–µ–∫—É–Ω–¥`);

                // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                if (typeof showRateLimitProgress === 'function') {
                    showRateLimitProgress(url, retryAfter);
                }

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –ø–æ–º–∏–ª–∫—É –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
                throw {
                    status: 429,
                    message: `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫—É–Ω–¥.`,
                    endpoint: endpointBase,
                    retryAfter: retryAfter,
                    retryTime: Date.now() + (retryAfter * 1000),
                    headers: { 'Retry-After': retryAfter }
                };
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (!response.ok) {
                const errorBody = await response.text().catch(() => '');
                let errorMessage = `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;

                try {
                    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                    const errorJson = JSON.parse(errorBody);
                    if (errorJson.message) {
                        errorMessage = errorJson.message;
                    } else if (errorJson.error) {
                        errorMessage = errorJson.error;
                    }
                } catch (e) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç —è–∫ —î
                }

                throw new Error(errorMessage);
            }

            // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
            try {
                const jsonResponse = await response.json();
                return jsonResponse;
            } catch (jsonError) {
                console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${jsonError.message}`);
                throw new Error('–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            // –û–±–æ–≤'—è–∑–∫–æ–≤–æ –æ—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            if (timeoutId) {
                clearTimeout(timeoutId);
                timeoutId = null;
            }

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }
            }

            // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${requestId}: ${error.message || error}`);

            // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –ø–æ–º–∏–ª–∫–∏ AbortError (—Ç–∞–π–º–∞—É—Ç) –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (error.name === 'AbortError') {
                throw new Error('–ó–∞–ø–∏—Ç –±—É–ª–æ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç');
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
            throw error;
        }
    }

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @returns {number} –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    function getThrottleTime(endpoint) {
        for (const key in REQUEST_THROTTLE) {
            if (endpoint.includes(key)) {
                return REQUEST_THROTTLE[key];
            }
        }
        return REQUEST_THROTTLE.default;
    }

    /**
     * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ API –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é –æ–±–º–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç—É
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @param {string} method - HTTP –º–µ—Ç–æ–¥
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @param {number} retries - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 2) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            if (_globalRateLimited && !options.bypassThrottle) {
                const remainingTime = Math.ceil((_globalRateLimitTime - Date.now()) / 1000);
                if (remainingTime > 0) {
                    console.warn(`üîå API: –ì–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ, –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${remainingTime}—Å`);

                    // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∞–º –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
                    if (endpoint.includes('/raffles') && !endpoint.includes('participate')) {
                        console.log(`üîÑ –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, –Ω–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è`);
                        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                    }
                    // –î–ª—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –∞–±–æ –±–ª–æ–∫—É—î–º–æ
                    else {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        const isUserProfileRequest = endpoint.includes('/user/') &&
                                          !endpoint.includes('/staking') &&
                                          !endpoint.includes('/balance') &&
                                          !endpoint.includes('/claim');

                        // –Ø–∫—â–æ —î –∫–µ—à –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∑–∞–ø–∏—Ç –Ω–µ –≤–∏–º–∞–≥–∞—î —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö
                        if (isUserProfileRequest && _userCache && !options.forceRefresh) {
                            return Promise.resolve({
                                status: 'success',
                                data: _userCache,
                                source: 'cache_global_limit'
                            });
                        }

                        return Promise.reject({
                            status: 'rate_limited',
                            message: `–ì–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—å ${remainingTime}—Å`,
                            retryAfter: _globalRateLimitTime - Date.now()
                        });
                    }
                } else {
                    // –Ø–∫—â–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤, –∑–Ω—ñ–º–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
                    _globalRateLimited = false;
                    _globalRateLimitTime = 0;
                }
            }

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            if (endpoint.includes('participate-raffle')) {
                // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –º–∏ –Ω–µ —Ä–æ–±–∏–º–æ –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —É—á–∞—Å—Ç—å
                const now = Date.now();
                const participationKey = `${method}:${endpoint}:participation`;
                const lastParticipationTime = _lastRequestsByEndpoint[participationKey] || 0;

                // –ë—ñ–ª—å—à —Å—É–≤–æ—Ä–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ - 5 —Å–µ–∫—É–Ω–¥
                if (now - lastParticipationTime < 5000 && !options.bypassThrottle) {
                    const waitTime = Math.ceil((5000 - (now - lastParticipationTime)) / 1000);
                    console.warn(`üîå API: –ù–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –∑–∞—á–µ–∫–∞–π—Ç–µ ${waitTime}—Å`);

                    return Promise.reject({
                        status: 'rate_limited',
                        message: `–ó–∞—á–µ–∫–∞–π—Ç–µ ${waitTime} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é —É—á–∞—Å—Ç—ñ`,
                        retryAfter: 5000 - (now - lastParticipationTime)
                    });
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
                _lastRequestsByEndpoint[participationKey] = now;

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É –Ω–∞ —É—á–∞—Å—Ç—å
                if (data) {
                    if (!data.raffle_id || typeof data.raffle_id !== 'string' || data.raffle_id.length < 10) {
                        console.error('‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É:', data.raffle_id);
                        return Promise.reject({
                            status: 'error',
                            message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É'
                        });
                    }

                    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ entry_count - —Ü—ñ–ª–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0
                    if (data.entry_count) {
                        data.entry_count = parseInt(data.entry_count);
                        if (isNaN(data.entry_count) || data.entry_count <= 0) {
                            data.entry_count = 1;
                        }
                    }
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —á–∏ –∑–∞–ø–∏—Ç—É –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            if ((endpoint.includes('participate-raffle') || endpoint.includes('raffles/')) && data && data.raffle_id) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç UUID
                if (typeof data.raffle_id !== 'string') {
                    data.raffle_id = String(data.raffle_id);
                }

                // –†–µ—Ç–µ–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
                if (!isValidUUID(data.raffle_id)) {
                    console.error(`‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID: ${data.raffle_id}`);
                    return Promise.reject({
                        status: 'error',
                        message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É'
                    });
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ endpoint –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            if (endpoint.includes('raffles/')) {
                const raffleIdMatch = endpoint.match(/raffles\/([^/?]+)/i);
                if (raffleIdMatch && raffleIdMatch[1]) {
                    const raffleId = raffleIdMatch[1];
                    if (!isValidUUID(raffleId)) {
                        console.error(`‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –≤ URL: ${raffleId}`);
                        return Promise.reject({
                            status: 'error',
                            message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É –≤ URL'
                        });
                    }
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const isUserProfileRequest = endpoint.includes('/user/') &&
                                        !endpoint.includes('/staking') &&
                                        !endpoint.includes('/balance') &&
                                        !endpoint.includes('/claim');

            // –§–æ—Ä–º—É—î–º–æ –∫–ª—é—á –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
            const requestKey = `${method}:${endpoint}`;

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è endpoint —á–µ—Ä–µ–∑ rate limiting
            const now = Date.now();
            if (_blockedEndpoints[endpoint] && !options.bypassThrottle) {
                const blockedUntil = _blockedEndpoints[endpoint];

                if (now < blockedUntil) {
                    const remainingTime = Math.ceil((blockedUntil - now) / 1000);
                    console.warn(`üîµ API: –ó–∞–ø–∏—Ç –¥–æ ${endpoint} —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ rate limiting. –ó–∞–ª–∏—à–∏–ª–æ—Å—å ${remainingTime}—Å`);

                    // –î–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–µ—à
                    if (isUserProfileRequest && _userCache && !options.forceRefresh) {
                        return Promise.resolve({
                            status: 'success',
                            data: _userCache,
                            source: 'cache_rate_limited'
                        });
                    }

                    return Promise.reject({
                        status: 'rate_limited',
                        message: `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ${remainingTime} —Å–µ–∫—É–Ω–¥.`,
                        retryAfter: blockedUntil - now
                    });
                }

                // –Ø–∫—â–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
                delete _blockedEndpoints[endpoint];
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –±—É–ª–æ —Ç–∞–∫–æ–≥–æ –∂ –∑–∞–ø–∏—Ç—É –Ω–µ—â–æ–¥–∞–≤–Ω–æ
            const lastRequestTime = _lastRequestsByEndpoint[requestKey] || 0;

            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –¥–æ–∑–≤—ñ–ª –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ user/{userId}/raffles - –º–∏ —Ö–æ—á–µ–º–æ, —â–æ–± —Ü–µ–π –∑–∞–ø–∏—Ç
            // –º–∞–≤ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —ñ –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É–≤–∞–≤—Å—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —É—á–∞—Å—Ç—ñ
            if (!endpoint.includes('/user/') || !endpoint.includes('/raffles')) {
                const throttleTime = getThrottleTime(endpoint);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
                if (now - lastRequestTime < throttleTime && !options.bypassThrottle) {
                    console.warn(`üîå API: –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–æ ${endpoint}, —ñ–≥–Ω–æ—Ä—É—î–º–æ`);

                    // –Ø–∫—â–æ —î –∫–µ—à –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∑–∞–ø–∏—Ç –Ω–µ –≤–∏–º–∞–≥–∞—î —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö
                    if (isUserProfileRequest && _userCache && !options.forceRefresh) {
                        return Promise.resolve({
                            status: 'success',
                            data: _userCache,
                            source: 'cache'
                        });
                    }

                    return Promise.reject({
                        status: 'rate_limited',
                        message: "–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç",
                        retryAfter: throttleTime - (now - lastRequestTime)
                    });
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
            _lastRequestsByEndpoint[requestKey] = now;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ–π –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è
            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            const isParticipationRequest = endpoint.includes('participate-raffle');
            if (_activeEndpoints.has(endpoint) && !options.allowParallel && !isParticipationRequest) {
                console.warn(`üîå API: –ó–∞–ø–∏—Ç –¥–æ ${endpoint} –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è`);

                // –Ø–∫—â–æ —î –∫–µ—à —ñ –∑–∞–ø–∏—Ç –Ω–µ –≤–∏–º–∞–≥–∞—î —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö
                if (isUserProfileRequest && _userCache && !options.forceRefresh) {
                    return {
                        status: 'success',
                        data: _userCache,
                        source: 'cache_parallel'
                    };
                }

                // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ
                if (!options.forceContinue) {
                    return Promise.reject({
                        status: 'parallel_request',
                        message: "–ó–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è",
                        source: 'parallel'
                    });
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
            if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
                console.warn("üîå API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à");

                // –Ø–∫—â–æ —î –∫–µ—à –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if (isUserProfileRequest && _userCache) {
                    return {
                        status: 'success',
                        data: _userCache,
                        source: 'cache_offline'
                    };
                }

                return Promise.reject({
                    status: 'offline',
                    message: "–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω",
                    source: 'offline'
                });
            }

            // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
            _activeEndpoints.add(endpoint);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
            _requestCounter.total++;
            _requestCounter.current++;

            // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
            if (now - _requestCounter.lastReset > 10000) {
                _requestCounter.current = 1;
                _requestCounter.lastReset = now;
            }

            // –Ø–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ - —É–ø–æ–≤—ñ–ª—å–Ω—é—î–º–æ—Å—è
            if (_requestCounter.current > 5 && !options.bypassThrottle) {
                console.warn(`üîå API: –ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ (${_requestCounter.current}), —É–ø–æ–≤—ñ–ª—å–Ω—é—î–º–æ—Å—è`);
                await new Promise(resolve => setTimeout(resolve, 2000));
            }

            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                if (!options.skipTokenCheck && _authToken && _authTokenExpiry) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω, —è–∫—â–æ –≤—ñ–Ω —Å–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è (–º–µ–Ω—à–µ 10 —Ö–≤–∏–ª–∏–Ω)
                    if (_authTokenExpiry < Date.now() + 600000 && !_pendingRequests['refresh-token']) {
                        try {
                            await refreshToken();
                        } catch (tokenError) {
                            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", tokenError);
                        }
                    }
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                const userId = options.skipUserIdCheck ? null : getUserId();

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
                if (!userId && !options.skipUserIdCheck) {
                    throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
                const timestamp = Date.now();

                // –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ø–∏—Ç—É
                let url;

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ endpoint –≤–∂–µ —î –ø–æ–≤–Ω–∏–º URL
                if (endpoint.startsWith('http')) {
                    // Endpoint –≤–∂–µ —î –ø–æ–≤–Ω–∏–º URL - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
                    url = endpoint;
                } else {
                    // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ endpoint –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
                    const normalizedEndpoint = normalizeEndpoint(endpoint);

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
                    const hasQuery = normalizedEndpoint.includes('?');

                    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π URL
                    url = `${API_BASE_URL}/${normalizedEndpoint}${hasQuery ? '&' : '?'}t=${timestamp}`;
                }

                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
                if (_debugMode) {
                    console.log(`üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø–∏—Ç—É –Ω–∞ ${url}`);
                    if (data) {
                        console.log(`üì¶ –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:`, data);
                    }
                }

                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
                let response;
                let errorResponse;
                let lastError;

                // –°–ø—Ä–æ–±–∏ –∑–∞–ø–∏—Ç—É –∑ exponential backoff
                for (let attempt = 0; attempt < retries; attempt++) {
                    try {
                        // –Ø–∫—â–æ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ —É—á–∞—Å—Ç—å –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, —ñ —Ü–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ - –¥–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
                        if (isParticipationRequest && attempt > 0) {
                            const delayTime = Math.pow(2, attempt) * 1000; // 2, 4, 8 —Å–µ–∫—É–Ω–¥...
                            await new Promise(resolve => setTimeout(resolve, delayTime));
                            console.log(`üîÑ API: –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ #${attempt+1} –¥–ª—è –∑–∞–ø–∏—Ç—É —É—á–∞—Å—Ç—ñ –ø—ñ—Å–ª—è ${delayTime}–º—Å –∑–∞—Ç—Ä–∏–º–∫–∏`);
                        }

                        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ rawApiRequest
                        response = await rawApiRequest(url, method, data, {
                            ...options,
                            timeout: isParticipationRequest ? 20000 : (options.timeout || 15000), // –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ
                            bypassThrottle: options.bypassThrottle || (attempt > 0) || isParticipationRequest // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±–∞—Ö
                        });

                        // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É
                        if (response && response.status !== 'error') break;

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É
                        errorResponse = response;
                        lastError = new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');

                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
                        if (isParticipationRequest &&
                            response.status === 'error' &&
                            response.message &&
                            response.message.includes('–∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤')) {
                            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
                            _globalRateLimited = true;
                            _globalRateLimitTime = Date.now() + 30000;

                            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                            try {
                                localStorage.setItem('winix_rate_limited_until', _globalRateLimitTime.toString());
                            } catch(e) { /* —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ */ }

                            throw {
                                status: 429,
                                message: response.message,
                                globalRateLimit: true,
                                retryAfter: 30
                            };
                        }

                        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                        if (attempt < retries - 1) {
                            const delay = Math.pow(2, attempt) * 1000; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞: 1—Å, 2—Å, 4—Å...
                            await new Promise(resolve => setTimeout(resolve, delay));
                        }
                    } catch (fetchError) {
                        lastError = fetchError;

                        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è 429 (Too Many Requests)
                        if (fetchError.status === 429) {
                            // –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–±–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                            const retryAfter = fetchError.headers?.['Retry-After'] || 30;
                            const waitTime = parseInt(retryAfter);

                            console.log(`‚è≥ –û—Ç—Ä–∏–º–∞–Ω–æ 429 (Too Many Requests), —á–µ–∫–∞—î–º–æ ${retryAfter}—Å...`);

                            // –ë–ª–æ–∫—É—î–º–æ endpoint –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å
                            _blockedEndpoints[endpoint] = Date.now() + (waitTime * 1000);

                            // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –û–±–º–µ–∂—É—î–º–æ –ª–∏—à–µ —É—á–∞—Å—Ç—å –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö, –∞ –Ω–µ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏
                            if (isParticipationRequest) {
                                // –ó–∞–º—ñ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è, –±–ª–æ–∫—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ —É—á–∞—Å—Ç—å
                                _blockedEndpoints['/participate-raffle'] = Date.now() + (waitTime * 1000);

                                // –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è
                                // –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π –∫–æ–¥:
                                // _globalRateLimited = true;
                                // _globalRateLimitTime = Date.now() + (waitTime * 1000);
                                // localStorage.setItem('winix_rate_limited_until', _globalRateLimitTime.toString());

                                console.log(`‚ö†Ô∏è –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ –Ω–∞ ${waitTime} —Å–µ–∫—É–Ω–¥`);
                            }

                            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                            if (typeof showRateLimitProgress === 'function') {
                                showRateLimitProgress(endpoint, waitTime);
                            }

                            throw {
                                status: 'rate_limited',
                                message: `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫—É–Ω–¥.`,
                                retryAfter: waitTime * 1000
                            };
                        }

                        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è 401 –ø–æ–º–∏–ª–∫–∏ - —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
                        if (fetchError.status === 401 && !options.skipTokenCheck && attempt === 0) {
                            try {
                                await refreshToken();
                                // –ü—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                                continue;
                            } catch (tokenError) {
                                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –ø—Ä–∏ 401:", tokenError);
                            }
                        }

                        // –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
                        if (attempt === retries - 1) {
                            throw fetchError;
                        }

                        // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                        const delay = Math.pow(2, attempt) * 1000;
                        await new Promise(resolve => setTimeout(resolve, delay));
                    }
                }

                // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±
                if (!response || response.status === 'error') {
                    throw lastError || new Error(errorResponse?.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ
                _connectionState.isConnected = true;
                _connectionState.lastSuccessTime = Date.now();
                _connectionState.failedAttempts = 0;

                // –Ø–∫—â–æ —Ü–µ –∑–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                if (isUserProfileRequest && response.status === 'success' && response.data) {
                    _userCache = response.data;
                    _userCacheTime = now;

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                    try {
                        if (_userCache.balance !== undefined) {
                            localStorage.setItem('userTokens', _userCache.balance.toString());
                            localStorage.setItem('winix_balance', _userCache.balance.toString());
                        }

                        if (_userCache.coins !== undefined) {
                            localStorage.setItem('userCoins', _userCache.coins.toString());
                            localStorage.setItem('winix_coins', _userCache.coins.toString());
                        }

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                        if (_userCache.notifications_enabled !== undefined) {
                            localStorage.setItem('notifications_enabled', _userCache.notifications_enabled.toString());
                        }

                        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        document.dispatchEvent(new CustomEvent('user-data-updated', {
                            detail: _userCache,
                            source: 'api.js'
                        }));
                    } catch (e) {
                        console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                    }
                }

                return response;
            } catch (error) {
                // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
                _requestCounter.errors++;

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                _connectionState.failedAttempts++;

                // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∑–∞–ø–∏—Ç—É
                _activeEndpoints.delete(endpoint);

                // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Ç—Ä–∏–≤–∞–≤ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ, –æ—á–∏—â–∞—î–º–æ —ñ–Ω—à—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∑–∞–≤–∏—Å–∞—é—á—ñ –∑–∞–ø–∏—Ç–∏
                if (now - lastRequestTime > 15000) {
                    resetPendingRequests();
                }

                // –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
                if (error.status === 'rate_limited' || error.status === 429) {
                    // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ rate_limited –∞–±–æ 429, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ
                    if (isParticipationRequest) {
                        const retryTime = error.retryAfter || 30000;
                        _globalRateLimited = true;
                        _globalRateLimitTime = Date.now() + retryTime;

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                        localStorage.setItem('winix_rate_limited_until', _globalRateLimitTime.toString());
                    }

                    return Promise.reject(error); // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–∞–ª—ñ
                }

                // –ó–≤–∏—á–∞–π–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
                console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message || error);

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                document.dispatchEvent(new CustomEvent('api-error', {
                    detail: {
                        error,
                        endpoint,
                        method
                    }
                }));

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ suppressErrors
                if (options.suppressErrors) {
                    return {
                        status: 'error',
                        message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                        source: 'api_error'
                    };
                }

                throw error;
            } finally {
                // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö
                _activeEndpoints.delete(endpoint);
            }
        } catch (error) {
            console.error(`‚ùå API: –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error);

            if (options.suppressErrors) {
                return {
                    status: 'error',
                    message: error.message || '–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                    source: 'global_error'
                };
            }

            throw error;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
     * –ó–∞–º—ñ–Ω—é—î –∫—ñ–ª—å–∫–∞ –æ–∫—Ä–µ–º–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —Ç–∞ –ø—Ä–∏—à–≤–∏–¥—à—É—î –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ñ–∑ –¥–∞–Ω–∏–º–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    async function loadInitData(forceRefresh = false) {
        try {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ —ñ –Ω–µ –≤–∏–º–∞–≥–∞—î—Ç—å—Å—è –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
                console.log("üîµ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —à–≤–∏–¥–∫–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó");
                return {status: 'success', data: _userCache, source: 'cache'};
            }

            console.log("üîÑ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

            // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –Ω–æ–≤–æ–≥–æ API
            const response = await apiRequest(`user/${userId}/init_data`, 'GET', null, {
                timeout: 8000, // –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
                suppressErrors: true, // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                bypassThrottle: true // –í–∞–∂–ª–∏–≤–∏–π –∑–∞–ø–∏—Ç, —è–∫–∏–π –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –æ–±–º–µ–∂—É–≤–∞—Ç–∏—Å—å
            });

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (response && response.status === 'success' && response.data) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                _userCache = response.data;
                _userCacheTime = Date.now();

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –¥–∞–Ω—ñ –≤ localStorage –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–¥–æ—Å—Ç—É–ø—É
                try {
                    if (_userCache.balance !== undefined) {
                        localStorage.setItem('userTokens', _userCache.balance.toString());
                        localStorage.setItem('winix_balance', _userCache.balance.toString());
                    }

                    if (_userCache.coins !== undefined) {
                        localStorage.setItem('userCoins', _userCache.coins.toString());
                        localStorage.setItem('winix_coins', _userCache.coins.toString());
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    if (_userCache.notifications_enabled !== undefined) {
                        localStorage.setItem('notifications_enabled', _userCache.notifications_enabled.toString());
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π
                    if (_userCache.id) {
                        localStorage.setItem('telegram_user_id', _userCache.id.toString());
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                }

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                document.dispatchEvent(new CustomEvent('user-data-loaded', {
                    detail: _userCache
                }));

                console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${_userCache.username}`);
                return {status: 'success', data: _userCache};
            } else {
                throw new Error(response?.message || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö");
            }
        } catch (error) {
            console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:", error);

            // –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ –∫–µ—à—É, —è–∫—â–æ —î
            if (_userCache) {
                return {status: 'success', data: _userCache, source: 'cache_after_error'};
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –æ–∫—Ä–µ–º–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏ —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            try {
                console.log("üîÑ –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Å–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ–∫—Ä–µ–º–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏");
                const [profileResponse, balanceResponse] = await Promise.all([
                    apiRequest(`user/${getUserId()}`, 'GET', null, {suppressErrors: true}),
                    apiRequest(`user/${getUserId()}/balance`, 'GET', null, {suppressErrors: true})
                ]);

                const fallbackData = {
                    id: getUserId(),
                    username: profileResponse?.data?.username || "WINIX User",
                    balance: balanceResponse?.data?.balance || 0,
                    coins: balanceResponse?.data?.coins || 0,
                    source: 'fallback_requests'
                };

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –≤ –∫–µ—à
                _userCache = fallbackData;
                _userCacheTime = Date.now();

                return {status: 'success', data: fallbackData, source: 'fallback_requests'};
            } catch (fallbackError) {
                console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É:", fallbackError);

                // –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—É–±—ñ–∂ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                const localData = {
                    id: getUserId() || localStorage.getItem('telegram_user_id') || 'unknown',
                    username: "WINIX User",
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0'),
                    source: 'local_storage_fallback'
                };

                return {status: 'success', data: localData, source: 'local_storage_fallback'};
            }
        }
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    function updateBalanceDisplay(balanceData = null) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –±–µ—Ä–µ–º–æ –∑ –∫–µ—à—É
        const data = balanceData || (_userCache || {});

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —É –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
        if (data.coins !== undefined) {
            const coinsElements = document.querySelectorAll('#user-coins, .user-coins, [data-balance-type="coins"]');
            coinsElements.forEach(element => {
                if (element) element.textContent = data.coins;
            });
        }

        if (data.balance !== undefined) {
            const balanceElements = document.querySelectorAll('#user-tokens, .user-tokens, [data-balance-type="tokens"]');
            balanceElements.forEach(element => {
                if (element) element.textContent = data.balance;
            });
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏
     * @returns {Promise<Object>} –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(forceRefresh = false) {
        const isSettingsPage = window.location.pathname.includes('general.html');

        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ loadInitData –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        if (typeof loadInitData === 'function') {
            try {
                const initDataResult = await loadInitData(forceRefresh);

                // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ, —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ —ó—Ö –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º
                if (initDataResult.status === 'success' && initDataResult.data) {
                    const formattedData = {
                        ...initDataResult.data,
                        telegram_id: initDataResult.data.id || initDataResult.data.telegram_id
                    };

                    return {
                        status: 'success',
                        data: formattedData,
                        source: initDataResult.source || 'init_data'
                    };
                }
            } catch (initError) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è loadInitData, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:", initError);
                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥—É —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            }
        }

        // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å—Ç–∞—Ä–æ—é –ª–æ–≥—ñ–∫–æ—é, —è–∫—â–æ loadInitData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
        if (typeof navigator.onLine !== 'undefined' && !navigator.onLine && !forceRefresh) {
            console.warn("üîå API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ");

            // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
            if (_userCache) {
                return {status: 'success', data: _userCache, source: 'cache_offline'};
            }

            // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏–º—É–ª—å–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
            if (isSettingsPage) {
                return {
                    status: 'success',
                    data: DUMMY_USER_DATA,
                    source: 'simulated_offline'
                };
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
            return {
                status: 'success',
                data: {
                    telegram_id: getUserId() || 'unknown',
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0')
                },
                source: 'local_storage_offline'
            };
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
            return {status: 'success', data: _userCache, source: 'cache'};
        }

        const id = getUserId();
        if (!id) {
            if (isSettingsPage) {
                // –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏–º—É–ª—å–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
                return {
                    status: 'success',
                    data: DUMMY_USER_DATA,
                    source: 'simulated'
                };
            }
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const result = await apiRequest(`user/${id}`, 'GET', null, {
                timeout: 5000, // –ó–º–µ–Ω—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
                suppressErrors: isSettingsPage // –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            if (result.status === 'success' && result.data) {
                _userCache = result.data;
                _userCacheTime = Date.now();

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                try {
                    if (_userCache.balance !== undefined) {
                        localStorage.setItem('userTokens', _userCache.balance.toString());
                        localStorage.setItem('winix_balance', _userCache.balance.toString());
                    }

                    if (_userCache.coins !== undefined) {
                        localStorage.setItem('userCoins', _userCache.coins.toString());
                        localStorage.setItem('winix_coins', _userCache.coins.toString());
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    if (_userCache.notifications_enabled !== undefined) {
                        localStorage.setItem('notifications_enabled', _userCache.notifications_enabled.toString());
                    }

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    document.dispatchEvent(new CustomEvent('user-data-updated', {
                        detail: _userCache,
                        source: 'api.js'
                    }));
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                }
            }

            return result;
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);

            // –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏–º—É–ª—å–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            if (isSettingsPage) {
                if (_userCache) {
                    return {status: 'success', data: _userCache, source: 'cache_after_error'};
                }

                return {
                    status: 'success',
                    data: DUMMY_USER_DATA,
                    source: 'simulated'
                };
            }

            // –Ø–∫—â–æ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
            if (_userCache) {
                return {status: 'success', data: _userCache, source: 'cache_after_error'};
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ localStorage
            const localData = {
                telegram_id: id,
                balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                coins: parseInt(localStorage.getItem('userCoins') || '0')
            };

            return {
                status: 'success',
                data: localData,
                source: 'local_storage_fallback'
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {boolean} useCache - –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ —î
     * @returns {Promise<Object>} –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance(useCache = true) {
        // –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ loadInitData –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        if (useCache && typeof loadInitData === 'function' && _userCache) {
            // –Ø–∫—â–æ —É –Ω–∞—Å –≤–∂–µ —î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑ loadInitData, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —ó—Ö
            if (_userCache && _userCache.balance !== undefined && _userCache.coins !== undefined) {
                console.log("üîµ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É");
                return {
                    status: 'success',
                    data: {
                        balance: _userCache.balance,
                        coins: _userCache.coins
                    },
                    source: 'init_data_cache'
                };
            }

            try {
                // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
                const initResult = await loadInitData(false);
                if (initResult.status === 'success' && initResult.data) {
                    return {
                        status: 'success',
                        data: {
                            balance: initResult.data.balance || 0,
                            coins: initResult.data.coins || 0
                        },
                        source: 'init_data'
                    };
                }
            } catch (initError) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —á–µ—Ä–µ–∑ loadInitData:", initError);
                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º
            }
        }

        // –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥, —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–µ—à –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
        if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
            console.warn("üîå API: –ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –±–∞–ª–∞–Ω—Å—É");

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
            return {
                status: 'success',
                data: {
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0')
                },
                source: 'local_storage_offline'
            };
        }

        try {
            const result = await apiRequest(`user/${userId}/balance`);

            // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤—ñ –¥–∞–Ω—ñ, –æ–Ω–æ–≤–∏–º–æ –∫–µ—à —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            if (result.status === 'success' && result.data && _userCache) {
                _userCache.balance = result.data.balance;
                _userCache.coins = result.data.coins;
                _userCacheTime = Date.now();
            }

            return result;
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ localStorage –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return {
                status: 'success',
                data: {
                    balance: parseFloat(localStorage.getItem('userTokens') || '0'),
                    coins: parseInt(localStorage.getItem('userCoins') || '0')
                },
                source: 'local_storage_fallback'
            };
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingData() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (_stakingCache && (Date.now() - _stakingCacheTime < STAKING_CACHE_TTL)) {
            return {status: 'success', data: _stakingCache, source: 'cache'};
        }

        return apiRequest(`user/${userId}/staking`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingHistory() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`user/${userId}/staking/history`);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    async function createStaking(amount, period) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        if (![7, 14, 28].includes(period)) {
            throw new Error("–ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–æ–∂–µ –±—É—Ç–∏ 7, 14 –∞–±–æ 28 –¥–Ω—ñ–≤");
        }

        return apiRequest(`user/${userId}/staking`, 'POST', {
            stakingAmount: parseInt(amount),
            period: period
        });
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     */
    async function addToStaking(amount, stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingData = await getStakingData();
                if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                    throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
                targetStakingId = stakingData.data.stakingId;
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(`user/${userId}/staking/${targetStakingId}`, 'PUT', {
            additionalAmount: parseInt(amount)
        });
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     */
    async function cancelStaking(stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ API
                const stakingData = await getStakingData();
                if (stakingData.status === 'success' && stakingData.data && stakingData.data.hasActiveStaking) {
                    targetStakingId = stakingData.data.stakingId;
                } else {
                    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    if (stakingDataStr) {
                        try {
                            const localData = JSON.parse(stakingDataStr);
                            if (localData && localData.stakingId) {
                                targetStakingId = localData.stakingId;
                            }
                        } catch (e) {
                            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage:", e);
                        }
                    }
                }

                if (!targetStakingId) {
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(`user/${userId}/staking/${targetStakingId}/cancel`, 'POST', {
            confirm: true,
            timestamp: Date.now()
        });
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    async function calculateExpectedReward(amount, period) {
        // –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫, –±–µ–∑ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ API
        // –¶–µ –Ω–∞–±–∞–≥–∞—Ç–æ —à–≤–∏–¥—à–µ —ñ –Ω–µ —Å—Ç–≤–æ—Ä—é—î –∑–∞–π–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        amount = parseInt(amount) || 0;
        period = parseInt(period) || 14;

        if (amount <= 0) {
            return { status: 'success', data: { reward: 0 } };
        }

        if (![7, 14, 28].includes(period)) {
            period = 14; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }

        // –í—ñ–¥—Å–æ—Ç–∫–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        const rewardRates = { 7: 4, 14: 9, 28: 15 };
        const rewardPercent = rewardRates[period] || 9;
        const reward = (amount * rewardPercent) / 100;

        return {
            status: 'success',
            data: {
                reward: parseFloat(reward.toFixed(2)),
                rewardPercent: rewardPercent,
                amount: amount,
                period: period,
                source: 'local_calculation'
            }
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {number} limit - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     */
    async function getTransactions(limit = 100) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();
        if (!userId) {
            return {
                status: 'error',
                message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            };
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä—É
        try {
            return await apiRequest(`user/${userId}/transactions?limit=${limit}`, 'GET', null, {
                suppressErrors: true
            });
        } catch (error) {
            console.warn("üîå API: –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:", error);
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤, –æ—Å–∫—ñ–ª—å–∫–∏ API —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ
            return {
                status: 'success',
                data: [], // –ü—É—Å—Ç–∏–π –º–∞—Å–∏–≤
                message: '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            };
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {object} settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async function updateSettings(settings) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            return await apiRequest(`user/${userId}/settings`, 'POST', settings);
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ API –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
            if (settings.notifications_enabled !== undefined) {
                localStorage.setItem('notifications_enabled', settings.notifications_enabled.toString());
            }

            // –Ü–º—ñ—Ç—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return {
                status: 'success',
                message: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ',
                source: 'local'
            };
        }
    }

    /**
     * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     */
    function forceCleanupRequests() {
        _lastRequestsByEndpoint = {};
        _activeEndpoints.clear();
        _pendingRequests = {};
        _blockedEndpoints = {};
        console.log("üîå API: –ü—Ä–∏–º—É—Å–æ–≤–æ –æ—á–∏—â–µ–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤");
        return true;
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É API
     */
    function clearCache() {
        _userCache = null;
        _userCacheTime = 0;
        _stakingCache = null;
        _stakingCacheTime = 0;
        _lastRequestsByEndpoint = {};
        _blockedEndpoints = {};
        _globalRateLimited = false;
        _globalRateLimitTime = 0;
        console.log("üîå API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ");
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async function reconnect() {
        if (_connectionState.failedAttempts > _connectionState.maxRetries) {
            console.error("‚ùå API: –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–± –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è");
            return false;
        }

        console.log("üîÑ API: –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è...");

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∑–∞–ø–∏—Ç—ñ–≤
        forceCleanupRequests();

        // –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
        try {
            await refreshToken();
        } catch (error) {
            console.warn("‚ö†Ô∏è API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", error);
        }

        // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try {
            await getUserData(true);

            // –£—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            _connectionState.isConnected = true;
            _connectionState.lastSuccessTime = Date.now();
            _connectionState.failedAttempts = 0;

            console.log("‚úÖ API: –ó'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");
            return true;
        } catch (error) {
            console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è:", error);
            return false;
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
    try {
        const savedLimitTime = localStorage.getItem('winix_rate_limited_until');
        if (savedLimitTime) {
            const limitTime = parseInt(savedLimitTime);
            if (limitTime > Date.now()) {
                _globalRateLimited = true;
                _globalRateLimitTime = limitTime;
                console.warn(`üîå API: –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–æ ${new Date(limitTime).toLocaleTimeString()}`);

                // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                const remainingSeconds = Math.ceil((limitTime - Date.now()) / 1000);
                if (remainingSeconds > 1) {
                    showRateLimitProgress('global', remainingSeconds);
                }
            } else {
                localStorage.removeItem('winix_rate_limited_until');
            }
        }
    } catch(e) {
        console.warn("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ:", e);
    }

    // ======== –ï–ö–°–ü–û–†–¢ API ========

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.WinixAPI = {
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: {
            baseUrl: API_BASE_URL,
            version: '1.3.1',
            environment: API_BASE_URL.includes('localhost') ? 'development' : 'production'
        },

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },

        // –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        apiRequest,
        getUserId,
        getAuthToken,
        refreshToken,
        clearCache,
        forceCleanupRequests,
        reconnect,
        isValidUUID,
        safeUpdateValue,

        // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserData,
        getBalance,
        updateSettings,
        loadInitData,
        updateBalanceDisplay,

        // –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        getStakingData,
        getStakingHistory,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,

        // –§—É–Ω–∫—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        getTransactions,

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        showRateLimitProgress
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.apiRequest = apiRequest;
    window.getUserId = getUserId;

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    window.addEventListener('online', () => {
        console.log("üîÑ API: –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ, —Å–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
        reconnect();
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö
    window.addEventListener('resize', () => {
        // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –ø—ñ–¥ —Ä—ñ–∑–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –µ–∫—Ä–∞–Ω—É
    });

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    async function autoLoadInitialData() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const needsUserData = document.getElementById('user-coins') ||
                                document.getElementById('user-tokens') ||
                                document.querySelector('.header');

            if (needsUserData) {
                console.log("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...");
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const userId = getUserId();
                if (userId) {
                    const initData = await loadInitData();

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
                    if (initData.status === 'success') {
                        updateBalanceDisplay(initData.data);

                        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        const userIdElement = document.getElementById('header-user-id');
                        if (userIdElement && initData.data.id) {
                            userIdElement.textContent = initData.data.id;
                        }

                        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –∞–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        const avatarElement = document.getElementById('profile-avatar');
                        if (avatarElement && initData.data.username) {
                            avatarElement.textContent = initData.data.username.charAt(0).toUpperCase();
                        }
                    }
                }
            }
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
        }
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    document.addEventListener('DOMContentLoaded', autoLoadInitialData);

    // –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–¥—Ä–∞–∑—É
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        autoLoadInitialData();
    }

    console.log(`‚úÖ API: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (URL: ${API_BASE_URL})`);
})();