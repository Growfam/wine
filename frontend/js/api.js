/**
 * tasks-api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ health check —Ç–∞ –∫—Ä–∞—â–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
 * @version 1.3.0
 */

(function() {
    'use strict';
    let endpoint = ""; // –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ–≥–æ API –º–æ–¥—É–ª—è –∑ health check");

    // ======== API-–®–õ–Ø–•–ò ========

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    const API_PATHS = {
        // Health check
        HEALTH: 'health',
        PING: 'ping',

        // –ó–∞–≤–¥–∞–Ω–Ω—è
       TASKS: {
            ALL: 'quests/tasks',
            BY_TYPE: (type) => `quests/tasks/${type}`,
            SOCIAL: 'quests/tasks/social',
            LIMITED: 'quests/tasks/limited',
            PARTNER: 'quests/tasks/partner',
            REFERRAL: 'quests/tasks/referral',
            DETAILS: (taskId) => `quests/tasks/${taskId}/details`,
            START: (taskId) => `quests/tasks/${taskId}/start`,
            VERIFY: (taskId) => `quests/tasks/${taskId}/verify`,
            PROGRESS: (taskId) => `quests/tasks/${taskId}/progress`
        },

        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —à–ª—è—Ö–∏
        USER: {
            DATA: (userId) => `user/${userId}`,
            BALANCE: (userId) => `user/${userId}/balance`,
            TASKS: (userId) => `user/${userId}/tasks`,
            PROGRESS: (userId) => `user/${userId}/progress`,
            TASK_STATUS: (userId, taskId) => `user/${userId}/tasks/${taskId}/status`,
            SETTINGS: (userId) => `user/${userId}/settings`
        },

        // –©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
        DAILY_BONUS: {
            STATUS: (userId) => `user/${userId}/daily-bonus`,
            CLAIM: (userId) => `user/${userId}/claim-daily-bonus`,
            STREAK: (userId) => `user/${userId}/claim-streak-bonus`,
            HISTORY: (userId) => `user/${userId}/bonus-history`
        },

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        STAKING: {
            DATA: (userId) => `user/${userId}/staking`,
            HISTORY: (userId) => `user/${userId}/staking/history`,
            CANCEL: (userId, stakingId) => `user/${userId}/staking/${stakingId}/cancel`
        },

        // –Ü–Ω—à—ñ
        AUTH: {
            REFRESH_TOKEN: 'auth/refresh-token'
        },

        // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        TRANSACTIONS: (userId) => `user/${userId}/transactions`
    };

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ë–∞–∑–æ–≤–∏–π URL - –±–µ–∑ /api –Ω–∞ –∫—ñ–Ω—Ü—ñ!
    const API_BASE_URL = (() => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        if (window.WinixConfig && window.WinixConfig.apiBaseUrl) {
            // –í–∏–¥–∞–ª—è—î–º–æ /api —è–∫—â–æ –≤—ñ–Ω —î –Ω–∞ –∫—ñ–Ω—Ü—ñ
            let url = window.WinixConfig.apiBaseUrl;
            return url.endsWith('/api') ? url.slice(0, -4) : url;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        const hostname = window.location.hostname;

        // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            // –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä—Ç 8080
            return `http://${hostname}:8080`;
        } else if (hostname.includes('testenv') || hostname.includes('staging')) {
            // –¢–µ—Å—Ç–æ–≤—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            return `https://${hostname}`;
        } else {
            // –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
            return 'https://winixbot.com';
        }
    })();

    // –°—Ç–∞–Ω API
    let _apiState = {
        isHealthy: false,
        lastHealthCheck: 0,
        healthCheckInterval: null,
        healthCheckInProgress: false,
        consecutiveFailures: 0,
        maxFailures: 3
    };

    // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    let _debugMode = false; // –í–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let _userCache = null;
    let _userCacheTime = 0;
    const USER_CACHE_TTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    let _stakingCache = null;
    let _stakingCacheTime = 0;
    const STAKING_CACHE_TTL = 180000; // 3 —Ö–≤–∏–ª–∏–Ω–∏

    // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–º–∏
    let _pendingRequests = {};
    let _activeEndpoints = new Set();
    let _blockedEndpoints = {}; // –ù–æ–≤–∏–π –æ–±'—î–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–ª–æ–∫–æ–≤–∞–Ω–∏–º–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞–º–∏

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
    let _lastRequestsByEndpoint = {};

    // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏
    const REQUEST_THROTTLE = {
        '/user/': 8000,
        '/staking': 10000,
        '/balance': 6000,
        '/transactions': 15000,
        '/participate-raffle': 5000,
        'default': 5000
    };

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
    let _requestCounter = {
        total: 0,
        errors: 0,
        current: 0,
        lastReset: Date.now()
    };

    // –°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
    let _connectionState = {
        isConnected: true,
        lastSuccessTime: Date.now(),
        failedAttempts: 0,
        maxRetries: 5
    };

    // –¢–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    let _authToken = null;
    let _authTokenExpiry = 0;

    // ======== HEALTH CHECK –§–£–ù–ö–¶–Ü–á ========

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
     */
    async function checkApiHealth() {
        if (_apiState.healthCheckInProgress) {
            console.log("üîå API: Health check –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
            return _apiState.isHealthy;
        }

        _apiState.healthCheckInProgress = true;
        console.log("üè• API: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API...");

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

            const response = await fetch(`${API_BASE_URL}/api/${API_PATHS.HEALTH}`, {
                method: 'GET',
                signal: controller.signal,
                headers: {
                    'Accept': 'application/json'
                }
            });

            clearTimeout(timeoutId);

            if (response.ok) {
                const data = await response.json().catch(() => ({ status: 'ok' }));

                _apiState.isHealthy = true;
                _apiState.lastHealthCheck = Date.now();
                _apiState.consecutiveFailures = 0;
                _connectionState.isConnected = true;
                _connectionState.lastSuccessTime = Date.now();

                console.log("‚úÖ API: –°–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤–∏–π", data);
                return true;
            } else {
                throw new Error(`Health check failed: ${response.status}`);
            }

        } catch (error) {
            console.error("‚ùå API: Health check –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π:", error.message);

            _apiState.isHealthy = false;
            _apiState.consecutiveFailures++;
            _connectionState.isConnected = false;

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            if (_apiState.consecutiveFailures >= _apiState.maxFailures) {
                showServerUnavailableMessage();
            }

            return false;
        } finally {
            _apiState.healthCheckInProgress = false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    function showServerUnavailableMessage() {
        console.warn("‚ö†Ô∏è API: –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞");

        // –ü–æ–∫–∞–∑—É—î–º–æ banner –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        let banner = document.getElementById('server-unavailable-banner');
        if (!banner) {
            banner = document.createElement('div');
            banner.id = 'server-unavailable-banner';
            banner.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                background: #e74c3c;
                color: white;
                text-align: center;
                padding: 15px;
                z-index: 10000;
                font-size: 14px;
                font-weight: 500;
                border-bottom: 3px solid #c0392b;
            `;
            banner.innerHTML = `
                <div>‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</div>
                <div style="font-size: 12px; margin-top: 5px; opacity: 0.9;">
                    –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è–º –ø—Ä–æ–±–ª–µ–º–∏
                </div>
            `;
            document.body.insertBefore(banner, document.body.firstChild);
        }

        // –í—ñ–±—Ä–∞—Ü—ñ—è —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (navigator.vibrate) {
            navigator.vibrate([200, 100, 200]);
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    function hideServerUnavailableMessage() {
        const banner = document.getElementById('server-unavailable-banner');
        if (banner) {
            banner.remove();
            console.log("‚úÖ API: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ");
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è
     */
    function startHealthCheck() {
        console.log("üè• API: –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è");

        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if (_apiState.healthCheckInterval) {
            clearInterval(_apiState.healthCheckInterval);
        }

        // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        checkApiHealth();

        // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
        _apiState.healthCheckInterval = setInterval(async () => {
            const isHealthy = await checkApiHealth();

            if (isHealthy && _apiState.consecutiveFailures === 0) {
                hideServerUnavailableMessage();
            }
        }, 30000);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
     */
    async function ensureApiReady() {
        // –Ø–∫—â–æ health check –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π (–±—ñ–ª—å—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏)
        const healthCheckAge = Date.now() - _apiState.lastHealthCheck;
        if (healthCheckAge > 60000 || !_apiState.isHealthy) {
            console.log("üîç API: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å API...");
            const isHealthy = await checkApiHealth();

            if (!isHealthy) {
                throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
            }
        }

        return true;
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
     */
    function getUserId() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
            function isValidId(id) {
                return id &&
                       id !== 'undefined' &&
                       id !== 'null' &&
                       id !== undefined &&
                       id !== null &&
                       typeof id !== 'function' &&
                       id.toString().trim() !== '';
            }

            // 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    if (window.Telegram.WebApp.initDataUnsafe &&
                        window.Telegram.WebApp.initDataUnsafe.user &&
                        window.Telegram.WebApp.initDataUnsafe.user.id) {

                        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();

                        if (isValidId(tgUserId)) {
                            try {
                                localStorage.setItem('telegram_user_id', tgUserId);
                            } catch (e) {}

                            return tgUserId;
                        }
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
                }
            }

            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            try {
                const localId = localStorage.getItem('telegram_user_id');
                if (isValidId(localId)) {
                    return localId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage:", e);
            }

            // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
            try {
                const userIdElement = document.getElementById('user-id');
                if (userIdElement && userIdElement.textContent) {
                    const domId = userIdElement.textContent.trim();
                    if (isValidId(domId)) {
                        try {
                            localStorage.setItem('telegram_user_id', domId);
                        } catch (e) {}

                        return domId;
                    }
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ DOM:", e);
            }

            // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
                if (isValidId(urlId)) {
                    try {
                        localStorage.setItem('telegram_user_id', urlId);
                    } catch (e) {}

                    return urlId;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ URL:", e);
            }

            // ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     * @returns {string|null} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ null
     */
    function getAuthToken() {
        try {
            const now = Date.now();

            // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É –≤ –ø–∞–º'—è—Ç—ñ
            if (_authToken && _authTokenExpiry > now) {
                return _authToken;
            }

            // 2. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ StorageUtils, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            let token = null;
            let tokenExpiry = 0;

            if (window.StorageUtils) {
                token = window.StorageUtils.getItem('auth_token');
                tokenExpiry = parseInt(window.StorageUtils.getItem('auth_token_expiry') || '0');
            } else {
                // 3. –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ localStorage
                token = localStorage.getItem('auth_token');
                tokenExpiry = parseInt(localStorage.getItem('auth_token_expiry') || '0');
            }

            if (token && typeof token === 'string' && token.length > 5) {
                if (tokenExpiry > now) {
                    _authToken = token;
                    _authTokenExpiry = tokenExpiry;
                    return token;
                }

                // –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                if (!_authToken) {
                    _authToken = token;
                }
            }

            // 4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ —Ç–æ–∫–µ–Ω—É
            if (window.WinixConfig && window.WinixConfig.authToken) {
                _authToken = window.WinixConfig.authToken;
                return _authToken;
            }

            // 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlToken = urlParams.get('token') || urlParams.get('auth_token');
                if (urlToken && urlToken.length > 5) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
                    _authToken = urlToken;

                    if (window.StorageUtils) {
                        window.StorageUtils.setItem('auth_token', urlToken);
                    } else {
                        localStorage.setItem('auth_token', urlToken);
                    }

                    return urlToken;
                }
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ URL:", e);
            }

            return null;
        } catch (e) {
            console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
            return null;
        }
    }

    /**
     * –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ä—è–¥–æ–∫ –ø–µ–≤–Ω–∏–π –ø—ñ–¥—Ä—è–¥–æ–∫
     * @param {string|undefined} str - –†—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @param {string} substring - –ü—ñ–¥—Ä—è–¥–æ–∫, —è–∫–∏–π —à—É–∫–∞—î–º–æ
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function safeIncludes(str, substring) {
        // –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ includes –∑ –æ–±—Ä–æ–±–∫–æ—é undefined
        if (!str || typeof str !== 'string') return false;
        return str.includes(substring);
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è API endpoint –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ URL
     * @param {string} endpoint - –≤—Ö—ñ–¥–Ω–∏–π endpoint
     * @returns {string} –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π endpoint
     */
    function normalizeEndpoint(endpoint) {
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ undefined
        if (!endpoint) return 'api';

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ endpoint —î —Ñ—É–Ω–∫—Ü—ñ—î—é —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ó—ó, —è–∫—â–æ —Ü–µ —Ç–∞–∫
        if (typeof endpoint === 'function') {
            try {
                endpoint = endpoint();
                // –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ undefined –∞–±–æ null
                if (!endpoint) return 'api';
            } catch (e) {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É endpoint —Ñ—É–Ω–∫—Ü—ñ—ó:", e);
                return 'api';
            }
        }

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ endpoint –Ω–∞ —Ä—è–¥–æ–∫, —è–∫—â–æ —Ü–µ —â–µ –Ω–µ —Ä—è–¥–æ–∫
        endpoint = String(endpoint);

        // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–µ—à –Ω–∞ –ø–æ—á–∞—Ç–∫—É, —è–∫—â–æ –≤—ñ–Ω —î
        let cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

        // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–µ—à –≤ –∫—ñ–Ω—Ü—ñ, —è–∫—â–æ –≤—ñ–Ω —î
        if (cleanEndpoint.endsWith('/') && cleanEndpoint.length > 1) {
            cleanEndpoint = cleanEndpoint.substring(0, cleanEndpoint.length - 1);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —à–ª—è—Ö –∑ 'api/'
        if (cleanEndpoint.startsWith('api/')) {
            return cleanEndpoint;
        } else if (cleanEndpoint === 'api') {
            // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ 'api', –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω
            return cleanEndpoint;
        } else if (cleanEndpoint.startsWith('api')) {
            // –Ø–∫—â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 'api' –∞–ª–µ –±–µ–∑ —Å–ª–µ—à—É –ø—ñ—Å–ª—è
            return `api/${cleanEndpoint.substring(3)}`;
        } else {
            // –í —É—Å—ñ—Ö —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –¥–æ–¥–∞—î–º–æ 'api/' –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
            return `api/${cleanEndpoint}`;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID
     * @param {string} id - ID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function isValidUUID(id) {
        if (!id || typeof id !== 'string') return false;

        // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ ID
        const normalized = id.trim().toLowerCase();

        // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ UUID
        const patterns = {
            standard: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
            noHyphens: /^[0-9a-f]{32}$/i,
            braced: /^\{[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\}$/i
        };

        return patterns.standard.test(normalized) ||
               patterns.noHyphens.test(normalized) ||
               patterns.braced.test(normalized);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     * @returns {Promise<string|null>} –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∞–±–æ null
     */
    async function refreshToken() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å API
        try {
            await ensureApiReady();
        } catch (error) {
            console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
            throw error;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (_pendingRequests['refresh-token']) {
            return _pendingRequests['refresh-token'];
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        const refreshPromise = new Promise(async (resolve, reject) => {
            try {
                // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const userId = getUserId();
                if (!userId) {
                    throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                console.log("üîÑ API: –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ rawApiRequest –±–µ–∑ —Ç–æ–∫–µ–Ω—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ä–µ–∫—É—Ä—Å—ñ—ó
                const response = await fetch(`${API_BASE_URL}/${normalizeEndpoint(API_PATHS.AUTH.REFRESH_TOKEN)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-User-Id': userId
                    },
                    body: JSON.stringify({
                        telegram_id: userId,
                        token: _authToken || ''
                    })
                });

                if (!response.ok) {
                    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 400/401 –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω—É
                    if (response.status === 400 || response.status === 401) {
                        console.warn("‚ö†Ô∏è API: –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –æ—á–∏—â–∞—î–º–æ");
                        clearAuthToken();
                        throw new Error("–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è");
                    }
                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
                }

                const data = await response.json();

                if (data && data.status === 'success' && data.token) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω
                    _authToken = data.token;

                    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                    if (data.expires_at) {
                        _authTokenExpiry = new Date(data.expires_at).getTime();
                    } else if (data.expires_in) {
                        _authTokenExpiry = Date.now() + (data.expires_in * 1000);
                    } else {
                        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 24 –≥–æ–¥–∏–Ω–∏
                        _authTokenExpiry = Date.now() + (24 * 60 * 60 * 1000);
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ StorageUtils, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
                    try {
                        if (window.StorageUtils) {
                            window.StorageUtils.setItem('auth_token', _authToken, {
                                persist: true,
                                expires: _authTokenExpiry - Date.now()
                            });
                            window.StorageUtils.setItem('auth_token_expiry', _authTokenExpiry.toString(), {
                                persist: true,
                                expires: _authTokenExpiry - Date.now()
                            });
                        } else {
                            localStorage.setItem('auth_token', _authToken);
                            localStorage.setItem('auth_token_expiry', _authTokenExpiry.toString());
                        }
                    } catch (e) {
                        console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
                    }

                    console.log("‚úÖ API: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");

                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
                    document.dispatchEvent(new CustomEvent('token-refreshed', {
                        detail: { token: _authToken, expires_at: _authTokenExpiry }
                    }));

                    resolve(_authToken);
                } else {
                    throw new Error(data.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");
                }
            } catch (error) {
                console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
                reject(error);
            } finally {
                // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö
                delete _pendingRequests['refresh-token'];
            }
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        _pendingRequests['refresh-token'] = refreshPromise;

        return refreshPromise;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    function clearAuthToken() {
        console.log("üóëÔ∏è API: –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó");

        _authToken = null;
        _authTokenExpiry = 0;

        try {
            if (window.StorageUtils) {
                window.StorageUtils.removeItem('auth_token');
                window.StorageUtils.removeItem('auth_token_expiry');
            } else {
                localStorage.removeItem('auth_token');
                localStorage.removeItem('auth_token_expiry');
            }
        } catch (e) {
            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
        }

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
        document.dispatchEvent(new CustomEvent('token-cleared'));
    }

    // ======== –§–£–ù–ö–¶–Ü–á API-–ó–ê–ü–ò–¢–£ ========

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è –∑–∞–≤–∏—Å–∞—é—á–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     * @returns {boolean} –ß–∏ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ —Å–∫–∏–¥–∞–Ω–Ω—è
     */
    function resetPendingRequests() {
        // –Ø–∫—â–æ —î –±—ñ–ª—å—à–µ 3 –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤, –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –º–∞—î–º–æ –ø—Ä–æ–±–ª–µ–º—É
        if (_activeEndpoints.size > 3) {
            console.warn(`üîå API: –í–∏—è–≤–ª–µ–Ω–æ ${_activeEndpoints.size} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω`);
            _activeEndpoints.clear();
            _pendingRequests = {};
            return true;
        }
        return false;
    }

    /**
     * –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó –≤ –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
     * @param {string} url - URL –∑–∞–ø–∏—Ç—É
     * @param {string} method - HTTP –º–µ—Ç–æ–¥
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
     */
    async function rawApiRequest(url, method, data, options = {}) {
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.showLoading === 'function') {
                    window.showLoading();
                }
            }

            // –ó–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), options.timeout || 10000);

            // –ó–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = {
                'Content-Type': 'application/json',
                ...(options.headers || {})
            };

            // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (!options.skipTokenCheck) {
                const token = getAuthToken();
                if (token) {
                    headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
                }
            }

            // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω —î
            const userId = getUserId();
            if (userId && !options.skipUserIdCheck) {
                headers['X-Telegram-User-Id'] = userId;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω
            if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
                throw new Error("–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω");
            }

            // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const requestOptions = {
                method: method,
                headers: headers,
                signal: controller.signal
            };

            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
            if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è raffle_id –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
                if (safeIncludes(url, 'participate-raffle') && data) {
                    // –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ raffle_id - –≤–∞–ª—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫
                    if (data.raffle_id) {
                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
                        if (typeof data.raffle_id !== 'string') {
                            data.raffle_id = String(data.raffle_id);
                            console.log("üõ†Ô∏è API: raffle_id –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–æ–∫:", data.raffle_id);
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
                        if (!isValidUUID(data.raffle_id)) {
                            console.error(`‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${data.raffle_id}`);
                            throw new Error(`–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${data.raffle_id}`);
                        }
                    } else {
                        console.error("‚ùå API: –í—ñ–¥—Å—É—Ç–Ω—ñ–π raffle_id –≤ –∑–∞–ø–∏—Ç—ñ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ");
                        throw new Error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É");
                    }
                }
                requestOptions.body = JSON.stringify(data);
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const response = await fetch(url, requestOptions);

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            clearTimeout(timeoutId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }
            }

            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è 404 –ø–æ–º–∏–ª–æ–∫ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            if (response.status === 404 && safeIncludes(url, 'raffles')) {
                // –û—á–∏—â—É—î–º–æ –∫–µ—à —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ —Ç–∞–∫–∏–π —î
                if (window.WinixRaffles && window.WinixRaffles.participation) {
                    window.WinixRaffles.participation.clearInvalidRaffleIds();
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –±—ñ–ª—å—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if (typeof window.showToast === 'function') {
                    window.showToast('–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–Ω–æ–≤—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.', 'warning');
                }

                throw new Error("–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ID –º–æ–∂–µ –±—É—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º.");
            }

            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ 429 (too many requests)
            if (response.status === 429) {
                // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
                const retryAfter = response.headers.get('Retry-After') || 30; // 30 —Å–µ–∫—É–Ω–¥ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

                // –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
                const endpointForBlocking = Object.keys(REQUEST_THROTTLE).find(key => safeIncludes(url, key)) || 'default';

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏ rate limit
                handleRateLimiting(endpointForBlocking, parseInt(retryAfter));

                throw new Error(`–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫—É–Ω–¥.`);
            }

            // –û–±—Ä–æ–±–∫–∞ 500+ –ø–æ–º–∏–ª–æ–∫
            if (response.status >= 500) {
                _connectionState.isConnected = false;
                _apiState.isHealthy = false;
                _apiState.consecutiveFailures++;

                throw new Error(`–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (${response.status}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON
            return await response.json();
        } catch (error) {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader) {
                if (typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }
            }

            throw error;
        }
    }

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @returns {number} –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    function getThrottleTime(endpoint) {
        for (const key in REQUEST_THROTTLE) {
            if (safeIncludes(endpoint, key)) {
                return REQUEST_THROTTLE[key];
            }
        }
        return REQUEST_THROTTLE.default;
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ (rate limiting)
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @param {number} retryAfter - –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    function handleRateLimiting(endpoint, retryAfter) {
        console.log(`‚è≥ Rate limiting: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${retryAfter}—Å –¥–ª—è ${endpoint}`);

        // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É, –æ—á–∏—â–∞—î–º–æ –π–æ–≥–æ
        if (_blockedEndpoints[endpoint] && _blockedEndpoints[endpoint].timeoutId) {
            clearTimeout(_blockedEndpoints[endpoint].timeoutId);
        }

        // –ó–∞–ø–ª–∞–Ω—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å
        const retryTimeoutId = setTimeout(() => {
            console.log(`‚úÖ –¢–µ—Ä–º—ñ–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è ${endpoint} –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è, –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏`);
            // –û—á–∏—Å—Ç—ñ—Ç—å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
            delete _blockedEndpoints[endpoint];

            // –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤–∏–π –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É
            if (typeof window.showToast === 'function') {
                window.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫–æ–º.', 'success');
            }
        }, retryAfter * 1000);

        // –ó–±–µ—Ä–µ–≥—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        _blockedEndpoints[endpoint] = {
            until: Date.now() + (retryAfter * 1000),
            timeoutId: retryTimeoutId
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ endpoint –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ rate limit
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     */
    function isEndpointBlocked(endpoint) {
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ undefined –¥–ª—è endpoint
        if (!endpoint) return false;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É –∞–±–æ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        const isBlocked = Object.keys(_blockedEndpoints).some(key => {
            // –Ø–∫—â–æ —Ü–µ –ø—Ä—è–º–∏–π –∑–±—ñ–≥ –∞–±–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è "default"
            if ((safeIncludes(endpoint, key) || key === 'default') &&
                _blockedEndpoints[key].until > Date.now()) {
                return true;
            }
            return false;
        });

        return isBlocked;
    }

   /**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
 * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
 * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
 * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
 * @param {number} retries - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
 */
async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 2) {
    try {
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ undefined endpoint
        if (!endpoint) {
            console.error("üîå API: endpoint —î undefined –∞–±–æ null");
            return Promise.reject({
                status: 'error',
                message: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ endpoint –¥–ª—è –∑–∞–ø–∏—Ç—É',
                code: 'missing_endpoint'
            });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤)
        if (!options.skipHealthCheck) {
            try {
                await ensureApiReady();
            } catch (error) {
                console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:", error);

                // –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
                if (!options.suppressErrors) {
                    return Promise.reject({
                        status: 'error',
                        message: error.message,
                        code: 'server_unavailable'
                    });
                }
            }
        }

        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—ñ
        if (_debugMode) {
            console.log(`üîå API: –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É ${method} –¥–æ ${endpoint}`);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ rate limit
        if (!options.bypassThrottle && isEndpointBlocked(endpoint)) {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            const blockedKey = Object.keys(_blockedEndpoints).find(key =>
                safeIncludes(endpoint, key) || key === 'default');

            if (blockedKey) {
                const waitTime = Math.ceil((_blockedEndpoints[blockedKey].until - Date.now()) / 1000);

                return Promise.reject({
                    status: 'error',
                    message: `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${waitTime} —Å–µ–∫—É–Ω–¥.`,
                    code: 'rate_limited',
                    retryAfter: waitTime
                });
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö ID —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É URL
        if (safeIncludes(endpoint, 'raffles/') && !endpoint.endsWith('raffles') && !endpoint.endsWith('raffles/')) {
            const raffleIdMatch = endpoint.match(/raffles\/([^/?]+)/i);
            if (raffleIdMatch && raffleIdMatch[1]) {
                const raffleId = raffleIdMatch[1];
                if (!isValidUUID(raffleId)) {
                    console.error(`‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –≤ URL: ${raffleId}`);
                    return Promise.reject({
                        status: 'error',
                        message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É –≤ URL',
                        code: 'invalid_raffle_id'
                    });
                }
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —á–∏ –∑–∞–ø–∏—Ç—É –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        if ((safeIncludes(endpoint, 'participate-raffle') || safeIncludes(endpoint, 'raffles/')) && data && data.raffle_id) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç UUID
            if (typeof data.raffle_id !== 'string') {
                data.raffle_id = String(data.raffle_id);
                console.log("üõ†Ô∏è API: raffle_id –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–æ–∫:", data.raffle_id);
            }

            // –†–µ—Ç–µ–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
            if (!isValidUUID(data.raffle_id)) {
                console.error(`‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID: ${data.raffle_id}`);
                return Promise.reject({
                    status: 'error',
                    message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É'
                });
            }
        }

        // –§–æ—Ä–º—É—î–º–æ URL –∑–∞–ø–∏—Ç—É
        let url;

        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ URL —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ
        if (safeIncludes(endpoint, 'http')) {
            // Endpoint –≤–∂–µ —î –ø–æ–≤–Ω–∏–º URL - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
            url = endpoint;
        } else {
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ endpoint –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É —ñ –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–º —Å–ª–µ—à–∞–º
            const normalizedEndpoint = normalizeEndpoint(endpoint);

            // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ –¥–æ URL –Ω–µ –¥–æ–¥–∞—é—Ç—å—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            const hasQuery = safeIncludes(normalizedEndpoint, '?');

            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –∫–µ—à–æ–±—Ä–µ–π–∫–µ—Ä –¥–æ URL (–ø–∞—Ä–∞–º–µ—Ç—Ä t=timestamp)
            const timestamp = Date.now();

            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π URL –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —à–ª—è—Ö–æ–º —ñ —É–Ω–∏–∫–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏—Ö —Å–ª–µ—à—ñ–≤
            url = `${API_BASE_URL}/${normalizedEndpoint}`
                .replace(/([^:]\/)\/+/g, "$1") // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ —Å–ª–µ—à—ñ
                + (hasQuery ? '&' : '?') + `t=${timestamp}`; // –î–æ–¥–∞—î–º–æ –∫–µ—à–æ–±—Ä–µ–π–∫–µ—Ä
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω
        if (typeof navigator.onLine !== 'undefined' && !navigator.onLine) {
            return Promise.reject({
                message: "–ü—Ä–∏—Å—Ç—Ä—ñ–π –æ—Ñ–ª–∞–π–Ω",
                source: 'offline'
            });
        }

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø–∏—Ç—É
        const headers = {
            'Content-Type': 'application/json',
            ...(options.headers || {})
        };

        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—î—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ
        if (!options.skipTokenCheck) {
            const token = getAuthToken();
            if (token) {
                headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
            }
        }

        // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤—ñ–Ω —î
        const userId = options.skipUserIdCheck ? null : getUserId();
        if (userId && !options.skipUserIdCheck) {
            headers['X-Telegram-User-Id'] = userId;
        }

        // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        const requestOptions = {
            method: method,
            headers: headers,
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—ñ–≤, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫
            timeout: options.timeout || 20000 // 20 —Å–µ–∫—É–Ω–¥
        };

        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è raffle_id –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            if (safeIncludes(url, 'participate-raffle') && data) {
                // –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ raffle_id - –≤–∞–ª—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫
                if (data.raffle_id) {
                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
                    if (typeof data.raffle_id !== 'string') {
                        data.raffle_id = String(data.raffle_id);
                        console.log("üõ†Ô∏è API: raffle_id –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–æ–∫:", data.raffle_id);
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É UUID
                    if (!isValidUUID(data.raffle_id)) {
                        console.error(`‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${data.raffle_id}`);
                        throw new Error(`–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${data.raffle_id}`);
                    }
                } else {
                    console.error("‚ùå API: –í—ñ–¥—Å—É—Ç–Ω—ñ–π raffle_id –≤ –∑–∞–ø–∏—Ç—ñ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ");
                    throw new Error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É");
                }
            }
            requestOptions.body = JSON.stringify(data);
        }

        // –ù–û–í–ï: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
        if (!options.allowParallel && safeIncludes(endpoint, 'participate-raffle')) {
            // –Ø–∫—â–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π, –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –∑–∞–ø–∏—Ç
            if (_activeEndpoints.has(endpoint)) {
                return Promise.reject({
                    status: 'error',
                    message: '–ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É',
                    code: 'concurrent_request'
                });
            }

            // –î–æ–¥–∞—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
            _activeEndpoints.add(endpoint);
        }

        // –°–ø—Ä–æ–±–∏ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç
        let response;
        let lastError;

        try {
            // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
            _requestCounter.total++;
            _requestCounter.current++;

            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.showLoading === 'function') {
                window.showLoading();
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∞–π–º–∞—É—Ç–∞
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), requestOptions.timeout);

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–∏–≥–Ω–∞–ª
            requestOptions.signal = controller.signal;

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const fetchResponse = await fetch(url, requestOptions);

            // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            clearTimeout(timeoutId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            // –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—ñ–≤
            if (fetchResponse.status === 429) {
                // Too Many Requests - –æ—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                const retryAfter = fetchResponse.headers.get('Retry-After') || 30; // —Å–µ–∫—É–Ω–¥

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
                const endpointKey = Object.keys(REQUEST_THROTTLE).find(key => safeIncludes(endpoint, key)) || 'default';
                handleRateLimiting(endpointKey, parseInt(retryAfter));

                throw new Error(`–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫—É–Ω–¥.`);
            }

            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è 401 (Unauthorized) - —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
            if (fetchResponse.status === 401) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É...");

                // –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Å–ø—Ä–æ–±–∏, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
                if (retries > 0) {
                    try {
                        await refreshToken();

                        // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
                        return apiRequest(endpoint, method, data, options, retries - 1);
                    } catch (tokenError) {
                        console.error("üîå API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", tokenError);
                        clearAuthToken(); // –û—á–∏—â–∞—î–º–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω
                    }
                }
            }

            // –û–±—Ä–æ–±–∫–∞ 500+ –ø–æ–º–∏–ª–æ–∫
            if (fetchResponse.status >= 500) {
                _connectionState.isConnected = false;
                _apiState.isHealthy = false;
                _apiState.consecutiveFailures++;

                // –ü–æ–∫–∞–∑—É—î–º–æ banner –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
                if (_apiState.consecutiveFailures >= _apiState.maxFailures) {
                    showServerUnavailableMessage();
                }

                throw new Error(`–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (${fetchResponse.status}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`);
            }

            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 404 –ø–æ–º–∏–ª–æ–∫
            if (fetchResponse.status === 404) {
                // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
                if (safeIncludes(url, 'daily-bonus')) {
                    console.warn(`‚ö†Ô∏è API: –ï–Ω–¥–ø–æ—ñ–Ω—Ç —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${url}`);

                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –±–µ–∑ fallback –¥–∞–Ω–∏—Ö
                    return Promise.reject({
                        status: "error",
                        message: "–©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ",
                        httpStatus: 404,
                        endpoint: endpoint
                    });
                }

                // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è API ping
                if (safeIncludes(url, '/api/ping')) {
                    console.warn(`‚ö†Ô∏è API: Ping –µ–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${url}`);
                    return {
                        status: "error",
                        message: "API ping –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                        source: "ping_404"
                    };
                }

                // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if (safeIncludes(url, 'raffles')) {
                    // –û—á–∏—â—É—î–º–æ –∫–µ—à —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ —Ç–∞–∫–∏–π —î
                    if (window.WinixRaffles && window.WinixRaffles.participation) {
                        window.WinixRaffles.participation.clearInvalidRaffleIds();
                    }

                    // –í–∏—Ç—è–≥—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É –∑ URL
                    const raffleIdMatch = url.match(/raffles\/([^/?]+)/i);
                    if (raffleIdMatch && raffleIdMatch[1]) {
                        const raffleId = raffleIdMatch[1];

                        // –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö
                        if (window.WinixRaffles && window.WinixRaffles.participation) {
                            window.WinixRaffles.participation.addInvalidRaffleId(raffleId);
                        }
                    }

                    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –±—ñ–ª—å—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if (typeof window.showToast === 'function') {
                        window.showToast('–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–Ω–æ–≤—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.', 'warning');
                    }

                    return Promise.reject({
                        status: 'error',
                        message: "–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ID –º–æ–∂–µ –±—É—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º.",
                        code: 'raffle_not_found',
                        httpStatus: 404
                    });
                }

                // –ó–∞–≥–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ 404 –ø–æ–º–∏–ª–æ–∫
                console.warn(`‚ö†Ô∏è API: –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${url}`);
                return Promise.reject({
                    status: "error",
                    message: "–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    httpStatus: 404,
                    endpoint: endpoint
                });
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å—É
            if (!fetchResponse.ok) {
                // –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                const errorResponse = await fetchResponse.text();
                let errorMessage;
                let errorData = {};

                try {
                    const errorJson = JSON.parse(errorResponse);
                    errorMessage = errorJson.message || `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä—É: ${fetchResponse.status}`;
                    errorData = errorJson;
                } catch (e) {
                    errorMessage = `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä—É: ${fetchResponse.status}`;
                }

                throw new Error(errorMessage);
            }

            // –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = await fetchResponse.json();

            // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –¥–∞–Ω–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
            if (_connectionState.failedAttempts > 0) {
                _connectionState.failedAttempts = 0;
                _connectionState.lastSuccessTime = Date.now();
                _connectionState.isConnected = true;
                _apiState.isHealthy = true;
                _apiState.consecutiveFailures = 0;

                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ banner –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
                hideServerUnavailableMessage();
            }

        } catch (error) {
            // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
            _requestCounter.errors++;

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (!options.hideLoader && typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            lastError = error;

            // –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞, –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
            if (retries <= 0) {
                throw error;
            }

            // –î–ª—è –ø–æ–º–∏–ª–æ–∫, –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑ –º–µ—Ä–µ–∂–µ—é, —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
            const isNetworkError = error.name === 'AbortError' ||
                                   error.name === 'TypeError' ||
                                   (error.message && safeIncludes(error.message, 'NetworkError'));

            if (isNetworkError) {
                // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
                _connectionState.failedAttempts++;

                // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
                const backoffTime = Math.min(1000 * Math.pow(2, _connectionState.failedAttempts), 10000);

                console.warn(`‚ö†Ô∏è –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ${backoffTime/1000}—Å...`);

                // –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                await new Promise(resolve => setTimeout(resolve, backoffTime));

                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ apiRequest –∑ –º–µ–Ω—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–ø—Ä–æ–±
                return apiRequest(endpoint, method, data, options, retries - 1);
            }

            // –Ø–∫—â–æ —Ü–µ –Ω–µ –º–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ —ó—ó –¥–∞–ª—ñ
            throw error;
        } finally {
            // –í–∏–¥–∞–ª—è—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö
            _activeEndpoints.delete(endpoint);

            // –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            _requestCounter.current = Math.max(0, _requestCounter.current - 1);
        }

        // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        return response;
    } catch (error) {
        // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        _requestCounter.errors++;

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (!options.hideLoader && typeof window.hideLoading === 'function') {
            window.hideLoading();
        }

        console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        document.dispatchEvent(new CustomEvent('api-error', {
            detail: {
                error,
                endpoint,
                method
            }
        }));

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ suppressErrors
        if (options.suppressErrors) {
            return {
                status: 'error',
                message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                source: 'api_error'
            };
        }

        throw error;
    }
}

    // –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
    setInterval(() => {
        const now = Date.now();

        // –Ø–∫—â–æ —î –∑–∞–ø–∏—Ç–∏, —è–∫—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –±—ñ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥, —Å–∫–∏–¥–∞—î–º–æ —ó—Ö
        let hasLongRunningRequests = false;
        for (const [key, time] of Object.entries(_lastRequestsByEndpoint)) {
            if (now - time > 30000) {
                hasLongRunningRequests = true;
                delete _lastRequestsByEndpoint[key];
                console.warn(`üîå API: –°–∫–∏–Ω—É—Ç–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Ç: ${key}`);
            }
        }

        if (hasLongRunningRequests) {
            resetPendingRequests();
        }

        // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        if (now - _requestCounter.lastReset > 600000) {
            _requestCounter.total = 0;
            _requestCounter.errors = 0;
            _requestCounter.lastReset = now;
        }
    }, 60000);

    // ======== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –∫–µ—à
     * @returns {Promise<Object>} –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(forceRefresh = false) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å API
        try {
            await ensureApiReady();
        } catch (error) {
            console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
            throw error;
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
            return {status: 'success', data: _userCache, source: 'cache'};
        }

        const id = getUserId();
        if (!id) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            const result = await apiRequest(API_PATHS.USER.DATA(id), 'GET', null, {
                timeout: 15000,
                suppressErrors: false
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            if (result.status === 'success' && result.data) {
                _userCache = result.data;
                _userCacheTime = Date.now();

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                try {
                    if (_userCache.balance !== undefined) {
                        localStorage.setItem('userTokens', _userCache.balance.toString());
                        localStorage.setItem('winix_balance', _userCache.balance.toString());
                    }

                    if (_userCache.coins !== undefined) {
                        localStorage.setItem('userCoins', _userCache.coins.toString());
                        localStorage.setItem('winix_coins', _userCache.coins.toString());
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    if (_userCache.notifications_enabled !== undefined) {
                        localStorage.setItem('notifications_enabled', _userCache.notifications_enabled.toString());
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                }
            }

            return result;
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
            throw error;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            await ensureApiReady();
        } catch (error) {
            console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
            throw error;
        }

        try {
            // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
            const nocache = Date.now();
            const endpoint = API_PATHS.USER.BALANCE(userId) + `?nocache=${nocache}`;

            // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
            const response = await apiRequest(endpoint, 'GET', null, {
                suppressErrors: false,
                timeout: 10000
            });

            return response;

        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
            throw error;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingData() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å API
        try {
            await ensureApiReady();
        } catch (error) {
            console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            throw error;
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        if (_stakingCache && (Date.now() - _stakingCacheTime < STAKING_CACHE_TTL)) {
            return {status: 'success', data: _stakingCache, source: 'cache'};
        }

        return apiRequest(API_PATHS.STAKING.DATA(userId));
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingHistory() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        await ensureApiReady();
        return apiRequest(API_PATHS.STAKING.HISTORY(userId));
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    async function createStaking(amount, period) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        await ensureApiReady();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        if (![7, 14, 28].includes(period)) {
            throw new Error("–ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–æ–∂–µ –±—É—Ç–∏ 7, 14 –∞–±–æ 28 –¥–Ω—ñ–≤");
        }

        return apiRequest(API_PATHS.STAKING.DATA(userId), 'POST', {
            stakingAmount: parseInt(amount),
            period: period
        });
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     */
    async function addToStaking(amount, stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        await ensureApiReady();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingData = await getStakingData();
                if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                    throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
                targetStakingId = stakingData.data.stakingId;
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(`${API_PATHS.STAKING.DATA(userId)}/${targetStakingId}`, 'PUT', {
            additionalAmount: parseInt(amount)
        });
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     */
    async function cancelStaking(stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        await ensureApiReady();

        // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ API
                const stakingData = await getStakingData();
                if (stakingData.status === 'success' && stakingData.data && stakingData.data.hasActiveStaking) {
                    targetStakingId = stakingData.data.stakingId;
                } else {
                    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    if (stakingDataStr) {
                        try {
                            const localData = JSON.parse(stakingDataStr);
                            if (localData && localData.stakingId) {
                                targetStakingId = localData.stakingId;
                            }
                        } catch (e) {
                            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage:", e);
                        }
                    }
                }

                if (!targetStakingId) {
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(API_PATHS.STAKING.CANCEL(userId, targetStakingId), 'POST', {
            confirm: true,
            timestamp: Date.now()
        });
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    async function calculateExpectedReward(amount, period) {
        // –í–∏–∫–æ–Ω—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫, –±–µ–∑ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ API
        // –¶–µ –Ω–∞–±–∞–≥–∞—Ç–æ —à–≤–∏–¥—à–µ —ñ –Ω–µ —Å—Ç–≤–æ—Ä—é—î –∑–∞–π–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        amount = parseInt(amount) || 0;
        period = parseInt(period) || 14;

        if (amount <= 0) {
            return { status: 'success', data: { reward: 0 } };
        }

        if (![7, 14, 28].includes(period)) {
            period = 14; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }

        // –í—ñ–¥—Å–æ—Ç–∫–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        const rewardRates = { 7: 4, 14: 9, 28: 15 };
        const rewardPercent = rewardRates[period] || 9;
        const reward = (amount * rewardPercent) / 100;

        return {
            status: 'success',
            data: {
                reward: parseFloat(reward.toFixed(2)),
                rewardPercent: rewardPercent,
                amount: amount,
                period: period,
                source: 'local_calculation'
            }
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {number} limit - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     */
    async function getTransactions(limit = 100) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();
        if (!userId) {
            return {
                status: 'error',
                message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            };
        }

        await ensureApiReady();

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä—É
        try {
            return await apiRequest(`${API_PATHS.TRANSACTIONS(userId)}?limit=${limit}`, 'GET', null, {
                suppressErrors: true
            });
        } catch (error) {
            console.warn("üîå API: –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:", error);
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤, –æ—Å–∫—ñ–ª—å–∫–∏ API —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ
            return {
                status: 'success',
                data: [], // –ü—É—Å—Ç–∏–π –º–∞—Å–∏–≤
                message: '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            };
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {object} settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async function updateSettings(settings) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        await ensureApiReady();

        try {
            return await apiRequest(API_PATHS.USER.SETTINGS(userId), 'POST', settings);
        } catch (error) {
            console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
     */
    function forceCleanupRequests() {
        _lastRequestsByEndpoint = {};
        _activeEndpoints.clear();
        _pendingRequests = {};
        console.log("üîå API: –ü—Ä–∏–º—É—Å–æ–≤–æ –æ—á–∏—â–µ–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤");
        return true;
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É API
     */
    function clearCache() {
        _userCache = null;
        _userCacheTime = 0;
        _stakingCache = null;
        _stakingCacheTime = 0;
        _lastRequestsByEndpoint = {};
        console.log("üîå API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ");
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async function reconnect() {
        console.log("üîÑ API: –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è...");

        // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∑–∞–ø–∏—Ç—ñ–≤
        forceCleanupRequests();

        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è
        _apiState.isHealthy = false;
        _apiState.consecutiveFailures = 0;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–¥–æ—Ä–æ–≤'—è API
        const isHealthy = await checkApiHealth();

        if (isHealthy) {
            // –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            try {
                await refreshToken();
            } catch (error) {
                console.warn("‚ö†Ô∏è API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", error);
            }

            // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            try {
                await getUserData(true);

                // –£—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
                _connectionState.isConnected = true;
                _connectionState.lastSuccessTime = Date.now();
                _connectionState.failedAttempts = 0;

                console.log("‚úÖ API: –ó'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");
                return true;
            } catch (error) {
                console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è:", error);
                return false;
            }
        } else {
            console.error("‚ùå API: –°–µ—Ä–≤–µ—Ä –≤—Å–µ —â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
            return false;
        }
    }

    // ======== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ========

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ health check –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    startHealthCheck();

    // ======== –ï–ö–°–ü–û–†–¢ API ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API —à–ª—è—Ö–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
    window.API_PATHS = API_PATHS;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.WinixAPI = {
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: {
            baseUrl: API_BASE_URL,
            version: '1.3.0',
            environment: API_BASE_URL.includes('localhost') ? 'development' : 'production'
        },

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },

        // Health check
        checkApiHealth,
        ensureApiReady,
        isApiHealthy: () => _apiState.isHealthy,

        // –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        apiRequest,
        getUserId,
        getAuthToken,
        clearAuthToken,
        refreshToken,
        clearCache,
        forceCleanupRequests,
        reconnect,
        isValidUUID,
        safeIncludes,

        // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserData,
        getBalance,
        updateSettings,

        // –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        getStakingData,
        getStakingHistory,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,

        // –§—É–Ω–∫—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        getTransactions,

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤
        paths: API_PATHS,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞ –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        diagnostics: {
            getRequestStats: function() {
                return {..._requestCounter};
            },
            getConnectionState: function() {
                return {..._connectionState};
            },
            getApiState: function() {
                return {..._apiState};
            },
            getActiveEndpoints: function() {
                return Array.from(_activeEndpoints);
            },
            getBlockedEndpoints: function() {
                return {..._blockedEndpoints};
            },
            clearBlockedEndpoints: function() {
                for (const key in _blockedEndpoints) {
                    if (_blockedEndpoints[key].timeoutId) {
                        clearTimeout(_blockedEndpoints[key].timeoutId);
                    }
                }
                _blockedEndpoints = {};
                return true;
            },
            resetState: function() {
                _activeEndpoints.clear();
                _pendingRequests = {};
                _lastRequestsByEndpoint = {};
                for (const key in _blockedEndpoints) {
                    if (_blockedEndpoints[key].timeoutId) {
                        clearTimeout(_blockedEndpoints[key].timeoutId);
                    }
                }
                _blockedEndpoints = {};
                _connectionState.failedAttempts = 0;
                _apiState.consecutiveFailures = 0;
                _apiState.isHealthy = false;
                return true;
            }
        }
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.apiRequest = apiRequest;
    window.getUserId = getUserId;

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –º–æ–¥—É–ª—è–º–∏, —â–æ –æ—á—ñ–∫—É—é—Ç—å window.API
    window.API = {
        get: function(endpoint, options = {}) {
            return window.WinixAPI.apiRequest(endpoint, 'GET', null, options);
        },
        post: function(endpoint, data = null, options = {}) {
            return window.WinixAPI.apiRequest(endpoint, 'POST', data, options);
        }
    };

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    window.addEventListener('online', () => {
        console.log("üîÑ API: –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ, —Å–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
        reconnect();
    });

    console.log(`‚úÖ API: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ health check (URL: ${API_BASE_URL})`);
})();