/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 *
 * –¶–µ–π –º–æ–¥—É–ª—å —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É—î –≤—Å—ñ API-–∑–∞–ø–∏—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π:
 * - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
 * - –°—Ç–µ–π–∫—ñ–Ω–≥
 * - –†–µ—Ñ–µ—Ä–∞–ª–∏
 * - –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ —ñ–Ω—à—ñ.
 */

(function() {
    'use strict';

    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ–≥–æ API –º–æ–¥—É–ª—è");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü –¢–ê –ö–û–ù–°–¢–ê–ù–¢–ò ========

    // –ë–∞–∑–æ–≤–∏–π URL API (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—É—Å—Ç–∏–π –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤)
    const API_BASE_URL = '';

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    let _debugMode = false;

    // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —á–∞—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    let _userCache = null;
    let _userCacheTime = 0;
    const USER_CACHE_TTL = 60000; // 1 —Ö–≤–∏–ª–∏–Ω–∞

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
    let _gettingUserId = false;
    let _apiRequestInProgress = false;

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @param {number} attempts - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± (–¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω—ñ–π —Ä–µ–∫—É—Ä—Å—ñ—ó)
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
     */
    function getUserId(attempts = 0) {
        // –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø—Ä–æ–± –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω—ñ–π —Ä–µ–∫—É—Ä—Å—ñ—ó
        if (attempts > 3 || _gettingUserId) {
            console.warn("‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Å–ø—Ä–æ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
            return null;
        }

        _gettingUserId = true;

        try {
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
            function isValidId(id) {
                return id &&
                       id !== 'undefined' &&
                       id !== 'null' &&
                       id !== undefined &&
                       id !== null &&
                       id.toString().trim() !== '';
            }

            // 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp) {
                try {
                    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ WebApp –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏
                    window.Telegram.WebApp.ready();

                    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    if (window.Telegram.WebApp.initDataUnsafe &&
                        window.Telegram.WebApp.initDataUnsafe.user &&
                        window.Telegram.WebApp.initDataUnsafe.user.id) {

                        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();

                        if (isValidId(tgUserId)) {
                            if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Telegram WebApp:", tgUserId);

                            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                            try {
                                localStorage.setItem('telegram_user_id', tgUserId);
                            } catch (e) {
                                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –≤ localStorage:", e);
                            }

                            _gettingUserId = false;
                            return tgUserId;
                        }
                    }
                } catch (e) {
                    console.warn("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ Telegram WebApp:", e);
                }
            }

            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            try {
                const localId = localStorage.getItem('telegram_user_id');
                if (isValidId(localId)) {
                    if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage:", localId);
                    _gettingUserId = false;
                    return localId;
                }
            } catch (e) {
                console.warn("–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ localStorage:", e);
            }

            // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
            try {
                const userIdElement = document.getElementById('user-id');
                if (userIdElement && userIdElement.textContent) {
                    const domId = userIdElement.textContent.trim();
                    if (isValidId(domId)) {
                        if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ DOM:", domId);

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                        try {
                            localStorage.setItem('telegram_user_id', domId);
                        } catch (e) {
                            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –≤ localStorage:", e);
                        }

                        _gettingUserId = false;
                        return domId;
                    }
                }
            } catch (e) {
                console.warn("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ DOM:", e);
            }

            // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
                if (isValidId(urlId)) {
                    if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:", urlId);

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                    try {
                        localStorage.setItem('telegram_user_id', urlId);
                    } catch (e) {
                        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –≤ localStorage:", e);
                    }

                    _gettingUserId = false;
                    return urlId;
                }
            } catch (e) {
                console.warn("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:", e);
            }

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null, —è–∫—â–æ ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            _gettingUserId = false;
            return null;
        } catch (e) {
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ getUserId:", e);
            _gettingUserId = false;
            return null;
        }
    }

    // ======== –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø API-–ó–ê–ü–ò–¢–£ ========

   /**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
 * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ URL
 * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
 * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST/PUT –∑–∞–ø–∏—Ç—ñ–≤)
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
 * @param {number} retries - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
 */
async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 3) {
    // –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    const requestId = Math.random().toString(36).substring(2, 8);
    const operationName = options.operationName || `${method} ${endpoint}`;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤–∂–µ –∑–∞–ø–∏—Ç –∑ —Ç–∏–º–∏ –∂ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if (_apiRequestInProgress && !options.skipProgressCheck) {
        console.warn(`‚ö†Ô∏è [${requestId}] API –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –æ—á—ñ–∫—É–π—Ç–µ: ${endpoint}`);

        // –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        if (options.forceContinue) {
            console.warn(`‚ö†Ô∏è [${requestId}] –ü—Ä–∏–º—É—Å–æ–≤–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É ${endpoint}`);
        } else {
            try {
                await new Promise(resolve => setTimeout(resolve, 500));
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ apiRequest –∑ –º–µ–Ω—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–ø—Ä–æ–±
                if (retries > 1) {
                    return apiRequest(endpoint, method, data, {
                        ...options,
                        forceContinue: true
                    }, retries - 1);
                }
            } catch (e) {
                console.warn(`‚ö†Ô∏è [${requestId}] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:`, e.message);
            }
        }
    }

    // –ë–ª–æ–∫—É—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏ (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–Ω—à–µ)
    if (!options.allowParallel) {
        _apiRequestInProgress = true;
    }

    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤–∞–ª—ñ–¥–Ω–æ–≥–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!userId && !options.skipUserIdCheck) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            console.error(`‚ùå [${requestId}] API-–∑–∞–ø–∏—Ç ${operationName} —Å–∫–∞—Å–æ–≤–∞–Ω–æ: ${error.message}`);
            _apiRequestInProgress = false;

            // –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ –æ–ø—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
            if (typeof handleApiError === 'function' && !options.skipErrorHandling) {
                handleApiError(error, operationName, options.showToast !== false);
            }

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –º–æ–∂–ª–∏–≤–æ—ó –æ–±—Ä–æ–±–∫–∏
            document.dispatchEvent(new CustomEvent('api-error', {
                detail: { error, endpoint, method, requestId }
            }));

            throw error;
        }

        // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
        const timestamp = Date.now();
        const hasQuery = endpoint.includes('?');
        const url = `${API_BASE_URL}${endpoint}${hasQuery ? '&' : '?'}t=${timestamp}`;

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤–∏–º–∫–Ω–µ–Ω–∏–π –≤ –æ–ø—Ü—ñ—è—Ö
        if (!options.hideLoader) {
            if (typeof showLoader === 'function') {
                showLoader();
            } else if (typeof window.showLoading === 'function') {
                window.showLoading();
            }
        }

        // –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç —É —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        if (_debugMode) {
            console.log(`üîÑ [${requestId}] –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø–∏—Ç—É –Ω–∞ ${url}`);
            if (data) {
                console.log(`üì¶ [${requestId}] –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:`, data);
            }
        }

        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É
        const requestOptions = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                ...(userId && {'X-Telegram-User-Id': userId}),
                ...options.headers
            },
            ...options
        };

        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT/PATCH
        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
            requestOptions.body = JSON.stringify(data);
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        async function tryRequest(attemptsLeft) {
            try {
                // –î–æ–¥–∞—î–º–æ timeout –¥–ª—è –∑–∞–ø–∏—Ç—É
                const controller = new AbortController();
                const timeoutId = setTimeout(() => {
                    controller.abort();
                }, options.timeout || 20000); // 20 —Å–µ–∫—É–Ω–¥ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

                // –î–æ–¥–∞—î–º–æ signal –¥–æ requestOptions, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î
                if (!requestOptions.signal) {
                    requestOptions.signal = controller.signal;
                }

                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                const response = await fetch(url, requestOptions);

                // –û—á–∏—â–∞—î–º–æ timeout
                clearTimeout(timeoutId);

                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (!options.hideLoader) {
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    } else if (typeof window.hideLoading === 'function') {
                        window.hideLoading();
                    }
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (!response.ok) {
                    const statusText = response.statusText || '';
                    console.error(`‚ùå [${requestId}] –ü–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É: ${response.status} ${statusText} (${url})`);

                    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–¥—ñ–≤ –ø–æ–º–∏–ª–æ–∫
                    if (response.status === 401 || response.status === 403) {
                        console.warn(`üîê [${requestId}] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`);

                        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                        document.dispatchEvent(new CustomEvent('auth-error', {
                            detail: { endpoint, method, status: response.status }
                        }));
                    }

                    if (response.status === 404) {
                        throw new Error(`–ó–∞–ø–∏—Ç–∞–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (404)`);
                    }

                    if (response.status === 405) {
                        throw new Error(`–ú–µ—Ç–æ–¥ ${method} –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É (405)`);
                    }

                    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    let responseData;
                    try {
                        responseData = await response.json();
                        if (responseData && responseData.message) {
                            throw new Error(responseData.message);
                        }
                    } catch (parseError) {
                        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–ª—è –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                    }

                    // –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Å–ø—Ä–æ–±–∏, –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
                    if (attemptsLeft > 0) {
                        const delay = Math.pow(2, retries - attemptsLeft) * 500; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                        if (_debugMode) {
                            console.log(`‚è±Ô∏è [${requestId}] –ü–æ–≤—Ç–æ—Ä –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft})`);
                        }

                        await new Promise(resolve => setTimeout(resolve, delay));
                        return tryRequest(attemptsLeft - 1);
                    }

                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${statusText}`);
                }

                // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –û–ö, –ø–∞—Ä—Å–∏–º–æ JSON
                let jsonData;
                try {
                    jsonData = await response.json();
                } catch (parseError) {
                    console.error(`‚ùå [${requestId}] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:`, parseError);
                    throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (jsonData && jsonData.status === 'error') {
                    console.error(`‚ùå [${requestId}] API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:`, jsonData.message);
                    throw new Error(jsonData.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
                }

                if (_debugMode) {
                    console.log(`‚úÖ [${requestId}] –£—Å–ø—ñ—à–Ω–∏–π API-–∑–∞–ø–∏—Ç –Ω–∞ ${url}`);
                    console.log(`üìä [${requestId}] –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:`, jsonData);
                }

                // –ö–µ—à—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if (options.cache && typeof options.cacheKey === 'string') {
                    try {
                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É localStorage –∞–±–æ sessionStorage
                        const storage = options.sessionCache ? sessionStorage : localStorage;
                        const cacheData = {
                            data: jsonData,
                            timestamp: Date.now(),
                            expires: options.cacheTime || 60000 // 1 —Ö–≤–∏–ª–∏–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                        };
                        storage.setItem(options.cacheKey, JSON.stringify(cacheData));
                    } catch (cacheError) {
                        console.warn(`‚ö†Ô∏è [${requestId}] –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è:`, cacheError.message);
                    }
                }

                _apiRequestInProgress = false;
                return jsonData;

            } catch (error) {
                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
                if (!options.hideLoader) {
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    } else if (typeof window.hideLoading === 'function') {
                        window.hideLoading();
                    }
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø–æ–º–∏–ª–∫—É Abort –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ (timeout)
                if (error.name === 'AbortError') {
                    error.message = `–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (${options.timeout || 20000}–º—Å)`;
                }

                // –î–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
                const isNetworkError = error.name === 'TypeError' ||
                                      error.message.includes("Failed to fetch") ||
                                      error.message.includes("Network error");

                if (isNetworkError && attemptsLeft > 0) {
                    const delay = Math.pow(2, retries - attemptsLeft) * 500;
                    console.log(`‚ö†Ô∏è [${requestId}] –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft}):`, error.message);

                    await new Promise(resolve => setTimeout(resolve, delay));
                    return tryRequest(attemptsLeft - 1);
                }

                _apiRequestInProgress = false;
                throw error;
            }
        }

        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∫–µ—à—É–≤–∞–Ω–Ω—è
        if (options.cache && typeof options.cacheKey === 'string') {
            try {
                const storage = options.sessionCache ? sessionStorage : localStorage;
                const cachedDataStr = storage.getItem(options.cacheKey);

                if (cachedDataStr) {
                    const cachedData = JSON.parse(cachedDataStr);
                    const now = Date.now();

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–µ—à –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–≤
                    if (cachedData && cachedData.timestamp &&
                        (now - cachedData.timestamp < cachedData.expires)) {

                        if (_debugMode) {
                            console.log(`üîÑ [${requestId}] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${url}`);
                        }

                        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                        if (!options.hideLoader) {
                            if (typeof hideLoader === 'function') {
                                hideLoader();
                            } else if (typeof window.hideLoading === 'function') {
                                window.hideLoading();
                            }
                        }

                        _apiRequestInProgress = false;
                        return cachedData.data;
                    }
                }
            } catch (cacheError) {
                console.warn(`‚ö†Ô∏è [${requestId}] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–µ—à—É:`, cacheError.message);
            }
        }

        // –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        return await tryRequest(retries);
    } catch (e) {
        _apiRequestInProgress = false;

        // –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        if (typeof handleApiError === 'function' && !options.skipErrorHandling) {
            handleApiError(e, operationName, options.showToast !== false);
        } else {
            console.error(`‚ùå [${requestId}] –ü–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É ${operationName}:`, e.message);
        }

        // –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ –æ–ø—Ü—ñ—è suppressErrors, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –æ–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏
        if (options.suppressErrors) {
            return {
                status: 'error',
                message: e.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                error: e,
                requestId
            };
        }

        throw e;
    }
}

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–ë–†–û–ë–ö–ò –ü–û–ú–ò–õ–û–ö –¢–ê –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ========

    /**
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ API
 * @param {Error} error - –û–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏
 * @param {string} operation - –ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
 * @param {boolean} showToast - –ß–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
 * @returns {string} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */
function handleApiError(error, operation = 'API –æ–ø–µ—Ä–∞—Ü—ñ—ó', showToast = true) {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—é –ø–æ–º–∏–ª–æ–∫ - –ª–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
    if (!error._logged) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}:`, error);
        error._logged = true;
    }

    // –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ —Ç—É —Å–∞–º—É –ø–æ–º–∏–ª–∫—É
    const now = Date.now();
    const lastErrorTime = window._lastErrorNotificationTime || 0;
    const lastErrorMessage = window._lastErrorMessage || '';
    const errorMessage = error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';

    // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ç–µ —Å–∞–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥–∏
    const shouldShowToast = showToast &&
                           (now - lastErrorTime > 3000 || lastErrorMessage !== errorMessage);

    // –§–æ—Ä–º—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–º–∏–ª–∫–∏
    let userFriendlyMessage = '';

    if (error.name === 'TypeError' && errorMessage.includes('fetch')) {
        userFriendlyMessage = `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.`;
    } else if (errorMessage.includes('timeout') || errorMessage.includes('timed out')) {
        userFriendlyMessage = `–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.`;
    } else if (errorMessage.includes('404')) {
        userFriendlyMessage = `–°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–µ—Å—É—Ä—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
    } else if (errorMessage.includes('405')) {
        userFriendlyMessage = `–ü–æ–º–∏–ª–∫–∞ API: –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º.`;
    } else if (errorMessage.includes('500')) {
        userFriendlyMessage = `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`;
    } else if (errorMessage.includes('undefined') || errorMessage.includes('null')) {
        userFriendlyMessage = `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
    } else if (errorMessage.includes('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
        userFriendlyMessage = `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–π—Ç–∏ —Ç–∞ —É–≤—ñ–π—Ç–∏ –∑–Ω–æ–≤—É.`;
    } else {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        userFriendlyMessage = errorMessage;
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —É –≤–∏–ø–∞–¥–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
    if (shouldShowToast) {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å —ñ —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–º–∏–ª–∫–∏
        window._lastErrorNotificationTime = now;
        window._lastErrorMessage = errorMessage;

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        if (typeof window.showModernNotification === 'function') {
            window.showModernNotification(userFriendlyMessage, true);
        } else if (typeof window.showToast === 'function') {
            window.showToast(userFriendlyMessage, 'error');
        } else if (typeof window.simpleAlert === 'function') {
            window.simpleAlert(userFriendlyMessage, true);
        } else if (typeof window.showMessage === 'function') {
            window.showMessage(userFriendlyMessage, true);
        } else {
            // –£–Ω–∏–∫–∞—î–º–æ –Ω–∞–¥–º—ñ—Ä–Ω–∏—Ö —Å–ø–ª–∏–≤–∞—é—á–∏—Ö –≤—ñ–∫–æ–Ω - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ alert —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
            if (operation.includes('critical') || error.critical) {
                alert(userFriendlyMessage);
            }
        }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –∞–±–æ —ñ–Ω—à–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    document.dispatchEvent(new CustomEvent('api-error', {
        detail: {
            errorType: error.name,
            message: errorMessage,
            operation: operation,
            timestamp: now
        }
    }));

    return userFriendlyMessage;
}

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function showLoader() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            if (typeof window.showLoading === 'function') {
                window.showLoading();
                return;
            }

            // –Ø–∫—â–æ –Ω–µ–º–∞—î –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            const spinner = document.getElementById('loading-spinner');
            if (spinner) {
                spinner.classList.add('show');
                return;
            }

            // –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ—Å–Ω—É—é—á–æ–≥–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
            const newSpinner = document.createElement('div');
            newSpinner.id = 'loading-spinner';
            newSpinner.innerHTML = '<div class="spinner"></div>';

            // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            const style = document.createElement('style');
            style.textContent = `
                #loading-spinner {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.5);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                    opacity: 0;
                    visibility: hidden;
                    transition: opacity 0.3s, visibility 0.3s;
                }
                #loading-spinner.show {
                    opacity: 1;
                    visibility: visible;
                }
                .spinner {
                    width: 50px;
                    height: 50px;
                    border: 5px solid rgba(255, 255, 255, 0.3);
                    border-radius: 50%;
                    border-top-color: #fff;
                    animation: spin 1s ease-in-out infinite;
                }
                @keyframes spin {
                    to { transform: rotate(360deg); }
                }
            `;

            document.head.appendChild(style);
            document.body.appendChild(newSpinner);

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            setTimeout(() => {
                newSpinner.classList.add('show');
            }, 0);
        } catch (e) {
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", e);
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function hideLoader() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥
            if (typeof window.hideLoading === 'function') {
                window.hideLoading();
                return;
            }

            // –Ø–∫—â–æ –Ω–µ–º–∞—î –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            const spinner = document.getElementById('loading-spinner');
            if (spinner) {
                spinner.classList.remove('show');
            }
        } catch (e) {
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", e);
        }
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á –¢–ê –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} userData - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram WebApp
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    async function authorize(userData) {
        const result = await apiRequest('/api/auth', 'POST', userData, {skipUserIdCheck: true});

        // –Ø–∫—â–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (result.status === 'success' && result.data && result.data.telegram_id) {
            try {
                localStorage.setItem('telegram_user_id', result.data.telegram_id);
                _userCache = result.data;
                _userCacheTime = Date.now();
            } catch (e) {
                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
            }
        }

        return result;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<Object>} - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(userId = null, forceRefresh = false) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ –≤—ñ–Ω —î —ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä–∏–π
        if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
            return {status: 'success', data: _userCache};
        }

        const id = userId || getUserId();
        if (!id) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        const result = await apiRequest(`/api/user/${id}`);

        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à, —è–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π
        if (result.status === 'success' && result.data) {
            _userCache = result.data;
            _userCacheTime = Date.now();
        }

        return result;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} userData - –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} - –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function updateUserData(userData) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        const result = await apiRequest(`/api/user/${userId}`, 'PUT', userData);

        // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö
        _userCache = null;
        _userCacheTime = 0;

        return result;
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<Object>} - –î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingData() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/staking`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<Object>} - –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingHistory() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/staking/history`);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function createStaking(amount, period) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0 || amount !== parseInt(amount)) {
            throw new Error("–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        if (![7, 14, 28].includes(period)) {
            throw new Error("–ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–æ–∂–µ –±—É—Ç–∏ 7, 14 –∞–±–æ 28 –¥–Ω—ñ–≤");
        }

        return apiRequest(`/api/user/${userId}/staking`, 'POST', {
            stakingAmount: parseInt(amount),
            period: period
        });
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
     */
    async function addToStaking(amount, stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount <= 0 || amount !== parseInt(amount)) {
            throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        // –Ø–∫—â–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Ç—Ä–∏–º—É—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingData = await getStakingData();
                if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                    throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
                targetStakingId = stakingData.data.stakingId;
            } catch (error) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
            }
        }

        return apiRequest(`/api/user/${userId}/staking/${targetStakingId}`, 'PUT', {
            additionalAmount: parseInt(amount)
        });
    }

    /**
 * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 */
async function cancelStaking(stakingId = null) {
    if (_apiRequestInProgress) {
        console.warn(`‚ö†Ô∏è API –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –æ—á—ñ–∫—É–π—Ç–µ: —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É`);
        await new Promise(resolve => setTimeout(resolve, 500));
    }

    _apiRequestInProgress = true;

    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤–∞–ª—ñ–¥–Ω–æ–≥–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!userId) {
            const error = new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            console.error(`‚ùå API-–∑–∞–ø–∏—Ç —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ: ${error.message}`);
            _apiRequestInProgress = false;
            throw error;
        }

        // –Ø–∫—â–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Ç—Ä–∏–º—É—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            try {
                const stakingData = await getStakingData();
                if (!stakingData || stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                    throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
                targetStakingId = stakingData.data.stakingId;

                if (!targetStakingId) {
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }

                console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${targetStakingId}`);
            } catch (error) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

                // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ localStorage —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                try {
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    if (stakingDataStr) {
                        const localData = JSON.parse(stakingDataStr);
                        if (localData && localData.stakingId) {
                            targetStakingId = localData.stakingId;
                            console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage: ${targetStakingId}`);
                        }
                    }
                } catch (localError) {
                    console.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∑ localStorage:", localError);
                }

                if (!targetStakingId) {
                    _apiRequestInProgress = false;
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }
            }
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showLoader();

        console.log(`üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è ID: ${targetStakingId}`);

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
        const response = await apiRequest(`/api/user/${userId}/staking/${targetStakingId}/cancel`, 'POST', null, {}, 5);

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        hideLoader();

        // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (response && response.status === 'success') {
            // –°–∫–∏–¥–∞—î–º–æ –∫–µ—à –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            localStorage.removeItem('stakingData');
            localStorage.removeItem('winix_staking');

            // –Ø–∫—â–æ —î –æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –≤ localStorage
            if (response.data && response.data.newBalance !== undefined) {
                localStorage.setItem('userTokens', response.data.newBalance.toString());
                localStorage.setItem('winix_balance', response.data.newBalance.toString());
            }
        }

        // –í—ñ–¥–ø—É—Å–∫–∞—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API
        _apiRequestInProgress = false;

        return response;
    } catch (error) {
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        hideLoader();

        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

        // –í—ñ–¥–ø—É—Å–∫–∞—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API
        _apiRequestInProgress = false;

        throw error;
    }
}

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @returns {Promise<Object>} - –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    async function calculateExpectedReward(amount, period) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (isNaN(amount) || amount < 0) {
            throw new Error("–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        if (![7, 14, 28].includes(period)) {
            throw new Error("–ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–æ–∂–µ –±—É—Ç–∏ 7, 14 –∞–±–æ 28 –¥–Ω—ñ–≤");
        }

        try {
            const result = await apiRequest(`/api/user/${getUserId()}/staking/calculate-reward?amount=${amount}&period=${period}`);
            return result;
        } catch (error) {
            // –Ø–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:", error);

            // –í—ñ–¥—Å–æ—Ç–∫–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            const rewardRates = { 7: 4, 14: 9, 28: 15 };
            const rewardPercent = rewardRates[period] || 9;
            const reward = parseFloat(((amount * rewardPercent) / 100).toFixed(2));

            return {
                status: 'success',
                data: {
                    reward: reward,
                    rewardPercent: rewardPercent,
                    amount: parseInt(amount),
                    period: period,
                    source: 'local_calculation'
                }
            };
        }
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–æ–∫
     * @param {boolean} force - –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async function repairStaking(force = false) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/staking/repair`, 'POST', {
            force: force,
            timestamp: Date.now()
        });
    }

    /**
     * –ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} balanceAdjustment - –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async function deepRepairStaking(balanceAdjustment = 0) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/staking/deep-repair`, 'POST', {
            balance_adjustment: balanceAdjustment,
            timestamp: Date.now()
        });
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ë–ê–õ–ê–ù–°–£ –¢–ê –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Promise<Object>} - –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/balance`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     * @returns {Promise<Object>} - –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     */
    async function getTransactions(limit = 100) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        return apiRequest(`/api/user/${userId}/transactions?limit=${limit}`);
    }

    /**
     * –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string} recipientId - ID –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
     */
    async function sendTokens(recipientId, amount, description = '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if (!recipientId) {
            throw new Error("ID –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π");
        }

        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
        }

        return apiRequest(`/api/user/${userId}/send`, 'POST', {
            to_address: recipientId,
            amount: amount,
            description: description
        });
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API –ú–û–î–£–õ–¨ ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç
    window.WinixAPI = {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },

        // –ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
        apiRequest,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
        handleApiError,

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        authorize,
        getUserData,
        updateUserData,
        getUserId,

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        getStakingData,
        getStakingHistory,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,
        repairStaking,
        deepRepairStaking,

        // –ë–∞–ª–∞–Ω—Å —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        getBalance,
        getTransactions,
        sendTokens
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.apiRequest = apiRequest;
    window.getUserId = getUserId;

    console.log("‚úÖ API: –Ñ–¥–∏–Ω–∏–π API –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

    /**
 * –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage
 * @param {Object} userData - –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
 * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
 */
function saveUserDataLocally(userData, options = {}) {
    try {
        if (!userData) {
            console.warn("‚ùå saveUserDataLocally: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ");
            return false;
        }

        const storedData = {};
        const timestamp = Date.now();

        // –ñ—É—Ä–Ω–∞–ª—é–≤–∞–Ω–Ω—è, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        if (_debugMode) {
            console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", userData);
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage
        const safeSetItem = (key, value) => {
            try {
                if (value !== undefined && value !== null) {
                    // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ—á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å —É —Ä—è–¥–∫–∏
                    const stringValue = typeof value === 'object'
                                      ? JSON.stringify(value)
                                      : String(value);

                    localStorage.setItem(key, stringValue);
                    storedData[key] = value;
                    return true;
                }
                return false;
            } catch (e) {
                console.warn(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è "${key}" –≤ localStorage:`, e);
                return false;
            }
        };

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (userData.telegram_id) {
            safeSetItem('telegram_user_id', userData.telegram_id);
            safeSetItem('userId', userData.telegram_id);
        }

        if (userData.username) {
            safeSetItem('username', userData.username);
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤
        if (userData.balance !== undefined) {
            safeSetItem('userTokens', userData.balance);
            safeSetItem('winix_balance', userData.balance);
        }

        if (userData.coins !== undefined) {
            safeSetItem('userCoins', userData.coins);
            safeSetItem('winix_coins', userData.coins);
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (userData.staking) {
            safeSetItem('stakingData', userData.staking);
            safeSetItem('winix_staking', userData.staking);
            safeSetItem('stakingDataCacheTime', timestamp);
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        if (userData.transactions) {
            safeSetItem('transactionsData', userData.transactions);
            safeSetItem('transactionsDataCacheTime', timestamp);
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        if (userData.settings) {
            safeSetItem('userSettings', userData.settings);
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ —î
        if (userData.additionalData) {
            Object.keys(userData.additionalData).forEach(key => {
                safeSetItem(key, userData.additionalData[key]);
            });
        }

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ—ó –º—ñ—Ç–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        safeSetItem('userDataTimestamp', timestamp);

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        document.dispatchEvent(new CustomEvent('user-data-updated', {
            detail: {
                updatedFields: Object.keys(storedData),
                timestamp: timestamp
            }
        }));

        return true;
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        return false;
    }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage
 * @returns {Object} –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
function getUserDataFromStorage() {
    try {
        const userData = {
            telegram_id: localStorage.getItem('telegram_user_id') || localStorage.getItem('userId'),
            username: localStorage.getItem('username'),
            balance: parseFloat(localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0'),
            coins: parseInt(localStorage.getItem('userCoins') || localStorage.getItem('winix_coins') || '0'),
            timestamp: parseInt(localStorage.getItem('userDataTimestamp') || '0')
        };

        // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        try {
            const stakingData = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
            if (stakingData) {
                userData.staking = JSON.parse(stakingData);
            }
        } catch (e) {
            console.warn("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage:", e);
        }

        // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        try {
            const transactionsData = localStorage.getItem('transactionsData');
            if (transactionsData) {
                userData.transactions = JSON.parse(transactionsData);
            }
        } catch (e) {
            console.warn("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ localStorage:", e);
        }

        return userData;
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage:", error);
        return {
            telegram_id: null,
            balance: 0,
            coins: 0,
            error: error.message
        };
    }
}
/**
 * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage
 * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –æ—á–∏—â–µ–Ω–Ω—è
 */
function clearUserDataStorage() {
    try {
        // –°–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        const keysToRemove = [
            'telegram_user_id', 'userId', 'username',
            'userTokens', 'winix_balance',
            'userCoins', 'winix_coins',
            'stakingData', 'winix_staking', 'stakingDataCacheTime',
            'transactionsData', 'transactionsDataCacheTime',
            'userDataTimestamp', 'userSettings'
        ];

        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ
        keysToRemove.forEach(key => {
            try {
                localStorage.removeItem(key);
            } catch (e) {
                console.warn(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ ${key}:`, e);
            }
        });

        console.log("üßπ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ –∑ localStorage");
        return true;
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage:", error);
        return false;
    }
}
})();