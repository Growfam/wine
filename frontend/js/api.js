/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 *
 * –¶–µ–π –º–æ–¥—É–ª—å —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É—î –≤—Å—ñ API-–∑–∞–ø–∏—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π:
 * - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
 * - –°—Ç–µ–π–∫—ñ–Ω–≥
 * - –†–µ—Ñ–µ—Ä–∞–ª–∏
 * - –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
 * - –ó–∞–≤–¥–∞–Ω–Ω—è
 * —Ç–∞ —ñ–Ω—à—ñ.
 */

(function() {
    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ–≥–æ API –º–æ–¥—É–ª—è");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü –¢–ê –ö–û–ù–°–¢–ê–ù–¢–ò ========

    // –ë–∞–∑–æ–≤–∏–π URL API (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—É—Å—Ç–∏–π –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤)
    const API_BASE_URL = '';

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    let _debugMode = false;

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º
    let _stakingErrorCount = 0;
    let _lastStakingErrorTime = 0;

    // –ó–ú–Ü–ù–ï–ù–û: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    function getUserId() {
        // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
        function isValidId(id) {
            // ID –ø–æ–≤–∏–Ω–µ–Ω —ñ—Å–Ω—É–≤–∞—Ç–∏, –Ω–µ –±—É—Ç–∏ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–º, –Ω–µ –±—É—Ç–∏ null, —ñ –Ω–µ –±—É—Ç–∏ —Ä—è–¥–∫–æ–≤–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è–º —Ü–∏—Ö –∑–Ω–∞—á–µ–Ω—å
            return id &&
                id !== 'undefined' &&
                id !== 'null' &&
                id !== undefined &&
                id !== null &&
                id.toString().trim() !== '';
        }

        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram WebApp —ñ —Ç–æ–∫–µ–Ω–∞
    if (window.Telegram && window.Telegram.WebApp) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ WebApp –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏
        window.Telegram.WebApp.ready();

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            if (tgUser.id) {
                const userId = tgUser.id.toString();
                console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Telegram WebApp:", userId);

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                localStorage.setItem('telegram_user_id', userId);
                return userId;
            }
        }
    }

    // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
    let userId = localStorage.getItem('telegram_user_id');
    if (isValidId(userId)) {
        return userId;
    }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ID
        if (isValidId(userId)) {
            if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage:", userId);
            return userId;
        }

        // –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ Telegram WebApp API –Ω–∞–ø—Ä—è–º—É
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe?.user) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            if (isValidId(tgUser.id)) {
                userId = tgUser.id.toString();
                if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Telegram WebApp:", userId);

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                try {
                    localStorage.setItem('telegram_user_id', userId);
                } catch (e) {
                    console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", e);
                }

                return userId;
            }
        }

        // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ DOM –µ–ª–µ–º–µ–Ω—Ç–∞
        const userIdElement = document.getElementById('user-id');
        if (userIdElement && userIdElement.textContent) {
            userId = userIdElement.textContent.trim();
            if (isValidId(userId)) {
                if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ DOM:", userId);

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                try {
                    localStorage.setItem('telegram_user_id', userId);
                } catch (e) {
                    console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", e);
                }

                return userId;
            }
        }

        // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        const urlParams = new URLSearchParams(window.location.search);
        userId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
        if (isValidId(userId)) {
            if (_debugMode) console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:", userId);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            try {
                localStorage.setItem('telegram_user_id', userId);
            } catch (e) {
                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", e);
            }

            return userId;
        }

        // –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ localStorage
        try {
            const storedId = localStorage.getItem('telegram_user_id');
            if (storedId && !isValidId(storedId)) {
                localStorage.removeItem('telegram_user_id');
                console.warn("‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID –∑ localStorage:", storedId);
            }
        } catch (e) {
            console.warn("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ localStorage:", e);
        }

        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π ID, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
        console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
        return null;
    }

    // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ API
    function handleApiError(error, operation = 'API –æ–ø–µ—Ä–∞—Ü—ñ—ó') {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}:`, error);

        // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
        let errorMessage = error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –∑—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º
        const isStakingError = operation.toLowerCase().includes('—Å—Ç–µ–π–∫—ñ–Ω–≥') ||
            operation.toLowerCase().includes('staking') ||
            errorMessage.toLowerCase().includes('—Å—Ç–µ–π–∫—ñ–Ω–≥') ||
            errorMessage.toLowerCase().includes('staking');

        // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (isStakingError) {
            const currentTime = Date.now();
            // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —è–∫—â–æ –º–∏–Ω—É–ª–æ –±—ñ–ª—å—à–µ 5 —Ö–≤–∏–ª–∏–Ω –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–º–∏–ª–∫–∏
            if (currentTime - _lastStakingErrorTime > 5 * 60 * 1000) {
                _stakingErrorCount = 0;
            }

            _stakingErrorCount++;
            _lastStakingErrorTime = currentTime;

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö
            if (_stakingErrorCount >= 2) {
                console.warn("‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É. –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...");
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setTimeout, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ç—ñ–∫
                setTimeout(() => {
                    try {
                        if (window.WinixAPI && window.WinixAPI.repairStaking) {
                            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —è–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è showToast
                            if (window.showToast) {
                                window.showToast("–í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º...");
                            }
                            window.WinixAPI.repairStaking(false)
                                .then(result => {
                                    if (result.success) {
                                        console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–µ");
                                        _stakingErrorCount = 0;
                                        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É, —è–∫—â–æ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                                        if (window.location.href.includes('staking')) {
                                            if (window.showToast) {
                                                window.showToast("–ü—Ä–æ–±–ª–µ–º—É –∑—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏...");
                                            }
                                            setTimeout(() => window.location.reload(), 1500);
                                        }
                                    }
                                })
                                .catch(repairError => {
                                    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:", repairError);
                                });
                        }
                    } catch (e) {
                        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:", e);
                    }
                }, 100);
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ —ñ —Ñ–æ—Ä–º—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (error.name === 'TypeError' && errorMessage.includes('fetch')) {
            return `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.`;
        }

        if (errorMessage.includes('timeout') || errorMessage.includes('timed out')) {
            return `–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.`;
        }

        if (errorMessage.includes('404')) {
            return `–°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–µ—Å—É—Ä—Å (404). –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
        }

        if (errorMessage.includes('405')) {
            return `–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ü–µ–π –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É (405). –ü–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º.`;
        }

        if (errorMessage.includes('500')) {
            return `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (500). –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`;
        }

        if (errorMessage.includes('undefined') || errorMessage.includes('null')) {
            return `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
        }

        if (errorMessage.includes('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
            return `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–π—Ç–∏ —Ç–∞ —É–≤—ñ–π—Ç–∏ –∑–Ω–æ–≤—É.`;
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ —Ç–∏–ø–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏
        return errorMessage;
    }

    // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    function showLoader() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.classList.add('show');
    }

    function hideLoader() {
        const spinner = document.getElementById('loading-spinner');
        if (spinner) spinner.classList.remove('show');
    }

    // ======== –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø API-–ó–ê–ü–ò–¢–£ ========

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
     * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ URL
     * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
     * @param {Object} data - –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST/PUT –∑–∞–ø–∏—Ç—ñ–≤)
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
     * @param {number} retries - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
     */
    async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 3) {
        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();

        // –ó–ú–Ü–ù–ï–ù–û: –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!userId) {
            console.error(`‚ùå API-–∑–∞–ø–∏—Ç –Ω–∞ ${endpoint} —Å–∫–∞—Å–æ–≤–∞–Ω–æ: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–ª—è—Ö –¥–æ API —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let fixedEndpoint = endpoint;
        // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∞–ª–µ –±–µ–∑ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ
        if (endpoint.startsWith('/api/staking') && !endpoint.includes('/api/user/')) {
            fixedEndpoint = `/api/user/${userId}/staking${endpoint.replace('/api/staking', '')}`;
            console.warn(`‚ö†Ô∏è –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${endpoint} -> ${fixedEndpoint}`);
        }

        // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—é
        const timestamp = Date.now();
        const url = `${API_BASE_URL}${fixedEndpoint}${fixedEndpoint.includes('?') ? '&' : '?'}t=${timestamp}`;

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤–∏–º–∫–Ω–µ–Ω–∏–π –≤ –æ–ø—Ü—ñ—è—Ö
        if (!options.hideLoader) {
            showLoader();
        }

        // –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç —É —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        if (_debugMode) {
            console.log(`üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø–∏—Ç—É –Ω–∞ ${url}`);
            if (data) console.log("üì¶ –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É:", data);
        }

        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É
        const requestOptions = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-Id': userId, // –ó–ú–Ü–ù–ï–ù–û: –¢–µ–ø–µ—Ä –º–∏ –∑–∞–≤–∂–¥–∏ –º–∞—î–º–æ –≤–∞–ª—ñ–¥–Ω–∏–π userId
                ...options.headers
            },
            ...options
        };

        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è POST/PUT
        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
            requestOptions.body = JSON.stringify(data);
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        async function tryRequest(attemptsLeft) {
            try {
                // –ü–û–ö–†–ê–©–ï–ù–ù–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Ç—É –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                // –Ø–∫—â–æ —É –Ω–∞—Å –∑–∞–ø–∏—Ç –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É - –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –º–µ—Ç–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
                if (url.includes('/staking')) {
                    // –ó–∞–≥–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    if (url.includes('/staking/repair') && method.toUpperCase() !== 'POST') {
                        console.warn(`‚ö†Ô∏è –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ—Ç–æ–¥ –¥–ª—è /staking/repair: ${method} -> POST`);
                        requestOptions.method = 'POST';
                    } else if (url.includes('/cancel') && method.toUpperCase() !== 'POST') {
                        console.warn(`‚ö†Ô∏è –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ—Ç–æ–¥ –¥–ª—è /staking/cancel: ${method} -> POST`);
                        requestOptions.method = 'POST';
                    } else if (url.includes('/finalize') && method.toUpperCase() !== 'POST') {
                        console.warn(`‚ö†Ô∏è –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ—Ç–æ–¥ –¥–ª—è /staking/finalize: ${method} -> POST`);
                        requestOptions.method = 'POST';
                    }
                }

                const response = await fetch(url, requestOptions);

                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (!options.hideLoader) {
                    hideLoader();
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (!response.ok) {
                    const statusText = response.statusText || '';
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É: ${response.status} ${statusText} (${url})`);

                    // –î–ª—è 401/403 –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                    if (response.status === 401 || response.status === 403) {
                        console.warn('üîê –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                    }

                    // –î–ª—è 404 –ø–æ–º–∏–ª–æ–∫
                    if (response.status === 404) {
                        console.error(`‚ö†Ô∏è –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${url}`);
                        throw new Error(`–ó–∞–ø–∏—Ç–∞–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (404)`);
                    }

                    // –î–ª—è 405 –ø–æ–º–∏–ª–æ–∫ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥)
                    if (response.status === 405) {
                        console.error(`‚ö†Ô∏è –ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ: ${method} –¥–ª—è ${url}`);

                        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –º–µ—Ç–æ–¥ —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç, —è–∫—â–æ —Ü–µ —Å—Ç–µ–π–∫—ñ–Ω–≥
                        if (url.includes('/staking') && attemptsLeft > 0) {
                            // –Ø–∫—â–æ –º–µ—Ç–æ–¥ POST –Ω–µ –ø—Ä–∞—Ü—é—î, —Å–ø—Ä–æ–±—É—î–º–æ PUT —ñ –Ω–∞–≤–ø–∞–∫–∏
                            if (method.toUpperCase() === 'POST') {
                                console.warn(`üîÑ –°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–µ—Ç–æ–¥ –∑ POST –Ω–∞ PUT –¥–ª—è ${url}`);
                                requestOptions.method = 'PUT';
                                await new Promise(resolve => setTimeout(resolve, 500));
                                return tryRequest(attemptsLeft - 1);
                            } else if (method.toUpperCase() === 'PUT') {
                                console.warn(`üîÑ –°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–µ—Ç–æ–¥ –∑ PUT –Ω–∞ POST –¥–ª—è ${url}`);
                                requestOptions.method = 'POST';
                                await new Promise(resolve => setTimeout(resolve, 500));
                                return tryRequest(attemptsLeft - 1);
                            }
                        }

                        throw new Error(`–ú–µ—Ç–æ–¥ ${method} –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É (405)`);
                    }

                    // –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Å–ø—Ä–æ–±–∏, –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
                    if (attemptsLeft > 0) {
                        const delay = Math.pow(2, retries - attemptsLeft) * 500; // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                        if (_debugMode) {
                            console.log(`‚è±Ô∏è –ü–æ–≤—Ç–æ—Ä –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft})`);
                        }

                        await new Promise(resolve => setTimeout(resolve, delay));
                        return tryRequest(attemptsLeft - 1);
                    }

                    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${statusText}`);
                }

                // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –û–ö, –ø–∞—Ä—Å–∏–º–æ JSON
                let jsonData;
                try {
                    jsonData = await response.json();
                } catch (parseError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', parseError);
                    throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (jsonData && jsonData.status === 'error') {
                    console.error('‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:', jsonData.message);
                    throw new Error(jsonData.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É');
                }

                if (_debugMode) {
                    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∏–π API-–∑–∞–ø–∏—Ç –Ω–∞ ${url}`);
                    console.log("üìä –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", jsonData);
                }

                return jsonData;

            } catch (error) {
                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
                if (!options.hideLoader) {
                    hideLoader();
                }

                // –î–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
                if (error.name === 'TypeError' && attemptsLeft > 0) {
                    const delay = Math.pow(2, retries - attemptsLeft) * 500;
                    console.log(`‚ö†Ô∏è –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft}):`, error.message);

                    await new Promise(resolve => setTimeout(resolve, delay));
                    return tryRequest(attemptsLeft - 1);
                }

                throw error;
            }
        }

        // –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        return tryRequest(retries);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á –¢–ê –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} userData - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram WebApp
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
     */
    async function authorize(userData) {
        return apiRequest('/api/auth', 'POST', userData);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±–µ—Ä–µ—Ç—å—Å—è –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
     * @returns {Promise<Object>} - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getUserData(userId = null) {
        const id = userId || getUserId();
        if (!id) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${id}`);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} userData - –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} - –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function updateUserData(userData) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}`, 'PUT', userData);
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<Object>} - –î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingData() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/staking`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<Array>} - –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function getStakingHistory() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/staking/history`);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function createStaking(amount, period) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/staking`, 'POST', {
            stakingAmount: Math.floor(amount),
            period: period
        });
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
     */
    async function addToStaking(amount, stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –Ø–∫—â–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Ç—Ä–∏–º—É—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            const stakingData = await getStakingData();
            if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            }
            targetStakingId = stakingData.data.stakingId;
        }

        return apiRequest(`/api/user/${userId}/staking/${targetStakingId}`, 'PUT', {
            additionalAmount: Math.floor(amount)
        });
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {string} stakingId - ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function cancelStaking(stakingId = null) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –Ø–∫—â–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Ç—Ä–∏–º—É—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let targetStakingId = stakingId;
        if (!targetStakingId) {
            const stakingData = await getStakingData();
            if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            }
            targetStakingId = stakingData.data.stakingId;
        }

        return apiRequest(`/api/user/${userId}/staking/${targetStakingId}/cancel`, 'POST', {
            timestamp: Date.now()
        });
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @returns {Promise<Object>} - –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    async function calculateExpectedReward(amount, period) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/staking/calculate-reward?amount=${amount}&period=${period}`);
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {boolean} force - –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function repairStaking(force = false) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/staking/repair`, 'POST', {
            force: force,
            timestamp: Date.now()
        });
    }

    /**
     * –ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} adjustBalance - –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async function deepRepairStaking(adjustBalance = 0) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/staking/deep-repair`, 'POST', {
            balance_adjustment: adjustBalance,
            timestamp: Date.now()
        });
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ë–ê–õ–ê–ù–°–£ –¢–ê –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Promise<Object>} - –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async function getBalance() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/balance`);
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     */
    async function addTokens(amount, description = '–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/add-tokens`, 'POST', {
            amount: amount,
            description: description
        });
    }

    /**
     * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
     */
    async function subtractTokens(amount, description = '–í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/subtract-tokens`, 'POST', {
            amount: amount,
            description: description
        });
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     */
    async function addCoins(amount) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/add-coins`, 'POST', {
            amount: amount
        });
    }

    /**
     * –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
     */
    async function subtractCoins(amount) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/subtract-coins`, 'POST', {
            amount: amount
        });
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∂–µ—Ç–æ–Ω—ñ–≤ –≤ —Ç–æ–∫–µ–Ω–∏
     * @param {number} coinsAmount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
     */
    async function convertCoinsToTokens(coinsAmount) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/convert-coins`, 'POST', {
            coins_amount: coinsAmount
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     * @returns {Promise<Object>} - –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
     */
    async function getTransactions(limit = 100) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/transactions?limit=${limit}`);
    }

    /**
     * –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string} recipientId - ID –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
     * @param {number} amount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @param {string} description - –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
     */
    async function sendTokens(recipientId, amount, description = '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤') {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/send-tokens`, 'POST', {
            recipient_id: recipientId,
            amount: amount,
            description: description
        });
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–á –°–ò–°–¢–ï–ú–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
     * @returns {Promise<Object>} - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
     */
    async function getReferralLink() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/referral-link`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     * @returns {Promise<Object>} - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     */
    async function getReferrals() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/referrals`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    async function claimReferralReward() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/claim-referral-reward`, 'POST');
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø TODO –°–ò–°–¢–ï–ú–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
     */
    async function getTodoList() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/todos`);
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} task - –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function addTodoItem(task) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/todos`, 'POST', task);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {Object} taskData - –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} - –û–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function updateTodoItem(taskId, taskData) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/todos/${taskId}`, 'PUT', taskData);
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è
     */
    async function deleteTodoItem(taskId) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/todos/${taskId}`, 'DELETE');
    }

    /**
     * –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ
     * @param {string} taskId - ID –∑–∞–≤–¥–∞–Ω–Ω—è
     * @returns {Promise<Object>} - –û–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async function completeTodoItem(taskId) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/todos/${taskId}/complete`, 'POST');
    }

    // ======== API –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ó–Ü–ì–†–ê–®–Ü–í ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     * @returns {Promise<Object>} - –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    async function getRaffles() {
        return apiRequest('/api/raffles');
    }

    /**
     * –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
     * @param {string} raffleId - ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     * @param {string} raffleType - –¢–∏–ø —Ä–æ–∑—ñ–≥—Ä–∞—à—É ('main', 'daily', etc.)
     * @param {number} tokenAmount - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç—ñ
     */
    async function participateInRaffle(raffleId, raffleType, tokenAmount) {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest('/api/participate', 'POST', {
            userId: userId,
            raffleId: raffleId,
            raffleType: raffleType,
            tokenAmount: tokenAmount
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Promise<Object>} - –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    async function getRaffleHistory() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/raffle-history`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É –Ω–æ–≤–∞—á–∫–∞
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É
     */
    async function claimNewbieBonus() {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
        return apiRequest(`/api/user/${userId}/claim-newbie-bonus`, 'POST');
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API –ú–û–î–£–õ–¨ ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç
    window.WinixAPI = {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setDebugMode: function(debug) {
            _debugMode = debug;
            return this;
        },

        // –ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
        apiRequest,

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        authorize,
        getUserData,
        updateUserData,

        // –°—Ç–µ–π–∫—ñ–Ω–≥
        getStakingData,
        getStakingHistory,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,
        repairStaking,
        deepRepairStaking,

        // –ë–∞–ª–∞–Ω—Å —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        getBalance,
        addTokens,
        subtractTokens,
        addCoins,
        subtractCoins,
        convertCoinsToTokens,
        getTransactions,
        sendTokens,

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
        getReferralLink,
        getReferrals,
        claimReferralReward,

        // –ó–∞–≤–¥–∞–Ω–Ω—è
        getTodoList,
        addTodoItem,
        updateTodoItem,
        deleteTodoItem,
        completeTodoItem,

        // –†–æ–∑—ñ–≥—Ä–∞—à—ñ
        getRaffles,
        participateInRaffle,
        getRaffleHistory,
        claimNewbieBonus,

        // –£—Ç–∏–ª—ñ—Ç–∏
        getUserId,
        handleApiError
    };

    // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é apiRequest –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.apiRequest = apiRequest;

    console.log("‚úÖ API: –Ñ–¥–∏–Ω–∏–π API –º–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
})();


/**
 * –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è API –º–æ–¥—É–ª—è
 *
 * –¶—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–ø—Ä–∞–≤–ª—è—é—Ç—å –ø–æ–º–∏–ª–∫–∏ API-–∑–∞–ø–∏—Ç—ñ–≤ –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞ URL
 * –î–æ–¥–∞–π—Ç–µ —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É api.js –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª api-fix.js
 */

(function() {
    console.log("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –¥–ª—è API –º–æ–¥—É–ª—è");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –º–æ–¥—É–ª—è
    if (!window.WinixAPI) {
        console.error("‚ùå API-FIX: API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        return;
    }

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó getUserId
    const originalGetUserId = window.WinixAPI.getUserId;

    window.WinixAPI.getUserId = function() {
        try {
            // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
            function isValidId(id) {
                return id &&
                    id !== 'undefined' &&
                    id !== 'null' &&
                    id !== undefined &&
                    id !== null &&
                    id.toString().trim() !== '';
            }

            // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            const originalId = originalGetUserId();
            if (isValidId(originalId)) {
                return originalId;
            }

            // –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –≤–∞–ª—ñ–¥–Ω–∏–π ID, —à—É–∫–∞—î–º–æ –¥–∞–ª—ñ

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram WebApp —ñ —Ç–æ–∫–µ–Ω–∞
            if (window.Telegram && window.Telegram.WebApp) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ WebApp –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏
                window.Telegram.WebApp.ready();

                // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if (window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
                    const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
                    if (tgUser.id) {
                        const userId = tgUser.id.toString();
                        console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Telegram WebApp:", userId);

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                        localStorage.setItem('telegram_user_id', userId);
                        return userId;
                    }
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            const storedId = localStorage.getItem('telegram_user_id');
            if (isValidId(storedId)) {
                return storedId;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
            const userIdElement = document.getElementById('user-id');
            if (userIdElement && userIdElement.textContent) {
                const domId = userIdElement.textContent.trim();
                if (isValidId(domId)) {
                    localStorage.setItem('telegram_user_id', domId);
                    return domId;
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            const urlParams = new URLSearchParams(window.location.search);
            const urlId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
            if (isValidId(urlId)) {
                localStorage.setItem('telegram_user_id', urlId);
                return urlId;
            }

            // –Ø–∫—â–æ –≤—Å–µ —ñ–Ω—à–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π ID
            const randomId = '2449' + Math.floor(10000 + Math.random() * 90000);
            localStorage.setItem('telegram_user_id', randomId);
            console.warn("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π ID:", randomId);
            return randomId;
        } catch (e) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getUserId:", e);

            // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π ID
            return '2449000000';
        }
    };

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó apiRequest
    const originalApiRequest = window.WinixAPI.apiRequest;

    window.WinixAPI.apiRequest = function(endpoint, method = 'GET', data = null, options = {}, retries = 3) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ callback-—Ñ—É–Ω–∫—Ü—ñ—î—é –∑–∞–º—ñ—Å—Ç—å endpoint
            if (typeof endpoint === 'function' || endpoint.includes('function') || endpoint.includes('=>')) {
                console.error("‚ùå API-FIX: –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π endpoint:", endpoint);
                console.error("‚ùå API-FIX: –í endpoint –ø–µ—Ä–µ–¥–∞–Ω–∞ callback-—Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–º—ñ—Å—Ç—å URL");

                // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ endpoint –Ω–∞ '/api/user/:userId'
                endpoint = `/api/user/${window.WinixAPI.getUserId()}`;
                console.log("üõ†Ô∏è API-FIX: Endpoint –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞:", endpoint);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å endpoint –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏
            if (endpoint.includes('(') || endpoint.includes(')') || endpoint.includes('{') || endpoint.includes('}')) {
                console.error("‚ùå API-FIX: –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π endpoint –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏:", endpoint);

                // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ endpoint –Ω–∞ –±–∞–∑–æ–≤–∏–π URL
                endpoint = `/api/user/${window.WinixAPI.getUserId()}`;
                console.log("üõ†Ô∏è API-FIX: Endpoint –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞:", endpoint);
            }

            // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤ endpoint –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö —î –≤–∞–ª—ñ–¥–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (endpoint.includes('/api/user/null') ||
                endpoint.includes('/api/user/undefined') ||
                endpoint.includes('/api/user/') && endpoint.includes('error')) {

                console.error("‚ùå API-FIX: –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ endpoint:", endpoint);

                // –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID –Ω–∞ –≤–∞–ª—ñ–¥–Ω–∏–π
                const userId = window.WinixAPI.getUserId();
                endpoint = endpoint.replace(/\/api\/user\/[^/]+/, `/api/user/${userId}`);
                console.log("üõ†Ô∏è API-FIX: Endpoint –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞:", endpoint);
            }

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            return originalApiRequest(endpoint, method, data, options, retries);
        } catch (e) {
            console.error("‚ùå API-FIX: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ apiRequest:", e);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –∑ –ø–æ–º–∏–ª–∫–æ—é
            return Promise.reject(e);
        }
    };

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó getStakingData
    const originalGetStakingData = window.WinixAPI.getStakingData;

    window.WinixAPI.getStakingData = function() {
        try {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –≤–∏–∫–ª–∏–∫ –∑ callback-—Ñ—É–Ω–∫—Ü—ñ—î—é
            if (arguments.length > 0 && typeof arguments[0] === 'function') {
                console.warn("‚ö†Ô∏è API-FIX: –í–∏—è–≤–ª–µ–Ω–æ –≤–∏–∫–ª–∏–∫ getStakingData –∑ callback-—Ñ—É–Ω–∫—Ü—ñ—î—é. –ê–¥–∞–ø—Ç—É—î–º–æ –¥–æ Promise API.");

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ callback-—Ñ—É–Ω–∫—Ü—ñ—é
                const callback = arguments[0];

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ Promise
                originalGetStakingData()
                    .then(data => {
                        callback(null, data.data || data);
                    })
                    .catch(error => {
                        callback(error);
                    });

                return;
            }

            // –ó–≤–∏—á–∞–π–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ Promise
            return originalGetStakingData();
        } catch (e) {
            console.error("‚ùå API-FIX: –ü–æ–º–∏–ª–∫–∞ –≤ getStakingData:", e);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –∑ –ø–æ–º–∏–ª–∫–æ—é
            return Promise.reject(e);
        }
    };

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó getUserData
    const originalGetUserData = window.WinixAPI.getUserData;

    window.WinixAPI.getUserData = function() {
        try {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –≤–∏–∫–ª–∏–∫ –∑ callback-—Ñ—É–Ω–∫—Ü—ñ—î—é
            if (arguments.length > 0 && typeof arguments[0] === 'function') {
                console.warn("‚ö†Ô∏è API-FIX: –í–∏—è–≤–ª–µ–Ω–æ –≤–∏–∫–ª–∏–∫ getUserData –∑ callback-—Ñ—É–Ω–∫—Ü—ñ—î—é. –ê–¥–∞–ø—Ç—É—î–º–æ –¥–æ Promise API.");

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ callback-—Ñ—É–Ω–∫—Ü—ñ—é
                const callback = arguments[0];

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ Promise
                originalGetUserData()
                    .then(data => {
                        callback(null, data.data || data);
                    })
                    .catch(error => {
                        callback(error);
                    });

                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å userId –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ callback-—Ñ—É–Ω–∫—Ü—ñ—î—é
            if (arguments.length > 0 && typeof arguments[0] === 'string') {
                const userId = arguments[0];
                if (userId.includes('function') || userId.includes('=>')) {
                    console.error("‚ùå API-FIX: –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π userId –ø–∞—Ä–∞–º–µ—Ç—Ä:", userId);

                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                    return originalGetUserData();
                }
            }

            // –ó–≤–∏—á–∞–π–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ Promise
            return originalGetUserData.apply(this, arguments);
        } catch (e) {
            console.error("‚ùå API-FIX: –ü–æ–º–∏–ª–∫–∞ –≤ getUserData:", e);

            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –∑ –ø–æ–º–∏–ª–∫–æ—é
            return Promise.reject(e);
        }
    };

    // –ü–∞—Ç—á –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ 500 –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥
    (function patchStakingRewardCalculation() {
        if (!window.WinixAPI) return;

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        const originalCalculateExpectedReward = window.WinixAPI.calculateExpectedReward;

        // –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–æ–≤–æ—é, —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏
        window.WinixAPI.calculateExpectedReward = function(amount, period) {
            // –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            function calculateLocalReward(amount, period) {
                amount = parseFloat(amount);
                period = parseInt(period);
                if (isNaN(amount) || isNaN(period)) return 0;

                const rewardRates = { 7: 4, 14: 9, 28: 15 };
                const rewardPercent = rewardRates[period] || 9;
                return parseFloat(((amount * rewardPercent) / 100).toFixed(2));
            }

            return new Promise((resolve) => {
                // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
                originalCalculateExpectedReward(amount, period)
                    .then(result => {
                        resolve(result);
                    })
                    .catch(error => {
                        console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:', error);

                        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                        resolve({
                            status: 'success',
                            data: {
                                amount: amount,
                                period: period,
                                reward: calculateLocalReward(amount, period),
                                source: 'local_calculation'
                            }
                        });
                    });
            });
        };

        console.log('‚úÖ –ü–∞—Ç—á –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥-–≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ');
    })();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
    const userId = window.WinixAPI.getUserId();
    console.log("‚úÖ API-FIX: –û—Ç—Ä–∏–º–∞–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userId);

    console.log("‚úÖ API-FIX: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è API –º–æ–¥—É–ª—è —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ");

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è API
    document.dispatchEvent(new CustomEvent('api-fixed'));
})();