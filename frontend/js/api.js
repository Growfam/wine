/**
 * api.js - –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö API-–∑–∞–ø–∏—Ç—ñ–≤ WINIX
 * –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º undefined –∑–∞–ø–∏—Ç—ñ–≤
 * @version 2.0.0
 */

(function() {
    'use strict';

    console.log("üîå API: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ–≥–æ API –º–æ–¥—É–ª—è (v2.0.0)");

    // ======== –ö–†–ò–¢–ò–ß–ù–Ü –ü–ï–†–ï–í–Ü–†–ö–ò –ù–ê –ü–û–ß–ê–¢–ö–£ ========

    // –ë–ª–æ–∫—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —è–∫—â–æ –Ω–µ–º–∞—î Telegram WebApp
    if (!window.Telegram || !window.Telegram.WebApp) {
        console.error("‚ùå API: –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê - Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!");
        return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å User ID
    let initialUserId = null;
    const checkUserId = () => {
        // –°–ø—Ä–æ–±–∞ 1: –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞
        if (window._WINIX_USER_ID && window._WINIX_USER_ID !== 'undefined') {
            return window._WINIX_USER_ID;
        }

        // –°–ø—Ä–æ–±–∞ 2: Telegram WebApp
        if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
            const id = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
            window._WINIX_USER_ID = id;
            return id;
        }

        // –°–ø—Ä–æ–±–∞ 3: localStorage
        const storedId = localStorage.getItem('telegram_user_id');
        if (storedId && storedId !== 'undefined' && storedId !== 'null') {
            window._WINIX_USER_ID = storedId;
            return storedId;
        }

        return null;
    };

    initialUserId = checkUserId();

    if (!initialUserId) {
        console.warn("‚ö†Ô∏è API: User ID —â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, —á–µ–∫–∞—î–º–æ...");

        // –ß–µ–∫–∞—î–º–æ –Ω–∞ User ID –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
        let waitAttempts = 0;
        const waitInterval = setInterval(() => {
            initialUserId = checkUserId();
            waitAttempts++;

            if (initialUserId) {
                clearInterval(waitInterval);
                console.log("‚úÖ API: User ID –æ—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:", initialUserId);
                initializeAPI();
            } else if (waitAttempts > 50) { // 5 —Å–µ–∫—É–Ω–¥
                clearInterval(waitInterval);
                console.error("‚ùå API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ User ID –ø—ñ—Å–ª—è 5 —Å–µ–∫—É–Ω–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è");
            }
        }, 100);

        // –Ø–∫—â–æ ID –≤–∂–µ —î, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–¥—Ä–∞–∑—É
        if (initialUserId) {
            clearInterval(waitInterval);
            initializeAPI();
        }
    } else {
        console.log("‚úÖ API: User ID –¥–æ—Å—Ç—É–ø–Ω–∏–π –æ–¥—Ä–∞–∑—É:", initialUserId);
        initializeAPI();
    }

    function initializeAPI() {
        // ======== API-–®–õ–Ø–•–ò ========

        const API_PATHS = {
            // Health check
            HEALTH: 'health',
            PING: 'ping',

            // –ó–∞–≤–¥–∞–Ω–Ω—è
            TASKS: {
                ALL: 'quests/tasks',
                BY_TYPE: (type) => `quests/tasks/${type}`,
                SOCIAL: 'quests/tasks/social',
                LIMITED: 'quests/tasks/limited',
                PARTNER: 'quests/tasks/partner',
                REFERRAL: 'quests/tasks/referral',
                DETAILS: (taskId) => `quests/tasks/${taskId}/details`,
                START: (taskId) => `quests/tasks/${taskId}/start`,
                VERIFY: (taskId) => `quests/tasks/${taskId}/verify`,
                PROGRESS: (taskId) => `quests/tasks/${taskId}/progress`
            },

            // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —à–ª—è—Ö–∏
            USER: {
                DATA: (userId) => `user/${userId}`,
                BALANCE: (userId) => `user/${userId}/balance`,
                TASKS: (userId) => `user/${userId}/tasks`,
                PROGRESS: (userId) => `user/${userId}/progress`,
                TASK_STATUS: (userId, taskId) => `user/${userId}/tasks/${taskId}/status`,
                SETTINGS: (userId) => `user/${userId}/settings`
            },

            // –©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏
            DAILY_BONUS: {
                STATUS: (userId) => `user/${userId}/daily-bonus`,
                CLAIM: (userId) => `user/${userId}/claim-daily-bonus`,
                STREAK: (userId) => `user/${userId}/claim-streak-bonus`,
                HISTORY: (userId) => `user/${userId}/bonus-history`
            },

            // –°—Ç–µ–π–∫—ñ–Ω–≥
            STAKING: {
                DATA: (userId) => `user/${userId}/staking`,
                HISTORY: (userId) => `user/${userId}/staking/history`,
                CANCEL: (userId, stakingId) => `user/${userId}/staking/${stakingId}/cancel`
            },

            // –Ü–Ω—à—ñ
            AUTH: {
                TELEGRAM: 'auth/telegram',
                REFRESH_TOKEN: 'auth/refresh-token'
            },

            // Wallet
            WALLET: {
                STATUS: (userId) => `wallet/${userId}/status`,
                CONNECT: (userId) => `wallet/${userId}/connect`,
                VERIFY: (userId) => `wallet/${userId}/verify`
            },

            // –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            TRANSACTIONS: (userId) => `user/${userId}/transactions`
        };

        // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

        const API_BASE_URL = 'https://winixbot.com';

        // –°—Ç–∞–Ω API
        let _apiState = {
            isHealthy: false,
            lastHealthCheck: 0,
            healthCheckInterval: null,
            healthCheckInProgress: false,
            consecutiveFailures: 0,
            maxFailures: 3
        };

        // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        let _debugMode = false;

        // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        let _userCache = null;
        let _userCacheTime = 0;
        const USER_CACHE_TTL = 300000; // 5 —Ö–≤–∏–ª–∏–Ω

        let _stakingCache = null;
        let _stakingCacheTime = 0;
        const STAKING_CACHE_TTL = 180000; // 3 —Ö–≤–∏–ª–∏–Ω–∏

        // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–º–∏
        let _pendingRequests = {};
        let _activeEndpoints = new Set();
        let _blockedEndpoints = {};
        let _lastRequestsByEndpoint = {};

        // –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        const REQUEST_THROTTLE = {
            '/user/': 8000,
            '/staking': 10000,
            '/balance': 6000,
            '/transactions': 15000,
            '/participate-raffle': 5000,
            '/wallet/': 2000,
            'default': 5000
        };

        // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
        let _requestCounter = {
            total: 0,
            errors: 0,
            current: 0,
            lastReset: Date.now()
        };

        // –°—Ç–∞–Ω –∑'—î–¥–Ω–∞–Ω–Ω—è
        let _connectionState = {
            isConnected: true,
            lastSuccessTime: Date.now(),
            failedAttempts: 0,
            maxRetries: 5
        };

        // –¢–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        let _authToken = null;
        let _authTokenExpiry = 0;

        // ======== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ========

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
         */
        function isValidId(id) {
            return id &&
                   id !== 'undefined' &&
                   id !== 'null' &&
                   id !== undefined &&
                   id !== null &&
                   typeof id !== 'function' &&
                   id.toString().trim() !== '' &&
                   !id.toString().includes('function') &&
                   !id.toString().includes('=>') &&
                   /^\d+$/.test(id.toString());
        }

        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
         * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
         */
        function getUserId() {
            try {
                // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É
                if (window._WINIX_USER_ID && isValidId(window._WINIX_USER_ID)) {
                    return window._WINIX_USER_ID;
                }

                // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
                if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
                    const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();

                    if (isValidId(tgUserId)) {
                        window._WINIX_USER_ID = tgUserId;

                        try {
                            localStorage.setItem('telegram_user_id', tgUserId);
                        } catch (e) {
                            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID –≤ localStorage:", e);
                        }

                        return tgUserId;
                    }
                }

                // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
                try {
                    const localId = localStorage.getItem('telegram_user_id');
                    if (isValidId(localId)) {
                        window._WINIX_USER_ID = localId;
                        return localId;
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ localStorage:", e);
                }

                // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç
                try {
                    const userIdElement = document.getElementById('user-id');
                    if (userIdElement?.textContent) {
                        const domId = userIdElement.textContent.trim();
                        if (isValidId(domId)) {
                            window._WINIX_USER_ID = domId;

                            try {
                                localStorage.setItem('telegram_user_id', domId);
                            } catch (e) {}

                            return domId;
                        }
                    }
                } catch (e) {
                    console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑ DOM:", e);
                }

                // ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                console.error("‚ùå API: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
                return null;

            } catch (e) {
                console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
                return null;
            }
        }

        /**
         * –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ä—è–¥–æ–∫ –ø–µ–≤–Ω–∏–π –ø—ñ–¥—Ä—è–¥–æ–∫
         */
        function safeIncludes(str, substring) {
            if (!str || typeof str !== 'string') return false;
            return str.includes(substring);
        }

        /**
         * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è API endpoint
         */
        function normalizeEndpoint(endpoint) {
            if (!endpoint) return 'api';

            // –Ø–∫—â–æ endpoint —î —Ñ—É–Ω–∫—Ü—ñ—î—é, –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ó—ó
            if (typeof endpoint === 'function') {
                try {
                    endpoint = endpoint();
                    if (!endpoint) return 'api';
                } catch (e) {
                    console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É endpoint —Ñ—É–Ω–∫—Ü—ñ—ó:", e);
                    return 'api';
                }
            }

            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫
            endpoint = String(endpoint);

            // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ª–µ—à
            let cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;

            // –í–∏–¥–∞–ª—è—î–º–æ –∫—ñ–Ω—Ü–µ–≤–∏–π —Å–ª–µ—à
            if (cleanEndpoint.endsWith('/') && cleanEndpoint.length > 1) {
                cleanEndpoint = cleanEndpoint.substring(0, cleanEndpoint.length - 1);
            }

            // –î–æ–¥–∞—î–º–æ api/ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (!cleanEndpoint.startsWith('api/') && cleanEndpoint !== 'api') {
                cleanEndpoint = 'api/' + cleanEndpoint;
            }

            return cleanEndpoint;
        }

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID
         */
        function isValidUUID(id) {
            if (!id || typeof id !== 'string') return false;

            const normalized = id.trim().toLowerCase();
            const patterns = {
                standard: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
                noHyphens: /^[0-9a-f]{32}$/i,
                braced: /^\{[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\}$/i
            };

            return patterns.standard.test(normalized) ||
                   patterns.noHyphens.test(normalized) ||
                   patterns.braced.test(normalized);
        }

        // ======== HEALTH CHECK –§–£–ù–ö–¶–Ü–á ========

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
         */
        async function checkApiHealth() {
            if (_apiState.healthCheckInProgress) {
                return _apiState.isHealthy;
            }

            _apiState.healthCheckInProgress = true;

            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 5000);

                const response = await fetch(`${API_BASE_URL}/api/${API_PATHS.HEALTH}`, {
                    method: 'GET',
                    signal: controller.signal,
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                clearTimeout(timeoutId);

                if (response.ok) {
                    _apiState.isHealthy = true;
                    _apiState.lastHealthCheck = Date.now();
                    _apiState.consecutiveFailures = 0;
                    _connectionState.isConnected = true;
                    _connectionState.lastSuccessTime = Date.now();

                    hideServerUnavailableMessage();
                    return true;
                } else {
                    throw new Error(`Health check failed: ${response.status}`);
                }

            } catch (error) {
                console.error("‚ùå API: Health check –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π:", error.message);

                _apiState.isHealthy = false;
                _apiState.consecutiveFailures++;
                _connectionState.isConnected = false;

                if (_apiState.consecutiveFailures >= _apiState.maxFailures) {
                    showServerUnavailableMessage();
                }

                return false;
            } finally {
                _apiState.healthCheckInProgress = false;
            }
        }

        /**
         * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
         */
        function showServerUnavailableMessage() {
            let banner = document.getElementById('server-unavailable-banner');
            if (!banner) {
                banner = document.createElement('div');
                banner.id = 'server-unavailable-banner';
                banner.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    background: #e74c3c;
                    color: white;
                    text-align: center;
                    padding: 15px;
                    z-index: 10000;
                    font-size: 14px;
                    font-weight: 500;
                    border-bottom: 3px solid #c0392b;
                `;
                banner.innerHTML = `
                    <div>‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</div>
                    <div style="font-size: 12px; margin-top: 5px; opacity: 0.9;">
                        –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è–º –ø—Ä–æ–±–ª–µ–º–∏
                    </div>
                `;
                document.body.insertBefore(banner, document.body.firstChild);
            }

            if (navigator.vibrate) {
                navigator.vibrate([200, 100, 200]);
            }
        }

        /**
         * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
         */
        function hideServerUnavailableMessage() {
            const banner = document.getElementById('server-unavailable-banner');
            if (banner) {
                banner.remove();
            }
        }

        /**
         * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è
         */
        function startHealthCheck() {
            if (_apiState.healthCheckInterval) {
                clearInterval(_apiState.healthCheckInterval);
            }

            checkApiHealth();

            _apiState.healthCheckInterval = setInterval(async () => {
                const isHealthy = await checkApiHealth();

                if (isHealthy && _apiState.consecutiveFailures === 0) {
                    hideServerUnavailableMessage();
                }
            }, 30000);
        }

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
         */
        async function ensureApiReady() {
            // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - —è–∫—â–æ –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–∏ —ñ –≤—Å–µ –æ–∫
            if (_apiState.isHealthy && (Date.now() - _apiState.lastHealthCheck < 60000)) {
                return true;
            }

            return await checkApiHealth();
        }

        // ======== TOKEN MANAGEMENT ========

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
         */
        function getAuthToken() {
            try {
                const now = Date.now();

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω –≤ –ø–∞–º'—è—Ç—ñ
                if (_authToken && _authTokenExpiry > now) {
                    return _authToken;
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ –∑ localStorage
                let token = localStorage.getItem('auth_token');
                let tokenExpiry = parseInt(localStorage.getItem('auth_token_expiry') || '0');

                if (token && typeof token === 'string' && token.length > 5) {
                    if (tokenExpiry > now) {
                        _authToken = token;
                        _authTokenExpiry = tokenExpiry;
                        return token;
                    }
                }

                return null;
            } catch (e) {
                console.error("üîå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
                return null;
            }
        }

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
         */
        async function refreshToken() {
            if (_pendingRequests['refresh-token']) {
                return _pendingRequests['refresh-token'];
            }

            const refreshPromise = new Promise(async (resolve, reject) => {
                try {
                    const userId = getUserId();

                    if (!userId) {
                        throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                    }

                    const requestBody = {
                        telegram_id: userId,
                        token: _authToken || '',
                        user_id: userId
                    };

                    const currentToken = getAuthToken();

                    const response = await fetch(`${API_BASE_URL}/${normalizeEndpoint(API_PATHS.AUTH.REFRESH_TOKEN)}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Telegram-User-Id': userId,
                            ...(currentToken ? { 'Authorization': `Bearer ${currentToken}` } : {})
                        },
                        body: JSON.stringify(requestBody)
                    });

                    if (!response.ok) {
                        if (response.status === 400 || response.status === 401) {
                            clearAuthToken();
                            throw new Error("–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è");
                        }
                        throw new Error(`–ü–æ–º–∏–ª–∫–∞ HTTP: ${response.status}`);
                    }

                    const data = await response.json();

                    if (data && data.status === 'success' && data.token) {
                        _authToken = data.token;

                        if (data.expires_at) {
                            _authTokenExpiry = new Date(data.expires_at).getTime();
                        } else if (data.expires_in) {
                            _authTokenExpiry = Date.now() + (data.expires_in * 1000);
                        } else {
                            _authTokenExpiry = Date.now() + (24 * 60 * 60 * 1000);
                        }

                        try {
                            localStorage.setItem('auth_token', _authToken);
                            localStorage.setItem('auth_token_expiry', _authTokenExpiry.toString());
                        } catch (e) {
                            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
                        }

                        document.dispatchEvent(new CustomEvent('token-refreshed', {
                            detail: { token: _authToken, expires_at: _authTokenExpiry }
                        }));

                        resolve(_authToken);
                    } else {
                        throw new Error(data.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É");
                    }
                } catch (error) {
                    console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", error);
                    reject(error);
                } finally {
                    delete _pendingRequests['refresh-token'];
                }
            });

            _pendingRequests['refresh-token'] = refreshPromise;
            return refreshPromise;
        }

        /**
         * –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
         */
        function clearAuthToken() {
            _authToken = null;
            _authTokenExpiry = 0;

            try {
                localStorage.removeItem('auth_token');
                localStorage.removeItem('auth_token_expiry');
            } catch (e) {
                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", e);
            }

            document.dispatchEvent(new CustomEvent('token-cleared'));
        }

        // ======== RATE LIMITING ========

        /**
         * –û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å throttle –¥–ª—è endpoint
         */
        function getThrottleTime(endpoint) {
            for (const key in REQUEST_THROTTLE) {
                if (safeIncludes(endpoint, key)) {
                    return REQUEST_THROTTLE[key];
                }
            }
            return REQUEST_THROTTLE.default;
        }

        /**
         * –û–±—Ä–æ–±–∫–∞ rate limiting
         */
        function handleRateLimiting(endpoint, retryAfter) {
            console.log(`‚è≥ Rate limiting: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${retryAfter}—Å –¥–ª—è ${endpoint}`);

            if (_blockedEndpoints[endpoint]?.timeoutId) {
                clearTimeout(_blockedEndpoints[endpoint].timeoutId);
            }

            const retryTimeoutId = setTimeout(() => {
                console.log(`‚úÖ –¢–µ—Ä–º—ñ–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è ${endpoint} –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è`);
                delete _blockedEndpoints[endpoint];

                if (typeof window.showToast === 'function') {
                    window.showToast('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ', 'success');
                }
            }, retryAfter * 1000);

            _blockedEndpoints[endpoint] = {
                until: Date.now() + (retryAfter * 1000),
                timeoutId: retryTimeoutId
            };
        }

        /**
         * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ endpoint –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
         */
        function isEndpointBlocked(endpoint) {
            if (!endpoint) return false;

            return Object.keys(_blockedEndpoints).some(key => {
                if ((safeIncludes(endpoint, key) || key === 'default') &&
                    _blockedEndpoints[key].until > Date.now()) {
                    return true;
                }
                return false;
            });
        }

        // ======== –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø API –ó–ê–ü–ò–¢–£ ========

        /**
         * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—ñ–≤
         */
        async function apiRequest(endpoint, method = 'GET', data = null, options = {}, retries = 2) {
            try {
                // –ö–†–ò–¢–ò–ß–ù–û: –ë–ª–æ–∫—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –∑ undefined
                if (!endpoint || endpoint.includes('undefined')) {
                    console.error("üîå API: –ë–õ–û–ö–û–í–ê–ù–û –∑–∞–ø–∏—Ç –∑ undefined:", endpoint);
                    return Promise.reject({
                        status: 'error',
                        message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π endpoint –∑ undefined',
                        code: 'invalid_endpoint'
                    });
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ User ID
                const userId = getUserId();
                if (!userId) {
                    console.error("üîå API: –ù–µ–º–∞—î User ID –¥–ª—è –∑–∞–ø–∏—Ç—É");
                    return Promise.reject({
                        status: 'error',
                        message: 'User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                        code: 'no_user_id'
                    });
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API
                if (!options.skipHealthCheck) {
                    try {
                        await ensureApiReady();
                    } catch (error) {
                        console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:", error);

                        if (!options.suppressErrors) {
                            return Promise.reject({
                                status: 'error',
                                message: error.message,
                                code: 'server_unavailable'
                            });
                        }
                    }
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limiting
                if (!options.bypassThrottle && isEndpointBlocked(endpoint)) {
                    const blockedKey = Object.keys(_blockedEndpoints).find(key =>
                        safeIncludes(endpoint, key) || key === 'default');

                    if (blockedKey) {
                        const waitTime = Math.ceil((_blockedEndpoints[blockedKey].until - Date.now()) / 1000);

                        return Promise.reject({
                            status: 'error',
                            message: `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${waitTime} —Å–µ–∫—É–Ω–¥.`,
                            code: 'rate_limited',
                            retryAfter: waitTime
                        });
                    }
                }

                // –§–æ—Ä–º—É—î–º–æ URL
                let url;
                if (safeIncludes(endpoint, 'http')) {
                    url = endpoint;
                } else {
                    const normalizedEndpoint = normalizeEndpoint(endpoint);
                    url = `${API_BASE_URL}/${normalizedEndpoint}`.replace(/([^:]\/)\/+/g, "$1");

                    // –î–æ–¥–∞—î–º–æ timestamp –¥–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤
                    if (method === 'GET') {
                        const hasQuery = safeIncludes(url, '?');
                        const timestamp = Math.floor(Date.now() / 1000);
                        url += (hasQuery ? '&' : '?') + `t=${timestamp}`;
                    }
                }

                // –ó–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = {
                    'Content-Type': 'application/json',
                    ...(options.headers || {})
                };

                // –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                if (!options.skipTokenCheck) {
                    const token = getAuthToken();
                    if (token) {
                        headers['Authorization'] = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
                    }
                }

                // User ID –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
                if (!options.skipUserIdCheck) {
                    headers['X-Telegram-User-Id'] = userId;
                }

                // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
                const requestOptions = {
                    method: method,
                    headers: headers,
                    timeout: options.timeout || 20000
                };

                // –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É
                if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
                    requestOptions.body = JSON.stringify(data);
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                if (!options.allowParallel && _activeEndpoints.has(endpoint)) {
                    return Promise.reject({
                        status: 'error',
                        message: '–ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É',
                        code: 'concurrent_request'
                    });
                }

                // –î–æ–¥–∞—î–º–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
                _activeEndpoints.add(endpoint);

                // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è wallet –∑–∞–ø–∏—Ç—ñ–≤
                if (endpoint.includes('wallet/')) {
                    const now = Date.now();
                    const lastWalletRequest = window._lastWalletRequestTime || 0;
                    const timeSince = now - lastWalletRequest;

                    if (timeSince < 2000) {
                        const waitTime = 2000 - timeSince;
                        await new Promise(resolve => setTimeout(resolve, waitTime));
                    }

                    window._lastWalletRequestTime = Date.now();
                }

                let lastError = null;

                try {
                    _requestCounter.total++;
                    _requestCounter.current++;

                    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    if (!options.hideLoader && typeof window.showLoading === 'function') {
                        window.showLoading();
                    }

                    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), requestOptions.timeout);

                    requestOptions.signal = controller.signal;

                    const fetchResponse = await fetch(url, requestOptions);

                    clearTimeout(timeoutId);

                    // –ß–∏—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    let response;
                    try {
                        const contentType = fetchResponse.headers.get('content-type');

                        if (contentType && contentType.includes('application/json')) {
                            response = await fetchResponse.json();
                        } else {
                            const responseText = await fetchResponse.text();
                            response = { message: responseText };
                        }
                    } catch (error) {
                        console.error('‚ùå API: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error);
                        response = { message: '–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ' };
                    }

                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    if (!options.hideLoader && typeof window.hideLoading === 'function') {
                        window.hideLoading();
                    }

                    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
                    if (!fetchResponse.ok) {
                        // 401 - —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
                        if (fetchResponse.status === 401 && retries > 0) {
                            console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω...");

                            try {
                                await refreshToken();
                                return apiRequest(endpoint, method, data, options, retries - 1);
                            } catch (tokenError) {
                                console.error("üîå API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", tokenError);
                                clearAuthToken();
                            }
                        }

                        // 404 - —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
                        if (fetchResponse.status === 404) {
                            if (safeIncludes(url, 'daily-bonus')) {
                                return Promise.reject({
                                    status: "error",
                                    message: "–©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ",
                                    httpStatus: 404,
                                    endpoint: endpoint
                                });
                            }

                            if (safeIncludes(url, '/api/ping')) {
                                return {
                                    status: "error",
                                    message: "API ping –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                                    source: "ping_404"
                                };
                            }

                            return Promise.reject({
                                status: "error",
                                message: "–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                                httpStatus: 404,
                                endpoint: endpoint
                            });
                        }

                        // 429 - rate limiting
                        if (fetchResponse.status === 429) {
                            const retryAfter = fetchResponse.headers.get('Retry-After') || 30;
                            const endpointKey = Object.keys(REQUEST_THROTTLE).find(key =>
                                safeIncludes(endpoint, key)) || 'default';
                            handleRateLimiting(endpointKey, parseInt(retryAfter));
                            throw new Error(`–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫—É–Ω–¥.`);
                        }

                        // 500+ - —Å–µ—Ä–≤–µ—Ä–Ω—ñ –ø–æ–º–∏–ª–∫–∏
                        if (fetchResponse.status >= 500) {
                            _connectionState.isConnected = false;
                            _apiState.isHealthy = false;
                            _apiState.consecutiveFailures++;

                            if (_apiState.consecutiveFailures >= _apiState.maxFailures) {
                                showServerUnavailableMessage();
                            }

                            throw new Error(`–°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (${fetchResponse.status})`);
                        }

                        const errorMessage = response.message || response.error ||
                                           `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä—É: ${fetchResponse.status}`;
                        throw new Error(errorMessage);
                    }

                    // –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    _connectionState.failedAttempts = 0;
                    _connectionState.lastSuccessTime = Date.now();
                    _connectionState.isConnected = true;
                    _apiState.isHealthy = true;
                    _apiState.consecutiveFailures = 0;

                    hideServerUnavailableMessage();

                    return response;

                } catch (error) {
                    _requestCounter.errors++;

                    if (!options.hideLoader && typeof window.hideLoading === 'function') {
                        window.hideLoading();
                    }

                    lastError = error;

                    // –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞
                    if (retries <= 0) {
                        throw error;
                    }

                    // –î–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ - –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞
                    const isNetworkError = error.name === 'AbortError' ||
                                          error.name === 'TypeError' ||
                                          (error.message && safeIncludes(error.message, 'NetworkError'));

                    if (isNetworkError) {
                        _connectionState.failedAttempts++;

                        const backoffTime = Math.min(1000 * Math.pow(2, _connectionState.failedAttempts), 10000);

                        console.warn(`‚ö†Ô∏è –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ ${backoffTime/1000}—Å...`);

                        await new Promise(resolve => setTimeout(resolve, backoffTime));

                        return apiRequest(endpoint, method, data, options, retries - 1);
                    }

                    throw error;
                } finally {
                    _activeEndpoints.delete(endpoint);
                    _requestCounter.current = Math.max(0, _requestCounter.current - 1);
                }

            } catch (error) {
                _requestCounter.errors++;

                if (!options.hideLoader && typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }

                console.error(`‚ùå API: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É ${endpoint}:`, error.message);

                document.dispatchEvent(new CustomEvent('api-error', {
                    detail: {
                        error,
                        endpoint,
                        method
                    }
                }));

                if (options.suppressErrors) {
                    return {
                        status: 'error',
                        message: error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É',
                        source: 'api_error'
                    };
                }

                throw error;
            }
        }

        /**
         * –ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
         */
        function forceCleanupRequests() {
            _lastRequestsByEndpoint = {};
            _activeEndpoints.clear();
            _pendingRequests = {};
            console.log("üîå API: –ü—Ä–∏–º—É—Å–æ–≤–æ –æ—á–∏—â–µ–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤");
            return true;
        }

        // ======== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–ê ========

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        async function getUserData(forceRefresh = false) {
            try {
                await ensureApiReady();
            } catch (error) {
                console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
                throw error;
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à
            if (!forceRefresh && _userCache && (Date.now() - _userCacheTime < USER_CACHE_TTL)) {
                return {status: 'success', data: _userCache, source: 'cache'};
            }

            const id = getUserId();
            if (!id) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            try {
                const result = await apiRequest(API_PATHS.USER.DATA(id), 'GET', null, {
                    timeout: 15000,
                    suppressErrors: false
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                if (result.status === 'success' && result.data) {
                    _userCache = result.data;
                    _userCacheTime = Date.now();

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                    try {
                        if (_userCache.balance !== undefined) {
                            localStorage.setItem('userTokens', _userCache.balance.toString());
                            localStorage.setItem('winix_balance', _userCache.balance.toString());
                        }

                        if (_userCache.coins !== undefined) {
                            localStorage.setItem('userCoins', _userCache.coins.toString());
                            localStorage.setItem('winix_coins', _userCache.coins.toString());
                        }

                        if (_userCache.notifications_enabled !== undefined) {
                            localStorage.setItem('notifications_enabled',
                                _userCache.notifications_enabled.toString());
                        }
                    } catch (e) {
                        console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ localStorage:", e);
                    }
                }

                return result;
            } catch (error) {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
                throw error;
            }
        }

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        async function getBalance() {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            try {
                await ensureApiReady();
            } catch (error) {
                console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
                throw error;
            }

            try {
                const nocache = Date.now();
                const endpoint = API_PATHS.USER.BALANCE(userId) + `?nocache=${nocache}`;

                const response = await apiRequest(endpoint, 'GET', null, {
                    suppressErrors: false,
                    timeout: 10000
                });

                return response;

            } catch (error) {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
                throw error;
            }
        }

        // ======== –§–£–ù–ö–¶–Ü–á –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        async function getStakingData() {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            try {
                await ensureApiReady();
            } catch (error) {
                console.error("üîå API: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                throw error;
            }

            if (_stakingCache && (Date.now() - _stakingCacheTime < STAKING_CACHE_TTL)) {
                return {status: 'success', data: _stakingCache, source: 'cache'};
            }

            return apiRequest(API_PATHS.STAKING.DATA(userId));
        }

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        async function getStakingHistory() {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            await ensureApiReady();
            return apiRequest(API_PATHS.STAKING.HISTORY(userId));
        }

        /**
         * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        async function createStaking(amount, period) {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            await ensureApiReady();

            if (isNaN(amount) || amount <= 0) {
                throw new Error("–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
            }

            if (![7, 14, 28].includes(period)) {
                throw new Error("–ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–æ–∂–µ –±—É—Ç–∏ 7, 14 –∞–±–æ 28 –¥–Ω—ñ–≤");
            }

            return apiRequest(API_PATHS.STAKING.DATA(userId), 'POST', {
                stakingAmount: parseInt(amount),
                period: period
            });
        }

        /**
         * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        async function addToStaking(amount, stakingId = null) {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            await ensureApiReady();

            if (isNaN(amount) || amount <= 0) {
                throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º");
            }

            let targetStakingId = stakingId;
            if (!targetStakingId) {
                try {
                    const stakingData = await getStakingData();
                    if (stakingData.status !== 'success' || !stakingData.data ||
                        !stakingData.data.hasActiveStaking) {
                        throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                    }
                    targetStakingId = stakingData.data.stakingId;
                } catch (error) {
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
                }
            }

            return apiRequest(`${API_PATHS.STAKING.DATA(userId)}/${targetStakingId}`, 'PUT', {
                additionalAmount: parseInt(amount)
            });
        }

        /**
         * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
         */
        async function cancelStaking(stakingId = null) {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            await ensureApiReady();

            let targetStakingId = stakingId;
            if (!targetStakingId) {
                try {
                    const stakingData = await getStakingData();
                    if (stakingData.status === 'success' && stakingData.data &&
                        stakingData.data.hasActiveStaking) {
                        targetStakingId = stakingData.data.stakingId;
                    } else {
                        const stakingDataStr = localStorage.getItem('stakingData') ||
                                               localStorage.getItem('winix_staking');
                        if (stakingDataStr) {
                            try {
                                const localData = JSON.parse(stakingDataStr);
                                if (localData && localData.stakingId) {
                                    targetStakingId = localData.stakingId;
                                }
                            } catch (e) {
                                console.warn("üîå API: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                            }
                        }
                    }

                    if (!targetStakingId) {
                        throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                    }
                } catch (error) {
                    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É: " + error.message);
                }
            }

            return apiRequest(API_PATHS.STAKING.CANCEL(userId, targetStakingId), 'POST', {
                confirm: true,
                timestamp: Date.now()
            });
        }

        /**
         * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
         */
        async function calculateExpectedReward(amount, period) {
            amount = parseInt(amount) || 0;
            period = parseInt(period) || 14;

            if (amount <= 0) {
                return { status: 'success', data: { reward: 0 } };
            }

            if (![7, 14, 28].includes(period)) {
                period = 14;
            }

            const rewardRates = { 7: 4, 14: 9, 28: 15 };
            const rewardPercent = rewardRates[period] || 9;
            const reward = (amount * rewardPercent) / 100;

            return {
                status: 'success',
                data: {
                    reward: parseFloat(reward.toFixed(2)),
                    rewardPercent: rewardPercent,
                    amount: amount,
                    period: period,
                    source: 'local_calculation'
                }
            };
        }

        /**
         * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        async function getTransactions(limit = 100) {
            const userId = getUserId();
            if (!userId) {
                return {
                    status: 'error',
                    message: 'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
                };
            }

            await ensureApiReady();

            try {
                return await apiRequest(`${API_PATHS.TRANSACTIONS(userId)}?limit=${limit}`, 'GET', null, {
                    suppressErrors: true
                });
            } catch (error) {
                console.warn("üîå API: –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:", error);
                return {
                    status: 'success',
                    data: [],
                    message: '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
                };
            }
        }

        /**
         * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
         */
        async function updateSettings(settings) {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            await ensureApiReady();

            try {
                return await apiRequest(API_PATHS.USER.SETTINGS(userId), 'POST', settings);
            } catch (error) {
                console.error("üîå API: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);
                throw error;
            }
        }

        /**
         * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É API
         */
        function clearCache() {
            _userCache = null;
            _userCacheTime = 0;
            _stakingCache = null;
            _stakingCacheTime = 0;
            _lastRequestsByEndpoint = {};
            console.log("üîå API: –ö–µ—à –æ—á–∏—â–µ–Ω–æ");
        }

        /**
         * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
         */
        async function reconnect() {
            console.log("üîÑ API: –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è...");

            forceCleanupRequests();

            _apiState.isHealthy = false;
            _apiState.consecutiveFailures = 0;

            const isHealthy = await checkApiHealth();

            if (isHealthy) {
                try {
                    await refreshToken();
                } catch (error) {
                    console.warn("‚ö†Ô∏è API: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω:", error);
                }

                try {
                    await getUserData(true);

                    _connectionState.isConnected = true;
                    _connectionState.lastSuccessTime = Date.now();
                    _connectionState.failedAttempts = 0;

                    console.log("‚úÖ API: –ó'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");
                    return true;
                } catch (error) {
                    console.error("‚ùå API: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è:", error);
                    return false;
                }
            } else {
                console.error("‚ùå API: –°–µ—Ä–≤–µ—Ä –≤—Å–µ —â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
                return false;
            }
        }

        // ======== –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –û–ß–ò–©–ï–ù–ù–Ø ========

        setInterval(() => {
            const now = Date.now();

            // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            let hasLongRunningRequests = false;
            for (const [key, time] of Object.entries(_lastRequestsByEndpoint)) {
                if (now - time > 30000) {
                    hasLongRunningRequests = true;
                    delete _lastRequestsByEndpoint[key];
                    console.warn(`üîå API: –°–∫–∏–Ω—É—Ç–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Ç: ${key}`);
                }
            }

            if (hasLongRunningRequests) {
                forceCleanupRequests();
            }

            // –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
            if (now - _requestCounter.lastReset > 600000) {
                _requestCounter.total = 0;
                _requestCounter.errors = 0;
                _requestCounter.lastReset = now;
            }
        }, 60000);

        // ======== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ========

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ health check
        startHealthCheck();

        // ======== –ï–ö–°–ü–û–†–¢ API ========

        // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API —à–ª—è—Ö–∏
        window.API_PATHS = API_PATHS;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
        window.WinixAPI = {
            // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            config: {
                baseUrl: API_BASE_URL,
                version: '2.0.0',
                environment: API_BASE_URL.includes('localhost') ? 'development' : 'production'
            },

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            setDebugMode: function(debug) {
                _debugMode = debug;
                return this;
            },

            // Health check
            checkApiHealth,
            ensureApiReady,
            isApiHealthy: () => _apiState.isHealthy,

            // –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            apiRequest,
            getUserId,
            getAuthToken,
            clearAuthToken,
            refreshToken,
            clearCache,
            forceCleanupRequests,
            reconnect,
            isValidUUID,
            safeIncludes,

            // –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            getUserData,
            getBalance,
            updateSettings,

            // –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            getStakingData,
            getStakingHistory,
            createStaking,
            addToStaking,
            cancelStaking,
            calculateExpectedReward,

            // –§—É–Ω–∫—Ü—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            getTransactions,

            // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ API-—à–ª—è—Ö—ñ–≤
            paths: API_PATHS,

            // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostics: {
                getRequestStats: function() {
                    return {..._requestCounter};
                },
                getConnectionState: function() {
                    return {..._connectionState};
                },
                getApiState: function() {
                    return {..._apiState};
                },
                getActiveEndpoints: function() {
                    return Array.from(_activeEndpoints);
                },
                getBlockedEndpoints: function() {
                    return {..._blockedEndpoints};
                },
                clearBlockedEndpoints: function() {
                    for (const key in _blockedEndpoints) {
                        if (_blockedEndpoints[key].timeoutId) {
                            clearTimeout(_blockedEndpoints[key].timeoutId);
                        }
                    }
                    _blockedEndpoints = {};
                    return true;
                },
                resetState: function() {
                    _activeEndpoints.clear();
                    _pendingRequests = {};
                    _lastRequestsByEndpoint = {};
                    for (const key in _blockedEndpoints) {
                        if (_blockedEndpoints[key].timeoutId) {
                            clearTimeout(_blockedEndpoints[key].timeoutId);
                        }
                    }
                    _blockedEndpoints = {};
                    _connectionState.failedAttempts = 0;
                    _apiState.consecutiveFailures = 0;
                    _apiState.isHealthy = false;
                    return true;
                }
            }
        };

        // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        window.apiRequest = apiRequest;
        window.getUserId = getUserId;

        // –î–ª—è –º–æ–¥—É–ª—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å window.API
        window.API = {
            get: function(endpoint, options = {}) {
                return window.WinixAPI.apiRequest(endpoint, 'GET', null, options);
            },
            post: function(endpoint, data = null, options = {}) {
                return window.WinixAPI.apiRequest(endpoint, 'POST', data, options);
            }
        };

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        window.addEventListener('online', () => {
            console.log("üîÑ API: –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ");
            reconnect();
        });

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
        console.log('üöÄ WinixAPI: –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ');
        setTimeout(() => {
            document.dispatchEvent(new CustomEvent('winix-api-ready', {
                detail: {
                    version: '2.0.0',
                    userId: window._WINIX_USER_ID
                }
            }));
        }, 10);

        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –º–æ–¥—É–ª—å —è–∫ –≥–æ—Ç–æ–≤–∏–π
        if (window.WinixInit) {
            window.WinixInit.checkModule('api');
        }

        // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º—É —è–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è
        if (window._unlockWinixSystem && window._WINIX_USER_ID) {
            window._unlockWinixSystem(window._WINIX_USER_ID);
        }

        console.log(`‚úÖ API: –ú–æ–¥—É–ª—å —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (URL: ${API_BASE_URL}, User ID: ${window._WINIX_USER_ID})`);
    }
})();