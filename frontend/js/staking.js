/**
 * staking.js
 *
 * –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É WINIX.
 * –ó–∞–±–µ–∑–ø–µ—á—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤, —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É —Ç–∞
 * –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.
 */

(function() {
    'use strict';

    console.log("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if (!window.WinixAPI) {
        console.warn("‚ö†Ô∏è –ú–æ–¥—É–ª—å WinixAPI –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –æ–±–º–µ–∂–µ–Ω—ñ");
    }

    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixStakingSystem && window.WinixStakingSystemInitialized) {
        console.log("‚ÑπÔ∏è –ú–æ–¥—É–ª—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        return;
    }

    // ======== –ö–û–ù–°–¢–ê–ù–¢–ò ========

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const CONFIG = {
        minAmount: 50,                 // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        maxBalancePercentage: 0.9,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É
        allowedPeriods: [7, 14, 28],   // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        rewardRates: {
            7: 4,    // 4% –∑–∞ 7 –¥–Ω—ñ–≤
            14: 9,   // 9% –∑–∞ 14 –¥–Ω—ñ–≤
            28: 15   // 15% –∑–∞ 28 –¥–Ω—ñ–≤
        },
        cancellationFee: 0.2,          // –®—Ç—Ä–∞—Ñ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ (20%)
        refreshInterval: 300000        // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (5 —Ö–≤–∏–ª–∏–Ω)
    };

    // ID DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const DOM = {
        amountInput: 'staking-amount',
        periodSelect: 'staking-period',
        expectedReward: 'expected-reward',
        stakingStatus: 'staking-status',
        activeStakingButton: 'active-staking-button',
        cancelStakingButton: 'cancel-staking-button',
        stakeButton: 'stake-button',
        maxButton: 'max-button',

        // –ï–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        modal: 'staking-modal',
        modalClose: 'modal-close',
        modalStakingAmount: 'modal-staking-amount',
        modalStakingPeriod: 'modal-staking-period',
        modalRewardPercent: 'modal-staking-reward-percent',
        modalExpectedReward: 'modal-staking-expected-reward',
        modalRemainingDays: 'modal-staking-remaining-days',
        modalAddButton: 'modal-add-to-stake-button',
        modalCancelButton: 'modal-cancel-staking-button'
    };

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    let _currentStakingData = null;

    // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
    let _isProcessingRequest = false;
    let _isUpdatingDisplay = false;

    // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    let _refreshTimer = null;

    // ======== –£–¢–ò–õ–Ü–¢–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM –∑–∞ ID
     * @param {string} id - ID –µ–ª–µ–º–µ–Ω—Ç–∞
     * @returns {HTMLElement} –ï–ª–µ–º–µ–Ω—Ç DOM –∞–±–æ null
     */
    function getElement(id) {
        return document.getElementById(id);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
     * @param {any} id - ID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @returns {boolean} –ß–∏ ID –≤–∞–ª—ñ–¥–Ω–∏–π
     */
    function isValidId(id) {
        return id &&
               id !== 'undefined' &&
               id !== 'null' &&
               id !== undefined &&
               id !== null &&
               id.toString().trim() !== '';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {boolean} isError - –ß–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–æ—é
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function showMessage(message, isError = false, callback = null) {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–∫–∞–∑—É –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if (!message || message.trim() === '') {
            console.warn("–°–ø—Ä–æ–±–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
            if (callback) setTimeout(callback, 100);
            return;
        }

        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
            if (window.showToast) {
                window.showToast(message, isError ? 'error' : 'success');
                if (callback) setTimeout(callback, 1500);
                return;
            }

            if (window.simpleAlert) {
                window.simpleAlert(message, isError, callback);
                return;
            }

            // –Ø–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π alert
            alert(message);
            if (callback) callback();
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e);
            alert(message);
            if (callback) callback();
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {number} –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function getBalance() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
            if (window.WinixCore && typeof window.WinixCore.getBalance === 'function') {
                return window.WinixCore.getBalance();
            }

            // –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ WinixCore.Balance
            if (window.WinixCore && window.WinixCore.Balance && typeof window.WinixCore.Balance.getTokens === 'function') {
                return window.WinixCore.Balance.getTokens();
            }

            // –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            const balanceStr = localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0';
            const balance = parseFloat(balanceStr);
            return isNaN(balance) ? 0 : balance;
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
            return 0;
        }
    }

    /**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function updateUI(forceRefresh = false) {
    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
    if (_isUpdatingDisplay) {
        console.warn("–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        return;
    }

    _isUpdatingDisplay = true;

    try {
        // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        if (forceRefresh) {
            try {
                await fetchStakingData(true);
            } catch (error) {
                console.warn("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—è–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            }
        }

        const hasActiveStaking = _currentStakingData && _currentStakingData.hasActiveStaking;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        const statusElement = getElement(DOM.stakingStatus);
        if (statusElement) {
            if (hasActiveStaking) {
                // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è —É–≤–∞–≥–∏
                statusElement.style.transition = 'all 0.3s ease';
                statusElement.style.color = '#4DB6AC';
                statusElement.style.fontWeight = 'bold';
                statusElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${_currentStakingData.stakingAmount} $WINIX`;

                // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                if (_currentStakingData.expectedReward) {
                    statusElement.textContent += ` | –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${_currentStakingData.expectedReward} $WINIX`;
                }

                // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ –¥–Ω—ñ–≤
                if (_currentStakingData.remainingDays !== undefined) {
                    statusElement.textContent += ` | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${_currentStakingData.remainingDays} –¥–Ω.`;
                }

                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
                setTimeout(() => {
                    statusElement.style.color = '';
                    statusElement.style.fontWeight = '';
                }, 2000);
            } else {
                statusElement.style.color = '';
                statusElement.style.fontWeight = '';
                statusElement.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
        updateButtonsState(hasActiveStaking);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (!hasActiveStaking) {
            const amountInput = getElement(DOM.amountInput);
            const periodSelect = getElement(DOM.periodSelect);
            const expectedReward = getElement(DOM.expectedReward);

            if (amountInput && periodSelect && expectedReward) {
                // –°–∫–∏–¥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                amountInput.value = '';

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                periodSelect.value = '14'; // –ê–±–æ —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

                // –û–Ω–æ–≤–ª—é—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                calculateExpectedReward(0, parseInt(periodSelect.value))
                    .then(reward => {
                        expectedReward.textContent = reward.toFixed(2);
                    })
                    .catch(error => {
                        console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", error);
                        expectedReward.textContent = '0.00';
                    });
            }
        }

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        document.dispatchEvent(new CustomEvent('staking-updated', {
            detail: {
                stakingData: _currentStakingData,
                hasActiveStaking: hasActiveStaking,
                timestamp: new Date().toISOString()
            }
        }));

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ —î
        if (window.updateStakingButtons && typeof window.updateStakingButtons === 'function') {
            window.updateStakingButtons();
        }

        // –Ø–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ó—ó
        if (window.updateBalanceDisplay && typeof window.updateBalanceDisplay === 'function') {
            window.updateBalanceDisplay();
        }
    } catch (e) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
    } finally {
        _isUpdatingDisplay = false;
    }
}

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {boolean} hasActiveStaking - –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
     */
    function updateButtonsState(hasActiveStaking) {
        try {
            // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const activeStakingButton = getElement(DOM.activeStakingButton);
            if (activeStakingButton) {
                if (hasActiveStaking) {
                    activeStakingButton.classList.remove('disabled');
                    activeStakingButton.disabled = false;
                } else {
                    activeStakingButton.classList.add('disabled');
                    activeStakingButton.disabled = true;
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelStakingButton = getElement(DOM.cancelStakingButton);
            if (cancelStakingButton) {
                if (hasActiveStaking) {
                    cancelStakingButton.style.opacity = '1';
                    cancelStakingButton.style.pointerEvents = 'auto';
                    cancelStakingButton.disabled = false;
                } else {
                    cancelStakingButton.style.opacity = '0.5';
                    cancelStakingButton.style.pointerEvents = 'none';
                    cancelStakingButton.disabled = true;
                }
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫:', e);
        }
    }

    // ======== –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –∫–µ—à—É–≤–∞–Ω–Ω—è
 * @param {boolean} silent - –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ (—ñ–≥–Ω–æ—Ä—É—î –∫–µ—à)
 * @returns {Promise<Object>} –î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 */
async function fetchStakingData(silent = false, forceRefresh = false) {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
        const now = Date.now();
        const cacheTime = parseInt(localStorage.getItem('stakingDataCacheTime') || '0');
        const cacheTTL = 30000; // 30 —Å–µ–∫—É–Ω–¥

        if (!forceRefresh && _currentStakingData && (now - cacheTime < cacheTTL)) {
            console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            return _currentStakingData;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!window.WinixAPI || !window.WinixAPI.getStakingData) {
            throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

        if (!isValidId(userId)) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ silent —Ä–µ–∂–∏–º
        if (!silent) {
            if (typeof showLoading === 'function') {
                showLoading();
            } else {
                showLoader();
            }
        }

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É')), 10000);
        });

        const fetchPromise = window.WinixAPI.getStakingData();
        const response = await Promise.race([fetchPromise, timeoutPromise]);

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (!silent) {
            if (typeof hideLoading === 'function') {
                hideLoading();
            } else {
                hideLoader();
            }
        }

        if (response.status === 'success' && response.data) {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            _currentStakingData = response.data;

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
            localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
            localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));
            localStorage.setItem('stakingDataCacheTime', now.toString());

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateUI();

            return _currentStakingData;
        } else {
            throw new Error(response.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
        }
    } catch (error) {
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (!silent) {
            if (typeof hideLoading === 'function') {
                hideLoading();
            } else {
                hideLoader();
            }
        }

        console.warn('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

        // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ silent, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –ª–∏—à–µ –¥–ª—è —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º
        if (!silent && error.message !== '–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É') {
            showMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É. ' + error.message, true);
        }

        // –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ localStorage
        try {
            const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
            if (stakingDataStr) {
                _currentStakingData = JSON.parse(stakingDataStr);
                updateUI();
                return _currentStakingData;
            }
        } catch (localError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage:', localError);
        }

        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞, –Ω—ñ –∑ localStorage
        _currentStakingData = {
            hasActiveStaking: false,
            stakingAmount: 0,
            period: 0,
            rewardPercent: 0,
            expectedReward: 0,
            remainingDays: 0
        };

        updateUI();
        return _currentStakingData;
    }
}

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (7, 14, 28 –¥–Ω—ñ–≤)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function createStaking(amount, period) {
        if (_isProcessingRequest) {
            showMessage('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            amount = parseInt(amount);
            period = parseInt(period);

            if (isNaN(amount) || amount < CONFIG.minAmount) {
                throw new Error(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.minAmount} WINIX`);
            }

            if (!CONFIG.allowedPeriods.includes(period)) {
                throw new Error(`–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.allowedPeriods.join(', ')} –¥–Ω—ñ–≤`);
            }

            const balance = getBalance();
            if (amount > balance) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
            }

            const maxAllowedAmount = Math.floor(balance * CONFIG.maxBalancePercentage);
            if (amount > maxAllowedAmount) {
                throw new Error(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${maxAllowedAmount} WINIX (${Math.round(CONFIG.maxBalancePercentage * 100)}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!window.WinixAPI || !window.WinixAPI.createStaking) {
                throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

            if (!isValidId(userId)) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ API
            const response = await window.WinixAPI.createStaking(amount, period);

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (response.data && response.data.staking) {
                _currentStakingData = response.data.staking;

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (response.data.balance !== undefined) {
                    localStorage.setItem('userTokens', response.data.balance.toString());
                    localStorage.setItem('winix_balance', response.data.balance.toString());

                    // –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
                    if (window.WinixCore && window.WinixCore.updateBalanceDisplay) {
                        window.WinixCore.updateBalanceDisplay();
                    } else if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.updateBalanceDisplay) {
                        window.WinixCore.UI.updateBalanceDisplay();
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateUI();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                showMessage('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');

                return {
                    success: true,
                    data: response.data,
                    message: '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
                };
            } else {
                throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            showMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function addToStaking(amount) {
        if (_isProcessingRequest) {
            showMessage('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                await fetchStakingData(true);

                if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                    throw new Error('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
                }
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—É–º–∏
            amount = parseInt(amount);

            if (isNaN(amount) || amount <= 0) {
                throw new Error('–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º');
            }

            const balance = getBalance();
            if (amount > balance) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!window.WinixAPI || !window.WinixAPI.addToStaking) {
                throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

            if (!isValidId(userId)) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ API
            const response = await window.WinixAPI.addToStaking(amount, _currentStakingData.stakingId);

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (response.data && response.data.staking) {
                _currentStakingData = response.data.staking;

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (response.data.balance !== undefined) {
                    localStorage.setItem('userTokens', response.data.balance.toString());
                    localStorage.setItem('winix_balance', response.data.balance.toString());

                    // –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
                    if (window.WinixCore && window.WinixCore.updateBalanceDisplay) {
                        window.WinixCore.updateBalanceDisplay();
                    } else if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.updateBalanceDisplay) {
                        window.WinixCore.UI.updateBalanceDisplay();
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateUI();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                showMessage(`–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`);

                return {
                    success: true,
                    data: response.data,
                    message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`
                };
            } else {
                throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            showMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function cancelStaking(skipConfirmation = false) {
    if (_isProcessingRequest) {
        showMessage('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
        return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
    }

    _isProcessingRequest = true;

    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
            // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            await fetchStakingData(true);

            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                throw new Error('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        }

        // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ skipConfirmation
        if (!skipConfirmation) {
            if (!confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥?\n\n–ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é ${CONFIG.cancellationFee * 100}% –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`)) {
                _isProcessingRequest = false;
                return { success: false, message: '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º' };
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!window.WinixAPI || !window.WinixAPI.cancelStaking) {
            throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

        if (!isValidId(userId)) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ API
        const response = await window.WinixAPI.cancelStaking(_currentStakingData.stakingId);

        if (response.status !== 'success') {
            throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (response.data) {
            // –Ø–∫—â–æ —î –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É, –æ–Ω–æ–≤–ª—é—î–º–æ —ó—Ö
            if (response.data.staking) {
                _currentStakingData = response.data.staking;

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));
            } else {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç
                _currentStakingData = {
                    hasActiveStaking: false,
                    stakingAmount: 0,
                    period: 0,
                    rewardPercent: 0,
                    expectedReward: 0,
                    remainingDays: 0
                };

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (response.data.newBalance !== undefined) {
                localStorage.setItem('userTokens', response.data.newBalance.toString());
                localStorage.setItem('winix_balance', response.data.newBalance.toString());

                // –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
                if (window.WinixCore && window.WinixCore.updateBalanceDisplay) {
                    window.WinixCore.updateBalanceDisplay();
                } else if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.updateBalanceDisplay) {
                    window.WinixCore.UI.updateBalanceDisplay();
                } else if (typeof updateBalanceDisplay === 'function') {
                    updateBalanceDisplay();
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            updateUI();

            // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –∑ –¥–µ—Ç–∞–ª—è–º–∏
            let message = '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ';
            if (response.data.returnedAmount && response.data.feeAmount) {
                message += `. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ: ${response.data.returnedAmount} WINIX. –ö–æ–º—ñ—Å—ñ—è: ${response.data.feeAmount} WINIX.`;
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            showMessage(message);

            return {
                success: true,
                data: response.data,
                message: message
            };
        } else {
            throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
        showMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

        return {
            success: false,
            message: error.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
        };
    } finally {
        _isProcessingRequest = false;
    }
}

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (7, 14, 28 –¥–Ω—ñ–≤)
     * @returns {Promise<number>} –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    async function calculateExpectedReward(amount, period) {
        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            amount = parseInt(amount) || 0;
            period = parseInt(period) || 14;

            if (amount <= 0) {
                return 0;
            }

            if (!CONFIG.allowedPeriods.includes(period)) {
                return 0;
            }

            // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ API
            if (window.WinixAPI && window.WinixAPI.calculateExpectedReward) {
                try {
                    const response = await window.WinixAPI.calculateExpectedReward(amount, period);

                    if (response.status === 'success' && response.data && response.data.reward !== undefined) {
                        return parseFloat(response.data.reward);
                    }
                } catch (apiError) {
                    console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑ API:', apiError);
                }
            }

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ API, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
            const rewardPercent = CONFIG.rewardRates[period] || 9;
            const reward = (amount * rewardPercent) / 100;

            return parseFloat(reward.toFixed(2));
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', error);
            return 0;
        }
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–æ–∫
     * @param {boolean} force - –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function repairStaking(force = false) {
        if (_isProcessingRequest) {
            showMessage('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –Ø–∫—â–æ –ø—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            if (force && !confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É? –¶–µ –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥.')) {
                _isProcessingRequest = false;
                return { success: false, message: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º' };
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!window.WinixAPI || !window.WinixAPI.repairStaking) {
                throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

            if (!isValidId(userId)) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            const response = await window.WinixAPI.repairStaking(force);

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            await fetchStakingData(true);

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            showMessage(response.message || '–°—Ç–∞–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');

            return {
                success: true,
                data: response.data,
                message: response.message || '–°—Ç–∞–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ'
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            showMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ú–û–î–ê–õ–¨–ù–ò–ú –í–Ü–ö–ù–û–ú ========

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –¥–µ—Ç–∞–ª—è–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function showStakingModal() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                showMessage('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
                return;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalStakingAmount = getElement(DOM.modalStakingAmount);
            const modalStakingPeriod = getElement(DOM.modalStakingPeriod);
            const modalRewardPercent = getElement(DOM.modalRewardPercent);
            const modalExpectedReward = getElement(DOM.modalExpectedReward);
            const modalRemainingDays = getElement(DOM.modalRemainingDays);

            if (modalStakingAmount) modalStakingAmount.textContent = `${_currentStakingData.stakingAmount || 0} $WINIX`;
            if (modalStakingPeriod) modalStakingPeriod.textContent = `${_currentStakingData.period || 0} –¥–Ω—ñ–≤`;
            if (modalRewardPercent) modalRewardPercent.textContent = `${_currentStakingData.rewardPercent || 0}%`;
            if (modalExpectedReward) modalExpectedReward.textContent = `${_currentStakingData.expectedReward || 0} $WINIX`;
            if (modalRemainingDays) modalRemainingDays.textContent = _currentStakingData.remainingDays || 0;

            // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            const modal = getElement(DOM.modal);
            if (modal) modal.classList.add('active');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
            showMessage('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
     */
    function hideStakingModal() {
        try {
            const modal = getElement(DOM.modal);
            if (modal) modal.classList.remove('active');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
     */
    function handleAddToStakeFromModal() {
        try {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            hideStakingModal();

            // –ó–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            const amount = prompt('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:');

            if (amount === null || amount.trim() === '') {
                return; // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ –≤–≤–µ–¥–µ–Ω–Ω—è
            }

            const numAmount = parseInt(amount);

            if (isNaN(numAmount) || numAmount <= 0) {
                showMessage('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)', true);
                return;
            }

            // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            addToStaking(numAmount)
                .then(result => {
                    if (result.success) {
                        // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    }
                })
                .catch(error => {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
                });
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
            showMessage('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
        }
    }

    // ======== –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ========

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    function initEventListeners() {
        try {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—É–º–∏ –∞–±–æ –ø–µ—Ä—ñ–æ–¥—É
            const amountInput = getElement(DOM.amountInput);
            const periodSelect = getElement(DOM.periodSelect);
            const expectedReward = getElement(DOM.expectedReward);

            if (amountInput && periodSelect && expectedReward) {
                // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                const updateReward = async () => {
                    try {
                        const amount = parseInt(amountInput.value) || 0;
                        const period = parseInt(periodSelect.value) || 14;

                        const reward = await calculateExpectedReward(amount, period);
                        if (expectedReward) {
                            expectedReward.textContent = reward.toFixed(2);
                        }
                    } catch (e) {
                        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", e);
                    }
                };

                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newAmountInput = amountInput.cloneNode(true);
                if (amountInput.parentNode) {
                    amountInput.parentNode.replaceChild(newAmountInput, amountInput);
                }

                const newPeriodSelect = periodSelect.cloneNode(true);
                if (periodSelect.parentNode) {
                    periodSelect.parentNode.replaceChild(newPeriodSelect, periodSelect);
                }

                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                newAmountInput.addEventListener('input', updateReward);
                newPeriodSelect.addEventListener('change', updateReward);

                // –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                updateReward();
            }

            // –ö–Ω–æ–ø–∫–∞ Max
            const maxButton = getElement(DOM.maxButton);
            if (maxButton && amountInput) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newMaxButton = maxButton.cloneNode(true);
                if (maxButton.parentNode) {
                    maxButton.parentNode.replaceChild(newMaxButton, maxButton);
                }

                newMaxButton.addEventListener('click', function() {
                    const balance = getBalance();
                    const maxAllowed = Math.floor(balance * CONFIG.maxBalancePercentage);
                    const newAmountInput = getElement(DOM.amountInput);
                    if (newAmountInput) {
                        newAmountInput.value = maxAllowed;

                        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é input –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                        newAmountInput.dispatchEvent(new Event('input'));
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakeButton = getElement(DOM.stakeButton);
            if (stakeButton && amountInput && periodSelect) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newStakeButton = stakeButton.cloneNode(true);
                if (stakeButton.parentNode) {
                    stakeButton.parentNode.replaceChild(newStakeButton, stakeButton);
                }

                newStakeButton.addEventListener('click', async () => {
                    const newAmountInput = getElement(DOM.amountInput);
                    const newPeriodSelect = getElement(DOM.periodSelect);

                    if (newAmountInput && newPeriodSelect) {
                        const amount = parseInt(newAmountInput.value) || 0;
                        const period = parseInt(newPeriodSelect.value) || 14;

                        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                        await createStaking(amount, period);
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const activeStakingButton = getElement(DOM.activeStakingButton);
            if (activeStakingButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newActiveStakingButton = activeStakingButton.cloneNode(true);
                if (activeStakingButton.parentNode) {
                    activeStakingButton.parentNode.replaceChild(newActiveStakingButton, activeStakingButton);
                }

                newActiveStakingButton.addEventListener('click', showStakingModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelStakingButton = getElement(DOM.cancelStakingButton);
            if (cancelStakingButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newCancelStakingButton = cancelStakingButton.cloneNode(true);
                if (cancelStakingButton.parentNode) {
                    cancelStakingButton.parentNode.replaceChild(newCancelStakingButton, cancelStakingButton);
                }

                newCancelStakingButton.addEventListener('click', cancelStaking);
            }

            // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            const modalCloseButton = getElement(DOM.modalClose);
            if (modalCloseButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newModalCloseButton = modalCloseButton.cloneNode(true);
                if (modalCloseButton.parentNode) {
                    modalCloseButton.parentNode.replaceChild(newModalCloseButton, modalCloseButton);
                }

                newModalCloseButton.addEventListener('click', hideStakingModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalAddButton = getElement(DOM.modalAddButton);
            if (modalAddButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newModalAddButton = modalAddButton.cloneNode(true);
                if (modalAddButton.parentNode) {
                    modalAddButton.parentNode.replaceChild(newModalAddButton, modalAddButton);
                }

                newModalAddButton.addEventListener('click', handleAddToStakeFromModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalCancelButton = getElement(DOM.modalCancelButton);
            if (modalCancelButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newModalCancelButton = modalCancelButton.cloneNode(true);
                if (modalCancelButton.parentNode) {
                    modalCancelButton.parentNode.replaceChild(newModalCancelButton, modalCancelButton);
                }

                newModalCancelButton.addEventListener('click', () => {
                    hideStakingModal();
                    cancelStaking();
                });
            }

            // –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó
            document.addEventListener('winix-initialized', async () => {
                await fetchStakingData(true);
            });

            // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
            const modal = getElement(DOM.modal);
            if (modal) {
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
                const modalClickHandler = (e) => {
                    if (e.target === modal) {
                        hideStakingModal();
                    }
                };

                // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
                modal.removeEventListener('click', modalClickHandler);
                modal.addEventListener('click', modalClickHandler);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    function startAutoRefresh() {
        // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —î
        if (_refreshTimer) {
            clearInterval(_refreshTimer);
        }

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
        _refreshTimer = setInterval(async () => {
            try {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –±–µ–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                await fetchStakingData(true);
            } catch (error) {
                console.warn('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            }
        }, CONFIG.refreshInterval);
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    function stopAutoRefresh() {
        if (_refreshTimer) {
            clearInterval(_refreshTimer);
            _refreshTimer = null;
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function init() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            await fetchStakingData();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            initEventListeners();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            startAutoRefresh();

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ —É—Å–ø—ñ—à–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            window.WinixStakingSystemInitialized = true;

            console.log("‚úÖ –ú–æ–¥—É–ª—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
        }
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    window.WinixStakingSystem = {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        getStakingData: () => _currentStakingData,
        hasActiveStaking: () => _currentStakingData && _currentStakingData.hasActiveStaking,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,
        repairStaking,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
        updateUI,
        updateButtonsState,
        showStakingModal,
        hideStakingModal,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: CONFIG,

        // –ü–æ–¥—ñ—ó –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É
        refresh: () => fetchStakingData(true),
        startAutoRefresh,
        stopAutoRefresh,

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –∫–Ω–æ–ø–æ–∫ (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏)
        handleDetailsButton: showStakingModal,
        handleCancelStakingButton: cancelStaking,
        handleAddToStakeButton: handleAddToStakeFromModal,

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏)
        updateStakingDisplay: updateUI
    };

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥—É–ª—å –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

    /**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 */
async function autoRepairStaking() {
    try {
        console.log("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API
        if (!window.WinixAPI || !window.WinixAPI.repairStaking) {
            console.warn("‚ö†Ô∏è API –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ");
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;
        if (!userId) {
            console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            return;
        }

        console.log(`üîç –ó–∞–ø—É—Å–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}...`);

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–µ–≥–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        const result = await window.WinixAPI.repairStaking(false);
        console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:", result);

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        if (window.WinixStakingSystem && window.WinixStakingSystem.refresh) {
            console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É...");
            await window.WinixStakingSystem.refresh();
        }

        // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ —î
        if (window.WinixAPI && window.WinixAPI.getStakingHistory) {
            try {
                const historyResult = await window.WinixAPI.getStakingHistory();
                console.log("üìö –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞:",
                            historyResult.status === 'success' ? "—É—Å–ø—ñ—à–Ω–æ" : "–∑ –ø–æ–º–∏–ª–∫–∞–º–∏");
            } catch (e) {
                console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
            }
        }
    } catch (e) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
document.addEventListener('DOMContentLoaded', function() {
    console.log("üìù –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
    setTimeout(autoRepairStaking, 2000);
});

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram WebApp –ø–æ–¥—ñ—ó viewportChanged
if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.onEvent('viewportChanged', function() {
        console.log("üì± –†–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞ –∑–º—ñ–Ω–µ–Ω–æ, –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");
        setTimeout(async function() {
            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (window.WinixStakingSystem && window.WinixStakingSystem.refresh) {
                await window.WinixStakingSystem.refresh();
            }
        }, 500);
    });
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
 * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
async function safeAddToStaking(amount) {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API
        if (!window.WinixAPI || !window.WinixAPI.addToStaking) {
            throw new Error("API –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;
        if (!userId) {
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
        const stakingData = await window.WinixAPI.getStakingData();
        if (!stakingData || !stakingData.data || !stakingData.data.hasActiveStaking) {
            throw new Error("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Å—É–º–∏
        amount = parseInt(amount);
        if (isNaN(amount) || amount <= 0) {
            throw new Error("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º");
        }

        // –î–æ–¥–∞—î–º–æ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        const result = await window.WinixAPI.addToStaking(amount, stakingData.data.stakingId);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (result.status !== 'success') {
            throw new Error(result.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if (window.WinixStakingSystem && window.WinixStakingSystem.refresh) {
            await window.WinixStakingSystem.refresh();
        }

        return true;
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if (window.simpleAlert) {
            window.simpleAlert(error.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
        } else if (window.showToast) {
            window.showToast(error.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", "error");
        } else {
            alert(error.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        }

        return false;
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —É WinixStakingSystem (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)
if (window.WinixStakingSystem) {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    const originalAddToStaking = window.WinixStakingSystem.addToStaking;
    const originalRefresh = window.WinixStakingSystem.refresh;

    // –ü–æ–∫—Ä–∞—â—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    window.WinixStakingSystem.addToStaking = async function(amount) {
        try {
            // –°–ø–µ—Ä—à—É —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑–ø–µ—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            const result = await safeAddToStaking(amount);
            if (result === true) {
                return {success: true, message: "–î–æ–¥–∞–Ω–æ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"};
            }

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            if (originalAddToStaking && typeof originalAddToStaking === 'function') {
                return originalAddToStaking.call(this, amount);
            } else {
                throw new Error("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            return {success: false, message: error.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"};
        }
    };

    // –ü–æ–∫—Ä–∞—â—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    window.WinixStakingSystem.refresh = async function() {
        try {
            // –°–ø–µ—Ä—à—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            if (originalRefresh && typeof originalRefresh === 'function') {
                await originalRefresh.call(this);
            }

            // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
            if (window.WinixAPI && window.WinixAPI.repairStaking) {
                await window.WinixAPI.repairStaking(false);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (this.updateUI && typeof this.updateUI === 'function') {
                this.updateUI();
            }

            return true;
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            return false;
        }
    };

    console.log("‚úÖ –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω—ñ");
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
window.winixStakingFixes = {
    autoRepairStaking,
    safeAddToStaking
};

console.log("‚úÖ –ú–æ–¥—É–ª—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

})();