/**
 * staking.js - –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É WINIX
 */

(function() {
    'use strict';

    console.log("üîÑ Staking: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

    // ======== –ö–û–ù–°–¢–ê–ù–¢–ò ========

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const CONFIG = {
        minAmount: 50,                 // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        maxBalancePercentage: 0.9,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É
        allowedPeriods: [7, 14, 28],   // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        rewardRates: {
            7: 4,    // 4% –∑–∞ 7 –¥–Ω—ñ–≤
            14: 9,   // 9% –∑–∞ 14 –¥–Ω—ñ–≤
            28: 15   // 15% –∑–∞ 28 –¥–Ω—ñ–≤
        },
        cancellationFee: 0.2,          // –®—Ç—Ä–∞—Ñ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ (20%)
        refreshInterval: 300000,       // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (5 —Ö–≤–∏–ª–∏–Ω)
    };

    // ID DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    const DOM = {
        amountInput: 'staking-amount',
        periodSelect: 'staking-period',
        expectedReward: 'expected-reward',
        stakingStatus: 'staking-status',
        activeStakingButton: 'active-staking-button',
        cancelStakingButton: 'cancel-staking-button',
        stakeButton: 'stake-button',
        maxButton: 'max-button',

        // –ï–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        modal: 'staking-modal',
        modalClose: 'modal-close',
        modalStakingAmount: 'modal-staking-amount',
        modalStakingPeriod: 'modal-staking-period',
        modalRewardPercent: 'modal-staking-reward-percent',
        modalExpectedReward: 'modal-staking-expected-reward',
        modalRemainingDays: 'modal-staking-remaining-days',
        modalAddButton: 'modal-add-to-stake-button',
        modalCancelButton: 'modal-cancel-staking-button'
    };

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    let _currentStakingData = null;

    // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
    let _isProcessingRequest = false;

    // ======== –£–¢–ò–õ–Ü–¢–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM
     * @param {string} id - ID –µ–ª–µ–º–µ–Ω—Ç–∞
     */
    function getElement(id) {
        return document.getElementById(id);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
     */
    function getBalance() {
        try {
            if (window.WinixCore && typeof window.WinixCore.getBalance === 'function') {
                return window.WinixCore.getBalance();
            }

            return parseFloat(localStorage.getItem('userTokens') ||
                             localStorage.getItem('winix_balance') || '0');
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
            return 0;
        }
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    function calculateExpectedReward(amount, period) {
        try {
            amount = parseInt(amount) || 0;
            period = parseInt(period) || 14;

            if (amount <= 0) {
                return 0;
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
            const rewardPercent = CONFIG.rewardRates[period] || 9;
            const reward = (amount * rewardPercent) / 100;

            return parseFloat(reward.toFixed(2));
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', e);
            return 0;
        }
    }

    // ======== –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
     */
    async function fetchStakingData(forceRefresh = false) {
        try {
            if (window.WinixAPI && typeof window.WinixAPI.getStakingData === 'function') {
                // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                const showingLoader = !silent && typeof window.showLoading === 'function';
                if (showingLoader) {
                    window.showLoading('–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
                }

                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                const response = await window.WinixAPI.getStakingData();

                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
                if (showingLoader && typeof window.hideLoading === 'function') {
                    window.hideLoading();
                }

                // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (response.status === 'success' && response.data) {
                    _currentStakingData = response.data;

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
                    localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                    localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));
                    localStorage.setItem('stakingDataCacheTime', Date.now().toString());

                    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    updateUI();

                    return _currentStakingData;
                } else {
                    throw new Error(response.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
                }
            } else {
                // –ó—á–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage, —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
                const stakingDataStr = localStorage.getItem('stakingData') ||
                                      localStorage.getItem('winix_staking');

                if (stakingDataStr) {
                    _currentStakingData = JSON.parse(stakingDataStr);
                    updateUI();
                    return _currentStakingData;
                } else {
                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ
                    _currentStakingData = {
                        hasActiveStaking: false,
                        stakingAmount: 0,
                        period: 0,
                        rewardPercent: 0,
                        expectedReward: 0,
                        remainingDays: 0
                    };
                    updateUI();
                    return _currentStakingData;
                }
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
            try {
                const stakingDataStr = localStorage.getItem('stakingData') ||
                                      localStorage.getItem('winix_staking');

                if (stakingDataStr) {
                    _currentStakingData = JSON.parse(stakingDataStr);
                } else {
                    _currentStakingData = {
                        hasActiveStaking: false,
                        stakingAmount: 0,
                        period: 0,
                        rewardPercent: 0,
                        expectedReward: 0,
                        remainingDays: 0
                    };
                }
            } catch (e) {
                _currentStakingData = {
                    hasActiveStaking: false,
                    stakingAmount: 0,
                    period: 0,
                    rewardPercent: 0,
                    expectedReward: 0,
                    remainingDays: 0
                };
            }

            updateUI();
            return _currentStakingData;
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     */
    async function createStaking(amount, period) {
        if (_isProcessingRequest) {
            if (typeof window.showNotification === 'function') {
                window.showNotification('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            }
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            amount = parseInt(amount);
            period = parseInt(period);

            if (isNaN(amount) || amount < CONFIG.minAmount) {
                throw new Error(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.minAmount} WINIX`);
            }

            if (!CONFIG.allowedPeriods.includes(period)) {
                throw new Error(`–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.allowedPeriods.join(', ')} –¥–Ω—ñ–≤`);
            }

            const balance = getBalance();
            if (amount > balance) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
            }

            const maxAllowedAmount = Math.floor(balance * CONFIG.maxBalancePercentage);
            if (amount > maxAllowedAmount) {
                throw new Error(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${maxAllowedAmount} WINIX (${Math.round(CONFIG.maxBalancePercentage * 100)}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)`);
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof window.showLoading === 'function') {
                window.showLoading('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ API
            const response = await window.WinixAPI.createStaking(amount, period);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (response.data && response.data.staking) {
                _currentStakingData = response.data.staking;

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (response.data.balance !== undefined) {
                    localStorage.setItem('userTokens', response.data.balance.toString());
                    localStorage.setItem('winix_balance', response.data.balance.toString());

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
                    if (window.WinixCore && typeof window.WinixCore.updateBalanceDisplay === 'function') {
                        window.WinixCore.updateBalanceDisplay();
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateUI();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                if (typeof window.showNotification === 'function') {
                    window.showNotification('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
                }

                return {
                    success: true,
                    data: response.data,
                    message: '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
                };
            } else {
                throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

            if (typeof window.showNotification === 'function') {
                window.showNotification(error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
            }

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     */
    async function addToStaking(amount) {
        if (_isProcessingRequest) {
            if (typeof window.showNotification === 'function') {
                window.showNotification('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            }
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                await fetchStakingData(true);

                if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                    throw new Error('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
                }
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—É–º–∏
            amount = parseInt(amount);

            if (isNaN(amount) || amount <= 0) {
                throw new Error('–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º');
            }

            const balance = getBalance();
            if (amount > balance) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof window.showLoading === 'function') {
                window.showLoading('–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
            }

            // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ API
            const response = await window.WinixAPI.addToStaking(amount, _currentStakingData.stakingId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof window.hideLoading === 'function') {
                window.hideLoading();
            }

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (response.data && response.data.staking) {
                _currentStakingData = response.data.staking;

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (response.data.balance !== undefined) {
                    localStorage.setItem('userTokens', response.data.balance.toString());
                    localStorage.setItem('winix_balance', response.data.balance.toString());

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
                    if (window.WinixCore && typeof window.WinixCore.updateBalanceDisplay === 'function') {
                        window.WinixCore.updateBalanceDisplay();
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateUI();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                if (typeof window.showNotification === 'function') {
                    window.showNotification(`–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`);
                }

                return {
                    success: true,
                    data: response.data,
                    message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`
                };
            } else {
                throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

            if (typeof window.showNotification === 'function') {
                window.showNotification(error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
            }

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    /**
 * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 */
async function cancelStaking() {
    if (_isProcessingRequest) {
        if (typeof window.showNotification === 'function') {
            window.showNotification('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
        }
        return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
    }

    _isProcessingRequest = true;

    try {
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof window.showLoading === 'function') {
            window.showLoading('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
            await fetchStakingData(true);

            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                throw new Error('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        }

        const stakingId = _currentStakingData.stakingId;
        if (!stakingId) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
        }

        // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        let userConfirmed = false;

        if (typeof window.showModernConfirm === 'function') {
            userConfirmed = await new Promise(resolve => {
                window.showModernConfirm(
                    "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
                    () => resolve(true),
                    () => resolve(false)
                );
            });
        } else {
            userConfirmed = confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.");
        }

        if (!userConfirmed) {
            if (typeof window.hideLoading === 'function') {
                window.hideLoading();
            }
            _isProcessingRequest = false;
            return { success: false, message: "–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º" };
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = window.WinixAPI.getUserId();

        if (!userId) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ fetch –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const response = await fetch(`/api/user/${userId}/staking/${stakingId}/cancel`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                confirm: true,
                timestamp: Date.now()
            })
        });

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof window.hideLoading === 'function') {
            window.hideLoading();
        }

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.message || `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }

        const result = await response.json();

        // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        _currentStakingData = {
            hasActiveStaking: false,
            stakingAmount: 0,
            period: 0,
            rewardPercent: 0,
            expectedReward: 0,
            remainingDays: 0
        };

        // –û—á–∏—â–∞—î–º–æ –∫–µ—à
        localStorage.removeItem('stakingData');
        localStorage.removeItem('winix_staking');

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ —î —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (result.data && result.data.newBalance !== undefined) {
            localStorage.setItem('userTokens', result.data.newBalance.toString());
            localStorage.setItem('winix_balance', result.data.newBalance.toString());

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (window.WinixCore && typeof window.WinixCore.updateBalanceDisplay === 'function') {
                window.WinixCore.updateBalanceDisplay();
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUI();

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        let message = "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ";
        if (result.data && result.data.returnedAmount && result.data.feeAmount) {
            message = `–°—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ: ${result.data.returnedAmount} WINIX. –ö–æ–º—ñ—Å—ñ—è: ${result.data.feeAmount} WINIX.`;
        }

        if (typeof window.showNotification === 'function') {
            window.showNotification(message, false, () => {
                // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            });
        }

        return { success: true, data: result.data, message };
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof window.hideLoading === 'function') {
            window.hideLoading();
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if (typeof window.showNotification === 'function') {
            window.showNotification(error.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
        }

        return { success: false, message: error.message };
    } finally {
        _isProcessingRequest = false;
    }
}

    // ======== –§–£–ù–ö–¶–Ü–á –Ü–ù–¢–ï–†–§–ï–ô–°–£ ========

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
     */
    function updateUI() {
        try {
            const hasActiveStaking = _currentStakingData && _currentStakingData.hasActiveStaking;

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const statusElement = getElement(DOM.stakingStatus);
            if (statusElement) {
                if (hasActiveStaking) {
                    statusElement.style.color = '#4DB6AC';
                    statusElement.style.fontWeight = 'bold';
                    statusElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${_currentStakingData.stakingAmount} $WINIX`;

                    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                    if (_currentStakingData.expectedReward) {
                        statusElement.textContent += ` | –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${_currentStakingData.expectedReward} $WINIX`;
                    }

                    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ –¥–Ω—ñ–≤
                    if (_currentStakingData.remainingDays !== undefined) {
                        statusElement.textContent += ` | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${_currentStakingData.remainingDays} –¥–Ω.`;
                    }
                } else {
                    statusElement.style.color = '';
                    statusElement.style.fontWeight = '';
                    statusElement.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
            updateButtonsState(hasActiveStaking);
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
     * @param {boolean} hasActiveStaking - –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
     */
    function updateButtonsState(hasActiveStaking) {
        try {
            // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const activeStakingButton = getElement(DOM.activeStakingButton);
            if (activeStakingButton) {
                if (hasActiveStaking) {
                    activeStakingButton.classList.remove('disabled');
                    activeStakingButton.disabled = false;
                } else {
                    activeStakingButton.classList.add('disabled');
                    activeStakingButton.disabled = true;
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelStakingButton = getElement(DOM.cancelStakingButton);
            if (cancelStakingButton) {
                if (hasActiveStaking) {
                    cancelStakingButton.style.opacity = '1';
                    cancelStakingButton.style.pointerEvents = 'auto';
                    cancelStakingButton.disabled = false;
                } else {
                    cancelStakingButton.style.opacity = '0.5';
                    cancelStakingButton.style.pointerEvents = 'none';
                    cancelStakingButton.disabled = true;
                }
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫:', e);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function showStakingModal() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                if (typeof window.showNotification === 'function') {
                    window.showNotification('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
                }
                return;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalStakingAmount = getElement(DOM.modalStakingAmount);
            const modalStakingPeriod = getElement(DOM.modalStakingPeriod);
            const modalRewardPercent = getElement(DOM.modalRewardPercent);
            const modalExpectedReward = getElement(DOM.modalExpectedReward);
            const modalRemainingDays = getElement(DOM.modalRemainingDays);

            if (modalStakingAmount) modalStakingAmount.textContent = `${_currentStakingData.stakingAmount || 0} $WINIX`;
            if (modalStakingPeriod) modalStakingPeriod.textContent = `${_currentStakingData.period || 0} –¥–Ω—ñ–≤`;
            if (modalRewardPercent) modalRewardPercent.textContent = `${_currentStakingData.rewardPercent || 0}%`;
            if (modalExpectedReward) modalExpectedReward.textContent = `${_currentStakingData.expectedReward || 0} $WINIX`;
            if (modalRemainingDays) modalRemainingDays.textContent = _currentStakingData.remainingDays || 0;

            // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            const modal = getElement(DOM.modal);
            if (modal) modal.classList.add('active');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);

            if (typeof window.showNotification === 'function') {
                window.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
            }
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function hideStakingModal() {
        try {
            const modal = getElement(DOM.modal);
            if (modal) modal.classList.remove('active');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
     */
    function handleAddToStakeFromModal() {
        try {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            hideStakingModal();

            // –ó–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É
            if (typeof window.showInputModal === 'function') {
                window.showInputModal('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', function(amount) {
                    const numAmount = parseInt(amount);
                    if (isNaN(numAmount) || numAmount <= 0) {
                        if (typeof window.showNotification === 'function') {
                            window.showNotification('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)', true);
                        }
                        return;
                    }

                    // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    addToStaking(numAmount);
                });
            } else {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π prompt
                const amount = prompt('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:');
                if (amount === null || amount.trim() === '') {
                    return; // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ –≤–≤–µ–¥–µ–Ω–Ω—è
                }

                const numAmount = parseInt(amount);
                if (isNaN(numAmount) || numAmount <= 0) {
                    if (typeof window.showNotification === 'function') {
                        window.showNotification('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)', true);
                    }
                    return;
                }

                // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                addToStaking(numAmount);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);

            if (typeof window.showNotification === 'function') {
                window.showNotification('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
            }
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
     */
    function updateReward() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
            const amountInput = getElement(DOM.amountInput);
            const periodSelect = getElement(DOM.periodSelect);
            const expectedReward = getElement(DOM.expectedReward);

            if (!amountInput || !periodSelect || !expectedReward) {
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            const amount = parseInt(amountInput.value) || 0;
            const period = parseInt(periodSelect.value) || 14;

            // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            expectedReward.classList.add('calculating');

            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            const reward = calculateExpectedReward(amount, period);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            expectedReward.textContent = reward.toFixed(2);
            expectedReward.classList.remove('calculating');
            expectedReward.classList.add('value-updated');

            // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
            setTimeout(() => {
                expectedReward.classList.remove('value-updated');
            }, 500);
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", error);
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    function initEventListeners() {
        try {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—É–º–∏ –∞–±–æ –ø–µ—Ä—ñ–æ–¥—É
            const amountInput = getElement(DOM.amountInput);
            const periodSelect = getElement(DOM.periodSelect);

            if (amountInput) {
                amountInput.addEventListener('input', updateReward);
            }

            if (periodSelect) {
                periodSelect.addEventListener('change', updateReward);
            }

            // –ö–Ω–æ–ø–∫–∞ Max
            const maxButton = getElement(DOM.maxButton);
            if (maxButton && amountInput) {
                maxButton.addEventListener('click', function() {
                    const balance = getBalance();
                    const maxAllowed = Math.floor(balance * CONFIG.maxBalancePercentage);

                    amountInput.value = maxAllowed;

                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é input –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                    amountInput.dispatchEvent(new Event('input'));

                    // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
                    maxButton.classList.add('active');
                    setTimeout(() => {
                        maxButton.classList.remove('active');
                    }, 300);
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
            const stakeButton = getElement(DOM.stakeButton);
            if (stakeButton && amountInput && periodSelect) {
                stakeButton.addEventListener('click', async () => {
                    const amount = parseInt(amountInput.value) || 0;
                    const period = parseInt(periodSelect.value) || 14;

                    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                    await createStaking(amount, period);
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const activeStakingButton = getElement(DOM.activeStakingButton);
            if (activeStakingButton) {
                activeStakingButton.addEventListener('click', showStakingModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelStakingButton = getElement(DOM.cancelStakingButton);
            if (cancelStakingButton) {
                cancelStakingButton.addEventListener('click', cancelStaking);
            }

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            const modalCloseButton = getElement(DOM.modalClose);
            if (modalCloseButton) {
                modalCloseButton.addEventListener('click', hideStakingModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalAddButton = getElement(DOM.modalAddButton);
            if (modalAddButton) {
                modalAddButton.addEventListener('click', handleAddToStakeFromModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalCancelButton = getElement(DOM.modalCancelButton);
            if (modalCancelButton) {
                modalCancelButton.addEventListener('click', () => {
                    hideStakingModal();
                    cancelStaking();
                });
            }

            // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
            const modal = getElement(DOM.modal);
            if (modal) {
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        hideStakingModal();
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            const backButton = document.getElementById('back-button');
            if (backButton) {
                backButton.addEventListener('click', function() {
                    window.location.href = "wallet.html";
                });
            }

            // –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            setTimeout(updateReward, 100);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π:', error);
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function init() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            await fetchStakingData();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            initEventListeners();

            console.log("‚úÖ Staking: –ú–æ–¥—É–ª—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            document.dispatchEvent(new CustomEvent('staking-initialized'));
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
        }
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    window.WinixStakingSystem = {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        getStakingData: () => _currentStakingData,
        hasActiveStaking: () => _currentStakingData && _currentStakingData.hasActiveStaking,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
        updateUI,
        updateButtonsState,
        showStakingModal,
        hideStakingModal,

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        handleDetailsButton: showStakingModal,
        handleCancelStakingButton: cancelStaking,
        handleAddToStakeButton: handleAddToStakeFromModal,

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        refresh: () => fetchStakingData(true)
    };

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥—É–ª—å –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
})();
/**
 * –Ñ–¥–∏–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –≥–∞—Ä–Ω–∏–º –¥—ñ–∞–ª–æ–≥–æ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
 * –í—Å—Ç–∞–≤—Ç–µ —Ü–µ–π –∫–æ–¥ —É –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É staking.js
 */
(function() {
    // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    let isCancellingStaking = false;

    // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –º–∏ –±—É–¥–µ–º–æ –∑–∞–º—ñ–Ω—é–≤–∞—Ç–∏
    let originalCancelStaking;
    if (window.WinixStakingSystem && window.WinixStakingSystem.cancelStaking) {
        originalCancelStaking = window.WinixStakingSystem.cancelStaking;
    }

    /**
     * –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É - –ø–æ–∫–∞–∑—É—î –≥–∞—Ä–Ω–∏–π –¥—ñ–∞–ª–æ–≥ —ñ –æ–±—Ä–æ–±–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    function enhancedCancelStaking() {
        // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
        if (isCancellingStaking) {
            if (typeof window.showNotification === 'function') {
                window.showNotification('–ó–∞—á–µ–∫–∞–π—Ç–µ, –∑–∞–ø–∏—Ç —É–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è', true);
            }
            return Promise.reject(new Error('–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è'));
        }

        isCancellingStaking = true;

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
        const modals = document.querySelectorAll('.modal-overlay, #staking-modal');
        modals.forEach(modal => {
            modal.classList.remove('active', 'open', 'show');
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ –≥–∞—Ä–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        return new Promise((resolve, reject) => {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –¥—ñ–∞–ª–æ–≥—É, —è–∫—â–æ –π–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î
            let confirmDialog = document.getElementById('premium-confirm-dialog');
            if (!confirmDialog) {
                // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
                if (!document.getElementById('premium-confirm-styles')) {
                    const style = document.createElement('style');
                    style.id = 'premium-confirm-styles';
                    style.textContent = `
                        .premium-confirm-overlay {
                            position: fixed;
                            top: 0;
                            left: 0;
                            right: 0;
                            bottom: 0;
                            background: rgba(0, 0, 0, 0.7);
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            z-index: 10000;
                            opacity: 0;
                            visibility: hidden;
                            transition: opacity 0.3s, visibility 0.3s;
                            backdrop-filter: blur(8px);
                        }
                        
                        .premium-confirm-overlay.show {
                            opacity: 1;
                            visibility: visible;
                        }
                        
                        .premium-confirm-dialog {
                            background: rgba(30, 39, 70, 0.90);
                            border-radius: 20px;
                            padding: 24px;
                            width: 90%;
                            max-width: 380px;
                            transform: scale(0.95);
                            opacity: 0;
                            transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.3s ease;
                            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(78, 181, 247, 0.15) inset, 0 6px 12px rgba(0, 0, 0, 0.25);
                            text-align: center;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            overflow: hidden;
                            position: relative;
                        }
                        
                        .premium-confirm-overlay.show .premium-confirm-dialog {
                            transform: scale(1);
                            opacity: 1;
                        }
                        
                        .premium-confirm-icon {
                            width: 70px;
                            height: 70px;
                            background: rgba(244, 67, 54, 0.15);
                            border-radius: 50%;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            font-size: 36px;
                            color: #FF5252;
                            margin-bottom: 16px;
                        }
                        
                        .premium-confirm-title {
                            font-size: 20px;
                            font-weight: 600;
                            margin-bottom: 12px;
                            color: white;
                        }
                        
                        .premium-confirm-message {
                            font-size: 16px;
                            line-height: 1.5;
                            margin-bottom: 24px;
                            color: rgba(255, 255, 255, 0.9);
                        }
                        
                        .premium-confirm-buttons {
                            display: flex;
                            justify-content: center;
                            gap: 12px;
                            width: 100%;
                        }
                        
                        .premium-confirm-button {
                            flex-basis: 45%;
                            padding: 12px;
                            border-radius: 12px;
                            border: none;
                            font-size: 16px;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.2s ease;
                        }
                        
                        .premium-confirm-button:active {
                            transform: scale(0.97);
                        }
                        
                        .premium-confirm-button-cancel {
                            background: rgba(255, 255, 255, 0.1);
                            color: white;
                        }
                        
                        .premium-confirm-button-confirm {
                            background: linear-gradient(90deg, #8B0000, #A52A2A, #B22222);
                            color: white;
                        }
                    `;
                    document.head.appendChild(style);
                }

                // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥—ñ–∞–ª–æ–≥—É
                confirmDialog = document.createElement('div');
                confirmDialog.id = 'premium-confirm-dialog';
                confirmDialog.className = 'premium-confirm-overlay';
                confirmDialog.innerHTML = `
                    <div class="premium-confirm-dialog">
                        <div class="premium-confirm-icon">‚ö†Ô∏è</div>
                        <div class="premium-confirm-title">–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É</div>
                        <div class="premium-confirm-message">–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.</div>
                        <div class="premium-confirm-buttons">
                            <button class="premium-confirm-button premium-confirm-button-cancel" id="cancel-staking-no">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                            <button class="premium-confirm-button premium-confirm-button-confirm" id="cancel-staking-yes">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏</button>
                        </div>
                    </div>
                `;

                document.body.appendChild(confirmDialog);
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥
            confirmDialog.classList.add('show');

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
            const cancelButton = document.getElementById('cancel-staking-no');
            const confirmButton = document.getElementById('cancel-staking-yes');

            // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            const newCancelButton = cancelButton.cloneNode(true);
            const newConfirmButton = confirmButton.cloneNode(true);

            cancelButton.parentNode.replaceChild(newCancelButton, cancelButton);
            confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);

            // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            newCancelButton.addEventListener('click', () => {
                confirmDialog.classList.remove('show');
                isCancellingStaking = false;
                resolve(false);
            });

            newConfirmButton.addEventListener('click', () => {
                confirmDialog.classList.remove('show');

                // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (typeof window.showLoading === 'function') {
                    window.showLoading('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
                }

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
                if (originalCancelStaking) {
                    originalCancelStaking()
                        .then(result => {
                            if (typeof window.hideLoading === 'function') {
                                window.hideLoading();
                            }
                            resolve(result);
                        })
                        .catch(error => {
                            if (typeof window.hideLoading === 'function') {
                                window.hideLoading();
                            }
                            reject(error);
                        })
                        .finally(() => {
                            isCancellingStaking = false;
                        });
                } else {
                    // –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–º–∞—î, –≤–∏–∫–æ–Ω—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç
                    executeCancelRequest()
                        .then(result => {
                            if (typeof window.hideLoading === 'function') {
                                window.hideLoading();
                            }
                            resolve(result);
                        })
                        .catch(error => {
                            if (typeof window.hideLoading === 'function') {
                                window.hideLoading();
                            }
                            reject(error);
                        })
                        .finally(() => {
                            isCancellingStaking = false;
                        });
                }
            });
        });
    }

    /**
     * –í–∏–∫–æ–Ω—É—î API-–∑–∞–ø–∏—Ç –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<Object>} Promise –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø–∏—Ç—É
     */
    async function executeCancelRequest() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingId = await getStakingId();

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();

            if (!userId) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            }

            if (!stakingId) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            const response = await fetch(`/api/user/${userId}/staking/${stakingId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    confirm: true,
                    timestamp: Date.now()
                })
            });

            // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            if (result.data && result.data.newBalance !== undefined) {
                localStorage.setItem('userTokens', result.data.newBalance.toString());
                localStorage.setItem('winix_balance', result.data.newBalance.toString());

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞
                if (typeof window.updateBalanceDisplay === 'function') {
                    window.updateBalanceDisplay();
                } else if (window.WinixCore && typeof window.WinixCore.updateBalanceDisplay === 'function') {
                    window.WinixCore.updateBalanceDisplay();
                }
            }

            // –û—á–∏—â–∞—î–º–æ –∫–µ—à —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            localStorage.removeItem('stakingData');
            localStorage.removeItem('winix_staking');

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            const message = result.data && result.data.returnedAmount && result.data.feeAmount
                ? `–°—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ: ${result.data.returnedAmount} WINIX. –ö–æ–º—ñ—Å—ñ—è: ${result.data.feeAmount} WINIX.`
                : "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ";

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (typeof window.showNotification === 'function') {
                window.showNotification(message, false);
            } else if (typeof window.showToast === 'function') {
                window.showToast(message);
            } else {
                alert(message);
            }

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ—Å–ª—è –Ω–µ–≤–µ–ª–∏–∫–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏
            setTimeout(() => {
                window.location.reload();
            }, 2000);

            return {
                success: true,
                data: result.data,
                message: message
            };
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            const errorMessage = error.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É";

            if (typeof window.showNotification === 'function') {
                window.showNotification(errorMessage, true);
            } else if (typeof window.showToast === 'function') {
                window.showToast(errorMessage);
            } else {
                alert(errorMessage);
            }

            return {
                success: false,
                message: errorMessage
            };
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
     */
    function getUserId() {
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API
        if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
            const apiId = window.WinixAPI.getUserId();
            if (apiId) return apiId;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram WebApp
        if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
            return window.Telegram.WebApp.initDataUnsafe.user.id.toString();
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
        const storedId = localStorage.getItem('telegram_user_id');
        if (storedId && storedId !== 'undefined' && storedId !== 'null') {
            return storedId;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DOM
        const userIdElement = document.getElementById('user-id');
        if (userIdElement && userIdElement.textContent.trim()) {
            return userIdElement.textContent.trim();
        }

        return null;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª
     * @returns {Promise<string|null>} Promise –∑ ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∞–±–æ null
     */
    async function getStakingId() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        if (window.WinixStakingSystem && typeof window.WinixStakingSystem.getStakingData === 'function') {
            const stakingData = window.WinixStakingSystem.getStakingData();
            if (stakingData && stakingData.stakingId) {
                return stakingData.stakingId;
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
        try {
            const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
            if (stakingDataStr) {
                const localData = JSON.parse(stakingDataStr);
                if (localData && localData.stakingId) {
                    return localData.stakingId;
                }
            }
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
        }

        return null;
    }

    // –ó–∞–º—ñ–Ω—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞—à–æ—é –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–æ—é
    if (window.WinixStakingSystem) {
        window.WinixStakingSystem.cancelStaking = enhancedCancelStaking;
    }

    // –ó–∞–º—ñ–Ω—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    function updateCancelButtons() {
        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        const pageButton = document.getElementById('cancel-staking-button');
        if (pageButton) {
            const newPageButton = pageButton.cloneNode(true);
            pageButton.parentNode.replaceChild(newPageButton, pageButton);
            newPageButton.addEventListener('click', enhancedCancelStaking);
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
        const modalButton = document.getElementById('modal-cancel-staking-button');
        if (modalButton) {
            const newModalButton = modalButton.cloneNode(true);
            modalButton.parentNode.replaceChild(newModalButton, modalButton);
            newModalButton.addEventListener('click', () => {
                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
                const modal = document.getElementById('staking-modal');
                if (modal) modal.classList.remove('active');

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                enhancedCancelStaking();
            });
        }
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', updateCancelButtons);
    } else {
        updateCancelButtons();
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∑–∑–æ–≤–Ω—ñ
    window.cancelStakingEnhanced = enhancedCancelStaking;

    console.log("‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
})();