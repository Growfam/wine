/**
 * staking.js - –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É WINIX
 */

(function () {
  'use strict';

  console.log('üîÑ Staking: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');

  // ======== –ö–û–ù–°–¢–ê–ù–¢–ò ========

  // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
  const CONFIG = {
    minAmount: 50, // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    maxBalancePercentage: 0.9, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É
    allowedPeriods: [7, 14, 28], // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    rewardRates: {
      7: 4, // 4% –∑–∞ 7 –¥–Ω—ñ–≤
      14: 9, // 9% –∑–∞ 14 –¥–Ω—ñ–≤
      28: 15, // 15% –∑–∞ 28 –¥–Ω—ñ–≤
    },
    cancellationFee: 0.2, // –®—Ç—Ä–∞—Ñ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ (20%)
    refreshInterval: 300000, // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (5 —Ö–≤–∏–ª–∏–Ω),
    maxNotificationsAtOnce: 1, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
  };

  // ID DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const DOM = {
    amountInput: 'staking-amount',
    periodSelect: 'staking-period',
    expectedReward: 'expected-reward',
    stakingStatus: 'staking-status',
    activeStakingButton: 'active-staking-button',
    cancelStakingButton: 'cancel-staking-button',
    stakeButton: 'stake-button',
    maxButton: 'max-button',

    // –ï–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    modal: 'staking-modal',
    modalClose: 'modal-close',
    modalStakingAmount: 'modal-staking-amount',
    modalStakingPeriod: 'modal-staking-period',
    modalRewardPercent: 'modal-staking-reward-percent',
    modalExpectedReward: 'modal-staking-expected-reward',
    modalRemainingDays: 'modal-staking-remaining-days',
    modalAddButton: 'modal-add-to-stake-button',
    modalCancelButton: 'modal-cancel-staking-button',
    modalAddAmount: 'modal-add-amount', // –ù–æ–≤–µ –ø–æ–ª–µ –¥–ª—è —Å—É–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
  };

  // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

  // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Å—Ç–∞–Ω—É
  let _isProcessingCancelRequest = false;
  let _isProcessingRequest = false;
  let _notificationShowing = false;
  let _notificationsQueue = [];

  // –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
  let _currentStakingData = null;

  // ======== –£–¢–ò–õ–Ü–¢–ò ========

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM
   * @param {string} id - ID –µ–ª–µ–º–µ–Ω—Ç–∞
   */
  function getElement(id) {
    return document.getElementById(id);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
   */
  function getBalance() {
    try {
      if (window.WinixCore && typeof window.WinixCore.getBalance === 'function') {
        return window.WinixCore.getBalance();
      }

      return parseFloat(
        localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0'
      );
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
      return 0;
    }
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
   * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
   */
  function calculateExpectedReward(amount, period) {
    try {
      amount = parseInt(amount) || 0;
      period = parseInt(period) || 14;

      if (amount <= 0) {
        return 0;
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
      const rewardPercent = CONFIG.rewardRates[period] || 9;
      const reward = (amount * rewardPercent) / 100;

      return parseFloat(reward.toFixed(2));
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', e);
      return 0;
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö UI
   * @param {number} newBalance - –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
   */
  function updateBalanceUI(newBalance) {
    try {
      // 1. –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ WinixCore, —è–∫—â–æ –≤—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
      if (window.WinixCore && typeof window.WinixCore.updateBalanceDisplay === 'function') {
        window.WinixCore.updateBalanceDisplay();
      }

      // 2. –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –æ–Ω–æ–≤–ª—é—î–º–æ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏
      const balanceElements = [
        document.getElementById('user-tokens'),
        document.getElementById('main-balance'),
        document.querySelector('.balance-amount'),
        document.getElementById('current-balance'),
        ...document.querySelectorAll('[data-balance-display]'),
      ];

      balanceElements.forEach((element) => {
        if (element) {
          // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∑ —ñ–∫–æ–Ω–∫–æ—é
          if (
            element.id === 'main-balance' &&
            element.innerHTML &&
            element.innerHTML.includes('main-balance-icon')
          ) {
            const iconPart = element.querySelector('.main-balance-icon')?.outerHTML || '';
            element.innerHTML = `${parseFloat(newBalance).toFixed(2)} ${iconPart}`;
          } else {
            element.textContent = parseFloat(newBalance).toFixed(2);
          }

          // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
          element.classList.add('balance-updated');
          setTimeout(() => {
            element.classList.remove('balance-updated');
          }, 1000);
        }
      });

      // 3. –û–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—É —Å—Ç–∞–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
      if (window.WinixCore && window.WinixCore.state) {
        if (window.WinixCore.state.balanceTokens !== undefined) {
          window.WinixCore.state.balanceTokens = parseFloat(newBalance);
        }
      }

      // 4. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
      localStorage.setItem('userTokens', newBalance.toString());
      localStorage.setItem('winix_balance', newBalance.toString());

      // 5. –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
      document.dispatchEvent(
        new CustomEvent('balance-updated', {
          detail: { newBalance: parseFloat(newBalance) },
        })
      );

      console.log('–ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ:', newBalance);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
    }
  }

  /**
   * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø—Ä–µ–º—ñ—É–º-—Å—Ç–∏–ª—å)
   * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {boolean} isError - –ß–∏ —î —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
   * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
   */
  function showNotification(message, isError = false, callback = null) {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–∫–∞–∑—É –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if (!message || message.trim() === '') {
      if (callback) setTimeout(callback, 100);
      return;
    }

    // –Ø–∫—â–æ —É–∂–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É
    if (_notificationShowing) {
      if (_notificationsQueue.length < CONFIG.maxNotificationsAtOnce) {
        _notificationsQueue.push({ message, isError, callback });
      } else {
        // –Ø–∫—â–æ —á–µ—Ä–≥–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞, —ñ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ —á–µ—Ä–µ–∑ alert
        if (isError) alert(message);
        if (callback) setTimeout(callback, 100);
      }
      return;
    }

    _notificationShowing = true;

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∂–µ —ñ—Å–Ω—É—î
      let container = document.getElementById('premium-notification-container');

      if (!container) {
        container = document.createElement('div');
        container.id = 'premium-notification-container';
        container.className = 'premium-notification-container';
        document.body.appendChild(container);

        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
        if (!document.getElementById('premium-notification-styles')) {
          const style = document.createElement('style');
          style.id = 'premium-notification-styles';
          style.textContent = `
                        .premium-notification-container {
                            position: fixed;
                            top: 1.25rem;
                            right: 1.25rem;
                            z-index: 9999;
                            width: 90%;
                            max-width: 380px;
                            display: flex;
                            flex-direction: column;
                            gap: 0.625rem;
                            pointer-events: none;
                        }
                        
                        .premium-notification {
                            background: rgba(30, 39, 70, 0.85);
                            backdrop-filter: blur(10px);
                            border-radius: 16px;
                            padding: 16px;
                            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.4), 0 8px 16px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(78, 181, 247, 0.1) inset;
                            display: flex;
                            align-items: center;
                            color: white;
                            transform: translateX(50px) scale(0.95);
                            opacity: 0;
                            transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.3s ease;
                            margin-bottom: 0.5rem;
                            overflow: hidden;
                            pointer-events: auto;
                            position: relative;
                        }
                        
                        .premium-notification.show {
                            transform: translateX(0) scale(1);
                            opacity: 1;
                        }
                        
                        .premium-notification.hide {
                            transform: translateX(50px) scale(0.95);
                            opacity: 0;
                        }
                        
                        .premium-notification::before {
                            content: '';
                            position: absolute;
                            top: 0;
                            left: 0;
                            width: 4px;
                            height: 100%;
                            background: linear-gradient(to bottom, #4DB6AC, #00C9A7);
                        }
                        
                        .premium-notification.error::before {
                            background: linear-gradient(to bottom, #FF5252, #B71C1C);
                        }
                        
                        .premium-notification.success::before {
                            background: linear-gradient(to bottom, #4CAF50, #2E7D32);
                        }
                        
                        .premium-notification-icon {
                            width: 32px;
                            height: 32px;
                            min-width: 32px;
                            border-radius: 50%;
                            background: rgba(0, 201, 167, 0.15);
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            margin-right: 12px;
                            font-size: 18px;
                        }
                        
                        .premium-notification.error .premium-notification-icon {
                            background: rgba(244, 67, 54, 0.15);
                        }
                        
                        .premium-notification.success .premium-notification-icon {
                            background: rgba(76, 175, 80, 0.15);
                        }
                        
                        .premium-notification-content {
                            flex-grow: 1;
                            padding-right: 8px;
                            font-size: 14px;
                            line-height: 1.5;
                        }
                        
                        .premium-notification-close {
                            width: 24px;
                            height: 24px;
                            background: rgba(255, 255, 255, 0.1);
                            border: none;
                            border-radius: 50%;
                            color: rgba(255, 255, 255, 0.7);
                            font-size: 14px;
                            cursor: pointer;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            transition: all 0.2s ease;
                            padding: 0;
                            margin-left: 8px;
                        }
                        
                        .premium-notification-close:hover {
                            background: rgba(255, 255, 255, 0.2);
                            color: white;
                        }
                        
                        .premium-notification-progress {
                            position: absolute;
                            bottom: 0;
                            left: 0;
                            height: 3px;
                            background: linear-gradient(to right, rgba(78, 181, 247, 0.5), rgba(0, 201, 167, 0.8));
                            width: 100%;
                            transform-origin: left;
                            animation: progress-shrink 3s linear forwards;
                        }
                        
                        .premium-notification.error .premium-notification-progress {
                            background: linear-gradient(to right, rgba(244, 67, 54, 0.5), rgba(183, 28, 28, 0.8));
                        }
                        
                        .premium-notification.success .premium-notification-progress {
                            background: linear-gradient(to right, rgba(76, 175, 80, 0.5), rgba(46, 125, 50, 0.8));
                        }
                        
                        @keyframes progress-shrink {
                            from { transform: scaleX(1); }
                            to { transform: scaleX(0); }
                        }
                        
                        .premium-notification-title {
                            font-weight: 600;
                            margin-bottom: 4px;
                            font-size: 15px;
                        }
                        
                        .premium-notification-message {
                            opacity: 0.9;
                        }
                        
                        @keyframes balance-highlight {
                            0% { color: inherit; text-shadow: none; }
                            50% { color: #4eb5f7; text-shadow: 0 0 8px rgba(78, 181, 247, 0.6); }
                            100% { color: inherit; text-shadow: none; }
                        }
                        
                        .balance-updated {
                            animation: balance-highlight 1s ease;
                        }
                    `;
          document.head.appendChild(style);
        }
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const notification = document.createElement('div');
      notification.className = `premium-notification ${isError ? 'error' : 'success'}`;

      // –î–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É
      const icon = document.createElement('div');
      icon.className = 'premium-notification-icon';
      icon.innerHTML = isError ? '&#10060;' : '&#10004;';

      // –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const content = document.createElement('div');
      content.className = 'premium-notification-content';

      // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ —Ç–µ–∫—Å—Ç
      const title = document.createElement('div');
      title.className = 'premium-notification-title';
      title.textContent = isError ? '–ü–æ–º–∏–ª–∫–∞' : '–£—Å–ø—ñ—à–Ω–æ';

      const messageEl = document.createElement('div');
      messageEl.className = 'premium-notification-message';
      messageEl.textContent = message;

      content.appendChild(title);
      content.appendChild(messageEl);

      // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
      const closeBtn = document.createElement('button');
      closeBtn.className = 'premium-notification-close';
      closeBtn.innerHTML = '&times;';

      // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É
      const progress = document.createElement('div');
      progress.className = 'premium-notification-progress';

      // –ó–±–∏—Ä–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
      notification.appendChild(icon);
      notification.appendChild(content);
      notification.appendChild(closeBtn);
      notification.appendChild(progress);

      // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      container.appendChild(notification);

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ—Ä–æ—Ç–∫–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);

      // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
      closeBtn.addEventListener('click', () => {
        notification.classList.remove('show');
        notification.classList.add('hide');
        setTimeout(() => {
          notification.remove();
          _notificationShowing = false;

          // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏
          if (_notificationsQueue.length > 0) {
            const nextNotification = _notificationsQueue.shift();
            showNotification(
              nextNotification.message,
              nextNotification.isError,
              nextNotification.callback
            );
          } else if (callback) {
            callback();
          }
        }, 300);
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
      setTimeout(() => {
        if (!notification.classList.contains('hide')) {
          notification.classList.remove('show');
          notification.classList.add('hide');
          setTimeout(() => {
            notification.remove();
            _notificationShowing = false;

            // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏
            if (_notificationsQueue.length > 0) {
              const nextNotification = _notificationsQueue.shift();
              showNotification(
                nextNotification.message,
                nextNotification.isError,
                nextNotification.callback
              );
            } else if (callback) {
              callback();
            }
          }, 300);
        }
      }, 5000);
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', e);
      // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ alert
      alert(message);
      _notificationShowing = false;
      if (callback) callback();
    }
  }

  // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ–∫–∞–∑—É —Ç–æ—Å—Ç—ñ–≤, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º-—Å—Ç–∏–ª—å
  window.showToast = function (message, isError) {
    showNotification(message, isError);
  };

  // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  window.showNotification = showNotification;

  /**
   * –ü–æ–∫–∞–∑ –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
   * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {Function} confirmCallback - –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ
   * @param {Function} cancelCallback - –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ
   */
  function showConfirmDialog(message, confirmCallback, cancelCallback) {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –¥—ñ–∞–ª–æ–≥
      let confirmOverlay = document.getElementById('staking-confirm-dialog');

      if (!confirmOverlay) {
        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        if (!document.getElementById('staking-confirm-styles')) {
          const style = document.createElement('style');
          style.id = 'staking-confirm-styles';
          style.textContent = `
                        .premium-confirm-overlay {
                            position: fixed;
                            top: 0;
                            left: 0;
                            right: 0;
                            bottom: 0;
                            background: rgba(0, 0, 0, 0.7);
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            z-index: 10000;
                            opacity: 0;
                            visibility: hidden;
                            transition: opacity 0.3s, visibility 0.3s;
                            backdrop-filter: blur(8px);
                        }
                        
                        .premium-confirm-overlay.show {
                            opacity: 1;
                            visibility: visible;
                        }
                        
                        .premium-confirm-dialog {
                            background: rgba(30, 39, 70, 0.90);
                            border-radius: 20px;
                            padding: 24px;
                            width: 90%;
                            max-width: 380px;
                            transform: scale(0.95);
                            opacity: 0;
                            transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.3s ease;
                            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(78, 181, 247, 0.15) inset, 0 6px 12px rgba(0, 0, 0, 0.25);
                            text-align: center;
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            overflow: hidden;
                            position: relative;
                        }
                        
                        .premium-confirm-overlay.show .premium-confirm-dialog {
                            transform: scale(1);
                            opacity: 1;
                        }
                        
                        .premium-confirm-icon {
                            width: 70px;
                            height: 70px;
                            background: rgba(244, 67, 54, 0.15);
                            border-radius: 50%;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            font-size: 36px;
                            color: #FF5252;
                            margin-bottom: 16px;
                        }
                        
                        .premium-confirm-title {
                            font-size: 20px;
                            font-weight: 600;
                            margin-bottom: 12px;
                            color: white;
                        }
                        
                        .premium-confirm-message {
                            font-size: 16px;
                            line-height: 1.5;
                            margin-bottom: 24px;
                            color: rgba(255, 255, 255, 0.9);
                        }
                        
                        .premium-confirm-buttons {
                            display: flex;
                            justify-content: center;
                            gap: 12px;
                            width: 100%;
                        }
                        
                        .premium-confirm-button {
                            flex-basis: 45%;
                            padding: 12px;
                            border-radius: 12px;
                            border: none;
                            font-size: 16px;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.2s ease;
                        }
                        
                        .premium-confirm-button:active {
                            transform: scale(0.97);
                        }
                        
                        .premium-confirm-button-cancel {
                            background: rgba(255, 255, 255, 0.1);
                            color: white;
                        }
                        
                        .premium-confirm-button-confirm {
                            background: linear-gradient(90deg, #8B0000, #A52A2A, #B22222);
                            color: white;
                        }
                    `;
          document.head.appendChild(style);
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥
        confirmOverlay = document.createElement('div');
        confirmOverlay.id = 'staking-confirm-dialog';
        confirmOverlay.className = 'premium-confirm-overlay';

        const dialog = document.createElement('div');
        dialog.className = 'premium-confirm-dialog';
        dialog.innerHTML = `
                    <div class="premium-confirm-icon">‚ö†Ô∏è</div>
                    <div class="premium-confirm-title">–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É</div>
                    <div class="premium-confirm-message">${message}</div>
                    <div class="premium-confirm-buttons">
                        <button class="premium-confirm-button premium-confirm-button-cancel" id="staking-cancel-no">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                        <button class="premium-confirm-button premium-confirm-button-confirm" id="staking-cancel-yes">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏</button>
                    </div>
                `;

        confirmOverlay.appendChild(dialog);
        document.body.appendChild(confirmOverlay);
      } else {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const messageEl = confirmOverlay.querySelector('.premium-confirm-message');
        if (messageEl) messageEl.textContent = message;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏
      const cancelBtn = document.getElementById('staking-cancel-no');
      const confirmBtn = document.getElementById('staking-cancel-yes');

      // –ó–∞–º—ñ–Ω—é—î–º–æ –∫–Ω–æ–ø–∫–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
      if (cancelBtn) {
        const newCancelBtn = cancelBtn.cloneNode(true);
        cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        newCancelBtn.addEventListener('click', function () {
          confirmOverlay.classList.remove('show');
          if (cancelCallback) cancelCallback();
        });
      }

      if (confirmBtn) {
        const newConfirmBtn = confirmBtn.cloneNode(true);
        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        newConfirmBtn.addEventListener('click', function () {
          confirmOverlay.classList.remove('show');
          if (confirmCallback) confirmCallback();
        });
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥
      confirmOverlay.classList.add('show');
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥—ñ–∞–ª–æ–≥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:', e);
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π confirm
      if (confirm(message)) {
        if (confirmCallback) confirmCallback();
      } else {
        if (cancelCallback) cancelCallback();
      }
    }
  }

  // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ–∫–∞–∑—É –¥—ñ–∞–ª–æ–≥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  window.showModernConfirm = showConfirmDialog;

  /**
   * –ü–æ–∫–∞–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
   */
  function showLoading(message) {
    try {
      let spinner = document.getElementById('loading-spinner');

      if (!spinner) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const spinnerContainer = document.createElement('div');
        spinnerContainer.id = 'loading-spinner';
        spinnerContainer.className = 'spinner-overlay';

        spinnerContainer.innerHTML = `
                    <div class="spinner-content">
                        <div class="spinner"></div>
                        ${message ? `<div class="spinner-message">${message}</div>` : ''}
                    </div>
                `;

        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        if (!document.getElementById('spinner-styles')) {
          const style = document.createElement('style');
          style.id = 'spinner-styles';
          style.textContent = `
                        .spinner-overlay {
                            position: fixed;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 100%;
                            background: rgba(0, 0, 0, 0.7);
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            z-index: 9999;
                            opacity: 0;
                            visibility: hidden;
                            transition: opacity 0.3s ease, visibility 0.3s ease;
                            backdrop-filter: blur(3px);
                        }
                        
                        .spinner-overlay.show {
                            opacity: 1;
                            visibility: visible;
                        }
                        
                        .spinner-content {
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            gap: 16px;
                        }
                        
                        .spinner {
                            width: 50px;
                            height: 50px;
                            border: 5px solid rgba(0, 201, 167, 0.3);
                            border-radius: 50%;
                            border-top-color: rgb(0, 201, 167);
                            animation: spin 1s linear infinite;
                        }
                        
                        .spinner-message {
                            color: white;
                            font-size: 16px;
                            text-align: center;
                            max-width: 300px;
                        }
                        
                        @keyframes spin {
                            to { transform: rotate(360deg); }
                        }
                    `;
          document.head.appendChild(style);
        }

        document.body.appendChild(spinnerContainer);
        spinner = spinnerContainer;
      } else {
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–µ
        if (message) {
          const messageEl = spinner.querySelector('.spinner-message');
          if (messageEl) {
            messageEl.textContent = message;
          } else {
            const newMessageEl = document.createElement('div');
            newMessageEl.className = 'spinner-message';
            newMessageEl.textContent = message;

            const content = spinner.querySelector('.spinner-content');
            if (content) {
              content.appendChild(newMessageEl);
            }
          }
        }
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
      spinner.classList.add('show');
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', e);
    }
  }

  /**
   * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   */
  function hideLoading() {
    try {
      const spinner = document.getElementById('loading-spinner');
      if (spinner) {
        spinner.classList.remove('show');
      }
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', e);
    }
  }

  // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  window.showLoading = showLoading;
  window.hideLoading = hideLoading;

  // ======== –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
   * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
   */
  async function fetchStakingData(forceRefresh = false, silent = false) {
    try {
      if (window.WinixAPI && typeof window.WinixAPI.getStakingData === 'function') {
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        const showingLoader = !silent && typeof window.showLoading === 'function';
        if (showingLoader) {
          window.showLoading('–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        const response = await window.WinixAPI.getStakingData();

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if (showingLoader && typeof window.hideLoading === 'function') {
          window.hideLoading();
        }

        // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (response.status === 'success' && response.data) {
          _currentStakingData = response.data;

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
          localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
          localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));
          localStorage.setItem('stakingDataCacheTime', Date.now().toString());

          // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          updateUI();

          return _currentStakingData;
        } else {
          throw new Error(response.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
        }
      } else {
        // –ó—á–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage, —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
        const stakingDataStr =
          localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');

        if (stakingDataStr) {
          _currentStakingData = JSON.parse(stakingDataStr);
          updateUI();
          return _currentStakingData;
        } else {
          // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ
          _currentStakingData = {
            hasActiveStaking: false,
            stakingAmount: 0,
            period: 0,
            rewardPercent: 0,
            expectedReward: 0,
            remainingDays: 0,
          };
          updateUI();
          return _currentStakingData;
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
      try {
        const stakingDataStr =
          localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');

        if (stakingDataStr) {
          _currentStakingData = JSON.parse(stakingDataStr);
        } else {
          _currentStakingData = {
            hasActiveStaking: false,
            stakingAmount: 0,
            period: 0,
            rewardPercent: 0,
            expectedReward: 0,
            remainingDays: 0,
          };
        }
      } catch (e) {
        _currentStakingData = {
          hasActiveStaking: false,
          stakingAmount: 0,
          period: 0,
          rewardPercent: 0,
          expectedReward: 0,
          remainingDays: 0,
        };
      }

      updateUI();
      return _currentStakingData;
    }
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
   */
  async function createStaking(amount, period) {
    // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –Ω–æ–≤—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    if (_isProcessingRequest) {
      return { success: false, message: 'in_progress' };
    }

    _isProcessingRequest = true;

    // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É (–∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–¥–≤—ñ–π–Ω–∏–º –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º)
    const stakeButton = getElement(DOM.stakeButton);
    if (stakeButton) stakeButton.disabled = true;

    try {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
      amount = parseInt(amount);
      period = parseInt(period);

      if (isNaN(amount) || amount < CONFIG.minAmount) {
        throw new Error(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.minAmount} WINIX`);
      }

      if (!CONFIG.allowedPeriods.includes(period)) {
        throw new Error(`–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.allowedPeriods.join(', ')} –¥–Ω—ñ–≤`);
      }

      const balance = getBalance();
      if (amount > balance) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
      }

      const maxAllowedAmount = Math.floor(balance * CONFIG.maxBalancePercentage);
      if (amount > maxAllowedAmount) {
        throw new Error(
          `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${maxAllowedAmount} WINIX (${Math.round(CONFIG.maxBalancePercentage * 100)}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)`
        );
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–æ–¥—Ä–∞–∑—É, –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è)
      if (typeof window.showLoading === 'function') {
        window.showLoading('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ API
      const response = await window.WinixAPI.createStaking(amount, period);

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      if (typeof window.hideLoading === 'function') {
        window.hideLoading();
      }

      if (response.status !== 'success') {
        throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
      if (response.data && response.data.staking) {
        _currentStakingData = response.data.staking;

        // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
        localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
        localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –Ω–µ–≥–∞–π–Ω–æ
        if (response.data.balance !== undefined) {
          updateBalanceUI(response.data.balance);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUI();

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        if (typeof window.showNotification === 'function') {
          window.showNotification('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }

        return {
          success: true,
          data: response.data,
          message: '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
        };
      } else {
        throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

      if (typeof window.showNotification === 'function') {
        window.showNotification(error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
      }

      return {
        success: false,
        message: error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É',
      };
    } finally {
      _isProcessingRequest = false;

      // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
      if (stakeButton) stakeButton.disabled = false;
    }
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
   */
  async function addToStaking(amount) {
    if (_isProcessingRequest) {
      return { success: false, message: 'in_progress' };
    }

    _isProcessingRequest = true;

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
      if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        await fetchStakingData(true);

        if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
          throw new Error('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
        }
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—É–º–∏
      amount = parseInt(amount);

      if (isNaN(amount) || amount <= 0) {
        throw new Error('–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º');
      }

      const balance = getBalance();
      if (amount > balance) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      if (typeof window.showLoading === 'function') {
        window.showLoading('–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
      }

      // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ API
      const response = await window.WinixAPI.addToStaking(amount, _currentStakingData.stakingId);

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      if (typeof window.hideLoading === 'function') {
        window.hideLoading();
      }

      if (response.status !== 'success') {
        throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
      if (response.data && response.data.staking) {
        _currentStakingData = response.data.staking;

        // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
        localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
        localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –Ω–µ–≥–∞–π–Ω–æ
        if (response.data.balance !== undefined) {
          updateBalanceUI(response.data.balance);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUI();

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        if (typeof window.showNotification === 'function') {
          window.showNotification(`–î–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–æ–¥–∞–Ω–æ +${amount} WINIX`);
        }

        return {
          success: true,
          data: response.data,
          message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`,
        };
      } else {
        throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

      if (typeof window.showNotification === 'function') {
        window.showNotification(error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
      }

      return {
        success: false,
        message: error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É',
      };
    } finally {
      _isProcessingRequest = false;
    }
  }

  /**
   * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   */
  async function cancelStaking() {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
    if (_isProcessingCancelRequest) {
      return { success: false, message: 'in_progress' };
    }

    _isProcessingCancelRequest = true;

    try {
      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–µ
      const modal = document.getElementById('staking-modal');
      if (modal) modal.classList.remove('active');

      // –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      return new Promise((resolve) => {
        showConfirmDialog(
          '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.',
          // –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
          async () => {
            try {
              // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
              if (typeof window.showLoading === 'function') {
                window.showLoading('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...');
              }

              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
              if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                await fetchStakingData(true, true);

                if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                  throw new Error('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
                }
              }

              // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
              let result = null;

              if (window.WinixAPI && typeof window.WinixAPI.cancelStaking === 'function') {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ API
                result = await window.WinixAPI.cancelStaking(_currentStakingData.stakingId);
              } else {
                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
                const userId = localStorage.getItem('telegram_user_id');
                if (!userId) {
                  throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
                }

                const response = await fetch(
                  `/api/user/${userId}/staking/${_currentStakingData.stakingId}/cancel`,
                  {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      confirm: true,
                      timestamp: Date.now(),
                    }),
                  }
                );

                if (!response.ok) {
                  throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
                }

                result = await response.json();
              }

              // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
              if (typeof window.hideLoading === 'function') {
                window.hideLoading();
              }

              // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
              _currentStakingData = {
                hasActiveStaking: false,
                stakingAmount: 0,
                period: 0,
                rewardPercent: 0,
                expectedReward: 0,
                remainingDays: 0,
              };

              // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
              localStorage.removeItem('stakingData');
              localStorage.removeItem('winix_staking');

              // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –Ω–µ–≥–∞–π–Ω–æ
              if (result && result.data && result.data.newBalance !== undefined) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
                updateBalanceUI(result.data.newBalance);
              }

              // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É
              updateUI();

              // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
              let message = '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ';

              if (result && result.data) {
                if (result.data.returnedAmount && result.data.feeAmount) {
                  message = `–°—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ: ${result.data.returnedAmount} WINIX. –ö–æ–º—ñ—Å—ñ—è: ${result.data.feeAmount} WINIX.`;
                }
              }

              // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
              showNotification(message, false, () => {
                setTimeout(() => {
                  resolve({
                    success: true,
                    data: result ? result.data : null,
                    message: message,
                  });
                }, 1000);
              });
            } catch (error) {
              console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

              // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
              if (typeof window.hideLoading === 'function') {
                window.hideLoading();
              }

              // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
              showNotification(error.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

              resolve({
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É',
              });
            } finally {
              _isProcessingCancelRequest = false;
            }
          },
          // –§—É–Ω–∫—Ü—ñ—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
          () => {
            _isProcessingCancelRequest = false;
            resolve({
              success: false,
              message: '–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º',
            });
          }
        );
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥—ñ–∞–ª–æ–≥—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
      _isProcessingCancelRequest = false;
      return {
        success: false,
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É',
      };
    }
  }

  // ======== –§–£–ù–ö–¶–Ü–á –Ü–ù–¢–ï–†–§–ï–ô–°–£ ========

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
   */
  function updateUI() {
    try {
      const hasActiveStaking = _currentStakingData && _currentStakingData.hasActiveStaking;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
      const statusElement = getElement(DOM.stakingStatus);
      if (statusElement) {
        if (hasActiveStaking) {
          statusElement.style.color = '#4DB6AC';
          statusElement.style.fontWeight = 'bold';
          statusElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${_currentStakingData.stakingAmount || 0} $WINIX`;

          // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
          if (_currentStakingData.expectedReward) {
            statusElement.textContent += ` | –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${_currentStakingData.expectedReward} $WINIX`;
          }

          // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ –¥–Ω—ñ–≤
          if (_currentStakingData.remainingDays !== undefined) {
            statusElement.textContent += ` | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${_currentStakingData.remainingDays} –¥–Ω.`;
          }
        } else {
          statusElement.style.color = '';
          statusElement.style.fontWeight = '';
          statusElement.textContent = '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤';
        }
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
      updateButtonsState(hasActiveStaking);
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
   * @param {boolean} hasActiveStaking - –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
   */
  function updateButtonsState(hasActiveStaking) {
    try {
      // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
      const activeStakingButton = getElement(DOM.activeStakingButton);
      if (activeStakingButton) {
        if (hasActiveStaking) {
          activeStakingButton.classList.remove('disabled');
          activeStakingButton.disabled = false;
        } else {
          activeStakingButton.classList.add('disabled');
          activeStakingButton.disabled = true;
        }
      }

      // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
      const cancelStakingButton = getElement(DOM.cancelStakingButton);
      if (cancelStakingButton) {
        if (hasActiveStaking) {
          cancelStakingButton.style.opacity = '1';
          cancelStakingButton.style.pointerEvents = 'auto';
          cancelStakingButton.disabled = false;
        } else {
          cancelStakingButton.style.opacity = '0.5';
          cancelStakingButton.style.pointerEvents = 'none';
          cancelStakingButton.disabled = true;
        }
      }
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫:', e);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   */
  function showStakingModal() {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
      if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
        if (typeof window.showNotification === 'function') {
          window.showNotification('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
        }
        return;
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
      const modalStakingAmount = getElement(DOM.modalStakingAmount);
      const modalStakingPeriod = getElement(DOM.modalStakingPeriod);
      const modalRewardPercent = getElement(DOM.modalRewardPercent);
      const modalExpectedReward = getElement(DOM.modalExpectedReward);
      const modalRemainingDays = getElement(DOM.modalRemainingDays);
      const modalAddAmount = getElement(DOM.modalAddAmount);

      if (modalStakingAmount)
        modalStakingAmount.textContent = `${_currentStakingData.stakingAmount || 0} $WINIX`;
      if (modalStakingPeriod)
        modalStakingPeriod.textContent = `${_currentStakingData.period || 0} –¥–Ω—ñ–≤`;
      if (modalRewardPercent)
        modalRewardPercent.textContent = `${_currentStakingData.rewardPercent || 0}%`;
      if (modalExpectedReward)
        modalExpectedReward.textContent = `${_currentStakingData.expectedReward || 0} $WINIX`;
      if (modalRemainingDays)
        modalRemainingDays.textContent = _currentStakingData.remainingDays || 0;

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –ø–æ–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
      if (modalAddAmount) modalAddAmount.value = '100';

      // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
      const modal = getElement(DOM.modal);
      if (modal) modal.classList.add('active');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);

      if (typeof window.showNotification === 'function') {
        window.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
      }
    }
  }

  /**
   * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   */
  function hideStakingModal() {
    try {
      const modal = getElement(DOM.modal);
      if (modal) modal.classList.remove('active');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
    }
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
   */
  function handleAddToStakeFromModal() {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –ø–æ–ª—è —É –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
      const amountInput = getElement(DOM.modalAddAmount);
      if (!amountInput) {
        showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—à—Ç—ñ–≤. –ü–æ–ª–µ —Å—É–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', true);
        return;
      }

      const amount = parseInt(amountInput.value);
      if (isNaN(amount) || amount <= 0) {
        showNotification('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)', true);
        return;
      }

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
      hideStakingModal();

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
      addToStaking(amount);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
      showNotification('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   */
  function updateReward() {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
      const amountInput = getElement(DOM.amountInput);
      const periodSelect = getElement(DOM.periodSelect);
      const expectedReward = getElement(DOM.expectedReward);

      if (!amountInput || !periodSelect || !expectedReward) {
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
      const amount = parseInt(amountInput.value) || 0;
      const period = parseInt(periodSelect.value) || 14;

      // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      expectedReward.classList.add('calculating');

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
      const reward = calculateExpectedReward(amount, period);

      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      expectedReward.textContent = reward.toFixed(2);
      expectedReward.classList.remove('calculating');
      expectedReward.classList.add('value-updated');

      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
      setTimeout(() => {
        expectedReward.classList.remove('value-updated');
      }, 500);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', error);
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  function initEventListeners() {
    try {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—É–º–∏ –∞–±–æ –ø–µ—Ä—ñ–æ–¥—É
      const amountInput = getElement(DOM.amountInput);
      const periodSelect = getElement(DOM.periodSelect);

      if (amountInput) {
        amountInput.addEventListener('input', updateReward);
      }

      if (periodSelect) {
        periodSelect.addEventListener('change', updateReward);
      }

      // –ö–Ω–æ–ø–∫–∞ Max
      const maxButton = getElement(DOM.maxButton);
      if (maxButton && amountInput) {
        maxButton.addEventListener('click', function () {
          const balance = getBalance();
          const maxAllowed = Math.floor(balance * CONFIG.maxBalancePercentage);

          amountInput.value = maxAllowed;

          // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é input –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
          amountInput.dispatchEvent(new Event('input'));

          // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
          maxButton.classList.add('active');
          setTimeout(() => {
            maxButton.classList.remove('active');
          }, 300);
        });
      }

      // –ö–Ω–æ–ø–∫–∞ "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
      const stakeButton = getElement(DOM.stakeButton);
      if (stakeButton && amountInput && periodSelect) {
        stakeButton.addEventListener('click', async () => {
          const amount = parseInt(amountInput.value) || 0;
          const period = parseInt(periodSelect.value) || 14;

          // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
          await createStaking(amount, period);
        });
      }

      // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
      const activeStakingButton = getElement(DOM.activeStakingButton);
      if (activeStakingButton) {
        activeStakingButton.addEventListener('click', showStakingModal);
      }

      // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
      const cancelStakingButton = getElement(DOM.cancelStakingButton);
      if (cancelStakingButton) {
        cancelStakingButton.addEventListener('click', cancelStaking);
      }

      // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
      const modalCloseButton = getElement(DOM.modalClose);
      if (modalCloseButton) {
        modalCloseButton.addEventListener('click', hideStakingModal);
      }

      // –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
      const modalAddButton = getElement(DOM.modalAddButton);
      if (modalAddButton) {
        modalAddButton.addEventListener('click', handleAddToStakeFromModal);
      }

      // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
      const modalCancelButton = getElement(DOM.modalCancelButton);
      if (modalCancelButton) {
        modalCancelButton.addEventListener('click', () => {
          hideStakingModal();
          cancelStaking();
        });
      }

      // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
      const modal = getElement(DOM.modal);
      if (modal) {
        modal.addEventListener('click', function (e) {
          if (e.target === modal) {
            hideStakingModal();
          }
        });
      }

      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
      const backButton = document.getElementById('back-button');
      if (backButton) {
        backButton.addEventListener('click', function () {
          window.location.href = 'wallet.html';
        });
      }

      // –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
      setTimeout(updateReward, 100);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π:', error);
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
   */
  async function init() {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
      await fetchStakingData();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
      initEventListeners();

      console.log('‚úÖ Staking: –ú–æ–¥—É–ª—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
      document.dispatchEvent(new CustomEvent('staking-initialized'));
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
    }
  }

  // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API ========

  // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  window.WinixStakingSystem = {
    // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    getStakingData: () => _currentStakingData,
    hasActiveStaking: () => _currentStakingData && _currentStakingData.hasActiveStaking,
    createStaking,
    addToStaking,
    cancelStaking,
    calculateExpectedReward,
    updateBalanceUI,

    // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
    updateUI,
    updateButtonsState,
    showStakingModal,
    hideStakingModal,

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    handleDetailsButton: showStakingModal,
    handleCancelStakingButton: cancelStaking,
    handleAddToStakeButton: handleAddToStakeFromModal,

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    refresh: () => fetchStakingData(true),

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    showNotification,
    showConfirmDialog,
    showLoading,
    hideLoading,
  };

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥—É–ª—å –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
