/**
 * staking.js
 *
 * –Ñ–¥–∏–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É WINIX.
 * –ó–∞–±–µ–∑–ø–µ—á—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤, —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É —Ç–∞
 * –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.
 *
 * –í–µ—Ä—Å—ñ—è: 2.0
 * –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: 2025-04-07
 */

(function() {
    'use strict';

    console.log("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if (!window.WinixAPI) {
        console.warn("‚ö†Ô∏è –ú–æ–¥—É–ª—å WinixAPI –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –æ–±–º–µ–∂–µ–Ω—ñ");
    }

    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixStakingSystem && window.WinixStakingSystemInitialized) {
        console.log("‚ÑπÔ∏è –ú–æ–¥—É–ª—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        return;
    }

    // ======== –ö–û–ù–°–¢–ê–ù–¢–ò ========

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const CONFIG = {
        minAmount: 50,                 // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        maxBalancePercentage: 0.9,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É
        allowedPeriods: [7, 14, 28],   // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        rewardRates: {
            7: 4,    // 4% –∑–∞ 7 –¥–Ω—ñ–≤
            14: 9,   // 9% –∑–∞ 14 –¥–Ω—ñ–≤
            28: 15   // 15% –∑–∞ 28 –¥–Ω—ñ–≤
        },
        cancellationFee: 0.2,          // –®—Ç—Ä–∞—Ñ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ (20%)
        refreshInterval: 300000,       // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (5 —Ö–≤–∏–ª–∏–Ω)
        cacheLifetime: 30000           // –ß–∞—Å –∂–∏—Ç—Ç—è –∫–µ—à—É (30 —Å–µ–∫—É–Ω–¥)
    };

    // ID DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const DOM = {
        amountInput: 'staking-amount',
        periodSelect: 'staking-period',
        expectedReward: 'expected-reward',
        stakingStatus: 'staking-status',
        activeStakingButton: 'active-staking-button',
        cancelStakingButton: 'cancel-staking-button',
        stakeButton: 'stake-button',
        maxButton: 'max-button',

        // –ï–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        modal: 'staking-modal',
        modalClose: 'modal-close',
        modalStakingAmount: 'modal-staking-amount',
        modalStakingPeriod: 'modal-staking-period',
        modalRewardPercent: 'modal-staking-reward-percent',
        modalExpectedReward: 'modal-staking-expected-reward',
        modalRemainingDays: 'modal-staking-remaining-days',
        modalAddButton: 'modal-add-to-stake-button',
        modalCancelButton: 'modal-cancel-staking-button'
    };

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========

    // –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    let _currentStakingData = null;

    // –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
    let _isProcessingRequest = false;
    let _isUpdatingDisplay = false;

    // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    let _refreshTimer = null;

    // –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    let _updateDebounceTimer = null;
    let _lastUpdateTime = 0;
    let _inputDebounceTimer = null;
    let _apiThrottleTimer = null;
    const UPDATE_THROTTLE_MS = 300; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏
    const INPUT_DEBOUNCE_MS = 250; // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const API_THROTTLE_MS = 500; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ API –∑–∞–ø–∏—Ç–∞–º–∏

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ API –∑–∞–ø–∏—Ç—ñ–≤
    let _apiRequestsInLastMinute = 0;
    const API_REQUESTS_RESET_INTERVAL = 60000; // 1 —Ö–≤–∏–ª–∏–Ω–∞

    // ======== –£–¢–ò–õ–Ü–¢–ò ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ DOM –∑–∞ ID
     * @param {string} id - ID –µ–ª–µ–º–µ–Ω—Ç–∞
     * @returns {HTMLElement} –ï–ª–µ–º–µ–Ω—Ç DOM –∞–±–æ null
     */
    function getElement(id) {
        return document.getElementById(id);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ ID
     * @param {any} id - ID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
     * @returns {boolean} –ß–∏ ID –≤–∞–ª—ñ–¥–Ω–∏–π
     */
    function isValidId(id) {
        return id &&
               id !== 'undefined' &&
               id !== 'null' &&
               id !== undefined &&
               id !== null &&
               id.toString().trim() !== '';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {boolean} isError - –ß–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–æ—é
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function showMessage(message, isError = false, callback = null) {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–∫–∞–∑—É –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if (!message || message.trim() === '') {
            console.warn("–°–ø—Ä–æ–±–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
            if (callback) setTimeout(callback, 100);
            return;
        }

        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—É—á–∞—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            if (window.showModernNotification) {
                window.showModernNotification(message, isError, callback);
                return;
            }

            // –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏
            if (window.showToast) {
                window.showToast(message, isError ? 'error' : 'success');
                if (callback) setTimeout(callback, 1500);
                return;
            }

            if (window.simpleAlert) {
                window.simpleAlert(message, isError, callback);
                return;
            }

            // –Ø–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π alert
            alert(message);
            if (callback) callback();
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e);
            alert(message);
            if (callback) callback();
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {number} –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function getBalance() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
            if (window.WinixCore && typeof window.WinixCore.getBalance === 'function') {
                return window.WinixCore.getBalance();
            }

            // –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ WinixCore.Balance
            if (window.WinixCore && window.WinixCore.Balance && typeof window.WinixCore.Balance.getTokens === 'function') {
                return window.WinixCore.Balance.getTokens();
            }

            // –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
            const balanceStr = localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0';
            const balance = parseFloat(balanceStr);
            return isNaN(balance) ? 0 : balance;
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
            return 0;
        }
    }

    /**
     * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º throttling —Ç–∞ debouncing
     * @param {boolean} forceUpdate - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –∑–∞—Ç—Ä–∏–º–∫—É
     * @returns {Promise<void>}
     */
    function optimizedUpdateUI(forceUpdate = false) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        const now = Date.now();
        if (!forceUpdate && now - _lastUpdateTime < UPDATE_THROTTLE_MS) {
            // –Ø–∫—â–æ –º–∏–Ω—É–ª–æ –º–µ–Ω—à–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —á–∞—Å—É, –≤—ñ–¥–∫–ª–∞–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (debounce)
            clearTimeout(_updateDebounceTimer);

            return new Promise(resolve => {
                _updateDebounceTimer = setTimeout(() => {
                    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
                    if (!window._uiUpdateInProgress) {
                        window._uiUpdateInProgress = true;

                        updateUI(true)
                            .then(result => {
                                window._uiUpdateInProgress = false;
                                resolve(result);
                            })
                            .catch(error => {
                                window._uiUpdateInProgress = false;
                                console.warn('–ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI:', error);
                                resolve();
                            });
                    } else {
                        console.log('–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è - –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è');
                        resolve();
                    }
                }, UPDATE_THROTTLE_MS);
            });
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (throttling)
        _lastUpdateTime = now;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (window._uiUpdateInProgress) {
            return Promise.resolve();
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        window._uiUpdateInProgress = true;

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        return updateUI(forceUpdate)
            .then(result => {
                window._uiUpdateInProgress = false;
                return result;
            })
            .catch(error => {
                window._uiUpdateInProgress = false;
                console.warn('–ü–æ–º–∏–ª–∫–∞ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI:', error);
                throw error;
            });
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async function updateUI(forceRefresh = false) {
        // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º –≤–∏–∫–ª–∏–∫–∞–º
        if (_isUpdatingDisplay) {
            console.warn("–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            return;
        }

        _isUpdatingDisplay = true;

        try {
            // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
            if (forceRefresh) {
                try {
                    await fetchStakingData(true);
                } catch (error) {
                    console.warn("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—è–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                }
            }

            const hasActiveStaking = _currentStakingData && _currentStakingData.hasActiveStaking;

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const statusElement = getElement(DOM.stakingStatus);
            if (statusElement) {
                if (hasActiveStaking) {
                    // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è —É–≤–∞–≥–∏
                    statusElement.style.transition = 'all 0.3s ease';
                    statusElement.style.color = '#4DB6AC';
                    statusElement.style.fontWeight = 'bold';
                    statusElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${_currentStakingData.stakingAmount} $WINIX`;

                    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                    if (_currentStakingData.expectedReward) {
                        statusElement.textContent += ` | –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${_currentStakingData.expectedReward} $WINIX`;
                    }

                    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ –¥–Ω—ñ–≤
                    if (_currentStakingData.remainingDays !== undefined) {
                        statusElement.textContent += ` | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${_currentStakingData.remainingDays} –¥–Ω.`;
                    }

                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
                    setTimeout(() => {
                        statusElement.style.color = '';
                        statusElement.style.fontWeight = '';
                    }, 2000);
                } else {
                    statusElement.style.color = '';
                    statusElement.style.fontWeight = '';
                    statusElement.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
            updateButtonsState(hasActiveStaking);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!hasActiveStaking) {
                const amountInput = getElement(DOM.amountInput);
                const periodSelect = getElement(DOM.periodSelect);
                const expectedReward = getElement(DOM.expectedReward);

                if (amountInput && periodSelect && expectedReward) {
                    // –°–∫–∏–¥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                    amountInput.value = '';

                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                    periodSelect.value = '14'; // –ê–±–æ —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

                    // –û–Ω–æ–≤–ª—é—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                    calculateExpectedReward(0, parseInt(periodSelect.value))
                        .then(reward => {
                            expectedReward.textContent = reward.toFixed(2);
                        })
                        .catch(error => {
                            console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", error);
                            expectedReward.textContent = '0.00';
                        });
                }
            }

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –ø–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            document.dispatchEvent(new CustomEvent('staking-updated', {
                detail: {
                    stakingData: _currentStakingData,
                    hasActiveStaking: hasActiveStaking,
                    timestamp: new Date().toISOString()
                }
            }));

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ —î
            if (window.updateStakingButtons && typeof window.updateStakingButtons === 'function') {
                window.updateStakingButtons();
            }

            // –Ø–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ó—ó
            if (window.updateBalanceDisplay && typeof window.updateBalanceDisplay === 'function') {
                window.updateBalanceDisplay();
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
        } finally {
            _isUpdatingDisplay = false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {boolean} hasActiveStaking - –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
     */
    function updateButtonsState(hasActiveStaking) {
        try {
            // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const activeStakingButton = getElement(DOM.activeStakingButton);
            if (activeStakingButton) {
                if (hasActiveStaking) {
                    activeStakingButton.classList.remove('disabled');
                    activeStakingButton.disabled = false;
                } else {
                    activeStakingButton.classList.add('disabled');
                    activeStakingButton.disabled = true;
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelStakingButton = getElement(DOM.cancelStakingButton);
            if (cancelStakingButton) {
                if (hasActiveStaking) {
                    cancelStakingButton.style.opacity = '1';
                    cancelStakingButton.style.pointerEvents = 'auto';
                    cancelStakingButton.disabled = false;
                } else {
                    cancelStakingButton.style.opacity = '0.5';
                    cancelStakingButton.style.pointerEvents = 'none';
                    cancelStakingButton.disabled = true;
                }
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫:', e);
        }
    }

    /**
     * –ü–ª–∞–≤–Ω–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    function smoothReload() {
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–ª–∞–≤–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
        const container = document.querySelector('.container');
        if (container) {
            container.style.transition = 'opacity 0.5s ease';
            container.style.opacity = '0.5';
        }

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            window.location.reload();
        }, 500);
    }

    // ======== –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–ï–ô–ö–Ü–ù–ì–£ ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
     * @param {boolean} silent - –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     * @param {boolean} forceRefresh - –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ (—ñ–≥–Ω–æ—Ä—É—î –∫–µ—à)
     * @returns {Promise<Object>} –î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function fetchStakingData(silent = false, forceRefresh = false) {
        // –î–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
        if (window._fetchingStakingData && !forceRefresh) {
            console.log("–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —á–µ–∫–∞—î–º–æ...");

            // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
            try {
                await window._fetchStakingDataPromise;
                return _currentStakingData;
            } catch (error) {
                console.warn("–ü–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è - —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
            }
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ–º—ñ—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        window._fetchStakingDataPromise = new Promise(async (resolve, reject) => {
            try {
                window._fetchingStakingData = true;

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É –∑ –±—ñ–ª—å—à –≥–Ω—É—á–∫–æ—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é
                const now = Date.now();
                const cacheTime = parseInt(localStorage.getItem('stakingDataCacheTime') || '0');
                const cacheAge = now - cacheTime;

                // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∫–µ—à—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Å—Ç–∞–≤–∏–Ω
                // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥, –∫–µ—à –∂–∏–≤–µ –º–µ–Ω—à–µ
                let effectiveCacheLifetime = CONFIG.cacheLifetime;

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                try {
                    const cachedData = JSON.parse(localStorage.getItem('stakingData') || '{}');
                    if (cachedData && cachedData.hasActiveStaking) {
                        // –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —á–∞—Å—Ç—ñ—à–µ
                        effectiveCacheLifetime = CONFIG.cacheLifetime / 2;

                        // –Ø–∫—â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–∞–ª–æ –¥–Ω—ñ–≤, —â–µ —á–∞—Å—Ç—ñ—à–µ –æ–Ω–æ–≤–ª—é—î–º–æ
                        if (cachedData.remainingDays <= 1) {
                            effectiveCacheLifetime = CONFIG.cacheLifetime / 4;
                        }
                    }
                } catch (e) {
                    console.warn("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∫–µ—à—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à—É
                if (!forceRefresh && _currentStakingData && (cacheAge < effectiveCacheLifetime)) {
                    console.log(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–≤—ñ–∫: ${Math.round(cacheAge/1000)}—Å)`);
                    window._fetchingStakingData = false;
                    resolve(_currentStakingData);
                    return _currentStakingData;
                }

                // –Ü–Ω–¥–∏–∫–∞—Ü—ñ—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
                let quickLoadTimer = null;
                let slowLoadTimer = null;
                const stakingStatus = getElement(DOM.stakingStatus);

                if (!silent && stakingStatus) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç
                    const originalText = stakingStatus.textContent;

                    // –®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —á–µ—Ä–µ–∑ 100–º—Å
                    quickLoadTimer = setTimeout(() => {
                        stakingStatus.innerHTML = '<span class="loading-pulse">–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</span>';
                    }, 100);

                    // –ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 600–º—Å (–ø–æ–∫–∞–∑—É—î–º–æ —Å–ø—ñ–Ω–Ω–µ—Ä)
                    slowLoadTimer = setTimeout(() => {
                        if (!silent) {
                            if (typeof showLoading === 'function') {
                                showLoading();
                            } else if (typeof showLoader === 'function') {
                                showLoader();
                            }
                        }
                    }, 600);
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if (!window.WinixAPI || !window.WinixAPI.getStakingData) {
                    throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

                if (!isValidId(userId)) {
                    throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
                let retryCount = 0;
                const MAX_RETRIES = 2;
                const RETRY_DELAY = 1000;

                async function attemptFetch() {
                    try {
                        const timeoutPromise = new Promise((_, reject) => {
                            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É')), 10000);
                        });

                        const fetchPromise = window.WinixAPI.getStakingData();
                        return await Promise.race([fetchPromise, timeoutPromise]);
                    } catch (error) {
                        if (retryCount < MAX_RETRIES) {
                            console.log(`–°–ø—Ä–æ–±–∞ ${retryCount + 1}/${MAX_RETRIES} –Ω–µ –≤–¥–∞–ª–∞—Å—è, –ø–æ–≤—Ç–æ—Ä—é—î–º–æ —á–µ—Ä–µ–∑ ${RETRY_DELAY}–º—Å`);
                            retryCount++;
                            await new Promise(r => setTimeout(r, RETRY_DELAY));
                            return attemptFetch();
                        } else {
                            throw error;
                        }
                    }
                }

                // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
                const response = await attemptFetch();

                // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä–∏ —Ç–∞ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                clearTimeout(quickLoadTimer);
                clearTimeout(slowLoadTimer);

                if (!silent) {
                    if (typeof hideLoading === 'function') {
                        hideLoading();
                    } else if (typeof hideLoader === 'function') {
                        hideLoader();
                    }

                    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç, —è–∫—â–æ —Å—Ç–∞—Ç—É—Å –±—É–≤ –∑–º—ñ–Ω–µ–Ω–∏–π
                    if (stakingStatus && stakingStatus.querySelector('.loading-pulse')) {
                        stakingStatus.innerHTML = stakingStatus.textContent;
                    }
                }

                if (response.status === 'success' && response.data) {
                    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω
                    const previousData = _currentStakingData || {};
                    const newData = response.data;

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ
                    const hasSignificantChanges = (
                        !previousData.hasActiveStaking !== !newData.hasActiveStaking ||
                        previousData.stakingAmount !== newData.stakingAmount ||
                        previousData.remainingDays !== newData.remainingDays
                    );

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    _currentStakingData = newData;

                    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                    localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));
                    localStorage.setItem('stakingDataCacheTime', now.toString());

                    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é (—Ñ–æ—Ä—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ —î –∑–Ω–∞—á–Ω—ñ –∑–º—ñ–Ω–∏)
                    if (hasSignificantChanges) {
                        // –î–ª—è –∑–Ω–∞—á–Ω–∏—Ö –∑–º—ñ–Ω –æ–Ω–æ–≤–ª—é—î–º–æ UI –ø—Ä–∏–º—É—Å–æ–≤–æ
                        updateUI(true);
                    } else {
                        // –î–ª—è –Ω–µ–∑–Ω–∞—á–Ω–∏—Ö –∑–º—ñ–Ω –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é
                        optimizedUpdateUI();
                    }

                    // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
                    document.dispatchEvent(new CustomEvent('staking-data-updated', {
                        detail: {
                            data: _currentStakingData,
                            hasSignificantChanges,
                            timestamp: now
                        }
                    }));

                    window._fetchingStakingData = false;
                    resolve(_currentStakingData);
                    return _currentStakingData;
                } else {
                    throw new Error(response.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
                }
            } catch (error) {
                // –û—á–∏—â–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (!silent) {
                    if (typeof hideLoading === 'function') {
                        hideLoading();
                    } else if (typeof hideLoader === 'function') {
                        hideLoader();
                    }
                }

                console.warn('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –ª–∏—à–µ –¥–ª—è —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º —ñ –Ω–µ –≤ —Ç–∏—Ö–æ–º—É —Ä–µ–∂–∏–º—ñ
                if (!silent && error.message !== '–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É') {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º'—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –ª—è–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    showMessage('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. ' +
                                '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É.', true);
                }

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é "graceful degradation" - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                try {
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    if (stakingDataStr) {
                        console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage");
                        _currentStakingData = JSON.parse(stakingDataStr);

                        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –¥–∞–Ω—ñ —è–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ
                        _currentStakingData._fromCache = true;
                        _currentStakingData._cacheTimestamp = parseInt(localStorage.getItem('stakingDataCacheTime') || '0');

                        updateUI();
                        window._fetchingStakingData = false;
                        resolve(_currentStakingData);
                        return _currentStakingData;
                    }
                } catch (localError) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ localStorage:', localError);
                }

                // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –Ω—ñ –∑ API, –Ω—ñ –∑ localStorage, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ
                _currentStakingData = {
                    hasActiveStaking: false,
                    stakingAmount: 0,
                    period: 0,
                    rewardPercent: 0,
                    expectedReward: 0,
                    remainingDays: 0,
                    _error: error.message
                };

                updateUI();
                window._fetchingStakingData = false;
                reject(error);
                return _currentStakingData;
            }
        });

        try {
            return await window._fetchStakingDataPromise;
        } catch (error) {
            console.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            return _currentStakingData || {
                hasActiveStaking: false,
                stakingAmount: 0,
                period: 0,
                rewardPercent: 0,
                expectedReward: 0,
                remainingDays: 0,
                _error: error.message
            };
        } finally {
            window._fetchingStakingData = false;
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (7, 14, 28 –¥–Ω—ñ–≤)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function createStaking(amount, period) {
        if (_isProcessingRequest) {
            showMessage('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            amount = parseInt(amount);
            period = parseInt(period);

            if (isNaN(amount) || amount < CONFIG.minAmount) {
                throw new Error(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.minAmount} WINIX`);
            }

            if (!CONFIG.allowedPeriods.includes(period)) {
                throw new Error(`–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${CONFIG.allowedPeriods.join(', ')} –¥–Ω—ñ–≤`);
            }

            const balance = getBalance();
            if (amount > balance) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
            }

            const maxAllowedAmount = Math.floor(balance * CONFIG.maxBalancePercentage);
            if (amount > maxAllowedAmount) {
                throw new Error(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${maxAllowedAmount} WINIX (${Math.round(CONFIG.maxBalancePercentage * 100)}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!window.WinixAPI || !window.WinixAPI.createStaking) {
                throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

            if (!isValidId(userId)) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof showLoading === 'function') {
                showLoading();
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ API
            const response = await window.WinixAPI.createStaking(amount, period);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (response.data && response.data.staking) {
                _currentStakingData = response.data.staking;

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (response.data.balance !== undefined) {
                    localStorage.setItem('userTokens', response.data.balance.toString());
                    localStorage.setItem('winix_balance', response.data.balance.toString());

                    // –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
                    if (window.WinixCore && window.WinixCore.updateBalanceDisplay) {
                        window.WinixCore.updateBalanceDisplay();
                    } else if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.updateBalanceDisplay) {
                        window.WinixCore.UI.updateBalanceDisplay();
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateUI();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                showMessage('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');

                return {
                    success: true,
                    data: response.data,
                    message: '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
                };
            } else {
                throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            showMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function addToStaking(amount) {
        if (_isProcessingRequest) {
            showMessage('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                await fetchStakingData(true);

                if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                    throw new Error('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
                }
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—É–º–∏
            amount = parseInt(amount);

            if (isNaN(amount) || amount <= 0) {
                throw new Error('–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º');
            }

            const balance = getBalance();
            if (amount > balance) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!window.WinixAPI || !window.WinixAPI.addToStaking) {
                throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

            if (!isValidId(userId)) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof showLoading === 'function') {
                showLoading();
            }

            // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ API
            const response = await window.WinixAPI.addToStaking(amount, _currentStakingData.stakingId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (response.data && response.data.staking) {
                _currentStakingData = response.data.staking;

                // –û–Ω–æ–≤–ª—é—î–º–æ localStorage
                localStorage.setItem('stakingData', JSON.stringify(_currentStakingData));
                localStorage.setItem('winix_staking', JSON.stringify(_currentStakingData));

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –≤—ñ–Ω —î –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if (response.data.balance !== undefined) {
                    localStorage.setItem('userTokens', response.data.balance.toString());
                    localStorage.setItem('winix_balance', response.data.balance.toString());

                    // –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É, —è–∫—â–æ —î —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
                    if (window.WinixCore && window.WinixCore.updateBalanceDisplay) {
                        window.WinixCore.updateBalanceDisplay();
                    } else if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.updateBalanceDisplay) {
                        window.WinixCore.UI.updateBalanceDisplay();
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateUI();

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                showMessage(`–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`);

                return {
                    success: true,
                    data: response.data,
                    message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`
                };
            } else {
                throw new Error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            showMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function cancelStaking() {
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof showLoading === 'function') {
            showLoading();
        }

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId();
            if (!userId) {
                throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è ID —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingData = await window.WinixAPI.getStakingData();
            if (!stakingData || !stakingData.data || !stakingData.data.hasActiveStaking || !stakingData.data.stakingId) {
                throw new Error("–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            const stakingId = stakingData.data.stakingId;
            console.log(`–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ ID: ${stakingId}`);

            // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑)
            if (!window.showModernConfirm) {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å—É—á–∞—Å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π confirm
                if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")) {
                    if (typeof hideLoading === 'function') {
                        hideLoading();
                    }
                    return { success: false, message: "–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º" };
                }
            } else {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É—á–∞—Å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                return new Promise((resolve) => {
                    window.showModernConfirm(
                        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
                        async () => {
                            try {
                                // –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç –¥–æ API
                                const response = await fetch(`/api/user/${userId}/staking/${stakingId}/cancel`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        confirm: true,
                                        timestamp: Date.now()
                                    })
                                });

                                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                                if (typeof hideLoading === 'function') {
                                    hideLoading();
                                }

                                if (!response.ok) {
                                    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                                    let errorText = "";
                                    try {
                                        const errorData = await response.json();
                                        errorText = errorData.message || `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
                                    } catch {
                                        errorText = `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
                                    }

                                    console.error(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${errorText}`);
                                    window.showModernNotification(errorText, true);
                                    resolve({ success: false, message: errorText });
                                    return;
                                }

                                const data = await response.json();

                                if (data.status === 'success') {
                                    // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                                    localStorage.removeItem('stakingData');
                                    localStorage.removeItem('winix_staking');

                                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                                    if (data.data && data.data.newBalance !== undefined) {
                                        localStorage.setItem('userTokens', data.data.newBalance.toString());
                                        localStorage.setItem('winix_balance', data.data.newBalance.toString());

                                        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                                        if (typeof updateBalanceDisplay === 'function') {
                                            updateBalanceDisplay();
                                        }
                                    }

                                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                                    let message = "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ";
                                    if (data.data && data.data.returnedAmount && data.data.feeAmount) {
                                        message = `–°—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ: ${data.data.returnedAmount} WINIX. –ö–æ–º—ñ—Å—ñ—è: ${data.data.feeAmount} WINIX.`;
                                    }

                                    window.showModernNotification(message, false, () => {
                                        // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
                                        smoothReload();
                                    });

                                    resolve({ success: true, data: data.data, message });
                                } else {
                                    window.showModernNotification(data.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                                    resolve({ success: false, message: data.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É" });
                                }
                            } catch (error) {
                                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                                if (typeof hideLoading === 'function') {
                                    hideLoading();
                                }

                                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                                window.showModernNotification(error.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                                resolve({ success: false, message: error.message });
                            }
                        },
                        () => {
                            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                            if (typeof hideLoading === 'function') {
                                hideLoading();
                            }
                            resolve({ success: false, message: "–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º" });
                        }
                    );
                });
            }

            // –î–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–≤–∏—á–∞–π–Ω–∏–π confirm
            // –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç –¥–æ API
            const response = await fetch(`/api/user/${userId}/staking/${stakingId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    confirm: true,
                    timestamp: Date.now()
                })
            });

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            const data = await response.json();

            if (data.status === 'success') {
                // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                localStorage.removeItem('stakingData');
                localStorage.removeItem('winix_staking');

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (data.data && data.data.newBalance !== undefined) {
                    localStorage.setItem('userTokens', data.data.newBalance.toString());
                    localStorage.setItem('winix_balance', data.data.newBalance.toString());

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    if (typeof updateBalanceDisplay === 'function') {
                        updateBalanceDisplay();
                    }
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                let message = "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ";
                if (data.data && data.data.returnedAmount && data.data.feeAmount) {
                    message = `–°—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ: ${data.data.returnedAmount} WINIX. –ö–æ–º—ñ—Å—ñ—è: ${data.data.feeAmount} WINIX.`;
                }

                if (typeof window.showModernNotification === 'function') {
                    window.showModernNotification(message, false, () => {
                        // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
                        smoothReload();
                    });
                } else {
                    alert(message);
                    smoothReload();
                }

                return { success: true, data: data.data, message };
            } else {
                if (typeof window.showModernNotification === 'function') {
                    window.showModernNotification(data.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                } else {
                    alert(data.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }

                return { success: false, message: data.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É" };
            }
        } catch (error) {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

            if (typeof window.showModernNotification === 'function') {
                window.showModernNotification(error.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
            } else {
                alert(error.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            }

            return { success: false, message: error.message };
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º debouncing —Ç–∞ throttling
     */
    function initEventListeners() {
        try {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—É–º–∏ –∞–±–æ –ø–µ—Ä—ñ–æ–¥—É
            const amountInput = getElement(DOM.amountInput);
            const periodSelect = getElement(DOM.periodSelect);
            const expectedReward = getElement(DOM.expectedReward);

            if (amountInput && periodSelect && expectedReward) {
                // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
                let updateRewardDebounceTimer;
                let lastCalculationTime = 0;
                let lastAmountValue = '';
                let lastPeriodValue = '';
                let pendingCalculation = false;

                const updateReward = () => {
                    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                    const amount = amountInput.value || '0';
                    const period = periodSelect.value || '14';

                    // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è, –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ
                    if (amount === lastAmountValue && period === lastPeriodValue && !pendingCalculation) {
                        return;
                    }

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                    lastAmountValue = amount;
                    lastPeriodValue = period;

                    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
                    clearTimeout(updateRewardDebounceTimer);

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç—Ä–µ–±–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ throttling
                    const now = Date.now();
                    const elapsed = now - lastCalculationTime;

                    // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    if (!pendingCalculation) {
                        expectedReward.classList.add('calculating');
                        pendingCalculation = true;
                    }

                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É, —â–æ –º–∏–Ω—É–≤
                    const debounceDelay = elapsed < 1000 ? INPUT_DEBOUNCE_MS : 50;

                    updateRewardDebounceTimer = setTimeout(async () => {
                        try {
                            // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
                            lastCalculationTime = Date.now();

                            const numAmount = parseInt(amount) || 0;
                            const numPeriod = parseInt(period) || 14;

                            // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
                            const reward = await calculateExpectedReward(numAmount, numPeriod);

                            if (expectedReward) {
                                // –ü–ª–∞–≤–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
                                const oldValue = parseFloat(expectedReward.textContent) || 0;
                                const newValue = reward;

                                // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                                expectedReward.classList.remove('calculating');

                                // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è
                                expectedReward.classList.add('value-updated');

                                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–ª–∞–≤–Ω–æ—é –∞–Ω—ñ–º–∞—Ü—ñ—î—é
                                animateNumberChange(expectedReward, oldValue, newValue, 500);

                                // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
                                setTimeout(() => {
                                    expectedReward.classList.remove('value-updated');
                                }, 1500);
                            }

                            pendingCalculation = false;
                        } catch (e) {
                            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", e);
                            expectedReward.classList.remove('calculating');
                            pendingCalculation = false;
                        }
                    }, debounceDelay);
                };

                /**
                 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–º—ñ–Ω–∏ —á–∏—Å–ª–∞
                 * @param {HTMLElement} element - –ï–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                 * @param {number} startValue - –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                 * @param {number} endValue - –ö—ñ–Ω—Ü–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                 * @param {number} duration - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞–Ω—ñ–º–∞—Ü—ñ—ó —É –º—Å
                 */
                function animateNumberChange(element, startValue, endValue, duration) {
                    // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç
                    if (startValue === endValue) {
                        element.textContent = endValue.toFixed(2);
                        return;
                    }

                    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å
                    const startTime = performance.now();
                    // –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
                    const diff = endValue - startValue;

                    // –§—É–Ω–∫—Ü—ñ—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
                    function animate(currentTime) {
                        // –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –ø—Ä–æ–π—à–ª–æ
                        const elapsedTime = currentTime - startTime;
                        // –í—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
                        const progress = Math.min(elapsedTime / duration, 1);
                        // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ easing-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
                        const easedProgress = easeOutCubic(progress);
                        // –û–±—á–∏—Å–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                        const currentValue = startValue + diff * easedProgress;

                        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç
                        element.textContent = currentValue.toFixed(2);

                        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é, —è–∫—â–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                        if (progress < 1) {
                            requestAnimationFrame(animate);
                        }
                    }

                    // Easing —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó
                    function easeOutCubic(x) {
                        return 1 - Math.pow(1 - x, 3);
                    }

                    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
                    requestAnimationFrame(animate);
                }

                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newAmountInput = amountInput.cloneNode(true);
                if (amountInput.parentNode) {
                    amountInput.parentNode.replaceChild(newAmountInput, amountInput);
                }

                const newPeriodSelect = periodSelect.cloneNode(true);
                if (periodSelect.parentNode) {
                    periodSelect.parentNode.replaceChild(newPeriodSelect, periodSelect);
                }

                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                newAmountInput.addEventListener('input', updateReward);
                newPeriodSelect.addEventListener('change', updateReward);

                // –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                updateReward();
            }

            // –ö–Ω–æ–ø–∫–∞ Max
            const maxButton = getElement(DOM.maxButton);
            if (maxButton && amountInput) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newMaxButton = maxButton.cloneNode(true);
                if (maxButton.parentNode) {
                    maxButton.parentNode.replaceChild(newMaxButton, maxButton);
                }

                newMaxButton.addEventListener('click', function() {
                    const balance = getBalance();
                    const maxAllowed = Math.floor(balance * CONFIG.maxBalancePercentage);
                    const newAmountInput = getElement(DOM.amountInput);
                    if (newAmountInput) {
                        newAmountInput.value = maxAllowed;

                        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é input –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                        newAmountInput.dispatchEvent(new Event('input'));

                        // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
                        newMaxButton.classList.add('active');
                        setTimeout(() => {
                            newMaxButton.classList.remove('active');
                        }, 300);
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
            const stakeButton = getElement(DOM.stakeButton);
            if (stakeButton && amountInput && periodSelect) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newStakeButton = stakeButton.cloneNode(true);
                if (stakeButton.parentNode) {
                    stakeButton.parentNode.replaceChild(newStakeButton, stakeButton);
                }

                newStakeButton.addEventListener('click', async () => {
                    const newAmountInput = getElement(DOM.amountInput);
                    const newPeriodSelect = getElement(DOM.periodSelect);

                    if (newAmountInput && newPeriodSelect) {
                        const amount = parseInt(newAmountInput.value) || 0;
                        const period = parseInt(newPeriodSelect.value) || 14;

                        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                        await createStaking(amount, period);
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const activeStakingButton = getElement(DOM.activeStakingButton);
            if (activeStakingButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newActiveStakingButton = activeStakingButton.cloneNode(true);
                if (activeStakingButton.parentNode) {
                    activeStakingButton.parentNode.replaceChild(newActiveStakingButton, activeStakingButton);
                }

                newActiveStakingButton.addEventListener('click', showStakingModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelStakingButton = getElement(DOM.cancelStakingButton);
            if (cancelStakingButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newCancelStakingButton = cancelStakingButton.cloneNode(true);
                if (cancelStakingButton.parentNode) {
                    cancelStakingButton.parentNode.replaceChild(newCancelStakingButton, cancelStakingButton);
                }

                newCancelStakingButton.addEventListener('click', cancelStaking);
            }

            // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ

            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            const modalCloseButton = getElement(DOM.modalClose);
            if (modalCloseButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newModalCloseButton = modalCloseButton.cloneNode(true);
                if (modalCloseButton.parentNode) {
                    modalCloseButton.parentNode.replaceChild(newModalCloseButton, modalCloseButton);
                }

                newModalCloseButton.addEventListener('click', hideStakingModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalAddButton = getElement(DOM.modalAddButton);
            if (modalAddButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newModalAddButton = modalAddButton.cloneNode(true);
                if (modalAddButton.parentNode) {
                    modalAddButton.parentNode.replaceChild(newModalAddButton, modalAddButton);
                }

                newModalAddButton.addEventListener('click', handleAddToStakeFromModal);
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalCancelButton = getElement(DOM.modalCancelButton);
            if (modalCancelButton) {
                // –ö–ª–æ–Ω—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
                const newModalCancelButton = modalCancelButton.cloneNode(true);
                if (modalCancelButton.parentNode) {
                    modalCancelButton.parentNode.replaceChild(newModalCancelButton, modalCancelButton);
                }

                newModalCancelButton.addEventListener('click', () => {
                    hideStakingModal();
                    cancelStaking();
                });
            }

            // –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø–æ–¥—ñ—ó
            document.addEventListener('winix-initialized', async () => {
                await fetchStakingData(true);
            });

            // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
            const modal = getElement(DOM.modal);
            if (modal) {
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
                const modalClickHandler = (e) => {
                    if (e.target === modal) {
                        hideStakingModal();
                    }
                };

                // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
                modal.removeEventListener('click', modalClickHandler);
                modal.addEventListener('click', modalClickHandler);
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑ –∑–∞–¥–∞–Ω–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º —ñ –ø–æ–¥—ñ—è
            document.addEventListener('staking-data-refresh', async (event) => {
                const forceRefresh = event.detail && event.detail.force;
                await fetchStakingData(true, forceRefresh);
            });

            // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            setupScrollOptimization();
            setupSmoothButtonAnimations();
            setupApiRateLimiting();

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π:', error);
        }
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (7, 14, 28 –¥–Ω—ñ–≤)
     * @returns {Promise<number>} –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    async function calculateExpectedReward(amount, period) {
        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            amount = parseInt(amount) || 0;
            period = parseInt(period) || 14;

            if (amount <= 0) {
                return 0;
            }

            if (!CONFIG.allowedPeriods.includes(period)) {
                return 0;
            }

            // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ API
            if (window.WinixAPI && window.WinixAPI.calculateExpectedReward) {
                try {
                    const response = await window.WinixAPI.calculateExpectedReward(amount, period);

                    if (response.status === 'success' && response.data && response.data.reward !== undefined) {
                        return parseFloat(response.data.reward);
                    }
                } catch (apiError) {
                    console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑ API:', apiError);
                }
            }

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ API, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
            const rewardPercent = CONFIG.rewardRates[period] || 9;
            const reward = (amount * rewardPercent) / 100;

            return parseFloat(reward.toFixed(2));
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', error);
            return 0;
        }
    }

    /**
     * –£–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é throttling —Ç–∞ batch-requests
     */
    function setupApiRateLimiting() {
        // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        setInterval(() => {
            _apiRequestsInLastMinute = 0;
        }, API_REQUESTS_RESET_INTERVAL);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –±–∞—Ç—á–∏–Ω–≥—É
        const pendingRequests = {};
        let batchTimeout = null;

        // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é fetch
        const originalFetch = window.fetch;

        // –ó–∞–º—ñ–Ω—è—î–º–æ fetch –Ω–∞ –Ω–∞—à—É –≤–µ—Ä—Å—ñ—é –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —á–∞—Å—Ç–æ—Ç–∏ —Ç–∞ –±–∞—Ç—á–∏–Ω–≥–æ–º
        window.fetch = function(url, options) {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ API –∑–∞–ø–∏—Ç
            if (url.includes('/api/')) {
                _apiRequestsInLastMinute++;

                // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
                const requestKey = `${url}_${JSON.stringify(options?.body || '')}`;

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–∞–∫–∏–π –∑–∞–ø–∏—Ç –≤–∂–µ –≤ —á–µ—Ä–∑—ñ
                if (pendingRequests[requestKey]) {
                    console.log(`–ó–∞–ø–∏—Ç –¥—É–±–ª—å–æ–≤–∞–Ω–∏–π, –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–º—ñ—Å: ${url}`);
                    return pendingRequests[requestKey];
                }

                // Throttling –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤ - –æ–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –≤ –æ–¥–∏–Ω–∏—Ü—é —á–∞—Å—É
                if (_apiRequestsInLastMinute > 20) {
                    const delayTime = API_THROTTLE_MS * (_apiRequestsInLastMinute - 20);
                    console.log(`–ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ throttling: ${delayTime}ms –¥–ª—è ${url}`);

                    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º—ñ—Å, —è–∫–∏–π —Ä–æ–∑–≤'—è–∂–µ—Ç—å—Å—è —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
                    const promise = new Promise((resolve) => {
                        setTimeout(() => {
                            delete pendingRequests[requestKey];
                            resolve(originalFetch(url, options));
                        }, delayTime);
                    });

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é
                    pendingRequests[requestKey] = promise;
                    return promise;
                }

                // –î–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –º–æ–∂–µ–º–æ –æ–±'—î–¥–Ω–∞—Ç–∏ —ó—Ö (—è–∫—â–æ –≤–æ–Ω–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ —ñ –π–¥—É—Ç—å –ø—ñ–¥—Ä—è–¥)
                if (url.includes('/get') || url.includes('/staking/history')) {
                    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                    const promise = new Promise((resolve) => {
                        clearTimeout(batchTimeout);
                        batchTimeout = setTimeout(() => {
                            delete pendingRequests[requestKey];
                            resolve(originalFetch(url, options));
                        }, 50); // –ú–∞–ª–µ–Ω—å–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
                    });

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–º—ñ—Å
                    pendingRequests[requestKey] = promise;
                    return promise;
                }
            }

            // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π fetch
            return originalFetch(url, options);
        };

        // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —á–µ—Ä–≥–∏ –∑–∞–ø–∏—Ç—ñ–≤
        window.clearPendingApiRequests = function() {
            Object.keys(pendingRequests).forEach(key => delete pendingRequests[key]);
            console.log('–ß–µ—Ä–≥–∞ API –∑–∞–ø–∏—Ç—ñ–≤ –æ—á–∏—â–µ–Ω–∞');
        };
    }

    /**
     * –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    function setupScrollOptimization() {
        let scrollTimer = null;
        const scrollThrottleMs = 200;

        window.addEventListener('scroll', () => {
            if (scrollTimer === null) {
                scrollTimer = setTimeout(() => {
                    scrollTimer = null;
                    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ–¥, —è–∫–∏–π –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –ø—ñ—Å–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                }, scrollThrottleMs);
            }
        }, { passive: true });
    }

    /**
     * –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫
     */
    function setupSmoothButtonAnimations() {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
        const buttons = document.querySelectorAll('button');

        buttons.forEach(button => {
            // –î–æ–¥–∞—î–º–æ –ø–ª–∞–≤–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏
            button.style.transition = 'transform 0.2s ease, opacity 0.2s ease, background-color 0.3s ease';

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
            button.addEventListener('mousedown', () => {
                button.style.transform = 'scale(0.98)';
            });

            button.addEventListener('mouseup', () => {
                button.style.transform = 'scale(1)';
            });

            button.addEventListener('mouseleave', () => {
                button.style.transform = 'scale(1)';
            });
        });
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–æ–∫
     * @param {boolean} force - –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function repairStaking(force = false) {
        if (_isProcessingRequest) {
            showMessage('–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç', true);
            return { success: false, message: '–í–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç' };
        }

        _isProcessingRequest = true;

        try {
            // –Ø–∫—â–æ –ø—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            if (force && window.showModernConfirm) {
                return new Promise((resolve) => {
                    window.showModernConfirm(
                        '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É? –¶–µ –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥.',
                        async () => {
                            try {
                                const result = await performRepair(force);
                                resolve(result);
                            } catch (error) {
                                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                                showMessage(error.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                                resolve({ success: false, message: error.message });
                            }
                        },
                        () => {
                            resolve({ success: false, message: "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º" });
                        }
                    );
                });
            } else if (force) {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å—É—á–∞—Å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π confirm
                if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É? –¶–µ –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥.')) {
                    _isProcessingRequest = false;
                    return { success: false, message: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º' };
                }
            }

            return await performRepair(force);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            showMessage(error.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);

            return {
                success: false,
                message: error.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
            };
        } finally {
            _isProcessingRequest = false;
        }
    }

    /**
     * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {boolean} force - –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function performRepair(force) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (!window.WinixAPI || !window.WinixAPI.repairStaking) {
                throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;

            if (!isValidId(userId)) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof showLoading === 'function') {
                showLoading();
            }

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            const response = await window.WinixAPI.repairStaking(force);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            if (response.status !== 'success') {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            await fetchStakingData(true);

            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            showMessage(response.message || '–°—Ç–∞–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');

            return {
                success: true,
                data: response.data,
                message: response.message || '–°—Ç–∞–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ'
            };
        } catch (error) {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (typeof hideLoading === 'function') {
                hideLoading();
            }

            throw error;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ú–û–î–ê–õ–¨–ù–ò–ú –í–Ü–ö–ù–û–ú ========

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –¥–µ—Ç–∞–ª—è–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function showStakingModal() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!_currentStakingData || !_currentStakingData.hasActiveStaking) {
                showMessage('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
                return;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
            const modalStakingAmount = getElement(DOM.modalStakingAmount);
            const modalStakingPeriod = getElement(DOM.modalStakingPeriod);
            const modalRewardPercent = getElement(DOM.modalRewardPercent);
            const modalExpectedReward = getElement(DOM.modalExpectedReward);
            const modalRemainingDays = getElement(DOM.modalRemainingDays);

            if (modalStakingAmount) modalStakingAmount.textContent = `${_currentStakingData.stakingAmount || 0} $WINIX`;
            if (modalStakingPeriod) modalStakingPeriod.textContent = `${_currentStakingData.period || 0} –¥–Ω—ñ–≤`;
            if (modalRewardPercent) modalRewardPercent.textContent = `${_currentStakingData.rewardPercent || 0}%`;
            if (modalExpectedReward) modalExpectedReward.textContent = `${_currentStakingData.expectedReward || 0} $WINIX`;
            if (modalRemainingDays) modalRemainingDays.textContent = _currentStakingData.remainingDays || 0;

            // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            const modal = getElement(DOM.modal);
            if (modal) modal.classList.add('active');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
            showMessage('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
     */
    function hideStakingModal() {
        try {
            const modal = getElement(DOM.modal);
            if (modal) modal.classList.remove('active');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
     */
    function handleAddToStakeFromModal() {
        try {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            hideStakingModal();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—É—á–∞—Å–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è
            if (window.showModernPrompt) {
                window.showModernPrompt(
                    '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:',
                    (inputValue) => {
                        const amount = parseInt(inputValue);
                        if (isNaN(amount) || amount <= 0) {
                            showMessage('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)', true);
                            return;
                        }

                        // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        addToStaking(amount)
                            .then(result => {
                                if (result.success) {
                                    // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                                    setTimeout(smoothReload, 1500);
                                }
                            });
                    },
                    '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)',
                    ''
                );
                return;
            }

            // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å—É—á–∞—Å–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ showInputModal
            if (window.showInputModal) {
                window.showInputModal('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', function(amount) {
                    const numAmount = parseInt(amount);
                    if (isNaN(numAmount) || numAmount <= 0) {
                        showMessage('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)', true);
                        return;
                    }

                    // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    addToStaking(numAmount)
                        .then(result => {
                            if (result.success) {
                                // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                                setTimeout(smoothReload, 1500);
                            }
                        });
                });
                return;
            }

            // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –≤–≤–µ–¥–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π prompt
            const amount = prompt('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:');
            if (amount === null || amount.trim() === '') {
                return; // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ –≤–≤–µ–¥–µ–Ω–Ω—è
            }

            const numAmount = parseInt(amount);
            if (isNaN(numAmount) || numAmount <= 0) {
                showMessage('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ)', true);
                return;
            }

            // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            addToStaking(numAmount)
                .then(result => {
                    if (result.success) {
                        // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                        setTimeout(smoothReload, 1500);
                    }
                });
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:', error);
            showMessage('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', true);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    function startAutoRefresh() {
        // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —î
        if (_refreshTimer) {
            clearInterval(_refreshTimer);
        }

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
        _refreshTimer = setInterval(async () => {
            try {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –±–µ–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                await fetchStakingData(true);
            } catch (error) {
                console.warn('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
            }
        }, CONFIG.refreshInterval);
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
     */
    function stopAutoRefresh() {
        if (_refreshTimer) {
            clearInterval(_refreshTimer);
            _refreshTimer = null;
        }
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    async function init() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            await fetchStakingData();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            initEventListeners();

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            startAutoRefresh();

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ —É—Å–ø—ñ—à–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            window.WinixStakingSystemInitialized = true;

            console.log("‚úÖ –ú–æ–¥—É–ª—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
        }
    }

    // ======== –ü–£–ë–õ–Ü–ß–ù–ò–ô API ========

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    window.WinixStakingSystem = {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        getStakingData: () => _currentStakingData,
        hasActiveStaking: () => _currentStakingData && _currentStakingData.hasActiveStaking,
        createStaking,
        addToStaking,
        cancelStaking,
        calculateExpectedReward,
        repairStaking,

        // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
        updateUI,
        optimizedUpdateUI,
        updateButtonsState,
        showStakingModal,
        hideStakingModal,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config: CONFIG,

        // –ü–æ–¥—ñ—ó –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É
        refresh: () => fetchStakingData(true, true),
        startAutoRefresh,
        stopAutoRefresh,

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –∫–Ω–æ–ø–æ–∫ (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏)
        handleDetailsButton: showStakingModal,
        handleCancelStakingButton: cancelStaking,
        handleAddToStakeButton: handleAddToStakeFromModal,

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏)
        updateStakingDisplay: updateUI,

        // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ UI
        smoothReload
    };

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥—É–ª—å –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    async function autoRepairStaking() {
        try {
            console.log("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API
            if (!window.WinixAPI || !window.WinixAPI.repairStaking) {
                console.warn("‚ö†Ô∏è API –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ");
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = window.WinixAPI.getUserId ? window.WinixAPI.getUserId() : null;
            if (!userId) {
                console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                return;
            }

            console.log(`üîç –ó–∞–ø—É—Å–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}...`);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–µ–≥–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            const result = await window.WinixAPI.repairStaking(false);
            console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:", result);

            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            if (window.WinixStakingSystem && window.WinixStakingSystem.refresh) {
                console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É...");
                await window.WinixStakingSystem.refresh();
            }

            // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ —î
            if (window.WinixAPI && window.WinixAPI.getStakingHistory) {
                try {
                    const historyResult = await window.WinixAPI.getStakingHistory();
                    console.log("üìö –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞:",
                                historyResult.status === 'success' ? "—É—Å–ø—ñ—à–Ω–æ" : "–∑ –ø–æ–º–∏–ª–∫–∞–º–∏");
                } catch (e) {
                    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                }
            }
        } catch (e) {
            console.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
        }
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    document.addEventListener('DOMContentLoaded', function() {
        console.log("üìù –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        setTimeout(autoRepairStaking, 2000);
    });

    // –ï–∫—Å–ø–æ—Ä—Ç –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    window.winixStakingFixes = {
        autoRepairStaking,
        showModernConfirm: window.showModernConfirm || function(){},
        showModernNotification: window.showModernNotification || function(){}
    };

    console.log("‚úÖ –ú–æ–¥—É–ª—å —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
})();