/**
 * fix-ui.js - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI WINIX
 *
 * –¶–µ–π —Ñ–∞–π–ª –≤–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º–∏ TypeError –∑ 'originalUpdateDisplay.apply'
 * —Ç–∞ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
 */

(function() {
    console.log("üîß –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –¥–ª—è UI WINIX...");

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ "undefined is not an object (evaluating 'originalUpdateDisplay.apply')"
    window.safeUpdateDisplay = function(element, content) {
        try {
            if (element) {
                if (typeof content === 'undefined' || content === null) {
                    content = '';
                }
                element.textContent = content;
            }
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", e);
        }
    };

    // –ó–∞–≥–∞–ª—å–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    function patchUIFunction(obj, methodName) {
        if (!obj || !obj[methodName] || typeof obj[methodName] !== 'function') {
            return false;
        }

        const originalMethod = obj[methodName];

        obj[methodName] = function() {
            try {
                return originalMethod.apply(this, arguments);
            } catch (error) {
                console.warn(`–ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É –≤ ${methodName}:`, error);

                // –†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                try {
                    // –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
                    if (window.WinixCore && window.WinixCore.UI) {
                        window.WinixCore.UI.updateBalanceDisplay();
                    }

                    // –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    updateStakingDataFallback();
                } catch (fallbackError) {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ UI:", fallbackError);
                }

                return null;
            }
        };

        return true;
    }

    // –†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    function updateStakingDataFallback() {
        try {
            // –ï–ª–µ–º–µ–Ω—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const expectedRewardElement = document.getElementById('expected-reward');
            if (expectedRewardElement) {
                // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ –ø–µ—Ä—ñ–æ–¥—É
                const amountInput = document.getElementById('staking-amount');
                const periodSelect = document.getElementById('staking-period');

                if (amountInput && periodSelect) {
                    const amount = parseFloat(amountInput.value) || 0;
                    const period = parseInt(periodSelect.value) || 14;

                    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
                    const rates = { 7: 4, 14: 9, 28: 15 };
                    const percent = rates[period] || 9;
                    const reward = (amount * percent) / 100;

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    expectedRewardElement.textContent = reward.toFixed(2);
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingStatusElement = document.getElementById('staking-status');
            if (stakingStatusElement) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                let stakingData;
                try {
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    stakingData = JSON.parse(stakingDataStr);
                } catch (e) {
                    stakingData = null;
                }

                if (stakingData && stakingData.hasActiveStaking) {
                    stakingStatusElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingData.stakingAmount || 0} $WINIX`;
                } else {
                    stakingStatusElement.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }
            }

            // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
            setupButtonsFallback();
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
        }
    }

    // –†–µ–∑–µ—Ä–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    function setupButtonsFallback() {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        let hasStaking = false;
        try {
            const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
            const stakingData = JSON.parse(stakingDataStr);
            hasStaking = stakingData && stakingData.hasActiveStaking === true;
        } catch (e) {
            hasStaking = false;
        }

        // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
        const activeStakingButton = document.getElementById('active-staking-button');
        if (activeStakingButton) {
            if (hasStaking) {
                activeStakingButton.classList.remove('disabled');
                activeStakingButton.disabled = false;
            } else {
                activeStakingButton.classList.add('disabled');
                activeStakingButton.disabled = true;
            }
        }

        // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
        const cancelStakingButton = document.getElementById('cancel-staking-button');
        if (cancelStakingButton) {
            if (hasStaking) {
                cancelStakingButton.style.opacity = '1';
                cancelStakingButton.style.pointerEvents = 'auto';
                cancelStakingButton.disabled = false;
            } else {
                cancelStakingButton.style.opacity = '0.5';
                cancelStakingButton.style.pointerEvents = 'none';
                cancelStakingButton.disabled = true;
            }
        }
    }

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    function patchStakingAPI() {
        if (!window.WinixAPI) return;

        // –§—ñ–∫—Å–∏–º–æ –∑–∞–ø–∏—Ç –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        const paths = [
            'calculateExpectedReward',
            'getStakingData',
            'addToStaking',
            'cancelStaking'
        ];

        paths.forEach(path => {
            if (window.WinixAPI[path] && typeof window.WinixAPI[path] === 'function') {
                const original = window.WinixAPI[path];

                window.WinixAPI[path] = function() {
                    return new Promise((resolve, reject) => {
                        original.apply(this, arguments)
                            .then(resolve)
                            .catch(error => {
                                console.warn(`–ü–æ–º–∏–ª–∫–∞ API ${path}:`, error);

                                // –î–ª—è calculateExpectedReward —Ä–æ–±–∏–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
                                if (path === 'calculateExpectedReward') {
                                    const args = arguments;
                                    const amount = args[0] || 0;
                                    const period = args[1] || 14;

                                    // –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                                    const rates = { 7: 4, 14: 9, 28: 15 };
                                    const percent = rates[period] || 9;
                                    const reward = (amount * percent) / 100;

                                    resolve({
                                        status: 'success',
                                        data: {
                                            amount: amount,
                                            period: period,
                                            reward: parseFloat(reward.toFixed(2)),
                                            source: 'local_fallback'
                                        }
                                    });
                                } else {
                                    reject(error);
                                }
                            });
                    });
                };
            }
        });
    }

    // –§—ñ–∫—Å–∏–º–æ –ø—Ä–æ–±–ª–µ–º–∏ MutationObserver
    function fixMutationObserver() {
        const originalObserve = MutationObserver.prototype.observe;

        if (originalObserve) {
            MutationObserver.prototype.observe = function(target, options) {
                if (!(target instanceof Node)) {
                    console.warn('–ü–æ–º–∏–ª–∫–∞: target –¥–ª—è MutationObserver –Ω–µ —î Node. –Ü–≥–Ω–æ—Ä—É—î–º–æ.');
                    return;
                }

                return originalObserve.call(this, target, options);
            };
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –≤—Å—ñ—Ö UI —Ñ—É–Ω–∫—Ü—ñ–π
    function patchAllUIFunctions() {
        // WinixCore UI
        if (window.WinixCore && window.WinixCore.UI) {
            patchUIFunction(window.WinixCore.UI, 'updateBalanceDisplay');
            patchUIFunction(window.WinixCore.UI, 'updateTransactionsList');
            patchUIFunction(window.WinixCore.UI, 'updateStakingDisplay');
            patchUIFunction(window.WinixCore.UI, 'showNotification');
        }

        // WinixStakingSystem
        if (window.WinixStakingSystem) {
            patchUIFunction(window.WinixStakingSystem, 'renderStakingDetails');
            patchUIFunction(window.WinixStakingSystem, 'updateButtonsState');
        }

        // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ StakingSystem
        if (window.StakingSystem) {
            patchUIFunction(window.StakingSystem, 'renderStakingDetails');
            patchUIFunction(window.StakingSystem, 'updateButtonsState');
        }
    }

    // –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    fixMutationObserver();
    patchStakingAPI();

    // –ß–µ–∫–∞—î–º–æ –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥—É UI —Ñ—É–Ω–∫—Ü—ñ–π
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', patchAllUIFunctions);
    } else {
        patchAllUIFunctions();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è WinixStakingSystem –∑ StakingSystem
    function migrateStakingSystem() {
        if (window.StakingSystem && !window.WinixStakingSystem) {
            console.log("üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è StakingSystem -> WinixStakingSystem");
            window.WinixStakingSystem = Object.assign({}, window.StakingSystem);
        }
    }

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –Ω–µ–≥–∞–π–Ω–æ —ñ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    migrateStakingSystem();
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', migrateStakingSystem);
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á—ñ –ø–æ–º–∏–ª–æ–∫
    window.addEventListener('error', function(e) {
        if (e.error && e.error.message && (
            e.error.message.includes('originalUpdateDisplay') ||
            e.error.message.includes('undefined is not an object')
        )) {
            console.warn('–ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É UI:', e.error);
            e.preventDefault();
            e.stopPropagation();

            // –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ UI –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            try {
                updateStakingDataFallback();
            } catch (e) {
                // –Ü–≥–Ω–æ—Ä—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏
            }

            return false;
        }
    });

    console.log("‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è UI WINIX —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ");
})();