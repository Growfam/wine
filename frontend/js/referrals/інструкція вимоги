# Промт для розробки реферальної системи Winix

## 1. Загальні вимоги

Необхідно розробити модульну реферальну систему для проекту Winix, яка відповідатиме наступним критеріям:

- **Функціонально завершена**: система повинна охоплювати весь цикл реферальної програми
- **Автономна**: модуль має працювати незалежно від інших частин додатку
- **Масштабована**: легко розширюватись новими функціями
- **Швидкодійна**: миттєва генерація посилань, швидкі розрахунки винагород
- **Зрозуміла для розробників**: чітка структура і розподіл відповідальності
- **Легка для підтримки**: файли невеликого розміру з однією відповідальністю

## 2. Функціональність системи

### 2.1. Реферальні посилання
- Генерація унікальних посилань формату `Winix/referral/{ID}` для кожного користувача
- Валідація і відстеження переходів за посиланнями

### 2.2. Рівнева структура рефералів
- Дворівнева система: перший рівень (безпосередньо запрошені) і другий рівень (запрошені вашими рефералами)
- Чіткий облік рефералів по рівнях та відображення цієї інформації користувачу

### 2.3. Система винагород
- **Відсоткові винагороди**: 10% від прибутку рефералів першого рівня, 5% від прибутку рефералів другого рівня
- **Прямі бонуси**: 50 winix за кожного нового реферала незалежно від його активності
- **Бонуси за виконання завдань**: 12000 winix за досягнення 100 рефералів
- **Бейджі за досягнення**:
  - 25 рефералів — бронзова медаль (2500 winix)
  - 50 рефералів — срібна медаль (5000 winix)
  - 100 рефералів — золота медаль (10000 winix)
  - 500 рефералів — платинова медаль (20000 winix)

### 2.4. Відстеження активності
- Визначення статусу "активний реферал" (мінімум 3 участі в розіграшах АБО запрошений 1 реферал)
- Статистика участі рефералів у розіграшах
- Рейтинг рефералів за заробітком

### 2.5. Аналітика
- Загальний заробіток від реферальної програми
- Деталізація заробітку від кожного реферала
- Кількість активних/неактивних рефералів

## 3. Технічна архітектура

Система має строгу модульну структуру з п'ятьма ключовими шарами:

```
js/referral/
├── index.js                         # Головна точка входу
├── constants/                       # Незмінні значення системи
├── utils/                           # Допоміжні функції
├── api/                             # Взаємодія з бекендом
├── services/                        # Бізнес-логіка
└── store/                           # Управління станом
```

### Принципи організації коду:
1. **Модульність**: кожен модуль виконує одну конкретну функцію
2. **Розмір файлів**: 200-500 рядків для оптимальної читабельності
3. **Єдина відповідальність**: один файл = одна функція = одна відповідальність
4. **Ізольованість**: мінімальна зв'язність між компонентами
5. **Прогнозованість**: чіткі та передбачувані інтерфейси для кожного модуля

## 4. Вимоги до продуктивності

- **Швидкість генерації посилань**: не більше 100мс
- **Час завантаження статистики**: не більше 300мс
- **Розрахунок винагород**: не більше 200мс
- **Миттєве відображення змін**: при додаванні нового реферала
- **Оптимізація запитів**: мінімізація звернень до бекенду
- **Кешування**: зберігання результатів частих запитів для зниження навантаження

## 5. Якість коду

- **Чистий код**: зрозумілі назви змінних і функцій
- **Документація**: JSDoc для всіх функцій
- **Обробка помилок**: перехоплення і логування всіх виключень
- **Тестованість**: простота написання юніт-тестів
- **Консистентний стиль**: дотримання єдиного стилю коду
- **DRY принцип**: уникнення дублювання коду

## 6. Візуальні аспекти (інтерфейс для розробника)

Хоча цей модуль є бекенд-частиною, він повинен надавати зручний інтерфейс розробнику для інтеграції з фронтендом:

- **Зрозумілі назви експортованих функцій**: наприклад, `generateReferralLink()`, а не просто `generate()`
- **Типізовані поля у сховищі**: чітка структура даних
- **Стандартизовані повідомлення про помилки**: з детальним описом причини
- **Послідовна обробка станів завантаження**: isLoading, error, data

## 7. Приклад одного модуля

Для ілюстрації принципів, ось приклад того, як має виглядати модуль генерації реферального посилання:

```javascript
// js/referral/services/generateReferralLink.js

/**
 * Генерує унікальне реферальне посилання для користувача
 * @param {string|number} userId - ID користувача
 * @returns {Promise<string>} Унікальне реферальне посилання
 * @throws {Error} Помилка при генерації посилання
 */
export const generateReferralLink = async (userId) => {
  if (!userId) {
    throw new Error('User ID is required');
  }
  
  try {
    // Отримуємо дані від API
    const referralId = await fetchReferralLink(userId);
    
    // Форматуємо URL
    return formatReferralUrl(referralId);
  } catch (error) {
    console.error('Error generating referral link:', error);
    throw new Error('Failed to generate referral link');
  }
};

export default generateReferralLink;
```

## 8. Критерії готовності

Функція або модуль вважається готовим, якщо:

1. Він виконує одну конкретну задачу
2. Має чистий, зрозумілий код
3. Містить повну документацію
4. Обробляє всі можливі помилки
5. Проходить всі тести
6. Працює швидко та ефективно
7. Легко інтегрується з іншими частинами системи

## 9. Процес розробки

1. Розробка йде послідовно, по одній функції за раз
2. Кожна функція доводиться до ідеального стану перед переходом до наступної
3. Розробка починається з базових модулів (константи, утиліти) і рухається до більш складних (сервіси, сховище)
4. Тестування відбувається одразу після розробки модуля, а не в кінці проекту

Цей підхід забезпечить створення якісної, модульної, легкої для підтримки та розширення реферальної системи, що відповідає всім функціональним вимогам проекту Winix.