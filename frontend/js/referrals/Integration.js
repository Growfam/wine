// Integration.js - –í–µ—Ä—Å—ñ—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –∑ DOM
 */
window.ReferralIntegration = (function() {
  'use strict';

  console.log('üì¶ [INTEGRATION] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è ReferralIntegration...');

  function ReferralIntegration() {
    console.log('üèóÔ∏è [INTEGRATION] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É ReferralIntegration');
    this.userId = null;
    this.store = null;
    this.isInitialized = false;
    console.log('‚úÖ [INTEGRATION] –ï–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ:', this);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
   */
  ReferralIntegration.prototype.init = function() {
    const self = this;
    console.log('üöÄ [INTEGRATION] ===== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á =====');
    console.log('üïê [INTEGRATION] –ß–∞—Å –ø–æ—á–∞—Ç–∫—É:', new Date().toISOString());

    return new Promise(function(resolve, reject) {
      try {
        console.log('üîç [INTEGRATION] –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.userId = self.getUserId();
        console.log('üìä [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç getUserId:', {
          userId: self.userId,
          type: typeof self.userId,
          isValid: !!self.userId
        });

        if (!self.userId) {
          const error = new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.');
          console.error('‚ùå [INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
          console.error('‚ùå [INTEGRATION] –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error);
          self.showErrorMessage(error.message);
          throw error;
        }

        console.log('‚úÖ [INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ:', self.userId);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–æ–≤–∏—â–µ
        console.log('üîß [INTEGRATION] –ö—Ä–æ–∫ 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ö–æ–≤–∏—â–∞...');
        self.initStore();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI
        console.log('üé® [INTEGRATION] –ö—Ä–æ–∫ 3: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI...');
        self.initUI()
          .then(function() {
            console.log('‚úÖ [INTEGRATION] UI —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            console.log('üìä [INTEGRATION] –ö—Ä–æ–∫ 4: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');

            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
            return self.loadInitialData();
          })
          .then(function() {
            console.log('‚úÖ [INTEGRATION] –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            console.log('üéØ [INTEGRATION] –ö—Ä–æ–∫ 5: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            self.setupEventListeners();

            self.isInitialized = true;
            console.log('üéâ [INTEGRATION] ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê =====');
            console.log('üìä [INTEGRATION] –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:', {
              userId: self.userId,
              storeInitialized: !!self.store,
              isInitialized: self.isInitialized
            });
            resolve(self);
          })
          .catch(function(error) {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó UI –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
            console.error('‚ùå [INTEGRATION] –¢–∏–ø –ø–æ–º–∏–ª–∫–∏:', error.name);
            console.error('‚ùå [INTEGRATION] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
            console.error('‚ùå [INTEGRATION] Stack trace:', error.stack);
            self.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ' + error.message);
            reject(error);
          });
      } catch (error) {
        console.error('‚ùå [INTEGRATION] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ –±–ª–æ—Ü—ñ try-catch');
        console.error('‚ùå [INTEGRATION] –î–µ—Ç–∞–ª—ñ:', error);
        self.showErrorMessage('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ' + error.message);
        reject(error);
      }
    });
  };

  /**
   * –û—Ç—Ä–∏–º—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
   */
  ReferralIntegration.prototype.getUserId = function() {
    console.log('üîç [INTEGRATION] === getUserId START ===');
    console.log('üîç [INTEGRATION] –î–æ—Å—Ç—É–ø–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±\'—î–∫—Ç–∏:', {
      hasWindow: typeof window !== 'undefined',
      hasWinixAPI: typeof window.WinixAPI !== 'undefined',
      hasTelegram: typeof window.Telegram !== 'undefined',
      hasTelegramWebApp: window.Telegram && typeof window.Telegram.WebApp !== 'undefined'
    });

    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑ WinixAPI —è–∫—â–æ –≤—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
      console.log('üîç [INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ WinixAPI...');
      try {
        const apiId = window.WinixAPI.getUserId();
        console.log('üîç [INTEGRATION] WinixAPI.getUserId() –ø–æ–≤–µ—Ä–Ω—É–≤:', {
          value: apiId,
          type: typeof apiId,
          isValid: apiId && apiId !== 'undefined' && apiId !== 'null'
        });

        if (apiId && apiId !== 'undefined' && apiId !== 'null') {
          const numericId = parseInt(apiId);
          console.log('‚úÖ [INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ WinixAPI:', numericId);
          return numericId;
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É WinixAPI.getUserId():', e);
      }
    } else {
      console.log('‚ö†Ô∏è [INTEGRATION] WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ –º–∞—î –º–µ—Ç–æ–¥—É getUserId');
    }

    // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –∑ Telegram
    console.log('üîç [INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ Telegram WebApp...');
    if (window.Telegram && window.Telegram.WebApp) {
      console.log('üìä [INTEGRATION] Telegram WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π. initDataUnsafe:',
        window.Telegram.WebApp.initDataUnsafe);

      if (window.Telegram.WebApp.initDataUnsafe &&
          window.Telegram.WebApp.initDataUnsafe.user &&
          window.Telegram.WebApp.initDataUnsafe.user.id) {
        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id;
        console.log('‚úÖ [INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ Telegram:', tgUserId);
        return parseInt(tgUserId);
      } else {
        console.log('‚ö†Ô∏è [INTEGRATION] Telegram WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ');
      }
    } else {
      console.log('‚ö†Ô∏è [INTEGRATION] Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }

    // –ü–æ—Ç—ñ–º –∑ localStorage
    console.log('üîç [INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∑ localStorage...');
    const telegramId = localStorage.getItem('telegram_user_id');
    const userId = localStorage.getItem('user_id');
    console.log('üìä [INTEGRATION] –î–∞–Ω—ñ –∑ localStorage:', {
      telegram_user_id: telegramId,
      user_id: userId
    });

    const storedId = telegramId || userId;
    if (storedId) {
      const numericId = parseInt(storedId);
      console.log('üìä [INTEGRATION] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ID:', {
        original: storedId,
        numeric: numericId,
        isNaN: isNaN(numericId)
      });

      if (!isNaN(numericId)) {
        console.log('‚úÖ [INTEGRATION] ID —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage:', numericId);
        return numericId;
      }
    }

    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
    console.error('‚ùå [INTEGRATION] === getUserId FAILED - ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—ñ ===');
    return null;
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Redux —Å—Ö–æ–≤–∏—â–µ
   */
  ReferralIntegration.prototype.initStore = function() {
    console.log('üîß [INTEGRATION] === initStore START ===');
    console.log('üîß [INTEGRATION] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ ReferralStore:', {
      hasReferralStore: typeof window.ReferralStore !== 'undefined',
      hasConfigureMethod: window.ReferralStore && typeof window.ReferralStore.configureReferralStore === 'function',
      availableReducers: window.ReferralStore ? Object.keys(window.ReferralStore) : []
    });

    try {
      const reducers = {
        referralLink: window.ReferralStore.referralLinkReducer,
        directBonus: window.ReferralStore.directBonusReducer,
        referralLevels: window.ReferralStore.referralLevelsReducer,
        badges: window.ReferralStore.badgeReducer
      };

      console.log('üìä [INTEGRATION] –†–µ–¥—é—Å–µ—Ä–∏ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', Object.keys(reducers));

      this.store = window.ReferralStore.configureReferralStore(reducers);

      console.log('‚úÖ [INTEGRATION] Store —Å—Ç–≤–æ—Ä–µ–Ω–æ:', {
        hasStore: !!this.store,
        hasGetState: typeof this.store.getState === 'function',
        hasDispatch: typeof this.store.dispatch === 'function',
        hasSubscribe: typeof this.store.subscribe === 'function'
      });

      // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
      const self = this;
      const unsubscribe = this.store.subscribe(function() {
        console.log('üîÑ [INTEGRATION] Store state –∑–º—ñ–Ω–∏–≤—Å—è');
        self.handleStateChange();
      });

      console.log('‚úÖ [INTEGRATION] –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ store –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      console.log('üìä [INTEGRATION] –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω store:', this.store.getState());
      console.log('‚úÖ [INTEGRATION] === initStore SUCCESS ===');
    } catch (error) {
      console.error('‚ùå [INTEGRATION] === initStore FAILED ===');
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞:', error);
      throw error;
    }
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  ReferralIntegration.prototype.initUI = function() {
    const self = this;
    console.log('üé® [INTEGRATION] === initUI START ===');

    return new Promise(function(resolve, reject) {
      try {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
        console.log('üé® [INTEGRATION] –ö—Ä–æ–∫ 1: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É...');
        self.setUserIdInHeader();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        console.log('üé® [INTEGRATION] –ö—Ä–æ–∫ 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è...');
        self.initReferralLink()
          .then(function() {
            console.log('‚úÖ [INTEGRATION] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
            console.log('üé® [INTEGRATION] –ö—Ä–æ–∫ 3: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥...');
            self.initRewardsDisplay();

            console.log('‚úÖ [INTEGRATION] === initUI SUCCESS ===');
            resolve();
          })
          .catch(function(error) {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
            console.error('‚ùå [INTEGRATION] –î–µ—Ç–∞–ª—ñ:', error);
            reject(error);
          });
      } catch (error) {
        console.error('‚ùå [INTEGRATION] === initUI FAILED ===');
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞:', error);
        reject(error);
      }
    });
  };

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
   */
  ReferralIntegration.prototype.setUserIdInHeader = function() {
    console.log('üè∑Ô∏è [INTEGRATION] === setUserIdInHeader START ===');

    const userIdElements = document.querySelectorAll('.user-id-value, #header-user-id');
    console.log('üìä [INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è ID:', userIdElements.length);

    const self = this;
    userIdElements.forEach(function(element, index) {
      if (element) {
        const value = self.userId || '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ';
        console.log(`üè∑Ô∏è [INTEGRATION] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ID –≤ –µ–ª–µ–º–µ–Ω—Ç ${index}:`, {
          element: element,
          oldValue: element.textContent,
          newValue: value
        });
        element.textContent = value;
      }
    });

    console.log('‚úÖ [INTEGRATION] === setUserIdInHeader COMPLETE ===');
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
   */
  ReferralIntegration.prototype.initReferralLink = function() {
    const self = this;
    console.log('üîó [INTEGRATION] === initReferralLink START ===');
    console.log('üìä [INTEGRATION] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: self.userId,
      hasStore: !!self.store,
      hasDispatch: self.store && typeof self.store.dispatch === 'function'
    });

    return new Promise(function(resolve, reject) {
      try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        if (!window.ReferralStore || !window.ReferralStore.fetchReferralLink) {
          throw new Error('ReferralStore.fetchReferralLink –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }

        console.log('üîó [INTEGRATION] –î–∏—Å–ø–∞—Ç—á fetchReferralLink action...');

        // –î–∏—Å–ø–∞—Ç—á–∏–º–æ –¥—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        self.store.dispatch(window.ReferralStore.fetchReferralLink(self.userId))
          .then(function(result) {
            console.log('‚úÖ [INTEGRATION] fetchReferralLink —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ');
            console.log('üìä [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            resolve();
          })
          .catch(function(error) {
            console.error('‚ùå [INTEGRATION] fetchReferralLink –ø–æ–º–∏–ª–∫–∞:', error);
            self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ' + error.message);
            reject(error);
          });
      } catch (error) {
        console.error('‚ùå [INTEGRATION] === initReferralLink FAILED ===');
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞:', error);
        self.showErrorMessage('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ' + error.message);
        reject(error);
      }
    });
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
   */
  ReferralIntegration.prototype.updateReferralLinkDisplay = function(link) {
    console.log('üîó [INTEGRATION] === updateReferralLinkDisplay START ===');
    console.log('üìä [INTEGRATION] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', {
      link: link,
      type: typeof link,
      length: link ? link.length : 0
    });

    const linkDisplay = document.querySelector('.link-display');
    console.log('üìä [INTEGRATION] –ï–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', {
      found: !!linkDisplay,
      currentText: linkDisplay ? linkDisplay.textContent : null
    });

    if (linkDisplay) {
      // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ link —Ü–µ —Ä—è–¥–æ–∫
      if (typeof link !== 'string') {
        console.error("‚ùå [INTEGRATION] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è:", link);
        linkDisplay.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è';
        linkDisplay.dataset.link = '';
        return;
      }

      console.log('‚úÖ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
      linkDisplay.textContent = link;
      linkDisplay.dataset.link = link;
      console.log('‚úÖ [INTEGRATION] === updateReferralLinkDisplay SUCCESS ===');
    } else {
      console.error('‚ùå [INTEGRATION] –ï–ª–µ–º–µ–Ω—Ç .link-display –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
   */
  ReferralIntegration.prototype.initRewardsDisplay = function() {
    console.log('üí∞ [INTEGRATION] === initRewardsDisplay START ===');

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
    const bonusAmountElements = document.querySelectorAll('.bonus-amount');
    const bonusAmount = window.ReferralConstants.DIRECT_BONUS_AMOUNT || 50;

    console.log('üìä [INTEGRATION] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:', {
      elementsFound: bonusAmountElements.length,
      bonusAmount: bonusAmount
    });

    bonusAmountElements.forEach(function(element, index) {
      console.log(`üí∞ [INTEGRATION] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ–Ω—É—Å—É –≤ –µ–ª–µ–º–µ–Ω—Ç ${index}`);
      element.textContent = bonusAmount;
    });

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
    console.log('üèÜ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—ñ–≤ –±–µ–π–¥–∂—ñ–≤...');
    this.updateBadgeThresholds();

    console.log('‚úÖ [INTEGRATION] === initRewardsDisplay COMPLETE ===');
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
   */
  ReferralIntegration.prototype.updateBadgeThresholds = function() {
    console.log('üèÜ [INTEGRATION] === updateBadgeThresholds START ===');

    const thresholdElements = {
      '.bronze-threshold': window.ReferralConstants.BRONZE_BADGE_THRESHOLD || 25,
      '.silver-threshold': window.ReferralConstants.SILVER_BADGE_THRESHOLD || 50,
      '.gold-threshold': window.ReferralConstants.GOLD_BADGE_THRESHOLD || 100,
      '.platinum-threshold': window.ReferralConstants.PLATINUM_BADGE_THRESHOLD || 500
    };

    console.log('üìä [INTEGRATION] –ü–æ—Ä–æ–≥–∏ –±–µ–π–¥–∂—ñ–≤:', thresholdElements);

    Object.keys(thresholdElements).forEach(function(selector) {
      const value = thresholdElements[selector];
      const element = document.querySelector(selector);
      console.log(`üèÜ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è ${selector}:`, {
        found: !!element,
        value: value
      });
      if (element) {
        element.textContent = value;
      }
    });

    const rewardElements = {
      '.bronze-reward': window.ReferralConstants.BRONZE_BADGE_REWARD || 2500,
      '.silver-reward': window.ReferralConstants.SILVER_BADGE_REWARD || 5000,
      '.gold-reward': window.ReferralConstants.GOLD_BADGE_REWARD || 10000,
      '.platinum-reward': window.ReferralConstants.PLATINUM_BADGE_REWARD || 20000
    };

    console.log('üìä [INTEGRATION] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –±–µ–π–¥–∂—ñ–≤:', rewardElements);

    Object.keys(rewardElements).forEach(function(selector) {
      const value = rewardElements[selector];
      const element = document.querySelector(selector);
      console.log(`üí∞ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ ${selector}:`, {
        found: !!element,
        value: value
      });
      if (element) {
        element.textContent = value;
      }
    });

    console.log('‚úÖ [INTEGRATION] === updateBadgeThresholds COMPLETE ===');
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
   */
  ReferralIntegration.prototype.loadInitialData = function() {
    const self = this;
    console.log('üìä [INTEGRATION] === loadInitialData START ===');
    console.log('üïê [INTEGRATION] –ß–∞—Å –ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', new Date().toISOString());

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    const promises = [
      self.loadReferralStats().catch(function(error) {
        console.error('‚ùå [INTEGRATION] –ü–û–ú–ò–õ–ö–ê loadReferralStats:', error);
        self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤');
        return null;
      }),
      self.loadBadgesData().catch(function(error) {
        console.error('‚ùå [INTEGRATION] –ü–û–ú–ò–õ–ö–ê loadBadgesData:', error);
        self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –±–µ–π–¥–∂—ñ');
        return null;
      }),
      self.loadDirectBonusHistory().catch(function(error) {
        console.error('‚ùå [INTEGRATION] –ü–û–ú–ò–õ–ö–ê loadDirectBonusHistory:', error);
        self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –±–æ–Ω—É—Å—ñ–≤');
        return null;
      })
    ];

    console.log('üìä [INTEGRATION] –ó–∞–ø—É—â–µ–Ω–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 3 –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö');

    return Promise.all(promises)
      .then(function(results) {
        console.log('üìä [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', {
          stats: results[0] ? 'SUCCESS' : 'FAILED',
          badges: results[1] ? 'SUCCESS' : 'FAILED',
          bonuses: results[2] ? 'SUCCESS' : 'FAILED'
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ö–æ—á–∞ –± —â–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–æ—Å—å
        const hasAnyData = results.some(function(result) {
          return result !== null;
        });

        console.log('üìä [INTEGRATION] –°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', {
          hasAnyData: hasAnyData,
          successCount: results.filter(r => r !== null).length,
          failureCount: results.filter(r => r === null).length
        });

        if (!hasAnyData) {
          console.error('‚ùå [INTEGRATION] –ö–†–ò–¢–ò–ß–ù–û: –ñ–æ–¥–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
          self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂–æ–¥–Ω—ñ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.');
        } else {
          console.log('‚úÖ [INTEGRATION] –ß–∞—Å—Ç–∫–æ–≤–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
        }

        console.log('‚úÖ [INTEGRATION] === loadInitialData COMPLETE ===');
      });
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
   */
  ReferralIntegration.prototype.loadReferralStats = function() {
    const self = this;
    console.log('üìä [INTEGRATION] === loadReferralStats START ===');
    console.log('üîÑ [INTEGRATION] –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è userId:', this.userId);

    return window.ReferralAPI.fetchReferralStats(this.userId)
      .then(function(statsData) {
        console.log('‚úÖ [INTEGRATION] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        console.log('üìä [INTEGRATION] –î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', JSON.stringify(statsData, null, 2));

        console.log('üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        self.updateReferralStatsDisplay(statsData);

        console.log('‚úÖ [INTEGRATION] === loadReferralStats SUCCESS ===');
        return statsData;
      })
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] === loadReferralStats FAILED ===');
        console.error('‚ùå [INTEGRATION] –¢–∏–ø –ø–æ–º–∏–ª–∫–∏:', error.name);
        console.error('‚ùå [INTEGRATION] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
        console.error('‚ùå [INTEGRATION] Stack trace:', error.stack);

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ UI
        self.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message);

        // –ü—Ä–æ–±—Ä–∞—Å—É—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
        throw error;
      });
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –ø—Ä–æ –±–µ–π–¥–∂—ñ
   */
  ReferralIntegration.prototype.loadBadgesData = function() {
    const self = this;
    console.log('üèÜ [INTEGRATION] === loadBadgesData START ===');
    console.log('üîÑ [INTEGRATION] –ó–∞–ø–∏—Ç –±–µ–π–¥–∂—ñ–≤ –¥–ª—è userId:', this.userId);

    return this.store.dispatch(window.ReferralStore.fetchUserBadges(this.userId))
      .then(function(result) {
        console.log('‚úÖ [INTEGRATION] –ë–µ–π–¥–∂—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ');
        console.log('üìä [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        console.log('‚úÖ [INTEGRATION] === loadBadgesData SUCCESS ===');
        return result;
      })
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] === loadBadgesData FAILED ===');
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞:', error);
        self.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤: ' + error.message);
        throw error;
      });
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä—è–º–∏—Ö –±–æ–Ω—É—Å—ñ–≤
   */
  ReferralIntegration.prototype.loadDirectBonusHistory = function() {
    const self = this;
    console.log('üí∞ [INTEGRATION] === loadDirectBonusHistory START ===');
    console.log('üîÑ [INTEGRATION] –ó–∞–ø–∏—Ç —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è userId:', this.userId);

    return this.store.dispatch(window.ReferralStore.fetchDirectBonusHistory(this.userId))
      .then(function(result) {
        console.log('‚úÖ [INTEGRATION] –Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        console.log('üìä [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        console.log('‚úÖ [INTEGRATION] === loadDirectBonusHistory SUCCESS ===');
        return result;
      })
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] === loadDirectBonusHistory FAILED ===');
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞:', error);
        self.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: ' + error.message);
        throw error;
      });
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
   */
  ReferralIntegration.prototype.updateReferralStatsDisplay = function(statsData) {
    console.log('üìä [INTEGRATION] === updateReferralStatsDisplay START ===');
    console.log('üìä [INTEGRATION] –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(statsData, null, 2));

    if (!statsData) {
      console.error('‚ùå [INTEGRATION] statsData –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ null');
      this.showErrorMessage('–î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    let stats = {
      totalReferrals: 0,
      activeReferrals: 0,
      inactiveReferrals: 0,
      conversionRate: "0"
    };

    console.log('üìä [INTEGRATION] –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö...');

    // –û–±—Ä–æ–±–∫–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (statsData.statistics) {
      console.log('üìä [INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ statistics:', statsData.statistics);
      stats.totalReferrals = statsData.statistics.totalReferrals || 0;
      stats.activeReferrals = statsData.statistics.activeReferrals || 0;
    } else if (statsData.referrals) {
      console.log('üìä [INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ referrals:', statsData.referrals);
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      if (Array.isArray(statsData.referrals.level1)) {
        console.log('üìä [INTEGRATION] referrals.level1 —î –º–∞—Å–∏–≤–æ–º, –¥–æ–≤–∂–∏–Ω–∞:', statsData.referrals.level1.length);
        stats.totalReferrals = statsData.referrals.level1.length;
        stats.activeReferrals = statsData.referrals.level1.filter(ref => ref.active).length;
      }
    } else if (typeof statsData.totalReferrals === 'number') {
      console.log('üìä [INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä—è–º–µ –ø–æ–ª–µ totalReferrals:', statsData.totalReferrals);
      // –ü—Ä—è–º–µ –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
      stats.totalReferrals = statsData.totalReferrals;
      stats.activeReferrals = statsData.activeReferrals || 0;
    }

    stats.inactiveReferrals = stats.totalReferrals - stats.activeReferrals;
    if (stats.totalReferrals > 0) {
      stats.conversionRate = ((stats.activeReferrals / stats.totalReferrals) * 100).toFixed(1);
    }

    console.log('üìä [INTEGRATION] –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:', stats);

    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    console.log('üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...');
    this.updateElement('.total-referrals-count', stats.totalReferrals);
    this.updateElement('.active-referrals-count', stats.activeReferrals);
    this.updateElement('.conversion-rate', stats.conversionRate + '%');

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    this.updateElement('#active-referrals-count', stats.activeReferrals);
    this.updateElement('#inactive-referrals-count', stats.inactiveReferrals);
    this.updateElement('#conversion-rate', stats.conversionRate + '%');

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
    console.log('üèÜ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –±–µ–π–¥–∂—ñ–≤...');
    this.updateBadgeProgress(stats.totalReferrals);

    console.log('‚úÖ [INTEGRATION] === updateReferralStatsDisplay COMPLETE ===');
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
   */
  ReferralIntegration.prototype.updateBadgeProgress = function(referralsCount) {
    console.log('üèÜ [INTEGRATION] === updateBadgeProgress START ===');
    console.log('üìä [INTEGRATION] –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', referralsCount);

    if (!window.ReferralServices || !window.ReferralServices.checkBadgesProgress) {
      console.error('‚ùå [INTEGRATION] ReferralServices.checkBadgesProgress –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      return;
    }

    // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ —Ü–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç
    referralsCount = parseInt(referralsCount) || 0;
    console.log('üìä [INTEGRATION] –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', referralsCount);

    const badgeProgress = window.ReferralServices.checkBadgesProgress(referralsCount);
    console.log('üìä [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç checkBadgesProgress:', JSON.stringify(badgeProgress, null, 2));

    if (badgeProgress) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–π–¥–∂—ñ–≤
      console.log('üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–π–¥–∂—ñ–≤...');
      this.updateElement('#earned-badges-count', badgeProgress.earnedBadgesCount);
      this.updateElement('#remaining-badges-count', 4 - badgeProgress.earnedBadgesCount);

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–µ–π–¥–∂–∞
      if (badgeProgress.nextBadge) {
        console.log('üèÜ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–µ–π–¥–∂–∞:', badgeProgress.nextBadge);

        const nextBadgeTitle = this.getBadgeTitle(badgeProgress.nextBadge.type);
        const nextBadgeTitleElement = document.querySelector('.next-badge-title');
        if (nextBadgeTitleElement) {
          nextBadgeTitleElement.textContent = '–ù–∞—Å—Ç—É–ø–Ω–∏–π –±–µ–π–¥–∂: ' + nextBadgeTitle;
        }

        const progressPercent = Math.round(badgeProgress.nextBadge.progress);
        const progressBar = document.querySelector('.next-badge-container .progress-fill');
        if (progressBar) {
          console.log(`üîÑ [INTEGRATION] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É: ${progressPercent}%`);
          progressBar.style.width = progressPercent + '%';
        }

        const progressText = document.querySelector('.next-badge-container .progress-text');
        if (progressText) {
          progressText.textContent = progressPercent + '% (' + referralsCount + '/' + badgeProgress.nextBadge.threshold + ')';
        }

        const remainingText = document.querySelector('.next-badge-remaining');
        if (remainingText) {
          remainingText.textContent = '–ó–∞–ª–∏—à–∏–ª–æ—Å—å: ' + badgeProgress.nextBadge.remaining + ' —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤';
        }
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∏ –±–µ–π–¥–∂—ñ–≤
      console.log('üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –±–µ–π–¥–∂—ñ–≤...');
      const self = this;
      badgeProgress.badgeProgress.forEach(function(badge, index) {
        console.log(`üèÜ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂–∞ ${index}:`, badge);
        self.updateBadgeItem(badge);
      });
    }

    console.log('‚úÖ [INTEGRATION] === updateBadgeProgress COMPLETE ===');
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞
   */
  ReferralIntegration.prototype.updateBadgeItem = function(badge) {
    console.log('üèÜ [INTEGRATION] === updateBadgeItem START ===');
    console.log('üìä [INTEGRATION] –î–∞–Ω—ñ –±–µ–π–¥–∂–∞:', badge);

    const badgeClass = badge.type.toLowerCase();
    const badgeItems = document.querySelectorAll('.badge-item');
    let badgeItem = null;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞ –∑–∞ —ñ–∫–æ–Ω–∫–æ—é
    const iconClasses = {
      'bronze': 'brave-icon',
      'silver': 'innovator-icon',
      'gold': 'legend-icon',
      'platinum': 'visionary-icon'
    };

    console.log(`üîç [INTEGRATION] –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑ –∫–ª–∞—Å–æ–º ${iconClasses[badgeClass]}`);

    badgeItems.forEach(function(item) {
      if (item.querySelector('.' + iconClasses[badgeClass])) {
        badgeItem = item;
        console.log('‚úÖ [INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞');
      }
    });

    if (badgeItem) {
      const progressBar = badgeItem.querySelector('.badge-progress-fill');
      const progressText = badgeItem.querySelector('.badge-progress-text');
      const button = badgeItem.querySelector('.claim-badge-button');

      if (progressBar) {
        console.log(`üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É: ${badge.progress}%`);
        progressBar.style.width = badge.progress + '%';
      }

      if (progressText) {
        const current = Math.min(Math.round((badge.progress / 100) * badge.threshold), badge.threshold);
        const text = Math.round(badge.progress) + '% (' + current + '/' + badge.threshold + ')';
        console.log(`üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ–≥—Ä–µ—Å—É: ${text}`);
        progressText.textContent = text;
      }

      if (button) {
        console.log(`üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏. isEligible: ${badge.isEligible}`);
        if (badge.isEligible) {
          button.textContent = '–û—Ç—Ä–∏–º–∞—Ç–∏';
          button.disabled = false;
          badgeItem.classList.remove('not-eligible');
          badgeItem.classList.add('eligible');
        } else {
          button.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
          button.disabled = true;
          badgeItem.classList.add('not-eligible');
          badgeItem.classList.remove('eligible');
        }
      }
    } else {
      console.warn('‚ö†Ô∏è [INTEGRATION] –ï–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–∏–ø—É:', badge.type);
    }

    console.log('‚úÖ [INTEGRATION] === updateBadgeItem COMPLETE ===');
  };

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –±–µ–π–¥–∂–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
   */
  ReferralIntegration.prototype.getBadgeTitle = function(badgeType) {
    console.log('üè∑Ô∏è [INTEGRATION] getBadgeTitle –¥–ª—è:', badgeType);

    const titles = {
      'BRONZE': '–°–º—ñ–ª–∏–≤–µ—Ü—å',
      'SILVER': '–ù–æ–≤–∞—Ç–æ—Ä',
      'GOLD': '–õ–µ–≥–µ–Ω–¥–∞',
      'PLATINUM': '–í—ñ–∑—ñ–æ–Ω–µ—Ä'
    };

    const title = titles[badgeType] || badgeType;
    console.log('üè∑Ô∏è [INTEGRATION] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É:', title);
    return title;
  };

  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç–∞
   */
  ReferralIntegration.prototype.updateElement = function(selector, value) {
    console.log(`üîÑ [INTEGRATION] updateElement: ${selector} = ${value}`);

    const element = document.querySelector(selector);
    if (element) {
      console.log(`‚úÖ [INTEGRATION] –ï–ª–µ–º–µ–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è`);
      element.textContent = value;
    } else {
      console.warn(`‚ö†Ô∏è [INTEGRATION] –ï–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${selector}`);
    }
  };

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
   */
  ReferralIntegration.prototype.setupEventListeners = function() {
    console.log('üéØ [INTEGRATION] === setupEventListeners START ===');

    const self = this;

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂—ñ
    console.log('üéØ [INTEGRATION] –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–ª—ñ–∫—ñ–≤...');
    document.addEventListener('click', function(event) {
      if (event.target.classList.contains('claim-badge-button') && !event.target.disabled) {
        console.log('üéØ [INTEGRATION] –ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É claim badge:', event.target);
        const badgeType = event.target.dataset.badge;
        console.log('üèÜ [INTEGRATION] –¢–∏–ø –±–µ–π–¥–∂–∞:', badgeType);

        if (badgeType) {
          self.handleClaimBadge(badgeType, event.target);
        }
      }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    const copyButton = document.querySelector('.copy-link-button, .copy-button');
    console.log('üîç [INTEGRATION] –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', {
      found: !!copyButton,
      selector: '.copy-link-button, .copy-button'
    });

    if (copyButton) {
      copyButton.addEventListener('click', function() {
        console.log('üìã [INTEGRATION] –ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è');

        const linkDisplay = document.querySelector('.link-display');
        console.log('üìä [INTEGRATION] –î–∞–Ω—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', {
          linkElement: !!linkDisplay,
          linkText: linkDisplay ? linkDisplay.textContent : null,
          linkData: linkDisplay ? linkDisplay.dataset.link : null
        });

        if (linkDisplay && linkDisplay.dataset.link) {
          try {
            navigator.clipboard.writeText(linkDisplay.dataset.link).then(function() {
              console.log('‚úÖ [INTEGRATION] –£—Å–ø—ñ—à–Ω–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Clipboard API');
              self.showSuccessMessage('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
            }).catch(function(err) {
              console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ Clipboard API:', err);
              // Fallback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
              self.fallbackCopyToClipboard(linkDisplay.dataset.link);
            });
          } catch (e) {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', e);
            self.fallbackCopyToClipboard(linkDisplay.dataset.link);
          }
        } else {
          console.warn('‚ö†Ô∏è [INTEGRATION] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î');
        }
      });
    }

    console.log('‚úÖ [INTEGRATION] === setupEventListeners COMPLETE ===');
  };

  /**
   * –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
   */
  ReferralIntegration.prototype.fallbackCopyToClipboard = function(text) {
    console.log('üìã [INTEGRATION] === fallbackCopyToClipboard START ===');
    console.log('üìä [INTEGRATION] –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', text);

    const self = this;

    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
      const textarea = document.createElement('textarea');
      textarea.value = text;

      // –•–æ–≤–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      textarea.style.position = 'fixed';
      textarea.style.top = '0';
      textarea.style.left = '0';
      textarea.style.width = '2em';
      textarea.style.height = '2em';
      textarea.style.padding = 0;
      textarea.style.border = 'none';
      textarea.style.outline = 'none';
      textarea.style.boxShadow = 'none';
      textarea.style.background = 'transparent';

      document.body.appendChild(textarea);
      textarea.focus();
      textarea.select();

      console.log('üìã [INTEGRATION] –°–ø—Ä–æ–±–∞ execCommand("copy")...');
      try {
        const successful = document.execCommand('copy');
        console.log('üìä [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç execCommand:', successful);

        if (successful) {
          self.showSuccessMessage('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
        } else {
          self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
        }
      } catch (err) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ execCommand:', err);
        self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
      }

      document.body.removeChild(textarea);
      console.log('‚úÖ [INTEGRATION] –¢–∏–º—á–∞—Å–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ');
    } catch (e) {
      console.error('‚ùå [INTEGRATION] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ fallbackCopyToClipboard:', e);
      self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
    }

    console.log('‚úÖ [INTEGRATION] === fallbackCopyToClipboard COMPLETE ===');
  };

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂
   */
  ReferralIntegration.prototype.handleClaimBadge = function(badgeType, button) {
    console.log('üíé [INTEGRATION] === handleClaimBadge START ===');
    console.log('üìä [INTEGRATION] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      badgeType: badgeType,
      userId: this.userId,
      buttonText: button.textContent
    });

    const self = this;

    // –î—ñ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
    button.disabled = true;
    button.textContent = '–û—Ç—Ä–∏–º—É—î–º–æ...';
    console.log('üîÑ [INTEGRATION] –ö–Ω–æ–ø–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞');

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –¥—ñ—é
    this.store.dispatch(window.ReferralStore.claimBadgeReward(this.userId, badgeType))
      .then(function(result) {
        console.log('‚úÖ [INTEGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç claimBadgeReward:', result);

        if (result.success) {
          // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
          self.showSuccessMessage('–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –±–µ–π–¥–∂ "' + self.getBadgeTitle(badgeType) + '" –æ—Ç—Ä–∏–º–∞–Ω–∞!');

          // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          button.textContent = '–û—Ç—Ä–∏–º–∞–Ω–æ';
          button.classList.add('claimed');
          console.log('‚úÖ [INTEGRATION] –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "–û—Ç—Ä–∏–º–∞–Ω–æ"');

          // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
          console.log('üîÑ [INTEGRATION] –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');
          return Promise.all([
            self.loadBadgesData(),
            self.loadReferralStats()
          ]);
        } else {
          throw new Error(result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
        }
      })
      .then(function() {
        console.log('‚úÖ [INTEGRATION] –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
        console.log('‚úÖ [INTEGRATION] === handleClaimBadge SUCCESS ===');
      })
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] === handleClaimBadge FAILED ===');
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞:', error);
        self.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏: ' + error.message);

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
        button.disabled = false;
        button.textContent = '–û—Ç—Ä–∏–º–∞—Ç–∏';
        console.log('üîÑ [INTEGRATION] –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞');
      });
  };

  /**
   * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
   */
  ReferralIntegration.prototype.showSuccessMessage = function(message) {
    console.log('‚úÖ [INTEGRATION] showSuccessMessage:', message);

    const toast = document.getElementById('copy-toast');
    if (toast) {
      toast.textContent = message;
      toast.classList.add('show', 'success');
      setTimeout(function() {
        toast.classList.remove('show', 'success');
        console.log('‚úÖ [INTEGRATION] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ');
      }, 3000);
    } else {
      console.warn('‚ö†Ô∏è [INTEGRATION] –ï–ª–µ–º–µ–Ω—Ç toast –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  };

  /**
   * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
   */
  ReferralIntegration.prototype.showErrorMessage = function(message) {
    console.error('‚ùå [INTEGRATION] showErrorMessage:', message);

    const toast = document.getElementById('copy-toast');
    if (toast) {
      toast.textContent = message;
      toast.classList.add('show', 'error');
      setTimeout(function() {
        toast.classList.remove('show', 'error');
        console.log('‚ùå [INTEGRATION] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ');
      }, 5000);
    } else {
      console.warn('‚ö†Ô∏è [INTEGRATION] –ï–ª–µ–º–µ–Ω—Ç toast –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  };

  /**
   * –û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
   */
  ReferralIntegration.prototype.handleStateChange = function() {
    console.log('üîÑ [INTEGRATION] === handleStateChange START ===');

    const state = this.store.getState();
    console.log('üìä [INTEGRATION] –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω store:', JSON.stringify(state, null, 2));

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö —Å—Ç–∞–Ω—É
    if (state.referralLink && state.referralLink.error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≤ referralLink:', state.referralLink.error);
      this.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ' + state.referralLink.error);
    }

    if (state.badges && state.badges.error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≤ badges:', state.badges.error);
      this.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –±–µ–π–¥–∂—ñ–≤: ' + state.badges.error);
    }

    if (state.directBonus && state.directBonus.error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≤ directBonus:', state.directBonus.error);
      this.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –±–æ–Ω—É—Å—ñ–≤: ' + state.directBonus.error);
    }

    if (state.referralLevels && state.referralLevels.error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≤ referralLevels:', state.referralLevels.error);
      this.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ —Ä—ñ–≤–Ω—ñ–≤: ' + state.referralLevels.error);
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if (state.referralLink && state.referralLink.link) {
      console.log('üîó [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', state.referralLink.link);
      this.updateReferralLinkDisplay(state.referralLink.link);
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
    if (state.directBonus && state.directBonus.history) {
      console.log('üí∞ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤:',
        state.directBonus.history.length);
      this.updateBonusHistory(state.directBonus.history);
    }

    console.log('‚úÖ [INTEGRATION] === handleStateChange COMPLETE ===');
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
   */
  ReferralIntegration.prototype.updateBonusHistory = function(history) {
    console.log('üí∞ [INTEGRATION] === updateBonusHistory START ===');
    console.log('üìä [INTEGRATION] –Ü—Å—Ç–æ—Ä—ñ—è:', history);

    const container = document.querySelector('.bonus-history-items');
    if (!container) {
      console.error('‚ùå [INTEGRATION] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä .bonus-history-items –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ history —Ü–µ –º–∞—Å–∏–≤
    if (!Array.isArray(history)) {
      console.error('‚ùå [INTEGRATION] history –Ω–µ —î –º–∞—Å–∏–≤–æ–º:', typeof history);
      container.innerHTML = '<p style="color: #f44336; text-align: center;">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó</p>';
      return;
    }

    console.log('üìä [INTEGRATION] –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó:', history.length);
    container.innerHTML = '';

    if (history.length === 0) {
      console.log('üìä [INTEGRATION] –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
      container.innerHTML = '<p style="color: #888; text-align: center;">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤</p>';
      return;
    }

    console.log('üîÑ [INTEGRATION] –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 5 –∑–∞–ø–∏—Å—ñ–≤...');
    history.slice(0, 5).forEach(function(item, index) {
      console.log(`üí∞ [INTEGRATION] –ó–∞–ø–∏—Å ${index}:`, item);

      const historyItem = document.createElement('div');
      historyItem.className = 'bonus-history-item';

      let date;
      try {
        date = new Date(item.timestamp).toLocaleDateString('uk-UA');
        console.log(`üìÖ [INTEGRATION] –î–∞—Ç–∞ –∑–∞–ø–∏—Å—É ${index}: ${date}`);
      } catch (e) {
        console.error(`‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É ${index}:`, e);
        date = '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞';
      }

      historyItem.innerHTML = [
        '<div class="bonus-history-icon"></div>',
        '<div class="bonus-history-details">',
        '<div class="bonus-history-title">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å</div>',
        '<div class="bonus-history-amount">+' + (item.bonusAmount || window.ReferralConstants.DIRECT_BONUS_AMOUNT) + ' winix</div>',
        '<div class="bonus-history-date">' + date + '</div>',
        '</div>'
      ].join('');

      container.appendChild(historyItem);
    });

    console.log('‚úÖ [INTEGRATION] === updateBonusHistory COMPLETE ===');
  };

  console.log('‚úÖ [INTEGRATION] –ú–æ–¥—É–ª—å ReferralIntegration –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
  return ReferralIntegration;
})();

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
window.initReferralSystem = function() {
  console.log('üé¨ [GLOBAL] === initReferralSystem START ===');
  console.log('üïê [GLOBAL] –ß–∞—Å –≤–∏–∫–ª–∏–∫—É:', new Date().toISOString());

  return new Promise(function(resolve, reject) {
    try {
      console.log('üèóÔ∏è [GLOBAL] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É ReferralIntegration...');
      const integration = new window.ReferralIntegration();

      console.log('üöÄ [GLOBAL] –ó–∞–ø—É—Å–∫ integration.init()...');
      integration.init()
        .then(function() {
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
          window.ReferralIntegrationInstance = integration;
          console.log('‚úÖ [GLOBAL] –ï–∫–∑–µ–º–ø–ª—è—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ window.ReferralIntegrationInstance');

          console.log('üèÅ [GLOBAL] === initReferralSystem SUCCESS ===');
          resolve(integration);
        })
        .catch(function(error) {
          console.error('üí• [GLOBAL] === initReferralSystem FAILED ===');
          console.error('üí• [GLOBAL] –ü–æ–º–∏–ª–∫–∞:', error);
          reject(error);
        });
    } catch (error) {
      console.error('üí• [GLOBAL] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ try-catch –±–ª–æ—Ü—ñ');
      console.error('üí• [GLOBAL] –î–µ—Ç–∞–ª—ñ:', error);
      reject(error);
    }
  });
};

console.log('‚úÖ [GLOBAL] window.initReferralSystem —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞');