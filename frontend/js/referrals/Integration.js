// Integration.js - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –±–µ–∑ fallback –Ω–∞ mock –¥–∞–Ω—ñ
/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –∑ DOM
 */
window.ReferralIntegration = (function() {
  'use strict';

  function ReferralIntegration() {
    this.userId = null;
    this.store = null;
    this.isInitialized = false;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
   */
  ReferralIntegration.prototype.init = function() {
    const self = this;

    return new Promise(function(resolve, reject) {
      try {
        console.log('üöÄ [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏...');

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.userId = self.getUserId();
        if (!self.userId) {
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }

        console.log('‚úÖ [INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', self.userId);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–æ–≤–∏—â–µ
        self.initStore();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI
        self.initUI()
          .then(function() {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
            return self.loadInitialData();
          })
          .then(function() {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            self.setupEventListeners();

            self.isInitialized = true;
            console.log('üéâ [INTEGRATION] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!');
            resolve(self);
          })
          .catch(function(error) {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            reject(error);
          });
      } catch (error) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
        reject(error);
      }
    });
  };

  /**
   * –û—Ç—Ä–∏–º—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
   */
  ReferralIntegration.prototype.getUserId = function() {
    console.log('üîç [INTEGRATION] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª');

    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑ WinixAPI —è–∫—â–æ –≤—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
      try {
        const apiId = window.WinixAPI.getUserId();
        if (apiId && apiId !== 'undefined' && apiId !== 'null') {
          console.log('üîç [INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ ID —É WinixAPI:', apiId);
          return parseInt(apiId);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —á–µ—Ä–µ–∑ WinixAPI:', e);
      }
    }

    // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –∑ Telegram
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe &&
        window.Telegram.WebApp.initDataUnsafe.user && window.Telegram.WebApp.initDataUnsafe.user.id) {
        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id;
        console.log('üîç [INTEGRATION] –ó–Ω–∞–π–¥–µ–Ω–æ ID —É Telegram WebApp:', tgUserId);
        return parseInt(tgUserId);
    }

    // –ü–æ—Ç—ñ–º –∑ localStorage
    const storedId = localStorage.getItem('telegram_user_id') || localStorage.getItem('user_id');
    console.log('üîç [INTEGRATION] ID —É localStorage:', storedId);
    if (storedId) {
        const numericId = parseInt(storedId);
        if (!isNaN(numericId)) {
            return numericId;
        }
    }

    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID
    console.warn('‚ö†Ô∏è [INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π');
    return 6859825214; // –¢–µ—Å—Ç–æ–≤–∏–π ID —è–∫ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Redux —Å—Ö–æ–≤–∏—â–µ
   */
  ReferralIntegration.prototype.initStore = function() {
    console.log('üîß [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ö–æ–≤–∏—â–∞...');

    try {
      this.store = window.ReferralStore.configureReferralStore({
        referralLink: window.ReferralStore.referralLinkReducer,
        directBonus: window.ReferralStore.directBonusReducer,
        referralLevels: window.ReferralStore.referralLevelsReducer,
        badges: window.ReferralStore.badgeReducer
      });

      // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
      const self = this;
      this.store.subscribe(function() {
        self.handleStateChange();
      });

      console.log('‚úÖ [INTEGRATION] –°—Ö–æ–≤–∏—â–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ö–æ–≤–∏—â–∞:', error);
      throw error;
    }
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  ReferralIntegration.prototype.initUI = function() {
    const self = this;

    return new Promise(function(resolve, reject) {
      console.log('üé® [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI...');

      try {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
        self.setUserIdInHeader();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        self.initReferralLink()
          .then(function() {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
            self.initRewardsDisplay();

            console.log('‚úÖ [INTEGRATION] UI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            resolve();
          })
          .catch(function(error) {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó UI:', error);
            reject(error);
          });
      } catch (error) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó UI:', error);
        reject(error);
      }
    });
  };

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
   */
  ReferralIntegration.prototype.setUserIdInHeader = function() {
    const userIdElements = document.querySelectorAll('.user-id-value, #header-user-id');
    const self = this;

    userIdElements.forEach(function(element) {
      if (element) {
        element.textContent = self.userId;
      }
    });
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
   */
  ReferralIntegration.prototype.initReferralLink = function() {
    const self = this;

    return new Promise(function(resolve, reject) {
      try {
        console.log('üîó [INTEGRATION] –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è...');

        // –î–∏—Å–ø–∞—Ç—á–∏–º–æ –¥—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        self.store.dispatch(window.ReferralStore.fetchReferralLink(self.userId))
          .then(function() {
            resolve();
          })
          .catch(function(error) {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', error);
            self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
            reject(error);
          });
      } catch (error) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', error);
        self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
        reject(error);
      }
    });
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
   */
  ReferralIntegration.prototype.updateReferralLinkDisplay = function(link) {
    const linkDisplay = document.querySelector('.link-display');
    if (linkDisplay) {
        // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ link —Ü–µ —Ä—è–¥–æ–∫
        if (typeof link !== 'string') {
            console.warn("‚ö†Ô∏è [INTEGRATION] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è:", link);
            // –û—Ç—Ä–∏–º–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = this.userId || localStorage.getItem('telegram_user_id') || '6859825214';
            link = 'https://t.me/WINIX_Official_bot?start=' + userId;
        }

        linkDisplay.textContent = link;
        linkDisplay.dataset.link = link;
    }
  };

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
   */
  ReferralIntegration.prototype.initRewardsDisplay = function() {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
    const bonusAmountElements = document.querySelectorAll('.bonus-amount');
    bonusAmountElements.forEach(function(element) {
      element.textContent = window.ReferralConstants.DIRECT_BONUS_AMOUNT || '50';
    });

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
    this.updateBadgeThresholds();
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
   */
  ReferralIntegration.prototype.updateBadgeThresholds = function() {
    const thresholdElements = {
      '.bronze-threshold': window.ReferralConstants.BRONZE_BADGE_THRESHOLD || 25,
      '.silver-threshold': window.ReferralConstants.SILVER_BADGE_THRESHOLD || 50,
      '.gold-threshold': window.ReferralConstants.GOLD_BADGE_THRESHOLD || 100,
      '.platinum-threshold': window.ReferralConstants.PLATINUM_BADGE_THRESHOLD || 500
    };

    Object.keys(thresholdElements).forEach(function(selector) {
      const value = thresholdElements[selector];
      const element = document.querySelector(selector);
      if (element) {
        element.textContent = value;
      }
    });

    const rewardElements = {
      '.bronze-reward': window.ReferralConstants.BRONZE_BADGE_REWARD || 2500,
      '.silver-reward': window.ReferralConstants.SILVER_BADGE_REWARD || 5000,
      '.gold-reward': window.ReferralConstants.GOLD_BADGE_REWARD || 10000,
      '.platinum-reward': window.ReferralConstants.PLATINUM_BADGE_REWARD || 20000
    };

    Object.keys(rewardElements).forEach(function(selector) {
      const value = rewardElements[selector];
      const element = document.querySelector(selector);
      if (element) {
        element.textContent = value;
      }
    });
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
   */
  ReferralIntegration.prototype.loadInitialData = function() {
    const self = this;
    const maxRetries = 3;
    let retryCount = 0;

    function attemptLoad() {
      return new Promise(function(resolve, reject) {
        console.log('üìä [INTEGRATION] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        Promise.all([
          self.loadReferralStats(),
          self.loadBadgesData(),
          self.loadDirectBonusHistory()
        ])
        .then(function() {
          console.log('‚úÖ [INTEGRATION] –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
          resolve();
        })
        .catch(function(error) {
          if (retryCount < maxRetries) {
            retryCount++;
            console.warn(`‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (—Å–ø—Ä–æ–±–∞ ${retryCount}/${maxRetries}):`, error);
            setTimeout(function() {
              attemptLoad().then(resolve).catch(reject);
            }, 1000 * retryCount); // –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –∑ –∫–æ–∂–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
          } else {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
            self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
            reject(error);
          }
        });
      });
    }

    return attemptLoad();
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
   */
  ReferralIntegration.prototype.loadReferralStats = function() {
    const self = this;
    console.log('üîÑ [INTEGRATION] –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –∑ API –¥–ª—è ID:', this.userId);

    return window.ReferralAPI.fetchReferralStats(this.userId)
      .then(function(statsData) {
        console.log('‚úÖ [INTEGRATION] –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', JSON.stringify(statsData));
        self.updateReferralStatsDisplay(statsData);
        return statsData;
      })
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', error);
        console.error('‚ùå [INTEGRATION] Stack trace:', error.stack);

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        const fallbackData = {
          success: true,
          source: 'fallback_error',
          statistics: {
            totalReferrals: 0,
            activeReferrals: 0,
            conversionRate: 0
          },
          referrals: {
            level1: [],
            level2: []
          }
        };

        self.updateReferralStatsDisplay(fallbackData);
        return fallbackData;
      });
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –ø—Ä–æ –±–µ–π–¥–∂—ñ
   */
  ReferralIntegration.prototype.loadBadgesData = function() {
    const self = this;
    return this.store.dispatch(window.ReferralStore.fetchUserBadges(this.userId))
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤:', error);
        // –í—Å–µ –æ–¥–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ –ø—Ä–æ–º—ñ—Å—ñ–≤
        return {
          success: true,
          earnedBadges: [],
          availableBadges: [],
          badgesProgress: []
        };
      });
  };

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä—è–º–∏—Ö –±–æ–Ω—É—Å—ñ–≤
   */
  ReferralIntegration.prototype.loadDirectBonusHistory = function() {
    const self = this;
    return this.store.dispatch(window.ReferralStore.fetchDirectBonusHistory(this.userId))
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤:', error);
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        return {
          totalBonus: 0,
          history: []
        };
      });
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
   */
  ReferralIntegration.prototype.updateReferralStatsDisplay = function(statsData) {
    console.log('üìä [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsData);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ
    const stats = {
        totalReferrals: 0,
        activeReferrals: 0,
        inactiveReferrals: 0,
        conversionRate: "0"
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —ñ –¥–∂–µ—Ä–µ–ª–æ
    if (!statsData) {
        console.warn('‚ö†Ô∏è [INTEGRATION] –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    } else {
        console.log('üìä [INTEGRATION] –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö:', statsData.source || 'unknown');
    }

    // –û–±—Ä–æ–±–∫–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (statsData && statsData.statistics) {
        stats.totalReferrals = statsData.statistics.totalReferrals || 0;
        stats.activeReferrals = statsData.statistics.activeReferrals || 0;
        stats.inactiveReferrals = stats.totalReferrals - stats.activeReferrals;

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó
        if (stats.totalReferrals > 0) {
            stats.conversionRate = ((stats.activeReferrals / stats.totalReferrals) * 100).toFixed(1);
        }
    } else if (statsData && statsData.referrals) {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (Array.isArray(statsData.referrals.level1)) {
            stats.totalReferrals = statsData.referrals.level1.length;
            stats.activeReferrals = statsData.referrals.level1.filter(ref => ref.active).length;
            stats.inactiveReferrals = stats.totalReferrals - stats.activeReferrals;

            if (stats.totalReferrals > 0) {
                stats.conversionRate = ((stats.activeReferrals / stats.totalReferrals) * 100).toFixed(1);
            }
        }
    } else if (statsData && typeof statsData.totalReferrals === 'number') {
        // –ü—Ä—è–º–µ –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
        stats.totalReferrals = statsData.totalReferrals;
        stats.activeReferrals = statsData.activeReferrals || 0;
        stats.inactiveReferrals = stats.totalReferrals - stats.activeReferrals;
        stats.conversionRate = ((stats.activeReferrals / stats.totalReferrals) * 100).toFixed(1);
    }

    console.log('üìä [INTEGRATION] –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', stats);

    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    this.updateElement('.total-referrals-count', stats.totalReferrals);
    this.updateElement('.active-referrals-count', stats.activeReferrals);
    this.updateElement('.conversion-rate', stats.conversionRate + '%');

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    this.updateElement('#active-referrals-count', stats.activeReferrals);
    this.updateElement('#inactive-referrals-count', stats.inactiveReferrals);
    this.updateElement('#conversion-rate', stats.conversionRate + '%');

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
    this.updateBadgeProgress(stats.totalReferrals);
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
   */
  ReferralIntegration.prototype.updateBadgeProgress = function(referralsCount) {
    console.log('üîÑ [INTEGRATION] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –±–µ–π–¥–∂—ñ–≤ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', referralsCount);

    if (!window.ReferralServices || !window.ReferralServices.checkBadgesProgress) {
        console.warn('‚ö†Ô∏è [INTEGRATION] ReferralServices –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—É –±–µ–π–¥–∂—ñ–≤');
        return;
    }

    // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ —Ü–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç
    referralsCount = parseInt(referralsCount) || 0;

    const badgeProgress = window.ReferralServices.checkBadgesProgress(referralsCount);
    console.log('üìä [INTEGRATION] –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤:', badgeProgress);

    if (badgeProgress) {
        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–π–¥–∂—ñ–≤
        this.updateElement('#earned-badges-count', badgeProgress.earnedBadgesCount);
        this.updateElement('#remaining-badges-count', 4 - badgeProgress.earnedBadgesCount);

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–µ–π–¥–∂–∞
        if (badgeProgress.nextBadge) {
            const nextBadgeTitle = this.getBadgeTitle(badgeProgress.nextBadge.type);
            const nextBadgeTitleElement = document.querySelector('.next-badge-title');
            if (nextBadgeTitleElement) {
                nextBadgeTitleElement.textContent = '–ù–∞—Å—Ç—É–ø–Ω–∏–π –±–µ–π–¥–∂: ' + nextBadgeTitle;
            }

            const progressPercent = Math.round(badgeProgress.nextBadge.progress);
            const progressBar = document.querySelector('.next-badge-container .progress-fill');
            if (progressBar) {
                progressBar.style.width = progressPercent + '%';
            }

            const progressText = document.querySelector('.next-badge-container .progress-text');
            if (progressText) {
                progressText.textContent = progressPercent + '% (' + referralsCount + '/' + badgeProgress.nextBadge.threshold + ')';
            }

            const remainingText = document.querySelector('.next-badge-remaining');
            if (remainingText) {
                remainingText.textContent = '–ó–∞–ª–∏—à–∏–ª–æ—Å—å: ' + badgeProgress.nextBadge.remaining + ' —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤';
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∏ –±–µ–π–¥–∂—ñ–≤
        const self = this;
        badgeProgress.badgeProgress.forEach(function(badge) {
            self.updateBadgeItem(badge);
        });
    }
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞
   */
  ReferralIntegration.prototype.updateBadgeItem = function(badge) {
    const badgeClass = badge.type.toLowerCase();
    const badgeItems = document.querySelectorAll('.badge-item');
    let badgeItem = null;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞ –∑–∞ —ñ–∫–æ–Ω–∫–æ—é
    badgeItems.forEach(function(item) {
      if (item.querySelector('.' + badgeClass + '-icon')) {
        badgeItem = item;
      }
    });

    if (badgeItem) {
      const progressBar = badgeItem.querySelector('.badge-progress-fill');
      const progressText = badgeItem.querySelector('.badge-progress-text');
      const button = badgeItem.querySelector('.claim-badge-button');

      if (progressBar) {
        progressBar.style.width = badge.progress + '%';
      }

      if (progressText) {
        const current = Math.min(Math.round((badge.progress / 100) * badge.threshold), badge.threshold);
        progressText.textContent = Math.round(badge.progress) + '% (' + current + '/' + badge.threshold + ')';
      }

      if (button) {
        if (badge.isEligible) {
          button.textContent = '–û—Ç—Ä–∏–º–∞—Ç–∏';
          button.disabled = false;
          badgeItem.classList.remove('not-eligible');
          badgeItem.classList.add('eligible');
        } else {
          button.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
          button.disabled = true;
          badgeItem.classList.add('not-eligible');
          badgeItem.classList.remove('eligible');
        }
      }
    }
  };

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –±–µ–π–¥–∂–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
   */
  ReferralIntegration.prototype.getBadgeTitle = function(badgeType) {
    const titles = {
      'BRONZE': '–°–º—ñ–ª–∏–≤–µ—Ü—å',
      'SILVER': '–ù–æ–≤–∞—Ç–æ—Ä',
      'GOLD': '–õ–µ–≥–µ–Ω–¥–∞',
      'PLATINUM': '–í—ñ–∑—ñ–æ–Ω–µ—Ä'
    };
    return titles[badgeType] || badgeType;
  };

  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç–∞
   */
  ReferralIntegration.prototype.updateElement = function(selector, value) {
    const element = document.querySelector(selector);
    if (element) {
      element.textContent = value;
    }
  };

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
   */
  ReferralIntegration.prototype.setupEventListeners = function() {
    console.log('üéØ [INTEGRATION] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

    const self = this;

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂—ñ
    document.addEventListener('click', function(event) {
      if (event.target.classList.contains('claim-badge-button') && !event.target.disabled) {
        const badgeType = event.target.dataset.badge;
        if (badgeType) {
          self.handleClaimBadge(badgeType, event.target);
        }
      }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    const copyButton = document.querySelector('.copy-link-button');
    if (copyButton) {
      copyButton.addEventListener('click', function() {
        const linkDisplay = document.querySelector('.link-display');
        if (linkDisplay && linkDisplay.dataset.link) {
          try {
            navigator.clipboard.writeText(linkDisplay.dataset.link).then(function() {
              self.showSuccessMessage('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
            }).catch(function(err) {
              console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', err);
              // Fallback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
              self.fallbackCopyToClipboard(linkDisplay.dataset.link);
            });
          } catch (e) {
            console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', e);
            self.fallbackCopyToClipboard(linkDisplay.dataset.link);
          }
        }
      });
    }

    console.log('‚úÖ [INTEGRATION] –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  };

  /**
   * –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
   */
  ReferralIntegration.prototype.fallbackCopyToClipboard = function(text) {
    const self = this;

    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
      const textarea = document.createElement('textarea');
      textarea.value = text;

      // –•–æ–≤–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      textarea.style.position = 'fixed';
      textarea.style.top = '0';
      textarea.style.left = '0';
      textarea.style.width = '2em';
      textarea.style.height = '2em';
      textarea.style.padding = 0;
      textarea.style.border = 'none';
      textarea.style.outline = 'none';
      textarea.style.boxShadow = 'none';
      textarea.style.background = 'transparent';

      document.body.appendChild(textarea);
      textarea.focus();
      textarea.select();

      try {
        const successful = document.execCommand('copy');
        if (successful) {
          self.showSuccessMessage('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
        } else {
          self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
        }
      } catch (err) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ execCommand:', err);
        self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
      }

      document.body.removeChild(textarea);
    } catch (e) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ fallbackCopyToClipboard:', e);
      self.showErrorMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
    }
  };

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂
   */
  ReferralIntegration.prototype.handleClaimBadge = function(badgeType, button) {
    const self = this;

    // –î—ñ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
    button.disabled = true;
    button.textContent = '–û—Ç—Ä–∏–º—É—î–º–æ...';

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –¥—ñ—é
    this.store.dispatch(window.ReferralStore.claimBadgeReward(this.userId, badgeType))
      .then(function(result) {
        if (result.success) {
          // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
          self.showSuccessMessage('–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –±–µ–π–¥–∂ "' + self.getBadgeTitle(badgeType) + '" –æ—Ç—Ä–∏–º–∞–Ω–∞!');

          // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          button.textContent = '–û—Ç—Ä–∏–º–∞–Ω–æ';
          button.classList.add('claimed');

          // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
          return Promise.all([
            self.loadBadgesData(),
            self.loadReferralStats()
          ]);
        } else {
          throw new Error(result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
        }
      })
      .catch(function(error) {
        console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂:', error);
        self.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
        button.disabled = false;
        button.textContent = '–û—Ç—Ä–∏–º–∞—Ç–∏';
      });
  };

  /**
   * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
   */
  ReferralIntegration.prototype.showSuccessMessage = function(message) {
    const toast = document.getElementById('copy-toast');
    if (toast) {
      toast.textContent = message;
      toast.classList.add('show', 'success');
      setTimeout(function() {
        toast.classList.remove('show', 'success');
      }, 3000);
    }
  };

  /**
   * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
   */
  ReferralIntegration.prototype.showErrorMessage = function(message) {
    const toast = document.getElementById('copy-toast');
    if (toast) {
      toast.textContent = message;
      toast.classList.add('show', 'error');
      setTimeout(function() {
        toast.classList.remove('show', 'error');
      }, 3000);
    }
  };

  /**
   * –û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
   */
  ReferralIntegration.prototype.handleStateChange = function() {
    const state = this.store.getState();

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if (state.referralLink && state.referralLink.link) {
      this.updateReferralLinkDisplay(state.referralLink.link);
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
    if (state.directBonus && state.directBonus.history) {
      this.updateBonusHistory(state.directBonus.history);
    }
  };

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
   */
  ReferralIntegration.prototype.updateBonusHistory = function(history) {
    const container = document.querySelector('.bonus-history-items');
    if (!container) return;

    // –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ history —Ü–µ –º–∞—Å–∏–≤
    if (!Array.isArray(history)) {
      console.warn('‚ö†Ô∏è [INTEGRATION] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤:', history);
      history = [];
    }

    container.innerHTML = '';

    if (history.length === 0) {
      container.innerHTML = '<p style="color: #888; text-align: center;">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤</p>';
      return;
    }

    history.slice(0, 5).forEach(function(item) {
      const historyItem = document.createElement('div');
      historyItem.className = 'bonus-history-item';

      let date;
      try {
        date = new Date(item.timestamp).toLocaleDateString('uk-UA');
      } catch (e) {
        date = '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞';
      }

      historyItem.innerHTML = [
        '<div class="bonus-history-icon"></div>',
        '<div class="bonus-history-details">',
        '<div class="bonus-history-title">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å</div>',
        '<div class="bonus-history-amount">+' + (item.bonusAmount || window.ReferralConstants.DIRECT_BONUS_AMOUNT) + ' winix</div>',
        '<div class="bonus-history-date">' + date + '</div>',
        '</div>'
      ].join('');

      container.appendChild(historyItem);
    });
  };

  return ReferralIntegration;
})();

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
window.initReferralSystem = function() {
  return new Promise(function(resolve, reject) {
    try {
      console.log('üé¨ [INTEGRATION] –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏...');

      const integration = new window.ReferralIntegration();
      integration.init()
        .then(function() {
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
          window.ReferralIntegrationInstance = integration;

          console.log('üèÅ [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
          resolve(integration);
        })
        .catch(function(error) {
          console.error('üí• [INTEGRATION] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
          reject(error);
        });
    } catch (error) {
      console.error('üí• [INTEGRATION] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
      reject(error);
    }
  });
};