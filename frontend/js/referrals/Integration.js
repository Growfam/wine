// referrals-integration.js
/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –∑ DOM
 */

class ReferralIntegration {
  constructor() {
    this.userId = null;
    this.store = null;
    this.isInitialized = false;
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
   */
  async init() {
    try {
      console.log('üöÄ [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏...');

      // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      this.userId = this.getUserId();
      if (!this.userId) {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
      }

      console.log('‚úÖ [INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', this.userId);

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–æ–≤–∏—â–µ
      this.initStore();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ UI
      await this.initUI();

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
      await this.loadInitialData();

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
      this.setupEventListeners();

      this.isInitialized = true;
      console.log('üéâ [INTEGRATION] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!');

    } catch (error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
   */
  getUserId() {
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑ Telegram
    if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
      return window.Telegram.WebApp.initDataUnsafe.user.id.toString();
    }

    // –ü–æ—Ç—ñ–º –∑ localStorage
    const storedId = localStorage.getItem('telegram_user_id') || localStorage.getItem('user_id');
    if (storedId) {
      return storedId;
    }

    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID
    console.warn('[INTEGRATION] ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π');
    return 'test_user_123';
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Redux —Å—Ö–æ–≤–∏—â–µ
   */
  initStore() {
    console.log('üîß [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ö–æ–≤–∏—â–∞...');

    try {
      this.store = window.ReferralStore.configureReferralStore({
        referralLink: window.ReferralStore.referralLinkReducer,
        directBonus: window.ReferralStore.directBonusReducer,
        referralLevels: window.ReferralStore.referralLevelsReducer,
        badges: window.ReferralStore.badgeReducer
      });

      // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
      this.store.subscribe(() => {
        this.handleStateChange();
      });

      console.log('‚úÖ [INTEGRATION] –°—Ö–æ–≤–∏—â–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ö–æ–≤–∏—â–∞:', error);
      throw error;
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async initUI() {
    console.log('üé® [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI...');

    try {
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
      this.setUserIdInHeader();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      await this.initReferralLink();

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
      this.initRewardsDisplay();

      console.log('‚úÖ [INTEGRATION] UI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó UI:', error);
      throw error;
    }
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
   */
  setUserIdInHeader() {
    const userIdElements = document.querySelectorAll('.user-id-value, #header-user-id');
    userIdElements.forEach(element => {
      if (element) {
        element.textContent = this.userId;
      }
    });
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
   */
  async initReferralLink() {
    try {
      console.log('üîó [INTEGRATION] –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è...');

      // –î–∏—Å–ø–∞—Ç—á–∏–º–æ –¥—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      await this.store.dispatch(window.ReferralStore.fetchReferralLink(this.userId));

    } catch (error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', error);
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ fallback –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      this.updateReferralLinkDisplay(`Winix/referral/${this.userId}`);
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
   */
  updateReferralLinkDisplay(link) {
    const linkDisplay = document.querySelector('.link-display');
    if (linkDisplay) {
      linkDisplay.textContent = link;
      linkDisplay.dataset.link = link;
    }
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
   */
  initRewardsDisplay() {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
    const bonusAmountElements = document.querySelectorAll('.bonus-amount');
    bonusAmountElements.forEach(element => {
      element.textContent = window.DIRECT_BONUS_AMOUNT || '50';
    });

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
    this.updateBadgeThresholds();
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –ø–æ—Ä–æ–≥–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
   */
  updateBadgeThresholds() {
    const thresholdElements = {
      '.bronze-threshold': window.BRONZE_BADGE_THRESHOLD || 25,
      '.silver-threshold': window.SILVER_BADGE_THRESHOLD || 50,
      '.gold-threshold': window.GOLD_BADGE_THRESHOLD || 100,
      '.platinum-threshold': window.PLATINUM_BADGE_THRESHOLD || 500
    };

    Object.entries(thresholdElements).forEach(([selector, value]) => {
      const element = document.querySelector(selector);
      if (element) {
        element.textContent = value;
      }
    });

    const rewardElements = {
      '.bronze-reward': window.BRONZE_BADGE_REWARD || 2500,
      '.silver-reward': window.SILVER_BADGE_REWARD || 5000,
      '.gold-reward': window.GOLD_BADGE_REWARD || 10000,
      '.platinum-reward': window.PLATINUM_BADGE_REWARD || 20000
    };

    Object.entries(rewardElements).forEach(([selector, value]) => {
      const element = document.querySelector(selector);
      if (element) {
        element.textContent = value;
      }
    });
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
   */
  async loadInitialData() {
    console.log('üìä [INTEGRATION] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...');

    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
      await Promise.all([
        this.loadReferralStats(),
        this.loadBadgesData(),
        this.loadDirectBonusHistory()
      ]);

      console.log('‚úÖ [INTEGRATION] –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå [INTEGRATION] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
      // –ù–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é, –ø–æ–∫–∞–∑—É—î–º–æ –±–∞–∑–æ–≤–∏–π UI
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
   */
  async loadReferralStats() {
    try {
      const statsData = await window.ReferralAPI.fetchReferralStats(this.userId);
      this.updateReferralStatsDisplay(statsData);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –ø—Ä–æ –±–µ–π–¥–∂—ñ
   */
  async loadBadgesData() {
    try {
      await this.store.dispatch(window.ReferralStore.fetchUserBadges(this.userId));
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤:', error);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä—è–º–∏—Ö –±–æ–Ω—É—Å—ñ–≤
   */
  async loadDirectBonusHistory() {
    try {
      await this.store.dispatch(window.ReferralStore.fetchDirectBonusHistory(this.userId));
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤:', error);
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
   */
  updateReferralStatsDisplay(statsData) {
    if (!statsData || !statsData.statistics) return;

    const stats = statsData.statistics;

    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    this.updateElement('.total-referrals-count', stats.totalReferralsCount || 0);
    this.updateElement('.active-referrals-count', stats.activeReferralsCount || 0);

    const conversionRate = stats.totalReferralsCount > 0
      ? ((stats.activeReferralsCount / stats.totalReferralsCount) * 100).toFixed(1)
      : '0';
    this.updateElement('.conversion-rate', `${conversionRate}%`);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    this.updateElement('#active-referrals-count', stats.activeReferralsCount || 0);
    this.updateElement('#inactive-referrals-count', (stats.totalReferralsCount || 0) - (stats.activeReferralsCount || 0));
    this.updateElement('#conversion-rate', `${conversionRate}%`);

    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
    this.updateBadgeProgress(stats.totalReferralsCount || 0);
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥—Ä–µ—Å –±–µ–π–¥–∂—ñ–≤
   */
  updateBadgeProgress(referralsCount) {
    const badgeProgress = window.ReferralServices.checkBadgesProgress(referralsCount);

    if (badgeProgress) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–π–¥–∂—ñ–≤
      this.updateElement('#earned-badges-count', badgeProgress.earnedBadgesCount);
      this.updateElement('#remaining-badges-count', 4 - badgeProgress.earnedBadgesCount);

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–µ–π–¥–∂–∞
      if (badgeProgress.nextBadge) {
        const nextBadgeTitle = this.getBadgeTitle(badgeProgress.nextBadge.type);
        document.querySelector('.next-badge-title').textContent = `–ù–∞—Å—Ç—É–ø–Ω–∏–π –±–µ–π–¥–∂: ${nextBadgeTitle}`;

        const progressPercent = Math.round(badgeProgress.nextBadge.progress);
        const progressBar = document.querySelector('.next-badge-container .progress-fill');
        if (progressBar) {
          progressBar.style.width = `${progressPercent}%`;
        }

        const progressText = document.querySelector('.next-badge-container .progress-text');
        if (progressText) {
          progressText.textContent = `${progressPercent}% (${referralsCount}/${badgeProgress.nextBadge.threshold})`;
        }

        const remainingText = document.querySelector('.next-badge-remaining');
        if (remainingText) {
          remainingText.textContent = `–ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${badgeProgress.nextBadge.remaining} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤`;
        }
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∏ –±–µ–π–¥–∂—ñ–≤
      badgeProgress.badgeProgress.forEach(badge => {
        this.updateBadgeItem(badge);
      });
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞
   */
  updateBadgeItem(badge) {
    const badgeClass = badge.type.toLowerCase();
    const badgeItem = document.querySelector(`.badge-item:has(.${badgeClass}-icon)`);

    if (badgeItem) {
      const progressBar = badgeItem.querySelector('.badge-progress-fill');
      const progressText = badgeItem.querySelector('.badge-progress-text');
      const button = badgeItem.querySelector('.claim-badge-button');

      if (progressBar) {
        progressBar.style.width = `${badge.progress}%`;
      }

      if (progressText) {
        const current = Math.round((badge.progress / 100) * badge.threshold);
        progressText.textContent = `${Math.round(badge.progress)}% (${current}/${badge.threshold})`;
      }

      if (button) {
        if (badge.isEligible) {
          button.textContent = '–û—Ç—Ä–∏–º–∞—Ç–∏';
          button.disabled = false;
          badgeItem.classList.remove('not-eligible');
          badgeItem.classList.add('eligible');
        } else {
          button.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
          button.disabled = true;
          badgeItem.classList.add('not-eligible');
          badgeItem.classList.remove('eligible');
        }
      }
    }
  }

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –±–µ–π–¥–∂–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
   */
  getBadgeTitle(badgeType) {
    const titles = {
      'BRONZE': '–°–º—ñ–ª–∏–≤–µ—Ü—å',
      'SILVER': '–ù–æ–≤–∞—Ç–æ—Ä',
      'GOLD': '–õ–µ–≥–µ–Ω–¥–∞',
      'PLATINUM': '–í—ñ–∑—ñ–æ–Ω–µ—Ä'
    };
    return titles[badgeType] || badgeType;
  }

  /**
   * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç–∞
   */
  updateElement(selector, value) {
    const element = document.querySelector(selector);
    if (element) {
      element.textContent = value;
    }
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
   */
  setupEventListeners() {
    console.log('üéØ [INTEGRATION] –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂—ñ
    document.addEventListener('click', (event) => {
      if (event.target.classList.contains('claim-badge-button') && !event.target.disabled) {
        const badgeType = event.target.dataset.badge;
        if (badgeType) {
          this.handleClaimBadge(badgeType, event.target);
        }
      }
    });

    console.log('‚úÖ [INTEGRATION] –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  /**
   * –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂
   */
  async handleClaimBadge(badgeType, button) {
    try {
      // –î—ñ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
      button.disabled = true;
      button.textContent = '–û—Ç—Ä–∏–º—É—î–º–æ...';

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –¥—ñ—é
      const result = await this.store.dispatch(
        window.ReferralStore.claimBadgeReward(this.userId, badgeType)
      );

      if (result.success) {
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        this.showSuccessMessage(`–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –±–µ–π–¥–∂ "${this.getBadgeTitle(badgeType)}" –æ—Ç—Ä–∏–º–∞–Ω–∞!`);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        button.textContent = '–û—Ç—Ä–∏–º–∞–Ω–æ';
        button.classList.add('claimed');

        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
        await this.loadBadgesData();
        await this.loadReferralStats();
      } else {
        throw new Error(result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂:', error);
      this.showErrorMessage('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');

      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
      button.disabled = false;
      button.textContent = '–û—Ç—Ä–∏–º–∞—Ç–∏';
    }
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
   */
  showSuccessMessage(message) {
    const toast = document.getElementById('copy-toast');
    if (toast) {
      toast.textContent = message;
      toast.classList.add('show', 'success');
      setTimeout(() => {
        toast.classList.remove('show', 'success');
      }, 3000);
    }
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
   */
  showErrorMessage(message) {
    const toast = document.getElementById('copy-toast');
    if (toast) {
      toast.textContent = message;
      toast.classList.add('show', 'error');
      setTimeout(() => {
        toast.classList.remove('show', 'error');
      }, 3000);
    }
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
   */
  handleStateChange() {
    const state = this.store.getState();

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if (state.referralLink?.link) {
      this.updateReferralLinkDisplay(state.referralLink.link);
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
    if (state.directBonus?.history) {
      this.updateBonusHistory(state.directBonus.history);
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
   */
  updateBonusHistory(history) {
    const container = document.querySelector('.bonus-history-items');
    if (!container || !Array.isArray(history)) return;

    container.innerHTML = '';

    if (history.length === 0) {
      container.innerHTML = '<p style="color: #888; text-align: center;">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤</p>';
      return;
    }

    history.slice(0, 5).forEach(item => {
      const historyItem = document.createElement('div');
      historyItem.className = 'bonus-history-item';

      const date = new Date(item.timestamp).toLocaleDateString('uk-UA');

      historyItem.innerHTML = `
        <div class="bonus-history-icon"></div>
        <div class="bonus-history-details">
          <div class="bonus-history-title">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å</div>
          <div class="bonus-history-amount">+${item.bonusAmount || window.DIRECT_BONUS_AMOUNT} winix</div>
          <div class="bonus-history-date">${date}</div>
        </div>
      `;

      container.appendChild(historyItem);
    });
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
export const initReferralSystem = async () => {
  try {
    console.log('üé¨ [INTEGRATION] –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏...');

    const integration = new ReferralIntegration();
    await integration.init();

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    window.ReferralIntegration = integration;

    console.log('üèÅ [INTEGRATION] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
    return integration;
  } catch (error) {
    console.error('üí• [INTEGRATION] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    throw error;
  }
};