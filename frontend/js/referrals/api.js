// api.js - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –±–µ–∑ fallback –¥–∞–Ω–∏—Ö
/**
 * API —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 */
window.ReferralAPI = (function() {
  'use strict';

  // –ë–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API
  const API_CONFIG = {
    baseUrl: '',  // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å /api, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤–∂–µ –≤–∫–ª—é—á–µ–Ω–∏–π –≤ –º–∞—Ä—à—Ä—É—Ç–∏
    timeout: 15000, // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç
    retryAttempts: 3,
    retryDelay: 1000
  };

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
  const DEBUG = true; // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è —Ä–µ–∂–∏–º—É –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WinixAPI, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
  if (typeof window.WinixAPI === 'undefined') {
    console.log('üì¢ [API] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è WinixAPI —è–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–∞–≥–ª—É—à–∫–∏');
    window.WinixAPI = {
      apiRequest: async function(endpoint, method, data, options) {
        console.log('üîÑ [API] –í–∏–∫–ª–∏–∫ apiRequest –∑–∞–≥–ª—É—à–∫–∏:', endpoint);
        return { status: 'success', data: {} };
      },
      getUserId: function() {
        const userId = localStorage.getItem('telegram_user_id') ||
                       localStorage.getItem('user_id') ||
                       null;
        console.log('üîç [API] getUserId –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î:', userId);
        return userId;
      },
      refreshToken: async function() {
        console.log('üîÑ [API] –í–∏–∫–ª–∏–∫ refreshToken –∑–∞–≥–ª—É—à–∫–∏');
        return true;
      }
    };
  }

  // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  function getAuthToken() {
    return localStorage.getItem('auth_token') ||
           localStorage.getItem('jwt_token') ||
           localStorage.getItem('token');
  }

  // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  function getUserId() {
    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
      const apiId = window.WinixAPI.getUserId();
      if (apiId && apiId !== 'undefined' && apiId !== 'null') {
        return apiId;
      }
    }

    return localStorage.getItem('telegram_user_id') ||
           localStorage.getItem('user_id');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API
  function validateAndFormatResponse(response, endpoint) {
    if (!response) {
      console.error(`‚ùå [API] –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ${endpoint}`);
      throw new Error('–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    // –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if (typeof response !== 'object') {
      console.error(`‚ùå [API] –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ ${endpoint}:`, response);
      try {
        // –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —Ä—è–¥–æ–∫ —è–∫ JSON
        const parsed = JSON.parse(response);
        return validateAndFormatResponse(parsed, endpoint);
      } catch (e) {
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (response.error || response.status === 'error') {
      throw new Error(response.message || response.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
    if (endpoint.includes('/referrals/stats/')) {
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
      if (!response.referrals) {
        console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ referrals –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ stats API');
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      if (!response.statistics) {
        console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ statistics –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ stats API');
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    }

    if (endpoint.includes('/referrals/activity/')) {
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
      if (!response.level1Activity && !response.level2Activity) {
        console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ activity API');
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
      }
    }

    return response;
  }

  // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
  function apiRequest(url, options) {
    options = options || {};
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, API_CONFIG.timeout);

    // –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ–π–Ω–∏–π —Ç–æ–∫–µ–Ω —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const token = getAuthToken();
    const userId = getUserId();

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    };

    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (token) {
      headers['Authorization'] = 'Bearer ' + token;
    }

    // –î–æ–¥–∞—î–º–æ Telegram User ID –∑–∞–≥–æ–ª–æ–≤–æ–∫, —è–∫—â–æ ID –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (userId) {
      headers['X-Telegram-User-Id'] = userId;
    }

    // –û–±'—î–¥–Ω—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –æ–ø—Ü—ñ—è–º–∏ –∑–∞–ø–∏—Ç—É
    const fetchOptions = Object.assign({
      signal: controller.signal,
      headers: headers
    }, options);

    console.log('üåê [API REQUEST]:', url, {
      method: fetchOptions.method || 'GET',
      hasAuth: !!token,
      userId: userId
    });

    // –õ–æ–≥—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    if (DEBUG) {
      console.debug('Request headers:', fetchOptions.headers);
    }

    let retryCount = 0;

    function executeRequest() {
      // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä timestamp –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
      const urlWithTimestamp = url.includes('?')
        ? url + '&t=' + Date.now()
        : url + '?t=' + Date.now();

      return fetch(urlWithTimestamp, fetchOptions)
        .then(function(response) {
          clearTimeout(timeoutId);

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          if (!response.ok) {
            // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
            if (response.status === 401 && retryCount < API_CONFIG.retryAttempts) {
              return refreshTokenAndRetry();
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
            const error = new Error('HTTP ' + response.status + ': ' + response.statusText);
            error.status = response.status;
            error.statusText = response.statusText;
            throw error;
          }

          // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          return response.json().catch(function(err) {
            console.error('‚ùå [API] –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON');
            throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
          });
        })
        .then(function(data) {
          // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞ –≤–∞–ª—ñ–¥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          return validateAndFormatResponse(data, url);
        })
        .catch(function(error) {
          clearTimeout(timeoutId);

          // –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ –º–∏ –≤–∂–µ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤
          if (error.status !== 401 || retryCount >= API_CONFIG.retryAttempts) {
            // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫
            if (error.name === 'AbortError') {
              throw new Error('–ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (' + API_CONFIG.timeout + '–º—Å)');
            }

            if (error.status === 404) {
              throw new Error('API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ' + url);
            }

            if (error.status >= 500) {
              throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (' + error.status + ')');
            }

            throw error;
          }

          // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
          return refreshTokenAndRetry();
        });
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    function refreshTokenAndRetry() {
      retryCount++;
      console.warn(`‚ö†Ô∏è [API] –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (—Å–ø—Ä–æ–±–∞ ${retryCount}/${API_CONFIG.retryAttempts})...`);

      // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
      if (window.WinixAPI && typeof window.WinixAPI.refreshToken === 'function') {
        return window.WinixAPI.refreshToken()
          .then(function(result) {
            console.log('‚úÖ [API] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WinixAPI');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            const newToken = getAuthToken();
            if (newToken) {
              fetchOptions.headers['Authorization'] = 'Bearer ' + newToken;
            }

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            return executeRequest();
          })
          .catch(function(err) {
            console.warn('‚ö†Ô∏è [API] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ WinixAPI:', err);
            // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
            return standardRefreshToken();
          });
      } else {
        // –Ø–∫—â–æ WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥
        return standardRefreshToken();
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
      function standardRefreshToken() {
        return fetch('/api/auth/refresh-token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': userId || ''
          },
          body: JSON.stringify({ telegram_id: userId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.token || data.data && data.data.token) {
            const newToken = data.token || data.data.token;
            localStorage.setItem('auth_token', newToken);
            console.log('‚úÖ [API] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');

            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
            fetchOptions.headers['Authorization'] = 'Bearer ' + newToken;

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            return executeRequest();
          } else {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
          }
        })
        .catch(err => {
          console.error('‚ùå [API] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', err);
          throw err;
        });
      }
    }

    return executeRequest();
  }

  // –û—Å–Ω–æ–≤–Ω—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  function fetchUserBadges(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –±–µ–π–¥–∂—ñ'));
    }

    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ userId —Ü–µ —á–∏—Å–ª–æ
    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.apiRequest === 'function') {
      return window.WinixAPI.apiRequest(`badges/${numericUserId}`, 'GET')
        .then(response => {
          if (response.status === 'success' && response.data) {
            return response.data;
          }

          // –Ø–∫—â–æ WinixAPI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç
          return apiRequest(API_CONFIG.baseUrl + '/api/badges/' + numericUserId);
        })
        .catch(error => {
          console.warn('‚ö†Ô∏è [API] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ —á–µ—Ä–µ–∑ WinixAPI:', error);
          // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
          return apiRequest(API_CONFIG.baseUrl + '/api/badges/' + numericUserId);
        });
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/badges/' + numericUserId);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–π–¥–∂—ñ–≤
  function checkBadges(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–π–¥–∂—ñ–≤'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/badges/check/' + numericUserId, {
      method: 'POST'
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂
  function claimBadgeReward(userId, badgeType) {
    if (!userId || !badgeType) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–∏–ø –±–µ–π–¥–∂–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/badges/claim', {
      method: 'POST',
      body: JSON.stringify({
        user_id: numericUserId,
        badge_type: badgeType
      })
    })
    .then(function(data) {
      // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
      try {
        if (data.success && window.updateUserBalanceDisplay && data.reward_amount) {
          const currentBalance = parseFloat(localStorage.getItem('winix_balance') || '0');
          window.updateUserBalanceDisplay(currentBalance + data.reward_amount, true);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è [API] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
      }
      return data;
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
  function fetchReferralLink(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.apiRequest === 'function') {
      return window.WinixAPI.apiRequest(`referrals/link/${numericUserId}`, 'GET')
        .then(response => {
          if (response.status === 'success' && response.data && response.data.link) {
            return response.data.link;
          }

          // –Ø–∫—â–æ WinixAPI —É—Å–ø—ñ—à–Ω–∏–π, –∞–ª–µ —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
          if (response.status === 'success' && response.data) {
            // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –¥–∞–Ω–∏—Ö
            if (typeof response.data === 'string' && response.data.includes('t.me')) {
              return response.data;
            }

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É
            return formatReferralUrl(numericUserId);
          }

          // –Ø–∫—â–æ WinixAPI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç
          return apiRequest(API_CONFIG.baseUrl + '/api/referrals/link/' + numericUserId)
            .then(data => {
              if (data && data.link) {
                return data.link;
              }

              // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –≤—Ä—É—á–Ω—É
              return formatReferralUrl(numericUserId);
            });
        })
        .catch(error => {
          console.error('‚ùå [API] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ WinixAPI:', error);
          // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –≤–∏–∫–∏–¥–∞—î–º–æ —ó—ó –¥–∞–ª—ñ
          throw error;
        });
    }

    // –Ø–∫—â–æ WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Ç
    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/link/' + numericUserId)
      .then(data => {
        if (data && data.link) {
          return data.link;
        }

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –≤—Ä—É—á–Ω—É
        return formatReferralUrl(numericUserId);
      });
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
  function formatReferralUrl(userId) {
    if (!userId) {
      return null;
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return null;
    }

    return 'https://t.me/WINIX_Official_bot?start=' + numericUserId;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralStats(userId) {
    console.log('üìä [API] –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –¥–ª—è ID:', userId);
    if (!userId) {
        return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
        return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.apiRequest === 'function') {
      return window.WinixAPI.apiRequest(`referrals/stats/${numericUserId}`, 'GET')
        .then(response => {
          if (response.status === 'success' && response.data) {
            response.data.source = 'winix_api';
            console.log('‚úÖ [API] –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –∑ WinixAPI:', JSON.stringify(response.data));
            return validateAndFormatResponse(response.data, 'stats_winix_api');
          }

          // –Ø–∫—â–æ WinixAPI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç
          return sendStatsRequest();
        })
        .catch(error => {
          console.error('‚ùå [API] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ WinixAPI:', error);
          // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–æ–±—Ä–∞—Å—É—î–º–æ —ó—ó –¥–∞–ª—ñ
          throw error;
        });
    } else {
      // –Ø–∫—â–æ WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Ç
      return sendStatsRequest();
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
    function sendStatsRequest() {
      return apiRequest(API_CONFIG.baseUrl + '/api/referrals/stats/' + numericUserId)
        .then(function(response) {
            console.log('‚úÖ [API] –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', JSON.stringify(response));

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∞–ª—ñ–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
            return validateAndFormatResponse(response, `/api/referrals/stats/${numericUserId}`);
        })
        .catch(function(error) {
            console.error('‚ùå [API] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', error);
            console.error('‚ùå [API] Stack trace:', error.stack);

            // –ü—Ä–æ–±—Ä–∞—Å—É—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
            throw error;
        });
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤ –≤—ñ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralEarnings(userId, options) {
    options = options || {};
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/earnings/' + numericUserId, {
      method: 'POST',
      body: JSON.stringify(options)
    })
    .then(response => validateAndFormatResponse(response, `/api/referrals/earnings/${numericUserId}`));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤ –≤—ñ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralDetailedEarnings(referralId, options) {
    options = options || {};
    if (!referralId) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/earnings/detailed/' + numericReferralId;
    if (options.startDate || options.endDate) {
      const params = new URLSearchParams();
      if (options.startDate) params.append('startDate', options.startDate);
      if (options.endDate) params.append('endDate', options.endDate);
      url += '?' + params.toString();
    }

    return apiRequest(url)
      .then(response => validateAndFormatResponse(response, url));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏
  function fetchEarningsSummary(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/earnings/summary/' + numericUserId)
      .then(response => validateAndFormatResponse(response, `/api/referrals/earnings/summary/${numericUserId}`));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralActivity(userId, options) {
    options = options || {};
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/activity/' + numericUserId, {
      method: 'POST',
      body: JSON.stringify(options)
    })
    .then(response => validateAndFormatResponse(response, `/api/referrals/activity/${numericUserId}`));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralDetailedActivity(referralId, options) {
    options = options || {};
    if (!referralId) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/activity/detailed/' + numericReferralId;
    if (options.startDate || options.endDate) {
      const params = new URLSearchParams();
      if (options.startDate) params.append('startDate', options.startDate);
      if (options.endDate) params.append('endDate', options.endDate);
      url += '?' + params.toString();
    }

    return apiRequest(url)
      .then(response => validateAndFormatResponse(response, url));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
  function fetchActivitySummary(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/activity/summary/' + numericUserId)
      .then(response => validateAndFormatResponse(response, `/api/referrals/activity/summary/${numericUserId}`));
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function updateReferralActivity(userId, drawsParticipation, invitedReferrals) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/activity/update', {
      method: 'POST',
      body: JSON.stringify({
        user_id: numericUserId,
        draws_participation: drawsParticipation,
        invited_referrals: invitedReferrals
      })
    })
    .then(response => validateAndFormatResponse(response, '/api/referrals/activity/update'));
  }

  // –†—É—á–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function manuallyActivateReferral(userId, adminId) {
    if (!userId || !adminId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó'));
    }

    const numericUserId = parseInt(userId);
    const numericAdminId = parseInt(adminId);
    if (isNaN(numericUserId) || isNaN(numericAdminId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/activity/activate', {
      method: 'POST',
      body: JSON.stringify({
        user_id: numericUserId,
        admin_id: numericAdminId
      })
    })
    .then(response => validateAndFormatResponse(response, '/api/referrals/activity/activate'));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  function fetchUserTasks(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/tasks/' + numericUserId)
      .then(response => validateAndFormatResponse(response, `/api/tasks/${numericUserId}`));
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
  function updateTasks(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/tasks/update/' + numericUserId, {
      method: 'POST'
    })
    .then(response => validateAndFormatResponse(response, `/api/tasks/update/${numericUserId}`));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
  function claimTaskReward(userId, taskType) {
    if (!userId || !taskType) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/tasks/claim', {
      method: 'POST',
      body: JSON.stringify({
        user_id: numericUserId,
        task_type: taskType
      })
    })
    .then(function(data) {
      // –í–∞–ª—ñ–¥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      data = validateAndFormatResponse(data, '/api/tasks/claim');

      // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
      try {
        if (data.success && window.updateUserBalanceDisplay && data.reward_amount) {
          const currentBalance = parseFloat(localStorage.getItem('winix_balance') || '0');
          window.updateUserBalanceDisplay(currentBalance + data.reward_amount, true);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è [API] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
      }
      return data;
    });
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function registerReferral(referrerId, userId) {
    if (!referrerId) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericReferrerId = parseInt(referrerId);
    const numericUserId = parseInt(userId);

    if (isNaN(numericReferrerId) || isNaN(numericUserId)) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏'));
    }

    if (numericReferrerId === numericUserId) {
      return Promise.reject(new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–æ–∂–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–µ–±–µ'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/register', {
      method: 'POST',
      body: JSON.stringify({
        referrer_id: numericReferrerId,
        referee_id: numericUserId
      })
    })
    .then(response => validateAndFormatResponse(response, '/api/referrals/register'));
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
  function checkIfReferral(userId) {
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return fetchReferralStats(numericUserId)
      .then(function(data) {
        return !!(data && data.referrals);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralHistory(userId, options) {
    options = options || {};
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/' + numericUserId;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }
    if (options.limit) {
      queryParams.append('limit', options.limit.toString());
    }
    if (options.type) {
      queryParams.append('type', options.type);
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    return apiRequest(url)
      .then(response => validateAndFormatResponse(response, url));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function fetchReferralDraws(referralId) {
    if (!referralId) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/draws/' + numericReferralId)
      .then(response => validateAndFormatResponse(response, `/api/referrals/draws/${numericReferralId}`));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
  function fetchDrawDetails(referralId, drawId) {
    if (!referralId || !drawId) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
    }

    const numericReferralId = parseInt(realId);
    const numericDrawId = parseInt(drawId);
    if (isNaN(numericReferralId) || isNaN(numericDrawId)) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/draws/details/' + numericReferralId + '/' + numericDrawId)
      .then(response => validateAndFormatResponse(response, `/api/referrals/draws/details/${numericReferralId}/${numericDrawId}`));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
  function fetchDrawsParticipationStats(ownerId, options) {
    options = options || {};
    if (!ownerId) {
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericOwnerId = parseInt(ownerId);
    if (isNaN(numericOwnerId)) {
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/draws/stats/' + numericOwnerId;
    const params = new URLSearchParams();

    if (options.startDate) {
      params.append('startDate', options.startDate instanceof Date
        ? options.startDate.toISOString()
        : options.startDate);
    }

    if (options.endDate) {
      params.append('endDate', options.endDate instanceof Date
        ? options.endDate.toISOString()
        : options.endDate);
    }

    if (params.toString()) {
      url += '?' + params.toString();
    }

    return apiRequest(url)
      .then(response => validateAndFormatResponse(response, url));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  function fetchTotalDrawsCount(ownerId) {
    if (!ownerId) {
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericOwnerId = parseInt(ownerId);
    if (isNaN(numericOwnerId)) {
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/draws/count/' + numericOwnerId)
      .then(function(data) {
        // –í–∞–ª—ñ–¥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        data = validateAndFormatResponse(data, `/api/referrals/draws/count/${numericOwnerId}`);
        return data.totalDrawsCount || 0;
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  function fetchMostActiveInDraws(ownerId, limit) {
    limit = limit || 10;
    if (!ownerId) {
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericOwnerId = parseInt(ownerId);
    if (isNaN(numericOwnerId)) {
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/draws/active/' + numericOwnerId + '?limit=' + limit)
      .then(response => validateAndFormatResponse(response, `/api/referrals/draws/active/${numericOwnerId}?limit=${limit}`));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–¥—ñ–π —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralEventHistory(userId, eventType, options) {
    options = options || {};
    if (!userId || !eventType) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/event/' + numericUserId + '/' + eventType;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }
    if (options.limit) {
      queryParams.append('limit', options.limit.toString());
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    return apiRequest(url)
      .then(response => validateAndFormatResponse(response, url));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralActivitySummary(userId, options) {
    options = options || {};
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/summary/' + numericUserId;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    return apiRequest(url)
      .then(response => validateAndFormatResponse(response, url));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralActivityTrend(userId, period, options) {
    period = period || 'monthly';
    options = options || {};
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/trend/' + numericUserId + '/' + period;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }
    if (options.limit) {
      queryParams.append('limit', options.limit.toString());
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    return apiRequest(url)
      .then(response => validateAndFormatResponse(response, url));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function fetchReferralDetails(referralId) {
    if (!referralId) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/details/' + numericReferralId)
      .then(response => validateAndFormatResponse(response, `/api/referrals/details/${numericReferralId}`));
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  function refreshAuthToken() {
    const userId = getUserId();
    if (!userId) {
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'));
    }

    console.log('üîÑ [API] –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.refreshToken === 'function') {
      return window.WinixAPI.refreshToken()
        .then(result => {
          if (result === true) {
            console.log('‚úÖ [API] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WinixAPI');
            return getAuthToken() || 'success';
          } else {
            console.warn('‚ö†Ô∏è [API] WinixAPI.refreshToken –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ true:', result);
            return standardRefreshToken();
          }
        })
        .catch(err => {
          console.warn('‚ö†Ô∏è [API] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ WinixAPI:', err);
          return standardRefreshToken();
        });
    } else {
      // –Ø–∫—â–æ WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥
      return standardRefreshToken();
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    function standardRefreshToken() {
      return fetch('/api/auth/refresh-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-User-Id': userId
        },
        body: JSON.stringify({ telegram_id: userId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.token || (data.data && data.data.token)) {
          const newToken = data.token || data.data.token;
          localStorage.setItem('auth_token', newToken);
          console.log('‚úÖ [API] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥!');
          return newToken;
        } else {
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
        }
      });
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
  function checkAPIHealth() {
    return apiRequest(API_CONFIG.baseUrl + '/api/health')
      .then(function() {
        console.log('‚úÖ [API] API –¥–æ—Å—Ç—É–ø–Ω–∏–π');
        return true;
      })
      .catch(function(error) {
        console.warn('‚ö†Ô∏è [API] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
        return false;
      });
  }

  // –ü—É–±–ª—ñ—á–Ω–∏–π API
  return {
    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    config: API_CONFIG,

    // –£—Ç–∏–ª—ñ—Ç–∏
    apiRequest: apiRequest,
    checkAPIHealth: checkAPIHealth,
    refreshAuthToken: refreshAuthToken,
    getAuthToken: getAuthToken,
    getUserId: getUserId,
    validateAndFormatResponse: validateAndFormatResponse,

    // –û—Å–Ω–æ–≤–Ω—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó
    fetchUserBadges: fetchUserBadges,
    checkBadges: checkBadges,
    claimBadgeReward: claimBadgeReward,
    fetchReferralActivity: fetchReferralActivity,
    fetchReferralDetailedActivity: fetchReferralDetailedActivity,
    fetchActivitySummary: fetchActivitySummary,
    updateReferralActivity: updateReferralActivity,
    manuallyActivateReferral: manuallyActivateReferral,
    fetchReferralDraws: fetchReferralDraws,
    fetchDrawDetails: fetchDrawDetails,
    fetchDrawsParticipationStats: fetchDrawsParticipationStats,
    fetchTotalDrawsCount: fetchTotalDrawsCount,
    fetchMostActiveInDraws: fetchMostActiveInDraws,
    fetchReferralEarnings: fetchReferralEarnings,
    fetchReferralDetailedEarnings: fetchReferralDetailedEarnings,
    fetchEarningsSummary: fetchEarningsSummary,
    fetchReferralHistory: fetchReferralHistory,
    fetchReferralEventHistory: fetchReferralEventHistory,
    fetchReferralActivitySummary: fetchReferralActivitySummary,
    fetchReferralActivityTrend: fetchReferralActivityTrend,
    fetchReferralLink: fetchReferralLink,
    fetchReferralStats: fetchReferralStats,
    fetchReferralDetails: fetchReferralDetails,
    fetchUserTasks: fetchUserTasks,
    updateTasks: updateTasks,
    claimTaskReward: claimTaskReward,
    registerReferral: registerReferral,
    checkIfReferral: checkIfReferral
  };
})();
console.log('‚úÖ ReferralAPI –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:', window.ReferralAPI);