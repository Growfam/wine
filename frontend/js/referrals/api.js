// api.js - –í–µ—Ä—Å—ñ—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
/**
 * API —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 */
window.ReferralAPI = (function() {
  'use strict';

  console.log('üì¶ [API] ========== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ReferralAPI ==========');
  console.log('üïê [API] –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', new Date().toISOString());

  // –ë–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API
  const API_CONFIG = {
    baseUrl: '',  // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å /api, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤–∂–µ –≤–∫–ª—é—á–µ–Ω–∏–π –≤ –º–∞—Ä—à—Ä—É—Ç–∏
    timeout: 15000, // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç
    retryAttempts: 3,
    retryDelay: 1000
  };

  console.log('‚öôÔ∏è [API] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', API_CONFIG);

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
  const DEBUG = true; // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è —Ä–µ–∂–∏–º—É –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
  console.log('üêõ [API] DEBUG —Ä–µ–∂–∏–º:', DEBUG ? '–£–í–Ü–ú–ö–ù–ï–ù–û' : '–í–ò–ú–ö–ù–ï–ù–û');

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ WinixAPI
  console.log('üîç [API] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ WinixAPI...');
  if (typeof window.WinixAPI !== 'undefined') {
    console.log('‚úÖ [API] WinixAPI –∑–Ω–∞–π–¥–µ–Ω–æ:', Object.keys(window.WinixAPI));
  } else {
    console.log('‚ö†Ô∏è [API] WinixAPI –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –ø—Ä—è–º–∏–π API');
  }

  // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  function getAuthToken() {
    console.log('üîë [API] === getAuthToken START ===');

    const authToken = localStorage.getItem('auth_token');
    const jwtToken = localStorage.getItem('jwt_token');
    const token = localStorage.getItem('token');

    console.log('üìä [API] –¢–æ–∫–µ–Ω–∏ –≤ localStorage:', {
      auth_token: authToken ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
      jwt_token: jwtToken ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
      token: token ? '–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' : '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'
    });

    const result = authToken || jwtToken || token;
    console.log('üîë [API] –†–µ–∑—É–ª—å—Ç–∞—Ç getAuthToken:', result ? '—Ç–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ' : '—Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

    return result;
  }

  // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  function getUserId() {
    console.log('üë§ [API] === getUserId START ===');

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.getUserId === 'function') {
      console.log('üîç [API] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —á–µ—Ä–µ–∑ WinixAPI...');
      const apiId = window.WinixAPI.getUserId();
      console.log('üìä [API] WinixAPI.getUserId —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', apiId);

      if (apiId && apiId !== 'undefined' && apiId !== 'null') {
        console.log('‚úÖ [API] ID –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ WinixAPI:', apiId);
        return apiId;
      }
    }

    const telegramId = localStorage.getItem('telegram_user_id');
    const userId = localStorage.getItem('user_id');

    console.log('üìä [API] ID –≤ localStorage:', {
      telegram_user_id: telegramId,
      user_id: userId
    });

    const result = telegramId || userId;
    console.log('üë§ [API] –†–µ–∑—É–ª—å—Ç–∞—Ç getUserId:', result || 'ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

    return result;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API
  function validateAndFormatResponse(response, endpoint) {
    console.log('üîç [API] === validateAndFormatResponse START ===');
    console.log('üìä [API] Endpoint:', endpoint);
    console.log('üìä [API] Response type:', typeof response);
    console.log('üìä [API] Response:', JSON.stringify(response, null, 2));

    if (!response) {
      console.error(`‚ùå [API] –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ${endpoint}`);
      throw new Error('–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    // –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if (typeof response !== 'object') {
      console.error(`‚ùå [API] –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ ${endpoint}:`, typeof response);
      console.log('üîÑ [API] –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —è–∫ JSON...');

      try {
        // –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —Ä—è–¥–æ–∫ —è–∫ JSON
        const parsed = JSON.parse(response);
        console.log('‚úÖ [API] JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π');
        return validateAndFormatResponse(parsed, endpoint);
      } catch (e) {
        console.error('‚ùå [API] JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π:', e);
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (response.error || response.status === 'error') {
      console.error('‚ùå [API] –í—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫—É:', {
        error: response.error,
        status: response.status,
        message: response.message
      });
      throw new Error(response.message || response.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
    console.log('üîç [API] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –≤–∏–º–æ–≥ –¥–ª—è endpoint:', endpoint);

    if (endpoint.includes('/referrals/stats/')) {
      console.log('üìä [API] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è stats endpoint');
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
      if (!response.referrals) {
        console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ referrals –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ stats API');
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      if (!response.statistics) {
        console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ statistics –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ stats API');
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      console.log('‚úÖ [API] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ stats –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∞–ª—ñ–¥–Ω–∞');
    }

    if (endpoint.includes('/referrals/activity/')) {
      console.log('üìä [API] –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è activity endpoint');
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
      if (!response.level1Activity && !response.level2Activity) {
        console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ activity API');
        throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ');
      }
      console.log('‚úÖ [API] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ activity –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∞–ª—ñ–¥–Ω–∞');
    }

    console.log('‚úÖ [API] === validateAndFormatResponse SUCCESS ===');
    return response;
  }

  // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
  function apiRequest(url, options) {
    console.log('üåê [API] === apiRequest START ===');
    console.log('üìä [API] URL:', url);
    console.log('üìä [API] Options:', JSON.stringify(options, null, 2));

    options = options || {};
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      console.warn('‚è±Ô∏è [API] –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É! –í—ñ–¥–º—ñ–Ω–∞...');
      controller.abort();
    }, API_CONFIG.timeout);

    // –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ–π–Ω–∏–π —Ç–æ–∫–µ–Ω —Ç–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const token = getAuthToken();
    const userId = getUserId();

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    };

    console.log('üìä [API] –ë–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫—â–æ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (token) {
      headers['Authorization'] = 'Bearer ' + token;
      console.log('üîë [API] –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
    } else {
      console.warn('‚ö†Ô∏è [API] –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
    }

    // –î–æ–¥–∞—î–º–æ Telegram User ID –∑–∞–≥–æ–ª–æ–≤–æ–∫, —è–∫—â–æ ID –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (userId) {
      headers['X-Telegram-User-Id'] = userId;
      console.log('üë§ [API] –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-User-Id:', userId);
    } else {
      console.warn('‚ö†Ô∏è [API] User ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
    }

    // –û–±'—î–¥–Ω—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –æ–ø—Ü—ñ—è–º–∏ –∑–∞–ø–∏—Ç—É
    const fetchOptions = Object.assign({
      signal: controller.signal,
      headers: headers
    }, options);

    console.log('üåê [API REQUEST] –§—ñ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      url: url,
      method: fetchOptions.method || 'GET',
      hasAuth: !!token,
      userId: userId,
      headers: fetchOptions.headers
    });

    let retryCount = 0;

    function executeRequest() {
      console.log(`üîÑ [API] –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É (—Å–ø—Ä–æ–±–∞ ${retryCount + 1}/${API_CONFIG.retryAttempts})...`);

      // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä timestamp –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
      const urlWithTimestamp = url.includes('?')
        ? url + '&t=' + Date.now()
        : url + '?t=' + Date.now();

      console.log('üåê [API] –§—ñ–Ω–∞–ª—å–Ω–∏–π URL –∑ timestamp:', urlWithTimestamp);
      console.log('üïê [API] –ß–∞—Å –∑–∞–ø–∏—Ç—É:', new Date().toISOString());

      return fetch(urlWithTimestamp, fetchOptions)
        .then(function(response) {
          clearTimeout(timeoutId);
          console.log('üì• [API] –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ!');
          console.log('üìä [API] Response details:', {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok,
            headers: Object.fromEntries(response.headers.entries())
          });

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          if (!response.ok) {
            console.error('‚ùå [API] HTTP –ø–æ–º–∏–ª–∫–∞:', {
              status: response.status,
              statusText: response.statusText
            });

            // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
            if (response.status === 401 && retryCount < API_CONFIG.retryAttempts) {
              console.log('üîë [API] 401 –ø–æ–º–∏–ª–∫–∞ - —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω...');
              return refreshTokenAndRetry();
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
            const error = new Error('HTTP ' + response.status + ': ' + response.statusText);
            error.status = response.status;
            error.statusText = response.statusText;
            throw error;
          }

          // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          console.log('üìÑ [API] –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...');
          return response.json().catch(function(err) {
            console.error('‚ùå [API] –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON:', err);
            throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
          });
        })
        .then(function(data) {
          console.log('‚úÖ [API] JSON —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ');
          console.log('üìä [API] –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', JSON.stringify(data, null, 2));

          // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞ –≤–∞–ª—ñ–¥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          return validateAndFormatResponse(data, url);
        })
        .catch(function(error) {
          clearTimeout(timeoutId);
          console.error('‚ùå [API] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', error);

          // –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ –º–∏ –≤–∂–µ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤
          if (error.status !== 401 || retryCount >= API_CONFIG.retryAttempts) {
            // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫
            if (error.name === 'AbortError') {
              console.error('‚è±Ô∏è [API] –ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç');
              throw new Error('–ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (' + API_CONFIG.timeout + '–º—Å)');
            }

            if (error.status === 404) {
              console.error('üîç [API] Endpoint –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
              throw new Error('API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ' + url);
            }

            if (error.status >= 500) {
              console.error('üí• [API] –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
              throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (' + error.status + ')');
            }

            throw error;
          }

          // –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
          return refreshTokenAndRetry();
        });
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    function refreshTokenAndRetry() {
      retryCount++;
      console.warn(`‚ö†Ô∏è [API] === –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ (—Å–ø—Ä–æ–±–∞ ${retryCount}/${API_CONFIG.retryAttempts}) ===`);

      // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
      if (window.WinixAPI && typeof window.WinixAPI.refreshToken === 'function') {
        console.log('üîë [API] –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ WinixAPI...');
        return window.WinixAPI.refreshToken()
          .then(function(result) {
            console.log('‚úÖ [API] WinixAPI.refreshToken —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            const newToken = getAuthToken();
            if (newToken) {
              fetchOptions.headers['Authorization'] = 'Bearer ' + newToken;
              console.log('üîë [API] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö');
            }

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            console.log('üîÑ [API] –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞...');
            return executeRequest();
          })
          .catch(function(err) {
            console.warn('‚ö†Ô∏è [API] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ WinixAPI:', err);
            // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
            return standardRefreshToken();
          });
      } else {
        // –Ø–∫—â–æ WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥
        console.log('üîë [API] WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥...');
        return standardRefreshToken();
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
      function standardRefreshToken() {
        console.log('üîë [API] === –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ ===');

        return fetch('/api/auth/refresh-token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Telegram-User-Id': userId || ''
          },
          body: JSON.stringify({ telegram_id: userId })
        })
        .then(response => {
          console.log('üì• [API] –í—ñ–¥–ø–æ–≤—ñ–¥—å refresh-token:', {
            status: response.status,
            ok: response.ok
          });
          return response.json();
        })
        .then(data => {
          console.log('üìä [API] –î–∞–Ω—ñ refresh-token:', data);

          if (data.token || data.data && data.data.token) {
            const newToken = data.token || data.data.token;
            localStorage.setItem('auth_token', newToken);
            console.log('‚úÖ [API] –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');

            // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
            fetchOptions.headers['Authorization'] = 'Bearer ' + newToken;

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            console.log('üîÑ [API] –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º...');
            return executeRequest();
          } else {
            console.error('‚ùå [API] –¢–æ–∫–µ–Ω –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
          }
        })
        .catch(err => {
          console.error('‚ùå [API] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', err);
          throw err;
        });
      }
    }

    return executeRequest();
  }

  // –û—Å–Ω–æ–≤–Ω—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  function fetchUserBadges(userId) {
    console.log('üèÜ [API] === fetchUserBadges START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –±–µ–π–¥–∂—ñ'));
    }

    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ userId —Ü–µ —á–∏—Å–ª–æ
    const numericUserId = parseInt(userId);
    console.log('üìä [API] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è userId:', {
      original: userId,
      numeric: numericUserId,
      isNaN: isNaN(numericUserId)
    });

    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.apiRequest === 'function') {
      console.log('üîÑ [API] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–π–¥–∂—ñ —á–µ—Ä–µ–∑ WinixAPI...');

      return window.WinixAPI.apiRequest(`badges/${numericUserId}`, 'GET')
        .then(response => {
          console.log('üì• [API] WinixAPI –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response);

          if (response.status === 'success' && response.data) {
            console.log('‚úÖ [API] –ë–µ–π–¥–∂—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ —á–µ—Ä–µ–∑ WinixAPI');
            return response.data;
          }

          // –Ø–∫—â–æ WinixAPI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç
          console.log('‚ö†Ô∏è [API] WinixAPI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç...');
          return apiRequest(API_CONFIG.baseUrl + '/api/badges/' + numericUserId);
        })
        .catch(error => {
          console.warn('‚ö†Ô∏è [API] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ —á–µ—Ä–µ–∑ WinixAPI:', error);
          // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
          console.log('üîÑ [API] –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É...');
          return apiRequest(API_CONFIG.baseUrl + '/api/badges/' + numericUserId);
        });
    }

    console.log('üîÑ [API] –ü—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –±–µ–π–¥–∂—ñ–≤...');
    return apiRequest(API_CONFIG.baseUrl + '/api/badges/' + numericUserId);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–π–¥–∂—ñ–≤
  function checkBadges(userId) {
    console.log('üèÜ [API] === checkBadges START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–π–¥–∂—ñ–≤'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/badges/check/' + numericUserId;
    console.log('üåê [API] URL –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', url);

    return apiRequest(url, {
      method: 'POST'
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –±–µ–π–¥–∂
  function claimBadgeReward(userId, badgeType) {
    console.log('üíé [API] === claimBadgeReward START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      badgeType: badgeType
    });

    if (!userId || !badgeType) {
      console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–∏–ø –±–µ–π–¥–∂–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const requestBody = {
      user_id: numericUserId,
      badge_type: badgeType
    };

    console.log('üì§ [API] –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:', requestBody);

    return apiRequest(API_CONFIG.baseUrl + '/api/badges/claim', {
      method: 'POST',
      body: JSON.stringify(requestBody)
    })
    .then(function(data) {
      console.log('‚úÖ [API] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –±–µ–π–¥–∂ –æ—Ç—Ä–∏–º–∞–Ω–∞:', data);

      // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
      try {
        if (data.success && window.updateUserBalanceDisplay && data.reward_amount) {
          const currentBalance = parseFloat(localStorage.getItem('winix_balance') || '0');
          const newBalance = currentBalance + data.reward_amount;
          console.log('üí∞ [API] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', {
            current: currentBalance,
            reward: data.reward_amount,
            new: newBalance
          });
          window.updateUserBalanceDisplay(newBalance, true);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è [API] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
      }

      return data;
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
  function fetchReferralLink(userId) {
    console.log('üîó [API] === fetchReferralLink START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    console.log('üìä [API] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è userId:', {
      original: userId,
      numeric: numericUserId,
      isNaN: isNaN(numericUserId)
    });

    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.apiRequest === 'function') {
      console.log('üîÑ [API] –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ WinixAPI...');

      return window.WinixAPI.apiRequest(`referrals/link/${numericUserId}`, 'GET')
        .then(response => {
          console.log('üì• [API] WinixAPI –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', response);

          if (response.status === 'success' && response.data && response.data.link) {
            console.log('‚úÖ [API] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ WinixAPI:', response.data.link);
            return response.data.link;
          }

          // –Ø–∫—â–æ WinixAPI —É—Å–ø—ñ—à–Ω–∏–π, –∞–ª–µ —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
          if (response.status === 'success' && response.data) {
            console.log('üîç [API] –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –≤—ñ–¥ WinixAPI...');

            // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –¥–∞–Ω–∏—Ö
            if (typeof response.data === 'string' && response.data.includes('t.me')) {
              console.log('‚úÖ [API] –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ —Ä—è–¥–æ–∫:', response.data);
              return response.data;
            }

            // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É
            console.log('‚ö†Ô∏è [API] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –≤—Ä—É—á–Ω—É...');
            return formatReferralUrl(numericUserId);
          }

          // –Ø–∫—â–æ WinixAPI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç
          console.log('‚ö†Ô∏è [API] WinixAPI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç...');
          return apiRequest(API_CONFIG.baseUrl + '/api/referrals/link/' + numericUserId)
            .then(data => {
              console.log('üì• [API] –ü—Ä—è–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', data);

              if (data && data.link) {
                console.log('‚úÖ [API] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ:', data.link);
                return data.link;
              }

              // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –≤—Ä—É—á–Ω—É
              console.log('‚ö†Ô∏è [API] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É...');
              return formatReferralUrl(numericUserId);
            });
        })
        .catch(error => {
          console.error('‚ùå [API] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ WinixAPI:', error);
          // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –≤–∏–∫–∏–¥–∞—î–º–æ —ó—ó –¥–∞–ª—ñ
          throw error;
        });
    }

    // –Ø–∫—â–æ WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Ç
    console.log('üîÑ [API] –ü—Ä—è–º–∏–π –∑–∞–ø–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è...');
    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/link/' + numericUserId)
      .then(data => {
        console.log('üì• [API] –í—ñ–¥–ø–æ–≤—ñ–¥—å:', data);

        if (data && data.link) {
          console.log('‚úÖ [API] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ:', data.link);
          return data.link;
        }

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –≤—Ä—É—á–Ω—É
        console.log('‚ö†Ô∏è [API] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É...');
        return formatReferralUrl(numericUserId);
      });
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
  function formatReferralUrl(userId) {
    console.log('üîó [API] === formatReferralUrl ===');
    console.log('üìä [API] userId:', userId);

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return null;
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return null;
    }

    const url = 'https://t.me/WINIX_Official_bot?start=' + numericUserId;
    console.log('‚úÖ [API] –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ URL:', url);
    return url;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralStats(userId) {
    console.log('üìä [API] === fetchReferralStats START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });
    console.log('üïê [API] –ß–∞—Å –∑–∞–ø–∏—Ç—É:', new Date().toISOString());

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤'));
    }

    const numericUserId = parseInt(userId);
    console.log('üìä [API] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è userId:', {
      original: userId,
      numeric: numericUserId,
      isNaN: isNaN(numericUserId)
    });

    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –û–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Ç—É
    console.log('üîÑ [API] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç (–æ–±—Ö—ñ–¥ WinixAPI)...');
    return sendStatsRequest();

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
    function sendStatsRequest() {
      console.log('üîÑ [API] === sendStatsRequest ===');
      const url = API_CONFIG.baseUrl + '/api/referrals/stats/' + numericUserId;
      console.log('üåê [API] URL –¥–ª—è –∑–∞–ø–∏—Ç—É:', url);

      return apiRequest(url)
        .then(function(response) {
          console.log('‚úÖ [API] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
          console.log('üìä [API] –°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', JSON.stringify(response, null, 2));

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∞–ª—ñ–¥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
          return validateAndFormatResponse(response, `/api/referrals/stats/${numericUserId}`);
        })
        .catch(function(error) {
          console.error('‚ùå [API] === fetchReferralStats FAILED ===');
          console.error('‚ùå [API] –¢–∏–ø –ø–æ–º–∏–ª–∫–∏:', error.name);
          console.error('‚ùå [API] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
          console.error('‚ùå [API] Stack trace:', error.stack);

          // –ü—Ä–æ–±—Ä–∞—Å—É—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
          throw error;
        });
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤ –≤—ñ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralEarnings(userId, options) {
    console.log('üí∞ [API] === fetchReferralEarnings START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      options: options
    });

    options = options || {};
    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/earnings/' + numericUserId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url, {
      method: 'POST',
      body: JSON.stringify(options)
    })
    .then(response => {
      console.log('‚úÖ [API] –ó–∞—Ä–æ–±—ñ—Ç–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ');
      return validateAndFormatResponse(response, `/api/referrals/earnings/${numericUserId}`);
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤ –≤—ñ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralDetailedEarnings(referralId, options) {
    console.log('üí∞ [API] === fetchReferralDetailedEarnings START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referralId: referralId,
      options: options
    });

    options = options || {};
    if (!referralId) {
      console.error('‚ùå [API] referralId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
      console.log('üîÑ [API] –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–µ—Ñ—ñ–∫—Å WX:', { original: referralId, real: realId });
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      console.error('‚ùå [API] referralId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/earnings/detailed/' + numericReferralId;
    if (options.startDate || options.endDate) {
      const params = new URLSearchParams();
      if (options.startDate) params.append('startDate', options.startDate);
      if (options.endDate) params.append('endDate', options.endDate);
      url += '?' + params.toString();
    }

    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –î–µ—Ç–∞–ª—å–Ω—ñ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, url);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏
  function fetchEarningsSummary(userId) {
    console.log('üí∞ [API] === fetchEarningsSummary START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/earnings/summary/' + numericUserId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –ó–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, `/api/referrals/earnings/summary/${numericUserId}`);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralActivity(userId, options) {
    console.log('üéØ [API] === fetchReferralActivity START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      options: options
    });

    options = options || {};
    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/activity/' + numericUserId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url, {
      method: 'POST',
      body: JSON.stringify(options)
    })
    .then(response => {
      console.log('‚úÖ [API] –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–∞');
      return validateAndFormatResponse(response, `/api/referrals/activity/${numericUserId}`);
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralDetailedActivity(referralId, options) {
    console.log('üéØ [API] === fetchReferralDetailedActivity START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referralId: referralId,
      options: options
    });

    options = options || {};
    if (!referralId) {
      console.error('‚ùå [API] referralId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
      console.log('üîÑ [API] –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–µ—Ñ—ñ–∫—Å WX:', { original: referralId, real: realId });
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      console.error('‚ùå [API] referralId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/activity/detailed/' + numericReferralId;
    if (options.startDate || options.endDate) {
      const params = new URLSearchParams();
      if (options.startDate) params.append('startDate', options.startDate);
      if (options.endDate) params.append('endDate', options.endDate);
      url += '?' + params.toString();
    }

    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –î–µ—Ç–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∞');
        return validateAndFormatResponse(response, url);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
  function fetchActivitySummary(userId) {
    console.log('üéØ [API] === fetchActivitySummary START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/activity/summary/' + numericUserId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –ó–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, `/api/referrals/activity/summary/${numericUserId}`);
      });
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function updateReferralActivity(userId, drawsParticipation, invitedReferrals) {
    console.log('üîÑ [API] === updateReferralActivity START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      drawsParticipation: drawsParticipation,
      invitedReferrals: invitedReferrals
    });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const requestBody = {
      user_id: numericUserId,
      draws_participation: drawsParticipation,
      invited_referrals: invitedReferrals
    };

    console.log('üì§ [API] –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:', requestBody);

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/activity/update', {
      method: 'POST',
      body: JSON.stringify(requestBody)
    })
    .then(response => {
      console.log('‚úÖ [API] –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∞');
      return validateAndFormatResponse(response, '/api/referrals/activity/update');
    });
  }

  // –†—É—á–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function manuallyActivateReferral(userId, adminId) {
    console.log('üîß [API] === manuallyActivateReferral START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      adminId: adminId
    });

    if (!userId || !adminId) {
      console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó'));
    }

    const numericUserId = parseInt(userId);
    const numericAdminId = parseInt(adminId);

    console.log('üìä [API] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ID:', {
      userId: { original: userId, numeric: numericUserId },
      adminId: { original: adminId, numeric: numericAdminId }
    });

    if (isNaN(numericUserId) || isNaN(numericAdminId)) {
      console.error('‚ùå [API] ID –Ω–µ —î —á–∏—Å–ª–∞–º–∏');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏'));
    }

    const requestBody = {
      user_id: numericUserId,
      admin_id: numericAdminId
    };

    console.log('üì§ [API] –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:', requestBody);

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/activity/activate', {
      method: 'POST',
      body: JSON.stringify(requestBody)
    })
    .then(response => {
      console.log('‚úÖ [API] –†–µ—Ñ–µ—Ä–∞–ª –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É');
      return validateAndFormatResponse(response, '/api/referrals/activity/activate');
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  function fetchUserTasks(userId) {
    console.log('üìã [API] === fetchUserTasks START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/tasks/' + numericUserId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –ó–∞–≤–¥–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, `/api/tasks/${numericUserId}`);
      });
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
  function updateTasks(userId) {
    console.log('üîÑ [API] === updateTasks START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/tasks/update/' + numericUserId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url, {
      method: 'POST'
    })
    .then(response => {
      console.log('‚úÖ [API] –ó–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—ñ');
      return validateAndFormatResponse(response, `/api/tasks/update/${numericUserId}`);
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
  function claimTaskReward(userId, taskType) {
    console.log('üéÅ [API] === claimTaskReward START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      taskType: taskType
    });

    if (!userId || !taskType) {
      console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const requestBody = {
      user_id: numericUserId,
      task_type: taskType
    };

    console.log('üì§ [API] –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:', requestBody);

    return apiRequest(API_CONFIG.baseUrl + '/api/tasks/claim', {
      method: 'POST',
      body: JSON.stringify(requestBody)
    })
    .then(function(data) {
      console.log('‚úÖ [API] –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∞');

      // –í–∞–ª—ñ–¥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      data = validateAndFormatResponse(data, '/api/tasks/claim');

      // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
      try {
        if (data.success && window.updateUserBalanceDisplay && data.reward_amount) {
          const currentBalance = parseFloat(localStorage.getItem('winix_balance') || '0');
          const newBalance = currentBalance + data.reward_amount;
          console.log('üí∞ [API] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', {
            current: currentBalance,
            reward: data.reward_amount,
            new: newBalance
          });
          window.updateUserBalanceDisplay(newBalance, true);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è [API] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
      }

      return data;
    });
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function registerReferral(referrerId, userId) {
    console.log('üìù [API] === registerReferral START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referrerId: referrerId,
      userId: userId
    });

    if (!referrerId) {
      console.error('‚ùå [API] referrerId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericReferrerId = parseInt(referrerId);
    const numericUserId = parseInt(userId);

    console.log('üìä [API] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ID:', {
      referrerId: { original: referrerId, numeric: numericReferrerId },
      userId: { original: userId, numeric: numericUserId }
    });

    if (isNaN(numericReferrerId) || isNaN(numericUserId)) {
      console.error('‚ùå [API] ID –Ω–µ —î —á–∏—Å–ª–∞–º–∏');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏'));
    }

    if (numericReferrerId === numericUserId) {
      console.error('‚ùå [API] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–µ–±–µ');
      return Promise.reject(new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–æ–∂–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–µ–±–µ'));
    }

    const requestBody = {
      referrer_id: numericReferrerId,
      referee_id: numericUserId
    };

    console.log('üì§ [API] –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:', requestBody);

    return apiRequest(API_CONFIG.baseUrl + '/api/referrals/register', {
      method: 'POST',
      body: JSON.stringify(requestBody)
    })
    .then(response => {
      console.log('‚úÖ [API] –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ');
      return validateAndFormatResponse(response, '/api/referrals/register');
    });
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
  function checkIfReferral(userId) {
    console.log('üîç [API] === checkIfReferral START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { userId: userId });

    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    console.log('üîÑ [API] –í–∏–∫–ª–∏–∫–∞—î–º–æ fetchReferralStats –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...');

    return fetchReferralStats(numericUserId)
      .then(function(data) {
        const isReferral = !!(data && data.referrals);
        console.log('üìä [API] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', {
          isReferral: isReferral,
          hasData: !!data,
          hasReferrals: !!(data && data.referrals)
        });
        return isReferral;
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralHistory(userId, options) {
    console.log('üìú [API] === fetchReferralHistory START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      options: options
    });

    options = options || {};
    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/' + numericUserId;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }
    if (options.limit) {
      queryParams.append('limit', options.limit.toString());
    }
    if (options.type) {
      queryParams.append('type', options.type);
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–∞');
        return validateAndFormatResponse(response, url);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function fetchReferralDraws(referralId) {
    console.log('üé≤ [API] === fetchReferralDraws START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { referralId: referralId });

    if (!referralId) {
      console.error('‚ùå [API] referralId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
      console.log('üîÑ [API] –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–µ—Ñ—ñ–∫—Å WX:', { original: referralId, real: realId });
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      console.error('‚ùå [API] referralId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/draws/' + numericReferralId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –†–æ–∑—ñ–≥—Ä–∞—à—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, `/api/referrals/draws/${numericReferralId}`);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
  function fetchDrawDetails(referralId, drawId) {
    console.log('üéØ [API] === fetchDrawDetails START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referralId: referralId,
      drawId: drawId
    });

    if (!referralId || !drawId) {
      console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
      console.log('üîÑ [API] –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–µ—Ñ—ñ–∫—Å WX:', { original: referralId, real: realId });
    }

    const numericReferralId = parseInt(realId);
    const numericDrawId = parseInt(drawId);

    console.log('üìä [API] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ID:', {
      referralId: { original: referralId, numeric: numericReferralId },
      drawId: { original: drawId, numeric: numericDrawId }
    });

    if (isNaN(numericReferralId) || isNaN(numericDrawId)) {
      console.error('‚ùå [API] ID –Ω–µ —î —á–∏—Å–ª–∞–º–∏');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/draws/details/' + numericReferralId + '/' + numericDrawId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, `/api/referrals/draws/details/${numericReferralId}/${numericDrawId}`);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
  function fetchDrawsParticipationStats(ownerId, options) {
    console.log('üìä [API] === fetchDrawsParticipationStats START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      ownerId: ownerId,
      options: options
    });

    options = options || {};
    if (!ownerId) {
      console.error('‚ùå [API] ownerId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericOwnerId = parseInt(ownerId);
    if (isNaN(numericOwnerId)) {
      console.error('‚ùå [API] ownerId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/draws/stats/' + numericOwnerId;
    const params = new URLSearchParams();

    if (options.startDate) {
      params.append('startDate', options.startDate instanceof Date
        ? options.startDate.toISOString()
        : options.startDate);
    }

    if (options.endDate) {
      params.append('endDate', options.endDate instanceof Date
        ? options.endDate.toISOString()
        : options.endDate);
    }

    if (params.toString()) {
      url += '?' + params.toString();
    }

    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö –æ—Ç—Ä–∏–º–∞–Ω–∞');
        return validateAndFormatResponse(response, url);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  function fetchTotalDrawsCount(ownerId) {
    console.log('üé≤ [API] === fetchTotalDrawsCount START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { ownerId: ownerId });

    if (!ownerId) {
      console.error('‚ùå [API] ownerId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericOwnerId = parseInt(ownerId);
    if (isNaN(numericOwnerId)) {
      console.error('‚ùå [API] ownerId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/draws/count/' + numericOwnerId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(function(data) {
        console.log('‚úÖ [API] –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–∞');

        // –í–∞–ª—ñ–¥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        data = validateAndFormatResponse(data, `/api/referrals/draws/count/${numericOwnerId}`);

        const count = data.totalDrawsCount || 0;
        console.log('üìä [API] –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', count);

        return count;
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
  function fetchMostActiveInDraws(ownerId, limit) {
    console.log('üèÜ [API] === fetchMostActiveInDraws START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      ownerId: ownerId,
      limit: limit
    });

    limit = limit || 10;
    if (!ownerId) {
      console.error('‚ùå [API] ownerId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericOwnerId = parseInt(ownerId);
    if (isNaN(numericOwnerId)) {
      console.error('‚ùå [API] ownerId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/draws/active/' + numericOwnerId + '?limit=' + limit;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ —É—á–∞—Å–Ω–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, `/api/referrals/draws/active/${numericOwnerId}?limit=${limit}`);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–¥—ñ–π —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralEventHistory(userId, eventType, options) {
    console.log('üìÖ [API] === fetchReferralEventHistory START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      eventType: eventType,
      options: options
    });

    options = options || {};
    if (!userId || !eventType) {
      console.error('‚ùå [API] –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–∏–ø –ø–æ–¥—ñ—ó –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/event/' + numericUserId + '/' + eventType;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }
    if (options.limit) {
      queryParams.append('limit', options.limit.toString());
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π –æ—Ç—Ä–∏–º–∞–Ω–∞');
        return validateAndFormatResponse(response, url);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralActivitySummary(userId, options) {
    console.log('üìä [API] === fetchReferralActivitySummary START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      options: options
    });

    options = options || {};
    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/summary/' + numericUserId;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –ó–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, url);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  function fetchReferralActivityTrend(userId, period, options) {
    console.log('üìà [API] === fetchReferralActivityTrend START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      userId: userId,
      period: period,
      options: options
    });

    period = period || 'monthly';
    options = options || {};
    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    const numericUserId = parseInt(userId);
    if (isNaN(numericUserId)) {
      console.error('‚ùå [API] userId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    let url = API_CONFIG.baseUrl + '/api/referrals/history/trend/' + numericUserId + '/' + period;

    const queryParams = new URLSearchParams();
    if (options.startDate) {
      queryParams.append('startDate', typeof options.startDate === 'object'
        ? options.startDate.toISOString()
        : options.startDate);
    }
    if (options.endDate) {
      queryParams.append('endDate', typeof options.endDate === 'object'
        ? options.endDate.toISOString()
        : options.endDate);
    }
    if (options.limit) {
      queryParams.append('limit', options.limit.toString());
    }

    const queryString = queryParams.toString();
    if (queryString) {
      url += '?' + queryString;
    }

    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –¢—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ');
        return validateAndFormatResponse(response, url);
      });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  function fetchReferralDetails(referralId) {
    console.log('üë§ [API] === fetchReferralDetails START ===');
    console.log('üìä [API] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { referralId: referralId });

    if (!referralId) {
      console.error('‚ùå [API] referralId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'));
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ (–∑ –∞–±–æ –±–µ–∑ 'WX')
    let realId = referralId;
    if (typeof referralId === 'string' && referralId.startsWith('WX')) {
      realId = referralId.substring(2);  // –í–∏–¥–∞–ª—è—î–º–æ 'WX' –∑ –ø–æ—á–∞—Ç–∫—É
      console.log('üîÑ [API] –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–µ—Ñ—ñ–∫—Å WX:', { original: referralId, real: realId });
    }

    const numericReferralId = parseInt(realId);
    if (isNaN(numericReferralId)) {
      console.error('‚ùå [API] referralId –Ω–µ —î —á–∏—Å–ª–æ–º');
      return Promise.reject(new Error('ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º'));
    }

    const url = API_CONFIG.baseUrl + '/api/referrals/details/' + numericReferralId;
    console.log('üåê [API] URL:', url);

    return apiRequest(url)
      .then(response => {
        console.log('‚úÖ [API] –î–µ—Ç–∞–ª—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ—Ç—Ä–∏–º–∞–Ω—ñ');
        return validateAndFormatResponse(response, `/api/referrals/details/${numericReferralId}`);
      });
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  function refreshAuthToken() {
    console.log('üîë [API] === refreshAuthToken START ===');

    const userId = getUserId();
    if (!userId) {
      console.error('‚ùå [API] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞');
      return Promise.reject(new Error('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'));
    }

    console.log('üîÑ [API] –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ WinixAPI
    if (window.WinixAPI && typeof window.WinixAPI.refreshToken === 'function') {
      console.log('üîë [API] –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è WinixAPI.refreshToken...');

      return window.WinixAPI.refreshToken()
        .then(result => {
          console.log('üìä [API] WinixAPI.refreshToken —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);

          if (result === true) {
            console.log('‚úÖ [API] –¢–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WinixAPI');
            return getAuthToken() || 'success';
          } else {
            console.warn('‚ö†Ô∏è [API] WinixAPI.refreshToken –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ true:', result);
            return standardRefreshToken();
          }
        })
        .catch(err => {
          console.warn('‚ö†Ô∏è [API] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ WinixAPI:', err);
          return standardRefreshToken();
        });
    } else {
      // –Ø–∫—â–æ WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥
      console.log('üîë [API] WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥...');
      return standardRefreshToken();
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    function standardRefreshToken() {
      console.log('üîë [API] === standardRefreshToken ===');

      return fetch('/api/auth/refresh-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-User-Id': userId
        },
        body: JSON.stringify({ telegram_id: userId })
      })
      .then(response => {
        console.log('üì• [API] –í—ñ–¥–ø–æ–≤—ñ–¥—å refresh-token:', {
          status: response.status,
          ok: response.ok
        });
        return response.json();
      })
      .then(data => {
        console.log('üìä [API] –î–∞–Ω—ñ refresh-token:', data);

        if (data.token || (data.data && data.data.token)) {
          const newToken = data.token || data.data.token;
          localStorage.setItem('auth_token', newToken);
          console.log('‚úÖ [API] –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
          return newToken;
        } else {
          console.error('‚ùå [API] –¢–æ–∫–µ–Ω –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
        }
      });
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
  function checkAPIHealth() {
    console.log('üè• [API] === checkAPIHealth START ===');

    const url = API_CONFIG.baseUrl + '/api/health';
    console.log('üåê [API] Health check URL:', url);

    return apiRequest(url)
      .then(function() {
        console.log('‚úÖ [API] API –∑–¥–æ—Ä–æ–≤–∏–π —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π!');
        return true;
      })
      .catch(function(error) {
        console.warn('‚ö†Ô∏è [API] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏:', error.message);
        return false;
      });
  }

  console.log('‚úÖ [API] ========== –ú–û–î–£–õ–¨ ReferralAPI –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û –£–°–ü–Ü–®–ù–û ==========');
  console.log('üìä [API] –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:', Object.keys({
    fetchUserBadges,
    checkBadges,
    claimBadgeReward,
    fetchReferralActivity,
    fetchReferralDetailedActivity,
    fetchActivitySummary,
    updateReferralActivity,
    manuallyActivateReferral,
    fetchReferralDraws,
    fetchDrawDetails,
    fetchDrawsParticipationStats,
    fetchTotalDrawsCount,
    fetchMostActiveInDraws,
    fetchReferralEarnings,
    fetchReferralDetailedEarnings,
    fetchEarningsSummary,
    fetchReferralHistory,
    fetchReferralEventHistory,
    fetchReferralActivitySummary,
    fetchReferralActivityTrend,
    fetchReferralLink,
    fetchReferralStats,
    fetchReferralDetails,
    fetchUserTasks,
    updateTasks,
    claimTaskReward,
    registerReferral,
    checkIfReferral,
    apiRequest,
    checkAPIHealth,
    refreshAuthToken,
    getAuthToken,
    getUserId,
    validateAndFormatResponse
  }));

  // –ü—É–±–ª—ñ—á–Ω–∏–π API
  return {
    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    config: API_CONFIG,

    // –£—Ç–∏–ª—ñ—Ç–∏
    apiRequest: apiRequest,
    checkAPIHealth: checkAPIHealth,
    refreshAuthToken: refreshAuthToken,
    getAuthToken: getAuthToken,
    getUserId: getUserId,
    validateAndFormatResponse: validateAndFormatResponse,

    // –û—Å–Ω–æ–≤–Ω—ñ API —Ñ—É–Ω–∫—Ü—ñ—ó
    fetchUserBadges: fetchUserBadges,
    checkBadges: checkBadges,
    claimBadgeReward: claimBadgeReward,
    fetchReferralActivity: fetchReferralActivity,
    fetchReferralDetailedActivity: fetchReferralDetailedActivity,
    fetchActivitySummary: fetchActivitySummary,
    updateReferralActivity: updateReferralActivity,
    manuallyActivateReferral: manuallyActivateReferral,
    fetchReferralDraws: fetchReferralDraws,
    fetchDrawDetails: fetchDrawDetails,
    fetchDrawsParticipationStats: fetchDrawsParticipationStats,
    fetchTotalDrawsCount: fetchTotalDrawsCount,
    fetchMostActiveInDraws: fetchMostActiveInDraws,
    fetchReferralEarnings: fetchReferralEarnings,
    fetchReferralDetailedEarnings: fetchReferralDetailedEarnings,
    fetchEarningsSummary: fetchEarningsSummary,
    fetchReferralHistory: fetchReferralHistory,
    fetchReferralEventHistory: fetchReferralEventHistory,
    fetchReferralActivitySummary: fetchReferralActivitySummary,
    fetchReferralActivityTrend: fetchReferralActivityTrend,
    fetchReferralLink: fetchReferralLink,
    fetchReferralStats: fetchReferralStats,
    fetchReferralDetails: fetchReferralDetails,
    fetchUserTasks: fetchUserTasks,
    updateTasks: updateTasks,
    claimTaskReward: claimTaskReward,
    registerReferral: registerReferral,
    checkIfReferral: checkIfReferral
  };
})();

console.log('‚úÖ [GLOBAL] window.ReferralAPI –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ');
console.log('üìä [GLOBAL] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:', {
  ReferralAPI: typeof window.ReferralAPI,
  hasConfig: window.ReferralAPI && window.ReferralAPI.config,
  methodsCount: window.ReferralAPI ? Object.keys(window.ReferralAPI).length : 0
});