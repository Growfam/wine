// utils.js - –í–µ—Ä—Å—ñ—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —Ç–∞ –Ω–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
/**
 * –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 */
window.ReferralUtils = (function() {
  'use strict';

  console.log('üì¶ [UTILS] ========== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ú–û–î–£–õ–Ø ReferralUtils ==========');
  console.log('üïê [UTILS] –ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', new Date().toISOString());

  // –ë–µ–∑–ø–µ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ–¥—Ä—è–¥–∫–∞
  window.safeIncludes = function(str, search) {
    console.log('üîç [UTILS] === safeIncludes START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      str: typeof str,
      strValue: str,
      search: typeof search,
      searchValue: search
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ str —Ü–µ —Ä—è–¥–æ–∫
    if (typeof str !== 'string') {
      console.warn('‚ö†Ô∏è [UTILS] safeIncludes: –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —î —Ä—è–¥–∫–æ–º', str);
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ search —Ü–µ —Ä—è–¥–æ–∫
    if (typeof search !== 'string') {
      console.warn('‚ö†Ô∏è [UTILS] safeIncludes: –¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —î —Ä—è–¥–∫–æ–º', search);
      return false;
    }

    const result = str.indexOf(search) >= 0;
    console.log('‚úÖ [UTILS] safeIncludes —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    return result;
  };

  console.log('‚úÖ [UTILS] window.safeIncludes —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ');

  // calculatePercentage.js
  function calculatePercentage(amount, rate, round) {
    console.log('üìä [UTILS] === calculatePercentage START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      amount: amount,
      rate: rate,
      round: round
    });

    round = round !== false; // default true

    if (typeof amount !== 'number' || isNaN(amount)) {
      console.error('‚ùå [UTILS] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è amount:', amount);
      throw new Error('–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º');
    }

    if (typeof rate !== 'number' || isNaN(rate) || rate < 0) {
      console.error('‚ùå [UTILS] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è rate:', rate);
      throw new Error('–°—Ç–∞–≤–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º');
    }

    const result = amount * rate;
    const finalResult = round ? Math.round(result) : result;

    console.log('‚úÖ [UTILS] –†–µ–∑—É–ª—å—Ç–∞—Ç calculatePercentage:', {
      raw: result,
      final: finalResult
    });

    return finalResult;
  }

  function formatPercentageResult(amount, rate, options) {
    console.log('üí∞ [UTILS] === formatPercentageResult START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      amount: amount,
      rate: rate,
      options: options
    });

    options = options || {};
    const prefix = options.prefix || '';
    const suffix = options.suffix || '';
    const showPercentage = options.showPercentage || false;

    const calculatedAmount = calculatePercentage(amount, rate);

    const percentageString = showPercentage
      ? ' (' + (rate * 100).toFixed(1) + '%)'
      : '';

    const result = prefix + calculatedAmount + suffix + percentageString;
    console.log('‚úÖ [UTILS] –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);

    return result;
  }

  function calculateMultiplePercentages(amount, rates) {
    console.log('üìä [UTILS] === calculateMultiplePercentages START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      amount: amount,
      rates: rates
    });

    if (!Array.isArray(rates)) {
      console.error('‚ùå [UTILS] rates –Ω–µ —î –º–∞—Å–∏–≤–æ–º');
      throw new Error('–°—Ç–∞–≤–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ –º–∞—Å–∏–≤–æ–º');
    }

    const results = rates.map(function(rate, index) {
      const result = calculatePercentage(amount, rate);
      console.log(`  üìä [UTILS] –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏ ${index} (${rate}):`, result);
      return result;
    });

    console.log('‚úÖ [UTILS] –í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', results);
    return results;
  }

  // formatReferralUrl.js - –û–ù–û–í–õ–ï–ù–û –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
  function formatReferralUrl(userId) {
    console.log('üîó [UTILS] === formatReferralUrl START ===');
    console.log('üìä [UTILS] userId:', userId);

    if (!userId) {
      console.error('‚ùå [UTILS] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      throw new Error('User ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
    }

    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ userId —Ü–µ —á–∏—Å–ª–æ –∞–±–æ –º–æ–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏
    const numericUserId = typeof userId === 'number' ? userId : parseInt(userId);
    console.log('üìä [UTILS] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è userId:', {
      original: userId,
      numeric: numericUserId,
      isNaN: isNaN(numericUserId)
    });

    if (isNaN(numericUserId)) {
      console.error('‚ùå [UTILS] userId –Ω–µ –º–æ–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —á–∏—Å–ª–æ');
      throw new Error('User ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º');
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: https://t.me/WINIX_Official_bot?start={id}
    const REFERRAL_URL_PATTERN = window.ReferralConstants.REFERRAL_URL_PATTERN;
    console.log('üìä [UTILS] URL —à–∞–±–ª–æ–Ω:', REFERRAL_URL_PATTERN);

    const result = REFERRAL_URL_PATTERN.replace('{id}', numericUserId.toString());
    console.log('‚úÖ [UTILS] –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', result);

    return result;
  }

  // formatWinixAmount.js
  function formatWinixAmount(amount, options) {
    console.log('üí∞ [UTILS] === formatWinixAmount START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      amount: amount,
      options: options
    });

    options = options || {};
    const numAmount = parseFloat(amount);

    if (isNaN(numAmount)) {
      console.warn('‚ö†Ô∏è [UTILS] formatWinixAmount: Invalid amount provided', amount);
      return '0';
    }

    const separator = options.separator || ' ';
    const decimals = options.decimals !== undefined ? options.decimals : 2;
    const showCurrency = options.showCurrency || false;
    const currencySymbol = options.currencySymbol || 'winix';

    const roundedAmount = Number(numAmount.toFixed(decimals));
    const formatted = roundedAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, separator);

    const result = showCurrency ? formatted + ' ' + currencySymbol : formatted;
    console.log('‚úÖ [UTILS] –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—É–º–∞:', result);

    return result;
  }

  function abbreviateWinixAmount(amount, options) {
    console.log('üí∞ [UTILS] === abbreviateWinixAmount START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      amount: amount,
      options: options
    });

    options = options || {};
    const numAmount = parseFloat(amount);

    if (isNaN(numAmount)) {
      console.warn('‚ö†Ô∏è [UTILS] abbreviateWinixAmount: Invalid amount provided', amount);
      return '0';
    }

    const decimals = options.decimals !== undefined ? options.decimals : 1;
    const showCurrency = options.showCurrency || false;
    const currencySymbol = options.currencySymbol || 'winix';

    let result;
    if (numAmount >= 1000000000) {
      result = (numAmount / 1000000000).toFixed(decimals) + 'B';
    } else if (numAmount >= 1000000) {
      result = (numAmount / 1000000).toFixed(decimals) + 'M';
    } else if (numAmount >= 1000) {
      result = (numAmount / 1000).toFixed(decimals) + 'K';
    } else {
      result = numAmount.toFixed(decimals);
    }

    result = result.replace(/\.0+([KMBT])?$/, '$1');

    const finalResult = showCurrency ? result + ' ' + currencySymbol : result;
    console.log('‚úÖ [UTILS] –°–∫–æ—Ä–æ—á–µ–Ω–∞ —Å—É–º–∞:', finalResult);

    return finalResult;
  }

  function formatWinixWithTrend(amount, options) {
    console.log('üìà [UTILS] === formatWinixWithTrend START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      amount: amount,
      options: options
    });

    options = options || {};
    const numAmount = parseFloat(amount);

    if (isNaN(numAmount)) {
      console.warn('‚ö†Ô∏è [UTILS] formatWinixWithTrend: Invalid amount provided', amount);
      return '0';
    }

    const showPlus = options.showPlus !== false;
    const colorize = options.colorize || false;
    const separator = options.separator || ' ';
    const showCurrency = options.showCurrency || false;

    const formatted = formatWinixAmount(Math.abs(numAmount), {
      separator: separator,
      showCurrency: showCurrency
    });

    let result;
    if (numAmount > 0) {
      result = showPlus ? '+' + formatted : formatted;
      if (colorize) {
        result = '<span class="positive-trend">' + result + '</span>';
      }
    } else if (numAmount < 0) {
      result = '-' + formatted;
      if (colorize) {
        result = '<span class="negative-trend">' + result + '</span>';
      }
    } else {
      result = formatted;
    }

    console.log('‚úÖ [UTILS] –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—É–º–∞ –∑ —Ç—Ä–µ–Ω–¥–æ–º:', result);
    return result;
  }

  function formatWinixCompact(amount, maxLength) {
    console.log('üìê [UTILS] === formatWinixCompact START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      amount: amount,
      maxLength: maxLength
    });

    maxLength = maxLength || 6;
    const numAmount = parseFloat(amount);

    if (isNaN(numAmount)) {
      console.warn('‚ö†Ô∏è [UTILS] formatWinixCompact: Invalid amount provided', amount);
      return '0';
    }

    let formatted = abbreviateWinixAmount(numAmount);

    if (formatted.length > maxLength) {
      const hasLetter = /[KMBT]$/.test(formatted);
      if (hasLetter) {
        const letter = formatted.slice(-1);
        formatted = parseFloat(formatted).toFixed(0) + letter;
      } else {
        formatted = parseFloat(formatted).toFixed(0);
      }
    }

    console.log('‚úÖ [UTILS] –ö–æ–º–ø–∞–∫—Ç–Ω–∞ —Å—É–º–∞:', formatted);
    return formatted;
  }

  function normalizeWinixAmount(amount) {
    console.log('üîß [UTILS] === normalizeWinixAmount START ===');
    console.log('üìä [UTILS] –í—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è:', amount, '—Ç–∏–ø:', typeof amount);

    if (typeof amount === 'number') {
      console.log('‚úÖ [UTILS] –í–∂–µ —á–∏—Å–ª–æ:', amount);
      return amount;
    }

    if (typeof amount !== 'string') {
      console.warn('‚ö†Ô∏è [UTILS] normalizeWinixAmount: Invalid amount provided', amount);
      return 0;
    }

    const cleaned = amount.replace(/[^\d.-]/g, '');
    const numAmount = parseFloat(cleaned);

    console.log('üìä [UTILS] –û—á–∏—â–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è:', cleaned);
    console.log('üìä [UTILS] –ß–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:', numAmount);

    return isNaN(numAmount) ? 0 : numAmount;
  }

  // isActiveReferral.js
  function isActiveReferral(referralData, options) {
    console.log('üéØ [UTILS] === isActiveReferral START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referralData: referralData,
      options: options
    });

    options = options || {};
    if (!referralData) {
      console.warn('‚ö†Ô∏è [UTILS] referralData –≤—ñ–¥—Å—É—Ç–Ω—ñ');
      return false;
    }

    const drawsParticipation = referralData.drawsParticipation || 0;
    const invitedReferrals = referralData.invitedReferrals || 0;
    const manuallyActivated = referralData.manuallyActivated || false;

    const drawsThreshold = options.drawsThreshold !== undefined
      ? options.drawsThreshold
      : window.ReferralConstants.MIN_DRAWS_PARTICIPATION;
    const invitedThreshold = options.invitedThreshold !== undefined
      ? options.invitedThreshold
      : window.ReferralConstants.MIN_INVITED_REFERRALS;
    const requireAllCriteria = options.requireAllCriteria || false;

    console.log('üìä [UTILS] –î–∞–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', {
      drawsParticipation: drawsParticipation,
      invitedReferrals: invitedReferrals,
      manuallyActivated: manuallyActivated
    });

    console.log('üìä [UTILS] –ü–æ—Ä–æ–≥–∏:', {
      drawsThreshold: drawsThreshold,
      invitedThreshold: invitedThreshold,
      requireAllCriteria: requireAllCriteria
    });

    if (manuallyActivated) {
      console.log('‚úÖ [UTILS] –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π –≤—Ä—É—á–Ω—É');
      return true;
    }

    const meetsDrawsCriteria = drawsParticipation >= drawsThreshold;
    const meetsInvitedCriteria = invitedReferrals >= invitedThreshold;

    console.log('üìä [UTILS] –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º:', {
      meetsDrawsCriteria: meetsDrawsCriteria,
      meetsInvitedCriteria: meetsInvitedCriteria
    });

    let result;
    if (requireAllCriteria) {
      result = meetsDrawsCriteria && meetsInvitedCriteria;
    } else {
      result = meetsDrawsCriteria || meetsInvitedCriteria;
    }

    console.log('‚úÖ [UTILS] –†–µ–∑—É–ª—å—Ç–∞—Ç isActiveReferral:', result);
    return result;
  }

  function getDetailedActivityStatus(referralData, options) {
    console.log('üìä [UTILS] === getDetailedActivityStatus START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referralData: referralData,
      options: options
    });

    options = options || {};
    if (!referralData) {
      console.warn('‚ö†Ô∏è [UTILS] referralData –≤—ñ–¥—Å—É—Ç–Ω—ñ');
      return {
        isActive: false,
        drawsParticipation: 0,
        invitedReferrals: 0,
        meetsDrawsCriteria: false,
        meetsInvitedCriteria: false,
        manuallyActivated: false,
        reasonForActivity: null
      };
    }

    const drawsParticipation = referralData.drawsParticipation || 0;
    const invitedReferrals = referralData.invitedReferrals || 0;
    const manuallyActivated = referralData.manuallyActivated || false;

    const drawsThreshold = options.drawsThreshold !== undefined
      ? options.drawsThreshold
      : window.ReferralConstants.MIN_DRAWS_PARTICIPATION;
    const invitedThreshold = options.invitedThreshold !== undefined
      ? options.invitedThreshold
      : window.ReferralConstants.MIN_INVITED_REFERRALS;

    const meetsDrawsCriteria = drawsParticipation >= drawsThreshold;
    const meetsInvitedCriteria = invitedReferrals >= invitedThreshold;

    let reasonForActivity = null;

    if (manuallyActivated) {
      reasonForActivity = 'manual_activation';
    } else if (meetsDrawsCriteria && meetsInvitedCriteria) {
      reasonForActivity = 'both_criteria';
    } else if (meetsDrawsCriteria) {
      reasonForActivity = 'draws_criteria';
    } else if (meetsInvitedCriteria) {
      reasonForActivity = 'invited_criteria';
    }

    const isActive = manuallyActivated || meetsDrawsCriteria || meetsInvitedCriteria;

    const result = {
      isActive: isActive,
      drawsParticipation: drawsParticipation,
      invitedReferrals: invitedReferrals,
      requiredDraws: drawsThreshold,
      requiredInvited: invitedThreshold,
      meetsDrawsCriteria: meetsDrawsCriteria,
      meetsInvitedCriteria: meetsInvitedCriteria,
      manuallyActivated: manuallyActivated,
      reasonForActivity: reasonForActivity
    };

    console.log('‚úÖ [UTILS] –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', result);
    return result;
  }

  // sortReferralsByEarnings.js
  function sortReferralsByEarnings(referrals, options) {
    console.log('üîÑ [UTILS] === sortReferralsByEarnings START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referralsCount: referrals ? referrals.length : 0,
      options: options
    });

    options = options || {};
    if (!Array.isArray(referrals)) {
      console.error('‚ùå [UTILS] referrals must be an array');
      return [];
    }

    const ascending = options.ascending || false;
    const earningsField = options.earningsField || 'totalEarnings';

    console.log('üìä [UTILS] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:', {
      ascending: ascending,
      earningsField: earningsField
    });

    const sorted = referrals.slice().sort(function(a, b) {
      const aEarnings = parseFloat(a[earningsField] || 0);
      const bEarnings = parseFloat(b[earningsField] || 0);

      return ascending ? aEarnings - bEarnings : bEarnings - aEarnings;
    });

    console.log('‚úÖ [UTILS] –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', sorted.length);
    return sorted;
  }

  function sortByPercentageRewards(referrals, ascending) {
    console.log('üìä [UTILS] sortByPercentageRewards –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    return sortReferralsByEarnings(referrals, {
      ascending: ascending,
      earningsField: 'percentageEarnings'
    });
  }

  function sortByInvitedCount(referrals, ascending) {
    console.log('üë• [UTILS] sortByInvitedCount –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    return sortReferralsByEarnings(referrals, {
      ascending: ascending,
      earningsField: 'invitedCount'
    });
  }

  function sortByDrawsParticipation(referrals, ascending) {
    console.log('üé≤ [UTILS] sortByDrawsParticipation –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    return sortReferralsByEarnings(referrals, {
      ascending: ascending,
      earningsField: 'drawsParticipation'
    });
  }

  function sortByActivity(referrals) {
    console.log('üéØ [UTILS] === sortByActivity START ===');
    console.log('üìä [UTILS] –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:', referrals ? referrals.length : 0);

    if (!Array.isArray(referrals)) {
      console.error('‚ùå [UTILS] referrals must be an array');
      return [];
    }

    const sorted = referrals.slice().sort(function(a, b) {
      if (a.active && !b.active) return -1;
      if (!a.active && b.active) return 1;

      const aEarnings = parseFloat(a.totalEarnings || 0);
      const bEarnings = parseFloat(b.totalEarnings || 0);

      return bEarnings - aEarnings;
    });

    console.log('‚úÖ [UTILS] –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é');
    return sorted;
  }

  function filterAndSortReferrals(referrals, filters, sortOptions) {
    console.log('üîç [UTILS] === filterAndSortReferrals START ===');
    console.log('üìä [UTILS] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', {
      referralsCount: referrals ? referrals.length : 0,
      filters: filters,
      sortOptions: sortOptions
    });

    filters = filters || {};
    sortOptions = sortOptions || {};

    if (!Array.isArray(referrals)) {
      console.error('‚ùå [UTILS] referrals must be an array');
      return [];
    }

    const onlyActive = filters.onlyActive;
    const minEarnings = filters.minEarnings || 0;
    const by = sortOptions.by || 'earnings';
    const ascending = sortOptions.ascending || false;

    console.log('üìä [UTILS] –§—ñ–ª—å—Ç—Ä–∏:', {
      onlyActive: onlyActive,
      minEarnings: minEarnings
    });

    let filtered = referrals.slice();

    if (onlyActive) {
      const beforeCount = filtered.length;
      filtered = filtered.filter(function(referral) {
        return referral.active;
      });
      console.log(`üîç [UTILS] –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö: ${filtered.length} –∑ ${beforeCount}`);
    }

    if (minEarnings > 0) {
      const beforeCount = filtered.length;
      filtered = filtered.filter(function(referral) {
        const earnings = parseFloat(referral.totalEarnings || 0);
        return earnings >= minEarnings;
      });
      console.log(`üîç [UTILS] –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ –∑–∞—Ä–æ–±—ñ—Ç–∫–æ–º: ${filtered.length} –∑ ${beforeCount}`);
    }

    console.log('üìä [UTILS] –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞:', by);

    let result;
    switch (by) {
      case 'invites':
        result = sortByInvitedCount(filtered, ascending);
        break;
      case 'draws':
        result = sortByDrawsParticipation(filtered, ascending);
        break;
      case 'activity':
        result = sortByActivity(filtered);
        break;
      case 'percentage':
        result = sortByPercentageRewards(filtered, ascending);
        break;
      case 'earnings':
      default:
        result = sortReferralsByEarnings(filtered, { ascending: ascending });
        break;
    }

    console.log('‚úÖ [UTILS] –†–µ–∑—É–ª—å—Ç–∞—Ç filterAndSortReferrals:', result.length);
    return result;
  }

  // generateReferralLink.js - –û–ù–û–í–õ–ï–ù–û –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
  function generateReferralLink(userId) {
    console.log('üîó [UTILS] === generateReferralLink START ===');
    console.log('üìä [UTILS] userId:', userId);

    if (!userId) {
      console.error('‚ùå [UTILS] userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
      throw new Error('User ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π');
    }

    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ userId —Ü–µ —á–∏—Å–ª–æ
    const numericUserId = typeof userId === 'number' ? userId : parseInt(userId);
    console.log('üìä [UTILS] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è userId:', {
      original: userId,
      numeric: numericUserId,
      isNaN: isNaN(numericUserId)
    });

    if (isNaN(numericUserId)) {
      console.error('‚ùå [UTILS] userId –Ω–µ –º–æ–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —á–∏—Å–ª–æ');
      throw new Error('User ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º');
    }

    return new Promise(function(resolve, reject) {
      try {
        console.log('üîÑ [UTILS] –í–∏–∫–ª–∏–∫ ReferralAPI.fetchReferralLink...');

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ API —Ñ—É–Ω–∫—Ü—ñ—é —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É
        window.ReferralAPI.fetchReferralLink(numericUserId)
          .then(function(referralLink) {
            console.log('‚úÖ [UTILS] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ API:', referralLink);

            // –Ø–∫—â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
            // –Ü–Ω–∞–∫—à–µ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ URL —á–µ—Ä–µ–∑ —É—Ç–∏–ª—ñ—Ç—É
            if (referralLink && referralLink.includes('t.me/WINIX_Official_bot')) {
              console.log('‚úÖ [UTILS] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥ API');
              resolve(referralLink);
            } else {
              console.log('üîß [UTILS] –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ');
              resolve(formatReferralUrl(numericUserId));
            }
          })
          .catch(function(error) {
            console.error('‚ùå [UTILS] Error generating referral link:', error);
            // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ API, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É —É—Ç–∏–ª—ñ—Ç—É
            console.log('üîß [UTILS] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É API');
            resolve(formatReferralUrl(numericUserId));
          });
      } catch (error) {
        console.error('‚ùå [UTILS] Error in try block:', error);
        // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É —É—Ç–∏–ª—ñ—Ç—É
        console.log('üîß [UTILS] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è');
        resolve(formatReferralUrl(numericUserId));
      }
    });
  }

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º
  function getTelegramBotUrl() {
    console.log('ü§ñ [UTILS] getTelegramBotUrl –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    const url = window.ReferralConstants.TELEGRAM_BOT_URL;
    console.log('‚úÖ [UTILS] URL –±–æ—Ç–∞:', url);
    return url;
  }

  function parseReferralUrl(url) {
    console.log('üîç [UTILS] === parseReferralUrl START ===');
    console.log('üìä [UTILS] URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É:', url);

    if (!url || typeof url !== 'string') {
      console.error('‚ùå [UTILS] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL');
      return null;
    }

    // –ü–∞—Ä—Å–∏–º–æ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: https://t.me/WINIX_Official_bot?start={id}
    const match = url.match(/https:\/\/t\.me\/WINIX_Official_bot\?start=(\d+)/);
    if (match) {
      const result = {
        userId: parseInt(match[1]),
        isValid: true,
        format: 'telegram'
      };
      console.log('‚úÖ [UTILS] –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç:', result);
      return result;
    }

    // –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ: Winix/referral/{id}
    const oldMatch = url.match(/Winix\/referral\/(\d+)/);
    if (oldMatch) {
      const result = {
        userId: parseInt(oldMatch[1]),
        isValid: true,
        format: 'legacy'
      };
      console.log('‚úÖ [UTILS] –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç:', result);
      return result;
    }

    console.log('‚ùå [UTILS] –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ URL');
    return {
      userId: null,
      isValid: false,
      format: 'unknown'
    };
  }

  function isValidReferralUrl(url) {
    console.log('‚úÖ [UTILS] === isValidReferralUrl START ===');
    console.log('üìä [UTILS] URL:', url);

    const parsed = parseReferralUrl(url);
    const isValid = parsed && parsed.isValid;

    console.log('‚úÖ [UTILS] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', isValid);
    return isValid;
  }

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π
  const publicAPI = {
    calculatePercentage: calculatePercentage,
    formatPercentageResult: formatPercentageResult,
    calculateMultiplePercentages: calculateMultiplePercentages,
    formatReferralUrl: formatReferralUrl,
    formatWinixAmount: formatWinixAmount,
    abbreviateWinixAmount: abbreviateWinixAmount,
    formatWinixWithTrend: formatWinixWithTrend,
    formatWinixCompact: formatWinixCompact,
    normalizeWinixAmount: normalizeWinixAmount,
    isActiveReferral: isActiveReferral,
    getDetailedActivityStatus: getDetailedActivityStatus,
    sortReferralsByEarnings: sortReferralsByEarnings,
    sortByPercentageRewards: sortByPercentageRewards,
    sortByInvitedCount: sortByInvitedCount,
    sortByDrawsParticipation: sortByDrawsParticipation,
    sortByActivity: sortByActivity,
    filterAndSortReferrals: filterAndSortReferrals,
    generateReferralLink: generateReferralLink,
    getTelegramBotUrl: getTelegramBotUrl,
    parseReferralUrl: parseReferralUrl,
    isValidReferralUrl: isValidReferralUrl
  };

  console.log('‚úÖ [UTILS] ========== –ú–û–î–£–õ–¨ ReferralUtils –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û –£–°–ü–Ü–®–ù–û ==========');
  console.log('üìä [UTILS] –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–π:', Object.keys(publicAPI).length);
  console.log('üìã [UTILS] –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π:', Object.keys(publicAPI));

  return publicAPI;
})();

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
console.log('üîç [UTILS] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ window.ReferralUtils:', {
  exists: typeof window.ReferralUtils !== 'undefined',
  type: typeof window.ReferralUtils,
  methods: window.ReferralUtils ? Object.keys(window.ReferralUtils).length : 0
});