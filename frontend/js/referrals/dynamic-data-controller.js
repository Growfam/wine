/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞
 */

class DynamicDataController {
    constructor(userId) {
        console.log('üéÆ [DynamicData] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);
        this.userId = userId;
        this.config = null;
        this.data = {
            user: null,
            referrals: {
                level1: [],
                level2: [],
                statistics: null
            },
            badges: null,
            bonusHistory: [],
            activityData: null
        };
        this.updateIntervals = {};
        this.isInitialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
     */
    async initialize() {
        console.log('üöÄ [DynamicData] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...');

        try {
            // 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            await this.loadConfiguration();

            // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await this.loadUserData();

            // 3. –û–Ω–æ–≤–ª—é—î–º–æ UI –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
            this.updateAllUI();

            // 4. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            this.setupAutoUpdates();

            this.isInitialized = true;
            console.log('‚úÖ [DynamicData] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadConfiguration() {
        console.log('üìã [DynamicData] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...');

        try {
            // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
            if (window.ReferralAPI && window.ReferralAPI.getConfig) {
                const response = await window.ReferralAPI.getConfig();
                if (response.success) {
                    this.config = response.data;
                    console.log('‚úÖ [DynamicData] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞:', this.config);
                    return;
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è [DynamicData] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }

        // –î–µ—Ñ–æ–ª—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        this.config = {
            rewards: {
                directBonus: 50,
                level1Percentage: 10,
                level2Percentage: 5
            },
            badges: {
                BRONZE: { name: '–°–º—ñ–ª–∏–≤–µ—Ü—å', threshold: 25, reward: 2500 },
                SILVER: { name: '–ù–æ–≤–∞—Ç–æ—Ä', threshold: 50, reward: 5000 },
                GOLD: { name: '–õ–µ–≥–µ–Ω–¥–∞', threshold: 100, reward: 10000 },
                PLATINUM: { name: '–í—ñ–∑—ñ–æ–Ω–µ—Ä', threshold: 500, reward: 20000 }
            },
            activityCriteria: {
                minDraws: 3,
                minInvited: 1
            }
        };

        console.log('üìã [DynamicData] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', this.config);
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async loadUserData() {
        console.log('üë§ [DynamicData] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');

        try {
            // –ë–∞–ª–∞–Ω—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await this.updateBalances();

            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            await this.updateReferralLink();

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            await this.updateReferralStatistics();

            // –ë–µ–π–¥–∂—ñ
            await this.updateBadges();

            // –Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤
            await this.updateBonusHistory();

            // –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            await this.updateActivityData();

        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async updateBalances() {
        console.log('üí∞ [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤...');

        try {
            if (window.ReferralAPI && window.ReferralAPI.getUserBalance) {
                const response = await window.ReferralAPI.getUserBalance(this.userId);
                if (response.success) {
                    document.getElementById('user-coins').textContent = response.data.coins || 0;
                    document.getElementById('user-tokens').textContent = response.data.tokens || 0;
                    return;
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è [DynamicData] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤:', error);
        }

        // –î–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        document.getElementById('user-coins').textContent = '0';
        document.getElementById('user-tokens').textContent = '0';
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
     */
    async updateReferralLink() {
        console.log('üîó [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è...');

        const linkDisplay = document.querySelector('.link-display');
        if (!linkDisplay) return;

        try {
            const baseUrl = 'https://t.me/winix_tap_bot?start=';
            const referralLink = baseUrl + this.userId;
            linkDisplay.textContent = referralLink;
            console.log('‚úÖ [DynamicData] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', error);
            linkDisplay.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ UI
     */
    updateAllUI() {
        console.log('üé® [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ UI...');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        this.updateConfigValues();

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStatisticsUI();

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤
        this.updateListsUI();
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
     */
    updateConfigValues() {
        // –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        this.updateElementsBySelector('[data-value="direct-bonus"]', this.config.rewards.directBonus);
        this.updateElementsBySelector('[data-value="level1-percentage"]', this.config.rewards.level1Percentage);
        this.updateElementsBySelector('[data-value="level2-percentage"]', this.config.rewards.level2Percentage);

        // –ö—Ä–∏—Ç–µ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        this.updateElementsBySelector('[data-criteria="min-draws"]', this.config.activityCriteria.minDraws);
        this.updateElementsBySelector('[data-criteria="min-invited"]', this.config.activityCriteria.minInvited);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     */
    async updateReferralStatistics() {
        console.log('üìä [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤...');

        try {
            if (window.ReferralStore) {
                const state = window.ReferralStore.getState();

                // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                const totalReferrals = state.statistics?.totalReferrals || 0;
                const activeReferrals = state.statistics?.activeReferrals || 0;
                const inactiveReferrals = totalReferrals - activeReferrals;
                const conversionRate = totalReferrals > 0 ?
                    Math.round((activeReferrals / totalReferrals) * 100) : 0;

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                document.getElementById('active-referrals-count').textContent = activeReferrals;
                document.getElementById('inactive-referrals-count').textContent = inactiveReferrals;
                document.getElementById('conversion-rate').textContent = conversionRate + '%';

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
                document.querySelectorAll('.total-referrals-count').forEach(el => {
                    el.textContent = totalReferrals;
                });
                document.querySelectorAll('.active-referrals-count').forEach(el => {
                    el.textContent = activeReferrals;
                });
                document.querySelectorAll('.conversion-rate').forEach(el => {
                    el.textContent = conversionRate + '%';
                });

                this.data.referrals.statistics = {
                    total: totalReferrals,
                    active: activeReferrals,
                    inactive: inactiveReferrals,
                    conversionRate: conversionRate
                };
            }
        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤
     */
    async updateBadges() {
        console.log('üèÜ [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤...');

        try {
            if (window.ReferralStore) {
                const state = window.ReferralStore.getState();
                const badges = state.badges || {};
                const totalReferrals = state.statistics?.totalReferrals || 0;

                // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–π–¥–∂—ñ–≤
                let earnedCount = 0;
                let totalCount = 0;
                let nextBadge = null;

                const badgesList = document.getElementById('badges-list');
                if (badgesList) {
                    badgesList.innerHTML = '';

                    for (const [badgeType, badgeConfig] of Object.entries(this.config.badges)) {
                        totalCount++;
                        const badge = badges[badgeType] || { claimed: false, eligible: false };

                        if (badge.claimed) earnedCount++;

                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –±–µ–π–¥–∂
                        if (!badge.claimed && !nextBadge) {
                            nextBadge = {
                                type: badgeType,
                                ...badgeConfig,
                                progress: totalReferrals,
                                eligible: totalReferrals >= badgeConfig.threshold
                            };
                        }

                        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –±–µ–π–¥–∂–∞
                        const badgeElement = this.createBadgeElement(badgeType, badgeConfig, badge, totalReferrals);
                        badgesList.appendChild(badgeElement);
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–π–¥–∂—ñ–≤
                document.getElementById('earned-badges-count').textContent = earnedCount;
                document.getElementById('total-badges-count').textContent = totalCount;
                document.getElementById('remaining-badges-count').textContent = totalCount - earnedCount;

                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –±–µ–π–¥–∂
                this.updateNextBadgeInfo(nextBadge);

                this.data.badges = { earned: earnedCount, total: totalCount, next: nextBadge };
            }
        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤:', error);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –±–µ–π–¥–∂–∞
     */
    createBadgeElement(badgeType, badgeConfig, badgeData, totalReferrals) {
        const progress = Math.min(100, (totalReferrals / badgeConfig.threshold) * 100);
        const statusClass = badgeData.claimed ? 'claimed' :
                           (badgeData.eligible ? 'eligible' : 'not-eligible');

        const iconClass = badgeType.toLowerCase() + '-icon';
        const progressClass = badgeType.toLowerCase() + '-progress';

        const div = document.createElement('div');
        div.className = `badge-item ${statusClass}`;
        div.innerHTML = `
            <div class="badge-icon ${iconClass}"></div>
            <div class="badge-info">
                <div class="badge-title">${badgeConfig.name}</div>
                <div class="badge-description">–ó–∞–ª—É—á—ñ—Ç—å ${badgeConfig.threshold} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤</div>
                <div class="badge-reward">–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${badgeConfig.reward} winix</div>
                <div class="badge-progress-container">
                    <div class="badge-progress-bar">
                        <div class="badge-progress-fill ${progressClass}" style="width: ${progress}%"></div>
                    </div>
                    <div class="badge-progress-text">${Math.round(progress)}% (${totalReferrals}/${badgeConfig.threshold})</div>
                </div>
                ${this.createBadgeButton(badgeType, badgeData)}
            </div>
        `;

        return div;
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–µ–π–¥–∂–∞
     */
    createBadgeButton(badgeType, badgeData) {
        if (badgeData.claimed) {
            return '<div class="badge-status claimed">–û—Ç—Ä–∏–º–∞–Ω–æ</div>';
        } else if (badgeData.eligible) {
            return `<button class="claim-badge-button" data-badge="${badgeType}">–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É</button>`;
        } else {
            return '<button class="claim-badge-button" data-badge="' + badgeType + '" disabled>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</button>';
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –±–µ–π–¥–∂
     */
    updateNextBadgeInfo(nextBadge) {
        const container = document.getElementById('next-badge-container');
        if (!container) return;

        if (nextBadge) {
            container.style.display = 'block';
            document.getElementById('next-badge-title').textContent = `–ù–∞—Å—Ç—É–ø–Ω–∏–π –±–µ–π–¥–∂: ${nextBadge.name}`;

            const progress = Math.min(100, (nextBadge.progress / nextBadge.threshold) * 100);
            document.getElementById('next-badge-progress').style.width = progress + '%';
            document.getElementById('next-badge-progress-text').textContent =
                `${Math.round(progress)}% (${nextBadge.progress}/${nextBadge.threshold})`;

            const remaining = Math.max(0, nextBadge.threshold - nextBadge.progress);
            document.getElementById('next-badge-remaining').textContent =
                `–ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${remaining} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤`;
        } else {
            container.style.display = 'none';
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
     */
    async updateBonusHistory() {
        console.log('üìú [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤...');

        const container = document.getElementById('bonus-history-items');
        if (!container) return;

        try {
            if (window.ReferralStore) {
                const state = window.ReferralStore.getState();
                const history = state.bonusHistory || [];

                if (history.length === 0) {
                    container.innerHTML = '<p style="color: #888; text-align: center;">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤</p>';
                    return;
                }

                container.innerHTML = '';
                history.forEach(item => {
                    const element = this.createBonusHistoryItem(item);
                    container.appendChild(element);
                });

                this.data.bonusHistory = history;
            }
        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
            container.innerHTML = '<p style="color: #888; text-align: center;">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó</p>';
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤
     */
    createBonusHistoryItem(item) {
        const div = document.createElement('div');
        div.className = 'bonus-history-item';

        const date = new Date(item.date).toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: '2-digit',
            year: '2-digit'
        });

        const typeText = this.getBonusTypeText(item.type);

        div.innerHTML = `
            <div class="history-date">${date}</div>
            <div class="history-info">
                <div class="history-type">${typeText}</div>
                ${item.referralId ? `<div class="history-user-id">ID: ${item.referralId}</div>` : ''}
            </div>
            <div class="history-amount">+${item.amount} winix</div>
        `;

        return div;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ç–∏–ø—É –±–æ–Ω—É—Å—É
     */
    getBonusTypeText(type) {
        const types = {
            'DIRECT_BONUS': '–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞',
            'LEVEL1_PERCENTAGE': '–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 1-–≥–æ —Ä—ñ–≤–Ω—è',
            'LEVEL2_PERCENTAGE': '–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 2-–≥–æ —Ä—ñ–≤–Ω—è',
            'BADGE_REWARD': '–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –±–µ–π–¥–∂',
            'TASK_REWARD': '–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è'
        };
        return types[type] || type;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
     */
    async updateActivityData() {
        console.log('üìà [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...');

        const tableBody = document.getElementById('activity-table-body');
        if (!tableBody) return;

        try {
            if (window.ReferralStore) {
                const state = window.ReferralStore.getState();
                const referrals = [...(state.level1Referrals || []), ...(state.level2Referrals || [])];

                if (referrals.length === 0) {
                    tableBody.innerHTML = '<p style="color: #888; text-align: center; padding: 20px;">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤</p>';
                    return;
                }

                tableBody.innerHTML = '';
                referrals.forEach(referral => {
                    const row = this.createActivityTableRow(referral);
                    tableBody.appendChild(row);
                });

                // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                this.updateActivityRecommendations(referrals);
            }
        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
            tableBody.innerHTML = '<p style="color: #888; text-align: center; padding: 20px;">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</p>';
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
     */
    createActivityTableRow(referral) {
        const div = document.createElement('div');
        div.className = 'activity-table-row';

        const isActive = referral.participatedDraws >= this.config.activityCriteria.minDraws ||
                        referral.invitedReferrals >= this.config.activityCriteria.minInvited;

        div.innerHTML = `
            <div class="activity-table-data activity-data-id">${referral.id}</div>
            <div class="activity-table-data activity-data-draws">${referral.participatedDraws || 0}</div>
            <div class="activity-table-data activity-data-invited">${referral.invitedReferrals || 0}</div>
            <div class="activity-table-data activity-data-status">
                <span class="activity-status-badge ${isActive ? 'status-active' : 'status-inactive'}">
                    ${isActive ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
                </span>
            </div>
        `;

        return div;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —â–æ–¥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
     */
    updateActivityRecommendations(referrals) {
        const container = document.getElementById('activity-recommendations');
        if (!container) return;

        const inactiveCount = referrals.filter(r =>
            r.participatedDraws < this.config.activityCriteria.minDraws &&
            r.invitedReferrals < this.config.activityCriteria.minInvited
        ).length;

        container.innerHTML = '';

        if (inactiveCount > 0) {
            const recommendation = document.createElement('p');
            recommendation.style.color = 'white';
            recommendation.style.marginBottom = '10px';
            recommendation.textContent = `–£ –≤–∞—Å ${inactiveCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤. ` +
                `–ó–∞–æ—Ö–æ—á—É–π—Ç–µ —ó—Ö –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö (–º—ñ–Ω—ñ–º—É–º ${this.config.activityCriteria.minDraws}) ` +
                `–∞–±–æ –∑–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–º—ñ–Ω—ñ–º—É–º ${this.config.activityCriteria.minInvited}).`;
            container.appendChild(recommendation);
        } else if (referrals.length > 0) {
            const recommendation = document.createElement('p');
            recommendation.style.color = 'white';
            recommendation.textContent = '–ß—É–¥–æ–≤–æ! –í—Å—ñ –≤–∞—à—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∑–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.';
            container.appendChild(recommendation);
        } else {
            const recommendation = document.createElement('p');
            recommendation.style.color = 'white';
            recommendation.textContent = '–ü–æ—á–Ω—ñ—Ç—å –∑–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ –∑–∞ –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º!';
            container.appendChild(recommendation);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatisticsUI() {
        console.log('üìä [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤ updateReferralStatistics
        // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     */
    updateListsUI() {
        console.log('üìã [DynamicData] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤...');

        try {
            if (window.ReferralStore) {
                const state = window.ReferralStore.getState();

                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É 1-–≥–æ —Ä—ñ–≤–Ω—è
                this.updateReferralList('level1-list', state.level1Referrals || [], 1);

                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É 2-–≥–æ —Ä—ñ–≤–Ω—è
                this.updateReferralList('level2-list', state.level2Referrals || [], 2);

                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—ó
                this.updateReferralHierarchy(state);
            }
        } catch (error) {
            console.error('‚ùå [DynamicData] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤:', error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     */
    updateReferralList(containerId, referrals, level) {
        const container = document.getElementById(containerId);
        if (!container) return;

        if (referrals.length === 0) {
            container.innerHTML = `<p style="color: #888; text-align: center;">–ù–µ–º–∞—î —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ ${level}-–≥–æ —Ä—ñ–≤–Ω—è</p>`;
            return;
        }

        container.innerHTML = '';
        referrals.forEach(referral => {
            const element = this.createReferralListItem(referral, level);
            container.appendChild(element);
        });
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     */
    createReferralListItem(referral, level) {
        const div = document.createElement('div');
        div.className = `referral-item level-${level}`;

        const date = new Date(referral.registrationDate).toLocaleDateString('uk-UA');
        const isActive = referral.participatedDraws >= this.config.activityCriteria.minDraws ||
                        referral.invitedReferrals >= this.config.activityCriteria.minInvited;

        div.innerHTML = `
            <div class="referral-info">
                <div class="referral-id">${referral.id}</div>
                <div class="referral-date">–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: ${date}</div>
            </div>
            <div class="referral-stats">
                <div class="referral-earnings">${referral.earned || 0} winix</div>
                <div class="referral-status ${isActive ? 'active' : 'inactive'}">
                    ${isActive ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
                </div>
            </div>
        `;

        div.addEventListener('click', () => this.showReferralDetails(referral));

        return div;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
     */
    updateReferralHierarchy(state) {
        const container = document.getElementById('referral-hierarchy');
        if (!container) return;

        const hasReferrals = (state.level1Referrals?.length || 0) + (state.level2Referrals?.length || 0) > 0;

        if (!hasReferrals) {
            container.innerHTML = '<p style="color: #888; text-align: center;">–ù–µ–º–∞—î —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—î—Ä–∞—Ä—Ö—ñ—ó</p>';
            return;
        }

        container.innerHTML = '';

        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ 1-–≥–æ —Ä—ñ–≤–Ω—è
        (state.level1Referrals || []).forEach(ref1 => {
            const node1 = this.createHierarchyNode(ref1, 1);
            container.appendChild(node1);

            // –®—É–∫–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ 2-–≥–æ —Ä—ñ–≤–Ω—è –≤—ñ–¥ —Ü—å–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            const level2FromRef1 = (state.level2Referrals || []).filter(ref2 =>
                ref2.invitedBy === ref1.id
            );

            level2FromRef1.forEach(ref2 => {
                const node2 = this.createHierarchyNode(ref2, 2);
                container.appendChild(node2);
            });
        });
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—É–∑–ª–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—ó
     */
    createHierarchyNode(referral, level) {
        const div = document.createElement('div');
        div.className = `hierarchy-node level-${level}`;

        if (level === 2) {
            const connector = document.createElement('div');
            connector.className = 'hierarchy-connector';
            div.appendChild(connector);
        }

        const date = new Date(referral.registrationDate).toLocaleDateString('uk-UA');
        const isActive = referral.participatedDraws >= this.config.activityCriteria.minDraws ||
                        referral.invitedReferrals >= this.config.activityCriteria.minInvited;

        div.innerHTML += `
            <div class="hierarchy-user-id">ID: ${referral.id}</div>
            <div class="hierarchy-registration-date">–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: ${date}</div>
            <div class="hierarchy-active-badge ${isActive ? 'active' : 'inactive'}">
                ${isActive ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
            </div>
        `;

        return div;
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞
     */
    showReferralDetails(referral) {
        const detailsContainer = document.getElementById('referral-details');
        if (!detailsContainer) return;

        document.getElementById('detail-id').textContent = referral.id;
        document.getElementById('detail-date').textContent =
            new Date(referral.registrationDate).toLocaleDateString('uk-UA');

        const isActive = referral.participatedDraws >= this.config.activityCriteria.minDraws ||
                        referral.invitedReferrals >= this.config.activityCriteria.minInvited;

        document.getElementById('detail-status').textContent = isActive ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π';
        document.getElementById('detail-earnings').textContent = (referral.earned || 0) + ' winix';
        document.getElementById('detail-last-activity').textContent =
            referral.lastActivity ? new Date(referral.lastActivity).toLocaleDateString('uk-UA') : '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö';
        document.getElementById('detail-referral-count').textContent = referral.invitedReferrals || 0;
        document.getElementById('detail-draws').textContent = referral.participatedDraws || 0;
        document.getElementById('detail-invited').textContent = referral.invitedReferrals || 0;

        // –ü—Ä–∏—á–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        let activityReason = '–ù–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó';
        if (referral.participatedDraws >= this.config.activityCriteria.minDraws) {
            activityReason = `–£—á–∞—Å—Ç—å –≤ ${referral.participatedDraws} —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö`;
        } else if (referral.invitedReferrals >= this.config.activityCriteria.minInvited) {
            activityReason = `–ó–∞–ø—Ä–æ—Å–∏–≤ ${referral.invitedReferrals} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`;
        }
        document.getElementById('detail-activity-reason').textContent = activityReason;

        detailsContainer.classList.add('show');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
     */
    updateElementsBySelector(selector, value) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
            el.textContent = value;
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
     */
    setupAutoUpdates() {
        console.log('‚è∞ [DynamicData] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å...');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
        this.updateIntervals.balances = setInterval(() => {
            this.updateBalances();
        }, 30000);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        this.updateIntervals.statistics = setInterval(() => {
            this.updateReferralStatistics();
            this.updateBadges();
        }, 60000);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ–∂–Ω—ñ 2 —Ö–≤–∏–ª–∏–Ω–∏
        this.updateIntervals.history = setInterval(() => {
            this.updateBonusHistory();
        }, 120000);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –≤—ñ–¥ ReferralStore
        if (window.ReferralStore) {
            window.ReferralStore.subscribe(() => {
                console.log('üì° [DynamicData] –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ ReferralStore');
                this.updateAllUI();
            });
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
     */
    destroy() {
        console.log('üßπ [DynamicData] –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞...');

        Object.values(this.updateIntervals).forEach(interval => {
            clearInterval(interval);
        });

        this.updateIntervals = {};
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å
window.DynamicDataController = DynamicDataController;