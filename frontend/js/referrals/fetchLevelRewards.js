/**
 * –û–∫—Ä–µ–º–∞ –¥—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
 * –í–∏–Ω–µ—Å–µ–Ω–∞ –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
 */

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –¥—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
 *
 * @param {string|number} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {Object} [options] - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó –¥–ª—è –∑–∞–ø–∏—Ç—É
 * @param {boolean} [options.activeOnly=true] - –í—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
 * @returns {Function} –§—É–Ω–∫—Ü—ñ—è thunk, —è–∫–∞ –¥–∏—Å–ø–∞—Ç—á–∏—Ç—å –¥—ñ—ó
 */
export const fetchLevelRewards = (userId, options = {}) => {
  return async (dispatch) => {
    try {
            console.log('üíé fetchLevelRewards: –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è userId:', userId);
      console.log('‚öôÔ∏è fetchLevelRewards: –æ–ø—Ü—ñ—ó:', options);

      // –î–∏–Ω–∞–º—ñ—á–Ω–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
      const [
        { fetchReferralEarnings },
        { calculateLevel1Reward },
        { calculateLevel2Reward }
      ] = await Promise.all([
        import('./api/fetchReferralEarnings.js'),
        import('./services/calculateLevel1Reward.js'),
        import('./services/calculateLevel2Reward.js')
      ]);

         console.log('‚úÖ fetchLevelRewards: –º–æ–¥—É–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ');

      // –¢–∏–ø–∏ –¥—ñ–π –≤–∏–∑–Ω–∞—á–µ–Ω—ñ —Ç—É—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
      const FETCH_LEVEL_REWARDS_REQUEST = 'FETCH_LEVEL_REWARDS_REQUEST';
      const FETCH_LEVEL_REWARDS_SUCCESS = 'FETCH_LEVEL_REWARDS_SUCCESS';
      const FETCH_LEVEL_REWARDS_FAILURE = 'FETCH_LEVEL_REWARDS_FAILURE';

      // –§—É–Ω–∫—Ü—ñ—ó –¥—ñ–π
      const fetchLevelRewardsRequest = () => ({
        type: FETCH_LEVEL_REWARDS_REQUEST
      });

      const fetchLevelRewardsSuccess = (data) => ({
        type: FETCH_LEVEL_REWARDS_SUCCESS,
        payload: data
      });

      const fetchLevelRewardsFailure = (error) => ({
        type: FETCH_LEVEL_REWARDS_FAILURE,
        payload: { error: error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏' }
      });

      // –î–∏—Å–ø–∞—Ç—á–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É
      dispatch(fetchLevelRewardsRequest());
      console.log('fetchLevelRewards: –¥–∏—Å–ø–∞—Ç—á–µ–Ω–æ REQUEST');

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
      const earningsData = await fetchReferralEarnings(userId, options);
      console.log('fetchLevelRewards: –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏:', earningsData);

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ 1-–≥–æ —Ä—ñ–≤–Ω—è
      const level1RewardsData = calculateLevel1Reward(
        earningsData.level1Referrals,
        options
      );
      console.log('fetchLevelRewards: —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ level1Rewards:', level1RewardsData);

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ 2-–≥–æ —Ä—ñ–≤–Ω—è
      const level2RewardsData = calculateLevel2Reward(
        earningsData.level2Referrals,
        {
          ...options,
          groupByReferrers: true // –í–∫–ª—é—á–∞—î–º–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ 1-–≥–æ —Ä—ñ–≤–Ω—è
        }
      );
      console.log('fetchLevelRewards: —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ level2Rewards:', level2RewardsData);

      // –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const rewardsData = {
        level1Rewards: level1RewardsData,
        level2Rewards: level2RewardsData,
        summary: {
          totalPercentageReward: level1RewardsData.totalReward + level2RewardsData.totalReward,
          totalReferralsEarnings: level1RewardsData.totalEarnings + level2RewardsData.totalEarnings,
          lastUpdated: new Date().toISOString()
        }
      };

      console.log('fetchLevelRewards: —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', rewardsData);

      // –î–∏—Å–ø–∞—Ç—á–∏–º–æ —É—Å–ø—ñ—à–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
      dispatch(fetchLevelRewardsSuccess(rewardsData));
      console.log('fetchLevelRewards: –¥–∏—Å–ø–∞—Ç—á–µ–Ω–æ SUCCESS');

      return rewardsData;
    } catch (error) {
      console.error('‚ùå fetchLevelRewards: –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);

      // –¢–∏–ø–∏ –¥—ñ–π –¥–ª—è –ø–æ–º–∏–ª–∫–∏
      const FETCH_LEVEL_REWARDS_FAILURE = 'FETCH_LEVEL_REWARDS_FAILURE';

      const fetchLevelRewardsFailure = (error) => ({
        type: FETCH_LEVEL_REWARDS_FAILURE,
        payload: { error: error.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏' }
      });

      // –î–∏—Å–ø–∞—Ç—á–∏–º–æ –ø–æ–º–∏–ª–∫—É
      dispatch(fetchLevelRewardsFailure(error));
      console.log('fetchLevelRewards: –¥–∏—Å–ø–∞—Ç—á–µ–Ω–æ FAILURE');

      // –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
      throw error;
    }
  };
};