/**
 * admin_raffles.js - –ú–æ–¥—É–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX
 */

(function() {
    'use strict';

    console.log("üéÆ Admin Raffles: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω-–º–æ–¥—É–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤");

    // ======== –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ========
    let _isLoading = false;
    let _rafflesList = [];
    let _currentPage = 1;
    let _itemsPerPage = 10;
    let _totalItems = 0;
    let _statusFilter = null;

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó API ========

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
     */
    async function getAllRaffles(page = 1, statusFilter = null) {
        try {
            if (_isLoading) {
                console.log("‚è≥ Admin Raffles: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è");
                return;
            }

            _isLoading = true;
            showAdminLoader();

            // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            _currentPage = page;
            _statusFilter = statusFilter;

            // –ë—É–¥—É—î–º–æ URL —ñ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            let url = '/api/admin/raffles';
            let params = [];

            if (statusFilter) {
                params.push(`status=${statusFilter}`);
            }

            params.push(`page=${page}`);
            params.push(`limit=${_itemsPerPage}`);

            if (params.length > 0) {
                url += '?' + params.join('&');
            }

            // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –∞–¥–º—ñ–Ω-–∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest(url, 'GET', null, headers);

            hideAdminLoader();
            _isLoading = false;

            if (response.status === 'success') {
                _rafflesList = response.data || [];
                _totalItems = response.pagination?.total || _rafflesList.length;

                return {
                    raffles: _rafflesList,
                    pagination: {
                        currentPage: _currentPage,
                        totalPages: Math.ceil(_totalItems / _itemsPerPage),
                        totalItems: _totalItems
                    }
                };
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
            hideAdminLoader();
            _isLoading = false;
            showAdminError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: ' + error.message);
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function getRaffleDetails(raffleId) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            showAdminLoader();

            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest(`/api/admin/raffles/${raffleId}`, 'GET', null, headers);

            hideAdminLoader();

            if (response.status === 'success') {
                return response.data;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            hideAdminLoader();
            showAdminError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ' + error.message);
            return null;
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function createRaffle(raffleData) {
        try {
            if (!raffleData) {
                throw new Error('–î–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            const requiredFields = ['title', 'prize_amount', 'prize_currency', 'entry_fee', 'start_time', 'end_time', 'winners_count'];
            const missingFields = requiredFields.filter(field => !raffleData[field]);

            if (missingFields.length > 0) {
                throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: ${missingFields.join(', ')}`);
            }

            showAdminLoader();

            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest('/api/admin/raffles', 'POST', raffleData, headers);

            hideAdminLoader();

            if (response.status === 'success') {
                showAdminSuccess('–†–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
                return response.data;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É:', error);
            hideAdminLoader();
            showAdminError('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ' + error.message);
            return null;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function updateRaffle(raffleId, updateData) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            if (!updateData || Object.keys(updateData).length === 0) {
                throw new Error('–î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            showAdminLoader();

            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest(`/api/admin/raffles/${raffleId}`, 'PUT', updateData, headers);

            hideAdminLoader();

            if (response.status === 'success') {
                showAdminSuccess('–†–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
                return response.data;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            hideAdminLoader();
            showAdminError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ' + error.message);
            return null;
        }
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function deleteRaffle(raffleId) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à? –¶—è –¥—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.')) {
                return null;
            }

            showAdminLoader();

            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest(`/api/admin/raffles/${raffleId}`, 'DELETE', null, headers);

            hideAdminLoader();

            if (response.status === 'success') {
                showAdminSuccess('–†–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
                return true;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            hideAdminLoader();
            showAdminError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ' + error.message);
            return false;
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function finishRaffle(raffleId) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑–∞—Ä–∞–∑? –ë—É–¥—É—Ç—å –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ.')) {
                return null;
            }

            showAdminLoader();

            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest(`/api/admin/raffles/${raffleId}/finish`, 'POST', null, headers);

            hideAdminLoader();

            if (response.status === 'success') {
                showAdminSuccess('–†–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–º–æ–∂—Ü—ñ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ.');
                return response.data;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            hideAdminLoader();
            showAdminError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ' + error.message);
            return null;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function getRaffleParticipants(raffleId) {
        try {
            if (!raffleId) {
                throw new Error('ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
            }

            showAdminLoader();

            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest(`/api/admin/raffles/${raffleId}/participants`, 'GET', null, headers);

            hideAdminLoader();

            if (response.status === 'success') {
                return response.data;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É ${raffleId}:`, error);
            hideAdminLoader();
            showAdminError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤: ' + error.message);
            return null;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    async function checkExpiredRaffles() {
        try {
            showAdminLoader();

            const headers = {
                'X-Admin-User-Id': window.AdminAPI.getAdminId()
            };

            const response = await window.AdminAPI.apiRequest('/api/admin/raffles/check-expired', 'POST', null, headers);

            hideAdminLoader();

            if (response.status === 'success') {
                const finishedCount = response.finished_count || 0;

                if (finishedCount > 0) {
                    showAdminSuccess(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ ${finishedCount} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤`);
                } else {
                    showAdminInfo('–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                }

                return response;
            } else {
                throw new Error(response.message || '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:', error);
            hideAdminLoader();
            showAdminError('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: ' + error.message);
            return null;
        }
    }

    // ======== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó UI ========

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
     */
    async function displayRafflesList() {
        const rafflesContainer = document.getElementById('admin-raffles-container');
        if (!rafflesContainer) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        const result = await getAllRaffles(_currentPage, _statusFilter);

        if (!result) {
            rafflesContainer.innerHTML = '<div class="admin-error-message">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤</div>';
            return;
        }

        const { raffles, pagination } = result;

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        let tableHTML = `
            <div class="admin-filters">
                <div class="filter-group">
                    <label>–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º:</label>
                    <select id="status-filter">
                        <option value="">–í—Å—ñ</option>
                        <option value="active" ${_statusFilter === 'active' ? 'selected' : ''}>–ê–∫—Ç–∏–≤–Ω—ñ</option>
                        <option value="completed" ${_statusFilter === 'completed' ? 'selected' : ''}>–ó–∞–≤–µ—Ä—à–µ–Ω—ñ</option>
                        <option value="cancelled" ${_statusFilter === 'cancelled' ? 'selected' : ''}>–°–∫–∞—Å–æ–≤–∞–Ω—ñ</option>
                    </select>
                </div>
                <button id="add-raffle-btn" class="admin-button">–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à</button>
                <button id="check-expired-btn" class="admin-button">–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ</button>
            </div>

            <table class="admin-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞</th>
                        <th>–ü—Ä–∏–∑</th>
                        <th>–í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ</th>
                        <th>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è</th>
                        <th>–£—á–∞—Å–Ω–∏–∫—ñ–≤</th>
                        <th>–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î—ñ—ó</th>
                    </tr>
                </thead>
                <tbody>
        `;

        if (raffles.length === 0) {
            tableHTML += `
                <tr>
                    <td colspan="9" class="no-data">–†–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</td>
                </tr>
            `;
        } else {
            // –î–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            raffles.forEach(raffle => {
                const endDate = new Date(raffle.end_time);
                const formattedDate = endDate.toLocaleString('uk-UA');

                const statusClass =
                    raffle.status === 'active' ? 'status-active' :
                    raffle.status === 'completed' ? 'status-completed' :
                    'status-cancelled';

                const statusText =
                    raffle.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' :
                    raffle.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                    '–°–∫–∞—Å–æ–≤–∞–Ω–æ';

                tableHTML += `
                    <tr data-raffle-id="${raffle.id}">
                        <td>${raffle.id.substring(0, 8)}...</td>
                        <td>${raffle.title}</td>
                        <td>${raffle.prize_amount} ${raffle.prize_currency}</td>
                        <td>${raffle.entry_fee} –∂–µ—Ç–æ–Ω—ñ–≤</td>
                        <td>${formattedDate}</td>
                        <td>${raffle.participants_count || 0}</td>
                        <td>${raffle.winners_count}</td>
                        <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                        <td class="actions-cell">
                            <button class="action-btn view-btn" data-raffle-id="${raffle.id}" title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ">üëÅÔ∏è</button>
                            ${raffle.status === 'active' ? `
                                <button class="action-btn edit-btn" data-raffle-id="${raffle.id}" title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏">‚úèÔ∏è</button>
                                <button class="action-btn finish-btn" data-raffle-id="${raffle.id}" title="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à">üèÅ</button>
                                <button class="action-btn delete-btn" data-raffle-id="${raffle.id}" title="–í–∏–¥–∞–ª–∏—Ç–∏">üóëÔ∏è</button>
                            ` : `
                                <button class="action-btn participants-btn" data-raffle-id="${raffle.id}" title="–£—á–∞—Å–Ω–∏–∫–∏">üë•</button>
                            `}
                        </td>
                    </tr>
                `;
            });
        }

        tableHTML += `
                </tbody>
            </table>
        `;

        // –î–æ–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        if (pagination.totalPages > 1) {
            tableHTML += `
                <div class="admin-pagination">
                    <button id="prev-page" ${pagination.currentPage <= 1 ? 'disabled' : ''}>¬´ –ü–æ–ø–µ—Ä–µ–¥–Ω—è</button>
                    <span>–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${pagination.currentPage} –∑ ${pagination.totalPages}</span>
                    <button id="next-page" ${pagination.currentPage >= pagination.totalPages ? 'disabled' : ''}>–ù–∞—Å—Ç—É–ø–Ω–∞ ¬ª</button>
                </div>
            `;
        }

        // –í—Å—Ç–∞–≤–ª—è—î–º–æ HTML –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        rafflesContainer.innerHTML = tableHTML;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        document.getElementById('status-filter')?.addEventListener('change', function() {
            const status = this.value;
            _statusFilter = status || null;
            _currentPage = 1;
            displayRafflesList();
        });

        document.getElementById('add-raffle-btn')?.addEventListener('click', function() {
            openCreateRaffleModal();
        });

        document.getElementById('check-expired-btn')?.addEventListener('click', function() {
            checkExpiredRaffles().then(() => {
                displayRafflesList();
            });
        });

        document.getElementById('prev-page')?.addEventListener('click', function() {
            if (_currentPage > 1) {
                _currentPage--;
                displayRafflesList();
            }
        });

        document.getElementById('next-page')?.addEventListener('click', function() {
            if (_currentPage < pagination.totalPages) {
                _currentPage++;
                displayRafflesList();
            }
        });

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥—ñ–π
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                openRaffleDetailsModal(raffleId);
            });
        });

        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                openEditRaffleModal(raffleId);
            });
        });

        document.querySelectorAll('.finish-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                finishRaffle(raffleId).then(() => {
                    displayRafflesList();
                });
            });
        });

        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                deleteRaffle(raffleId).then((success) => {
                    if (success) {
                        displayRafflesList();
                    }
                });
            });
        });

        document.querySelectorAll('.participants-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const raffleId = this.getAttribute('data-raffle-id');
                openParticipantsModal(raffleId);
            });
        });
    }

    /**
     * –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    function openCreateRaffleModal() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'admin-modal';
        modal.id = 'create-raffle-modal';

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –ø–æ–ª—ñ–≤ –¥–∞—Ç
        const now = new Date();
        const nextWeek = new Date();
        nextWeek.setDate(now.getDate() + 7);

        const nowStr = now.toISOString().slice(0, 16);
        const nextWeekStr = nextWeek.toISOString().slice(0, 16);

        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        modal.innerHTML = `
            <div class="admin-modal-content">
                <div class="admin-modal-header">
                    <h2>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h2>
                    <span class="admin-modal-close">&times;</span>
                </div>
                <div class="admin-modal-body">
                    <form id="create-raffle-form">
                        <div class="form-group">
                            <label for="title">–ù–∞–∑–≤–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É*</label>
                            <input type="text" id="title" name="title" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="description">–û–ø–∏—Å</label>
                            <textarea id="description" name="description" rows="3"></textarea>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group half">
                                <label for="prize_amount">–°—É–º–∞ –ø—Ä–∏–∑—É*</label>
                                <input type="number" id="prize_amount" name="prize_amount" min="1" step="0.01" required>
                            </div>
                            
                            <div class="form-group half">
                                <label for="prize_currency">–í–∞–ª—é—Ç–∞ –ø—Ä–∏–∑—É*</label>
                                <select id="prize_currency" name="prize_currency" required>
                                    <option value="WINIX" selected>WINIX</option>
                                    <option value="USDT">USDT</option>
                                    <option value="USD">USD</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group half">
                                <label for="entry_fee">–í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ (–∂–µ—Ç–æ–Ω–∏)*</label>
                                <input type="number" id="entry_fee" name="entry_fee" min="1" step="1" value="1" required>
                            </div>
                            
                            <div class="form-group half">
                                <label for="winners_count">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤*</label>
                                <input type="number" id="winners_count" name="winners_count" min="1" step="1" value="1" required>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group half">
                                <label for="start_time">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É*</label>
                                <input type="datetime-local" id="start_time" name="start_time" value="${nowStr}" required>
                            </div>
                            
                            <div class="form-group half">
                                <label for="end_time">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è*</label>
                                <input type="datetime-local" id="end_time" name="end_time" value="${nextWeekStr}" required>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="image_url">URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</label>
                            <input type="text" id="image_url" name="image_url" placeholder="assets/prize-poster.gif">
                        </div>
                        
                        <div class="form-group checkbox-group">
                            <input type="checkbox" id="is_daily" name="is_daily">
                            <label for="is_daily">–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à</label>
                        </div>
                        
                        <div class="form-group" id="prize-distribution-container">
                            <label>–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤</label>
                            <div class="prize-distribution-list" id="prize-distribution-list">
                                <div class="prize-distribution-item">
                                    <span>1 –º—ñ—Å—Ü–µ:</span>
                                    <input type="number" class="prize-amount" data-place="1" value="100" min="1" step="0.01">
                                    <span class="prize-currency">WINIX</span>
                                </div>
                            </div>
                            <small>* –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –ø—Ä–∏–∑—É</small>
                        </div>
                    </form>
                </div>
                <div class="admin-modal-footer">
                    <button type="button" class="admin-button cancel-btn">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                    <button type="button" class="admin-button save-btn">–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à</button>
                </div>
            </div>
        `;

        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        const closeBtn = modal.querySelector('.admin-modal-close');
        const cancelBtn = modal.querySelector('.cancel-btn');
        const saveBtn = modal.querySelector('.save-btn');
        const form = modal.querySelector('#create-raffle-form');
        const winnersCountInput = modal.querySelector('#winners_count');
        const prizeCurrencySelect = modal.querySelector('#prize_currency');
        const distributionList = modal.querySelector('#prize-distribution-list');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–∏–∑—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        winnersCountInput.addEventListener('change', function() {
            updatePrizeDistribution(parseInt(this.value), prizeCurrencySelect.value);
        });

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞–ª—é—Ç–∏ –ø—Ä–∏–∑—É –≤ —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ
        prizeCurrencySelect.addEventListener('change', function() {
            const currencyElements = distributionList.querySelectorAll('.prize-currency');
            currencyElements.forEach(el => {
                el.textContent = this.value;
            });
        });

        // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–∏–∑—ñ–≤
        function updatePrizeDistribution(count, currency) {
            // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫
            distributionList.innerHTML = '';

            // –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—ñ–≤
            for (let i = 1; i <= count; i++) {
                const item = document.createElement('div');
                item.className = 'prize-distribution-item';

                // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—Ü—è (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
                const amount = i === 1 ? 100 : i <= 3 ? 50 : 25;

                item.innerHTML = `
                    <span>${i} –º—ñ—Å—Ü–µ:</span>
                    <input type="number" class="prize-amount" data-place="${i}" value="${amount}" min="1" step="0.01">
                    <span class="prize-currency">${currency}</span>
                `;

                distributionList.appendChild(item);
            }
        }

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        function closeModal() {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }

        closeBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        saveBtn.addEventListener('click', async function() {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∏
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏
            const formData = {
                title: form.querySelector('#title').value,
                description: form.querySelector('#description').value,
                prize_amount: parseFloat(form.querySelector('#prize_amount').value),
                prize_currency: form.querySelector('#prize_currency').value,
                entry_fee: parseInt(form.querySelector('#entry_fee').value),
                winners_count: parseInt(form.querySelector('#winners_count').value),
                start_time: new Date(form.querySelector('#start_time').value).toISOString(),
                end_time: new Date(form.querySelector('#end_time').value).toISOString(),
                image_url: form.querySelector('#image_url').value,
                is_daily: form.querySelector('#is_daily').checked,
            };

            // –ó–±–∏—Ä–∞—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤
            const prizeDistribution = {};
            distributionList.querySelectorAll('.prize-distribution-item').forEach(item => {
                const place = item.querySelector('.prize-amount').getAttribute('data-place');
                const amount = parseFloat(item.querySelector('.prize-amount').value);

                prizeDistribution[place] = {
                    amount: amount,
                    currency: formData.prize_currency
                };
            });

            formData.prize_distribution = prizeDistribution;

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
            const result = await createRaffle(formData);

            if (result) {
                closeModal();
                displayRafflesList(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            }
        });

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤
        updatePrizeDistribution(parseInt(winnersCountInput.value), prizeCurrencySelect.value);
    }

    /**
     * –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function openEditRaffleModal(raffleId) {
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        const raffle = await getRaffleDetails(raffleId);

        if (!raffle) {
            showAdminError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            return;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'admin-modal';
        modal.id = 'edit-raffle-modal';

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç–∏ –¥–ª—è –ø–æ–ª—ñ–≤
        const startTime = new Date(raffle.start_time);
        const endTime = new Date(raffle.end_time);

        const startTimeStr = startTime.toISOString().slice(0, 16);
        const endTimeStr = endTime.toISOString().slice(0, 16);

        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        modal.innerHTML = `
            <div class="admin-modal-content">
                <div class="admin-modal-header">
                    <h2>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h2>
                    <span class="admin-modal-close">&times;</span>
                </div>
                <div class="admin-modal-body">
                    <form id="edit-raffle-form">
                        <div class="form-group">
                            <label for="edit-title">–ù–∞–∑–≤–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É*</label>
                            <input type="text" id="edit-title" name="title" value="${raffle.title}" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit-description">–û–ø–∏—Å</label>
                            <textarea id="edit-description" name="description" rows="3">${raffle.description || ''}</textarea>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group half">
                                <label for="edit-prize_amount">–°—É–º–∞ –ø—Ä–∏–∑—É*</label>
                                <input type="number" id="edit-prize_amount" name="prize_amount" min="1" step="0.01" value="${raffle.prize_amount}" required>
                            </div>
                            
                            <div class="form-group half">
                                <label for="edit-prize_currency">–í–∞–ª—é—Ç–∞ –ø—Ä–∏–∑—É*</label>
                                <select id="edit-prize_currency" name="prize_currency" required>
                                    <option value="WINIX" ${raffle.prize_currency === 'WINIX' ? 'selected' : ''}>WINIX</option>
                                    <option value="USDT" ${raffle.prize_currency === 'USDT' ? 'selected' : ''}>USDT</option>
                                    <option value="USD" ${raffle.prize_currency === 'USD' ? 'selected' : ''}>USD</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group half">
                                <label for="edit-entry_fee">–í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ (–∂–µ—Ç–æ–Ω–∏)*</label>
                                <input type="number" id="edit-entry_fee" name="entry_fee" min="1" step="1" value="${raffle.entry_fee}" required>
                            </div>
                            
                            <div class="form-group half">
                                <label for="edit-winners_count">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤*</label>
                                <input type="number" id="edit-winners_count" name="winners_count" min="1" step="1" value="${raffle.winners_count}" required>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group half">
                                <label for="edit-start_time">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É*</label>
                                <input type="datetime-local" id="edit-start_time" name="start_time" value="${startTimeStr}" required>
                            </div>
                            
                            <div class="form-group half">
                                <label for="edit-end_time">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è*</label>
                                <input type="datetime-local" id="edit-end_time" name="end_time" value="${endTimeStr}" required>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit-image_url">URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</label>
                            <input type="text" id="edit-image_url" name="image_url" value="${raffle.image_url || ''}">
                        </div>
                        
                        <div class="form-group checkbox-group">
                            <input type="checkbox" id="edit-is_daily" name="is_daily" ${raffle.is_daily ? 'checked' : ''}>
                            <label for="edit-is_daily">–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à</label>
                        </div>
                        
                        <div class="form-group" id="edit-prize-distribution-container">
                            <label>–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤</label>
                            <div class="prize-distribution-list" id="edit-prize-distribution-list">
                                <!-- –¢—É—Ç –±—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤ -->
                            </div>
                            <small>* –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –ø—Ä–∏–∑—É</small>
                        </div>
                    </form>
                </div>
                <div class="admin-modal-footer">
                    <button type="button" class="admin-button cancel-btn">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                    <button type="button" class="admin-button save-btn">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</button>
                </div>
            </div>
        `;

        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤
        const distributionList = modal.querySelector('#edit-prize-distribution-list');
        const prizeDistribution = raffle.prize_distribution || {};

        for (let i = 1; i <= raffle.winners_count; i++) {
            const place = i.toString();
            const item = document.createElement('div');
            item.className = 'prize-distribution-item';

            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—Ü—è
            const prizeData = prizeDistribution[place] || {};
            const amount = prizeData.amount || (i === 1 ? 100 : i <= 3 ? 50 : 25);
            const currency = prizeData.currency || raffle.prize_currency;

            item.innerHTML = `
                <span>${i} –º—ñ—Å—Ü–µ:</span>
                <input type="number" class="prize-amount" data-place="${i}" value="${amount}" min="1" step="0.01">
                <span class="prize-currency">${currency}</span>
            `;

            distributionList.appendChild(item);
        }

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        const closeBtn = modal.querySelector('.admin-modal-close');
        const cancelBtn = modal.querySelector('.cancel-btn');
        const saveBtn = modal.querySelector('.save-btn');
        const form = modal.querySelector('#edit-raffle-form');
        const winnersCountInput = modal.querySelector('#edit-winners_count');
        const prizeCurrencySelect = modal.querySelector('#edit-prize_currency');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–∏–∑—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        winnersCountInput.addEventListener('change', function() {
            updateEditPrizeDistribution(parseInt(this.value), prizeCurrencySelect.value);
        });

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞–ª—é—Ç–∏ –ø—Ä–∏–∑—É –≤ —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ
        prizeCurrencySelect.addEventListener('change', function() {
            const currencyElements = distributionList.querySelectorAll('.prize-currency');
            currencyElements.forEach(el => {
                el.textContent = this.value;
            });
        });

        // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–∏–∑—ñ–≤
        function updateEditPrizeDistribution(count, currency) {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            const currentValues = {};
            distributionList.querySelectorAll('.prize-distribution-item').forEach(item => {
                const place = item.querySelector('.prize-amount').getAttribute('data-place');
                const amount = parseFloat(item.querySelector('.prize-amount').value);
                currentValues[place] = amount;
            });

            // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫
            distributionList.innerHTML = '';

            // –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—ñ–≤
            for (let i = 1; i <= count; i++) {
                const item = document.createElement('div');
                item.className = 'prize-distribution-item';

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–±–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤–µ
                const place = i.toString();
                const amount = currentValues[place] || (i === 1 ? 100 : i <= 3 ? 50 : 25);

                item.innerHTML = `
                    <span>${i} –º—ñ—Å—Ü–µ:</span>
                    <input type="number" class="prize-amount" data-place="${i}" value="${amount}" min="1" step="0.01">
                    <span class="prize-currency">${currency}</span>
                `;

                distributionList.appendChild(item);
            }
        }

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        function closeEditModal() {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }

        closeBtn.addEventListener('click', closeEditModal);
        cancelBtn.addEventListener('click', closeEditModal);

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
        saveBtn.addEventListener('click', async function() {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∏
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏
            const formData = {
                title: form.querySelector('#edit-title').value,
                description: form.querySelector('#edit-description').value,
                prize_amount: parseFloat(form.querySelector('#edit-prize_amount').value),
                prize_currency: form.querySelector('#edit-prize_currency').value,
                entry_fee: parseInt(form.querySelector('#edit-entry_fee').value),
                winners_count: parseInt(form.querySelector('#edit-winners_count').value),
                start_time: new Date(form.querySelector('#edit-start_time').value).toISOString(),
                end_time: new Date(form.querySelector('#edit-end_time').value).toISOString(),
                image_url: form.querySelector('#edit-image_url').value,
                is_daily: form.querySelector('#edit-is_daily').checked,
            };

            // –ó–±–∏—Ä–∞—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤
            const prizeDistribution = {};
            distributionList.querySelectorAll('.prize-distribution-item').forEach(item => {
                const place = item.querySelector('.prize-amount').getAttribute('data-place');
                const amount = parseFloat(item.querySelector('.prize-amount').value);

                prizeDistribution[place] = {
                    amount: amount,
                    currency: formData.prize_currency
                };
            });

            formData.prize_distribution = prizeDistribution;

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
            const result = await updateRaffle(raffleId, formData);

            if (result) {
                closeEditModal();
                displayRafflesList(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            }
        });
    }

    /**
     * –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function openRaffleDetailsModal(raffleId) {
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        const raffle = await getRaffleDetails(raffleId);

        if (!raffle) {
            showAdminError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É');
            return;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'admin-modal';
        modal.id = 'raffle-details-modal';

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç–∏
        const startTime = new Date(raffle.start_time);
        const endTime = new Date(raffle.end_time);
        const createdAt = new Date(raffle.created_at);

        const startTimeStr = startTime.toLocaleString('uk-UA');
        const endTimeStr = endTime.toLocaleString('uk-UA');
        const createdAtStr = createdAt.toLocaleString('uk-UA');

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
        const statusClass =
            raffle.status === 'active' ? 'status-active' :
            raffle.status === 'completed' ? 'status-completed' :
            'status-cancelled';

        const statusText =
            raffle.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' :
            raffle.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
            '–°–∫–∞—Å–æ–≤–∞–Ω–æ';

        // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–∏–∑—ñ–≤
        let prizeDistributionHTML = '';
        const prizeDistribution = raffle.prize_distribution || {};

        for (let i = 1; i <= raffle.winners_count; i++) {
            const place = i.toString();
            const prizeData = prizeDistribution[place] || {};
            const amount = prizeData.amount || 0;
            const currency = prizeData.currency || raffle.prize_currency;

            prizeDistributionHTML += `
                <div class="prize-item">
                    <span class="prize-place">${i} –º—ñ—Å—Ü–µ:</span>
                    <span class="prize-value">${amount} ${currency}</span>
                </div>
            `;
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ (—è–∫—â–æ —î)
        let winnersHTML = '';
        if (raffle.status === 'completed' && raffle.winners && raffle.winners.length > 0) {
            winnersHTML = `
                <div class="details-section">
                    <h3>–ü–µ—Ä–µ–º–æ–∂—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h3>
                    <div class="winners-list">
            `;

            raffle.winners.forEach(winner => {
                winnersHTML += `
                    <div class="winner-item">
                        <div class="winner-place">${winner.place} –º—ñ—Å—Ü–µ</div>
                        <div class="winner-info">
                            <span class="winner-username">${winner.username}</span>
                            <span class="winner-id">ID: ${winner.telegram_id}</span>
                        </div>
                        <div class="winner-prize">${winner.prize_amount} ${winner.prize_currency}</div>
                    </div>
                `;
            });

            winnersHTML += `
                    </div>
                </div>
            `;
        }

        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        modal.innerHTML = `
            <div class="admin-modal-content wide-modal">
                <div class="admin-modal-header">
                    <h2>–î–µ—Ç–∞–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h2>
                    <span class="admin-modal-close">&times;</span>
                </div>
                <div class="admin-modal-body">
                    <div class="raffle-details-container">
                        <div class="raffle-header">
                            <h2 class="raffle-title">${raffle.title}</h2>
                            <span class="status-badge ${statusClass}">${statusText}</span>
                        </div>
                        
                        <div class="details-row">
                            <div class="details-column">
                                <div class="details-section">
                                    <h3>–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                                    <div class="details-grid">
                                        <div class="detail-item">
                                            <div class="detail-label">ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É:</div>
                                            <div class="detail-value">${raffle.id}</div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–¢–∏–ø:</div>
                                            <div class="detail-value">${raffle.is_daily ? '–©–æ–¥–µ–Ω–Ω–∏–π' : '–ó–≤–∏—á–∞–π–Ω–∏–π'}</div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</div>
                                            <div class="detail-value">${createdAtStr}</div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–°—Ç–≤–æ—Ä–µ–Ω–æ:</div>
                                            <div class="detail-value">${raffle.created_by || 'System'}</div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="details-section">
                                    <h3>–ß–∞—Å–æ–≤—ñ —Ä–∞–º–∫–∏</h3>
                                    <div class="details-grid">
                                        <div class="detail-item">
                                            <div class="detail-label">–ü–æ—á–∞—Ç–æ–∫:</div>
                                            <div class="detail-value">${startTimeStr}</div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</div>
                                            <div class="detail-value">${endTimeStr}</div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="details-section">
                                    <h3>–£—á–∞—Å–Ω–∏–∫–∏</h3>
                                    <div class="details-grid">
                                        <div class="detail-item">
                                            <div class="detail-label">–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤:</div>
                                            <div class="detail-value">${raffle.participants_count || 0}</div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ:</div>
                                            <div class="detail-value">${raffle.entry_fee} –∂–µ—Ç–æ–Ω—ñ–≤</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="details-column">
                                <div class="details-section">
                                    <h3>–û–ø–∏—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h3>
                                    <div class="raffle-description">
                                        ${raffle.description || '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}
                                    </div>
                                </div>
                                
                                <div class="details-section">
                                    <h3>–ü—Ä–∏–∑–∏</h3>
                                    <div class="details-grid">
                                        <div class="detail-item">
                                            <div class="detail-label">–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥:</div>
                                            <div class="detail-value">${raffle.prize_amount} ${raffle.prize_currency}</div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤:</div>
                                            <div class="detail-value">${raffle.winners_count}</div>
                                        </div>
                                    </div>
                                    
                                    <div class="prize-distribution">
                                        <h4>–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∑—ñ–≤:</h4>
                                        <div class="prize-list">
                                            ${prizeDistributionHTML}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        ${winnersHTML}
                    </div>
                </div>
                <div class="admin-modal-footer">
                    <button type="button" class="admin-button view-participants-btn">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤</button>
                    <button type="button" class="admin-button close-btn">–ó–∞–∫—Ä–∏—Ç–∏</button>
                </div>
            </div>
        `;

        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        const closeBtn = modal.querySelector('.admin-modal-close');
        const cancelBtn = modal.querySelector('.close-btn');
        const viewParticipantsBtn = modal.querySelector('.view-participants-btn');

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        function closeDetailsModal() {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }

        closeBtn.addEventListener('click', closeDetailsModal);
        cancelBtn.addEventListener('click', closeDetailsModal);

        // –ü–µ—Ä–µ–≥–ª—è–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤
        viewParticipantsBtn.addEventListener('click', function() {
            closeDetailsModal();
            openParticipantsModal(raffleId);
        });
    }

    /**
     * –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
     */
    async function openParticipantsModal(raffleId) {
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤
        const result = await getRaffleParticipants(raffleId);

        if (!result) {
            showAdminError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤');
            return;
        }

        const { raffle, participants } = result;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'admin-modal';
        modal.id = 'participants-modal';

        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        modal.innerHTML = `
            <div class="admin-modal-content wide-modal">
                <div class="admin-modal-header">
                    <h2>–£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</h2>
                    <span class="admin-modal-close">&times;</span>
                </div>
                <div class="admin-modal-body">
                    <div class="participants-header">
                        <h3>${raffle.title}</h3>
                        <p>–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤: ${participants.length}</p>
                    </div>
                    
                    <div class="participants-table-container">
                        <table class="admin-table">
                            <thead>
                                <tr>
                                    <th>‚Ññ</th>
                                    <th>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</th>
                                    <th>Telegram ID</th>
                                    <th>–ñ–µ—Ç–æ–Ω–∏</th>
                                    <th>–î–∞—Ç–∞ —É—á–∞—Å—Ç—ñ</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${participants.length === 0 ? `
                                    <tr>
                                        <td colspan="6" class="no-data">–£—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</td>
                                    </tr>
                                ` : ''}
                                
                                ${participants.map((participant, index) => {
                                    const statusClass = 
                                        participant.is_winner ? 'status-won' : 
                                        participant.status === 'refunded' ? 'status-refunded' : 
                                        'status-participated';
                                    
                                    const statusText = 
                                        participant.is_winner ? '–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å' : 
                                        participant.status === 'refunded' ? '–ü–æ–≤–µ—Ä–Ω—É—Ç–æ' : 
                                        '–£—á–∞—Å–Ω–∏–∫';
                                    
                                    const entryTime = new Date(participant.entry_time);
                                    const entryTimeStr = entryTime.toLocaleString('uk-UA');
                                    
                                    return `
                                        <tr>
                                            <td>${index + 1}</td>
                                            <td>${participant.username}</td>
                                            <td>${participant.telegram_id}</td>
                                            <td>${participant.entry_count}</td>
                                            <td>${entryTimeStr}</td>
                                            <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                                        </tr>
                                    `;
                                }).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="admin-modal-footer">
                    <button type="button" class="admin-button download-btn">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV</button>
                    <button type="button" class="admin-button close-btn">–ó–∞–∫—Ä–∏—Ç–∏</button>
                </div>
            </div>
        `;

        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        const closeBtn = modal.querySelector('.admin-modal-close');
        const cancelBtn = modal.querySelector('.close-btn');
        const downloadBtn = modal.querySelector('.download-btn');

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        function closeParticipantsModal() {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }

        closeBtn.addEventListener('click', closeParticipantsModal);
        cancelBtn.addEventListener('click', closeParticipantsModal);

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
        downloadBtn.addEventListener('click', function() {
            // –ì–µ–Ω–µ—Ä—É—î–º–æ CSV
            let csv = '–ù–æ–º–µ—Ä,–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á,Telegram ID,–ñ–µ—Ç–æ–Ω–∏,–î–∞—Ç–∞ —É—á–∞—Å—Ç—ñ,–°—Ç–∞—Ç—É—Å\n';

            participants.forEach((participant, index) => {
                const statusText =
                    participant.is_winner ? '–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å' :
                    participant.status === 'refunded' ? '–ü–æ–≤–µ—Ä–Ω—É—Ç–æ' :
                    '–£—á–∞—Å–Ω–∏–∫';

                const entryTime = new Date(participant.entry_time);
                const entryTimeStr = entryTime.toLocaleString('uk-UA');

                csv += `${index + 1},"${participant.username}",${participant.telegram_id},${participant.entry_count},"${entryTimeStr}","${statusText}"\n`;
            });

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.setAttribute('href', url);
            link.setAttribute('download', `raffle-participants-${raffleId}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });
    }

    // ======== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ========

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function showAdminLoader() {
        let loader = document.getElementById('admin-loader');

        if (!loader) {
            loader = document.createElement('div');
            loader.id = 'admin-loader';
            loader.className = 'admin-loader';
            loader.innerHTML = '<div class="admin-spinner"></div>';
            document.body.appendChild(loader);
        }

        loader.style.display = 'flex';
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function hideAdminLoader() {
        const loader = document.getElementById('admin-loader');
        if (loader) {
            loader.style.display = 'none';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     */
    function showAdminError(message) {
        showAdminNotification(message, 'error');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
     */
    function showAdminSuccess(message) {
        showAdminNotification(message, 'success');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function showAdminInfo(message) {
        showAdminNotification(message, 'info');
    }

    /**
     * –ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
     */
    function showAdminNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `admin-notification ${type}`;
        notification.innerHTML = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.add('show');
        }, 10);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 5000);
    }

    // ======== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ========

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function init() {
        console.log("üéÆ Admin Raffles: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...");

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        createAdminStyles();

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        window.addEventListener('load', function() {
            displayRafflesList();
        });

        console.log("‚úÖ Admin Raffles: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
     */
    function createAdminStyles() {
        const styleElement = document.createElement('style');
        styleElement.textContent = `
            /* –°—Ç–∏–ª—ñ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ */
            .admin-filters {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
                flex-wrap: wrap;
                gap: 0.5rem;
            }
            
            .filter-group {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }
            
            .admin-table {
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 1rem;
                background: rgba(30, 39, 70, 0.8);
                border-radius: 0.5rem;
                overflow: hidden;
            }
            
            .admin-table th, .admin-table td {
                padding: 0.75rem;
                text-align: left;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .admin-table th {
                background: rgba(20, 30, 60, 0.7);
                color: white;
                font-weight: bold;
            }
            
            .admin-table tr:hover td {
                background: rgba(30, 113, 161, 0.1);
            }
            
            .admin-table .no-data {
                text-align: center;
                padding: 2rem;
                color: rgba(255, 255, 255, 0.5);
            }
            
            .admin-button {
                background: linear-gradient(90deg, #2D6EB6, #52C0BD);
                border: none;
                border-radius: 0.5rem;
                padding: 0.5rem 1rem;
                color: white;
                font-size: 0.875rem;
                cursor: pointer;
                transition: all 0.2s ease;
            }
            
            .admin-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }
            
            .admin-button:active {
                transform: translateY(0);
            }
            
            .status-badge {
                display: inline-block;
                padding: 0.25rem 0.5rem;
                border-radius: 0.25rem;
                font-size: 0.75rem;
                font-weight: bold;
            }
            
            .status-active {
                background: rgba(0, 201, 167, 0.2);
                color: rgba(0, 201, 167, 1);
            }
            
            .status-completed {
                background: rgba(76, 175, 80, 0.2);
                color: rgba(76, 175, 80, 1);
            }
            
            .status-cancelled {
                background: rgba(244, 67, 54, 0.2);
                color: rgba(244, 67, 54, 1);
            }
            
            .status-won {
                background: rgba(255, 215, 0, 0.2);
                color: rgb(255, 215, 0);
            }
            
            .status-participated {
                background: rgba(33, 150, 243, 0.2);
                color: rgba(33, 150, 243, 1);
            }
            
            .status-refunded {
                background: rgba(156, 39, 176, 0.2);
                color: rgba(156, 39, 176, 1);
            }
            
            .actions-cell {
                white-space: nowrap;
                display: flex;
                gap: 0.25rem;
            }
            
            .action-btn {
                background: transparent;
                border: none;
                cursor: pointer;
                font-size: 1rem;
                padding: 0.25rem;
                border-radius: 0.25rem;
                transition: all 0.2s ease;
            }
            
            .action-btn:hover {
                background: rgba(255, 255, 255, 0.1);
            }
            
            .view-btn {
                color: rgba(33, 150, 243, 0.8);
            }
            
            .edit-btn {
                color: rgba(255, 152, 0, 0.8);
            }
            
            .finish-btn {
                color: rgba(0, 201, 167, 0.8);
            }
            
            .delete-btn {
                color: rgba(244, 67, 54, 0.8);
            }
            
            .participants-btn {
                color: rgba(156, 39, 176, 0.8);
            }
            
            .admin-pagination {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 1rem;
                margin-top: 1rem;
            }
            
            .admin-pagination button {
                background: rgba(30, 39, 70, 0.8);
                border: none;
                border-radius: 0.25rem;
                padding: 0.5rem 1rem;
                color: white;
                cursor: pointer;
                transition: all 0.2s ease;
            }
            
            .admin-pagination button:hover:not(:disabled) {
                background: rgba(30, 113, 161, 0.8);
            }
            
            .admin-pagination button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω */
            .admin-modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.7);
                z-index: 1000;
                justify-content: center;
                align-items: center;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
            
            .admin-modal.show {
                display: flex;
                opacity: 1;
            }
            
            .admin-modal-content {
                background: linear-gradient(145deg, rgba(26, 26, 46, 0.95), rgba(15, 52, 96, 0.95));
                border-radius: 0.5rem;
                width: 90%;
                max-width: 600px;
                max-height: 90vh;
                display: flex;
                flex-direction: column;
                overflow: hidden;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
                animation: modalFadeIn 0.3s ease;
            }
            
            .admin-modal-content.wide-modal {
                max-width: 900px;
            }
            
            @keyframes modalFadeIn {
                from { transform: scale(0.9); opacity: 0; }
                to { transform: scale(1); opacity: 1; }
            }
            
            .admin-modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 1rem;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .admin-modal-header h2 {
                margin: 0;
                color: white;
                font-size: 1.25rem;
            }
            
            .admin-modal-close {
                color: rgba(255, 255, 255, 0.7);
                font-size: 1.5rem;
                cursor: pointer;
                transition: color 0.2s ease;
            }
            
            .admin-modal-close:hover {
                color: white;
            }
            
            .admin-modal-body {
                padding: 1rem;
                overflow-y: auto;
            }
            
            .admin-modal-footer {
                display: flex;
                justify-content: flex-end;
                gap: 0.5rem;
                padding: 1rem;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è —Ñ–æ—Ä–º–∏ */
            .form-group {
                margin-bottom: 1rem;
            }
            
            .form-row {
                display: flex;
                gap: 1rem;
                margin-bottom: 1rem;
            }
            
            .form-group.half {
                flex: 1;
            }
            
            .form-group label {
                display: block;
                margin-bottom: 0.25rem;
                color: rgba(255, 255, 255, 0.9);
            }
            
            .form-group input[type="text"],
            .form-group input[type="number"],
            .form-group input[type="datetime-local"],
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 0.5rem;
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 0.25rem;
                background: rgba(0, 0, 0, 0.2);
                color: white;
            }
            
            .form-group textarea {
                resize: vertical;
                min-height: 100px;
            }
            
            .form-group.checkbox-group {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }
            
            .form-group.checkbox-group input[type="checkbox"] {
                margin: 0;
            }
            
            .form-group.checkbox-group label {
                margin-bottom: 0;
            }
            
            .form-group small {
                display: block;
                margin-top: 0.25rem;
                color: rgba(255, 255, 255, 0.6);
                font-size: 0.75rem;
            }
            
            .prize-distribution-list {
                margin-top: 0.5rem;
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .prize-distribution-item {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }
            
            .prize-distribution-item span {
                min-width: 60px;
            }
            
            .prize-distribution-item input {
                flex: 1;
            }
            
            .prize-distribution-item .prize-currency {
                min-width: 60px;
                text-align: left;
            }
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É */
            .raffle-details-container {
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }
            
            .raffle-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
            }
            
            .raffle-title {
                margin: 0;
                font-size: 1.5rem;
                color: white;
            }
            
            .details-row {
                display: flex;
                gap: 1rem;
            }
            
            .details-column {
                flex: 1;
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }
            
            .details-section {
                background: rgba(0, 0, 0, 0.2);
                border-radius: 0.5rem;
                padding: 1rem;
                margin-bottom: 1rem;
            }
            
            .details-section h3 {
                margin: 0 0 0.5rem 0;
                font-size: 1rem;
                color: white;
            }
            
            .details-section h4 {
                margin: 0.5rem 0;
                font-size: 0.875rem;
                color: rgba(255, 255, 255, 0.9);
            }
            
            .details-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 0.5rem;
            }
            
            .detail-item {
                margin-bottom: 0.5rem;
            }
            
            .detail-label {
                color: rgba(255, 255, 255, 0.7);
                font-size: 0.75rem;
                margin-bottom: 0.125rem;
            }
            
            .detail-value {
                color: white;
                font-size: 0.875rem;
                word-break: break-word;
            }
            
            .raffle-description {
                color: rgba(255, 255, 255, 0.9);
                font-size: 0.875rem;
                line-height: 1.5;
            }
            
            .prize-list {
                margin-top: 0.5rem;
            }
            
            .prize-item {
                display: flex;
                justify-content: space-between;
                font-size: 0.875rem;
                margin-bottom: 0.25rem;
                color: rgba(255, 255, 255, 0.9);
            }
            
            .prize-place {
                font-weight: bold;
            }
            
            .prize-value {
                color: rgba(255, 215, 0, 0.9);
            }
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ */
            .winners-list {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
                margin-top: 0.5rem;
            }
            
            .winner-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.25rem;
                padding: 0.5rem;
            }
            
            .winner-place {
                font-weight: bold;
                color: white;
                min-width: 80px;
            }
            
            .winner-info {
                flex: 1;
                display: flex;
                flex-direction: column;
            }
            
            .winner-username {
                color: white;
                font-weight: bold;
            }
            
            .winner-id {
                color: rgba(255, 255, 255, 0.6);
                font-size: 0.75rem;
            }
            
            .winner-prize {
                color: rgba(255, 215, 0, 0.9);
                font-weight: bold;
            }
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ */
            .participants-header {
                margin-bottom: 1rem;
                text-align: center;
            }
            
            .participants-header h3 {
                margin: 0 0 0.5rem 0;
                font-size: 1.25rem;
                color: white;
            }
            
            .participants-header p {
                margin: 0;
                color: rgba(255, 255, 255, 0.7);
                font-size: 0.875rem;
            }
            
            .participants-table-container {
                max-height: 400px;
                overflow-y: auto;
            }
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á–∞ */
            .admin-loader {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 2000;
                justify-content: center;
                align-items: center;
            }
            
            .admin-spinner {
                width: 50px;
                height: 50px;
                border: 5px solid rgba(255, 255, 255, 0.3);
                border-radius: 50%;
                border-top-color: rgb(30, 113, 161);
                animation: spin 1s linear infinite;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            /* –°—Ç–∏–ª—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å */
            .admin-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 0.75rem 1rem;
                border-radius: 0.25rem;
                background: rgba(30, 39, 70, 0.9);
                color: white;
                font-size: 0.875rem;
                z-index: 2000;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                transform: translateX(calc(100% + 20px));
                transition: transform 0.3s ease;
            }
            
            .admin-notification.show {
                transform: translateX(0);
            }
            
            .admin-notification.success {
                background: rgba(76, 175, 80, 0.9);
            }
            
            .admin-notification.error {
                background: rgba(244, 67, 54, 0.9);
            }
            
            .admin-notification.info {
                background: rgba(33, 150, 243, 0.9);
            }
            
            /* –ú–µ–¥—ñ–∞-–∑–∞–ø–∏—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—ñ */
            @media (max-width: 768px) {
                .details-row {
                    flex-direction: column;
                }
                
                .details-grid {
                    grid-template-columns: 1fr;
                }
                
                .actions-cell {
                    flex-wrap: wrap;
                }
                
                .admin-table th, .admin-table td {
                    padding: 0.5rem 0.25rem;
                    font-size: 0.75rem;
                }
                
                .form-row {
                    flex-direction: column;
                    gap: 0.5rem;
                }
                
                .prize-distribution-item {
                    flex-wrap: wrap;
                }
            }
        `;

        document.head.appendChild(styleElement);
    }

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API
    window.AdminRaffles = {
        init,
        displayRafflesList,
        getAllRaffles,
        getRaffleDetails,
        createRaffle,
        updateRaffle,
        deleteRaffle,
        finishRaffle,
        getRaffleParticipants,
        checkExpiredRaffles,
        openCreateRaffleModal,
        openEditRaffleModal,
        openRaffleDetailsModal,
        openParticipantsModal
    };

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥—É–ª—å
    init();
})();