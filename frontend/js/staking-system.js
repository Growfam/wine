/**
 * staking-system.js
 *
 * –Ñ–¥–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º –¥–ª—è WINIX
 * –ó–∞–º—ñ–Ω—é—î staking-buttons-fix.js —ñ emergency-staking.js
 */

(function() {
    console.log("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —î–¥–∏–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É WINIX");

      window.addEventListener('error', function(event) {
    const error = event.error || new Error(event.message);
    if (error.name === 'NotFoundError' ||
        error.message.includes("not be found")) {
        console.warn("–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ NotFoundError –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞:", error);
        event.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –æ–±—Ä–æ–±—Ü—ñ
        recoveryStakingError(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
    }
});

    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixStakingSystem) {
        console.log("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
        return window.WinixStakingSystem;
    }

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ---------------

    // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
    let _isProcessingStakingAction = false;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const STAKING_CONFIG = {
        minAmount: 50,                 // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        maxBalancePercentage: 0.9,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É
        allowedPeriods: [7, 14, 28],   // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        rewardRates: {
            7: 4,    // 4% –∑–∞ 7 –¥–Ω—ñ–≤
            14: 9,   // 9% –∑–∞ 14 –¥–Ω—ñ–≤
            28: 15   // 15% –∑–∞ 28 –¥–Ω—ñ–≤
        },
        cancellationFee: 0.2  // –®—Ç—Ä–∞—Ñ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ (20%)
    };

    // –ö–ª—é—á—ñ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    const STORAGE_KEYS = {
        USER_TOKENS: 'userTokens',
        WINIX_BALANCE: 'winix_balance',
        STAKING_DATA: 'stakingData',
        WINIX_STAKING: 'winix_staking',
        STAKING_HISTORY: 'stakingHistory'
    };

    /**
 * –í–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
 * @param {string} endpoint - URL –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
 * @param {string} method - HTTP –º–µ—Ç–æ–¥ (GET, POST, etc.)
 * @param {Object} data - –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
 * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
 */
async function apiRequest(endpoint, method = 'GET', data = null) {
    try {
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –¥–ª—è –º–µ—Ç–æ–¥—ñ–≤, —è–∫—ñ –π–æ–≥–æ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å
        if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
            options.body = JSON.stringify(data);
        }

        // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É –¥–ª—è GET-–∑–∞–ø–∏—Ç—ñ–≤
        if (data && method === 'GET') {
            const params = new URLSearchParams();
            for (const key in data) {
                params.append(key, data[key]);
            }
            // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–æ URL
            if (endpoint.includes('?')) {
                endpoint += '&' + params.toString();
            } else {
                endpoint += '?' + params.toString();
            }
        }

        const response = await fetch(endpoint, options);

        if (!response.ok) {
            throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ API-–∑–∞–ø–∏—Ç—É –Ω–∞ ${endpoint}:`, error);
        throw error;
    }
}

    // --------------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---------------

    /**
 * –ü–æ–∫—Ä–∞—â–µ–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª
 * @returns {string|null} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ null
 */
function getUserId() {
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
    let userId = localStorage.getItem('telegram_user_id');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å ID
    if (userId && userId !== 'undefined' && userId !== 'null') {
        console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage:", userId);
        return userId;
    }

    // –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ DOM –µ–ª–µ–º–µ–Ω—Ç–∞
    const userIdElement = document.getElementById('user-id');
    if (userIdElement && userIdElement.textContent) {
        userId = userIdElement.textContent.trim();
        if (userId && userId !== 'undefined' && userId !== 'null') {
            console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ DOM:", userId);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            try {
                localStorage.setItem('telegram_user_id', userId);
            } catch (e) {
                console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", e);
            }

            return userId;
        }
    }

    // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    const urlParams = new URLSearchParams(window.location.search);
    userId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');
    if (userId && userId !== 'undefined' && userId !== 'null') {
        console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:", userId);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        try {
            localStorage.setItem('telegram_user_id', userId);
        } catch (e) {
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage:", e);
        }

        return userId;
    }

    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π ID, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.");
    return "guest";
}

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
     * @param {string} key - –ö–ª—é—á –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
     * @param {*} defaultValue - –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     * @param {boolean} parse - –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON
     * @returns {*} –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     */
    function getFromStorage(key, defaultValue = null, parse = false) {
        try {
            const value = localStorage.getItem(key);
            if (value === null) return defaultValue;
            return parse ? JSON.parse(value) : value;
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ${key} –∑ localStorage:`, e);
            return defaultValue;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –≤—Å—ñ —Å—Ö–æ–≤–∏—â–∞
     * @param {string} key - –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     * @param {*} value - –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    function updateStorage(key, value) {
        try {
            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫, —è–∫—â–æ —Ü–µ –æ–±'—î–∫—Ç
            const valueToStore = typeof value === 'object' && value !== null
                ? JSON.stringify(value)
                : String(value);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            localStorage.setItem(key, valueToStore);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ sessionStorage (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–µ)
            try { sessionStorage.setItem(key, valueToStore); } catch(e) {}

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ
            if (key === STORAGE_KEYS.STAKING_DATA) {
                localStorage.setItem(STORAGE_KEYS.WINIX_STAKING, valueToStore);
                try { sessionStorage.setItem(STORAGE_KEYS.WINIX_STAKING, valueToStore); } catch(e) {}
            }
            else if (key === STORAGE_KEYS.USER_TOKENS) {
                localStorage.setItem(STORAGE_KEYS.WINIX_BALANCE, valueToStore);
                try { sessionStorage.setItem(STORAGE_KEYS.WINIX_BALANCE, valueToStore); } catch(e) {}
            }

            return true;
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${key} –≤ localStorage:`, e);
            return false;
        }
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —É—Å—ñ—Ö —Å—Ö–æ–≤–∏—â
     * @param {string} key - –ö–ª—é—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
     */
    function removeFromStorage(key) {
        try {
            localStorage.removeItem(key);
            try { sessionStorage.removeItem(key); } catch(e) {}

            // –í–∏–¥–∞–ª—è—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ
            if (key === STORAGE_KEYS.STAKING_DATA) {
                localStorage.removeItem(STORAGE_KEYS.WINIX_STAKING);
                try { sessionStorage.removeItem(STORAGE_KEYS.WINIX_STAKING); } catch(e) {}
            }
            else if (key === STORAGE_KEYS.USER_TOKENS) {
                localStorage.removeItem(STORAGE_KEYS.WINIX_BALANCE);
                try { sessionStorage.removeItem(STORAGE_KEYS.WINIX_BALANCE); } catch(e) {}
            }
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ${key} –∑ localStorage:`, e);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {number} –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
     */
    function getUserBalance() {
        const balance = parseFloat(getFromStorage(STORAGE_KEYS.USER_TOKENS, '0'));
        return isNaN(balance) ? 0 : balance;
    }

    /**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Å—Ç–∏–ª—ñ WINIX
 * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {boolean} isError - –ß–∏ —Ü–µ –ø–æ–º–∏–ª–∫–∞
 * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
 */
function showAlert(message, isError = false, callback = null) {
    console.log(`${isError ? "‚ùå" : "‚úÖ"} ${message}`);

    // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const existingAlerts = document.querySelectorAll('.winix-alert');
    existingAlerts.forEach(alert => {
        document.body.removeChild(alert);
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const alertElement = document.createElement('div');
    alertElement.className = `winix-alert ${isError ? 'winix-alert-error' : 'winix-alert-success'}`;
    alertElement.textContent = message;

    // –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –≤–±—É–¥–æ–≤–∞–Ω—ñ —Å—Ç–∏–ª—ñ
    alertElement.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        max-width: 80%;
        padding: 12px 20px;
        border-radius: 10px;
        font-weight: 500;
        font-size: 16px;
        z-index: 9999;
        opacity: 0;
        transform: translateY(-20px);
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        color: white;
        background: ${isError ? 
            'linear-gradient(135deg, #FF3B58, #FF5C5C)' : 
            'linear-gradient(135deg, #00BFA5, #00CFBB)'};
    `;

    // –î–æ–¥–∞—î–º–æ –¥–æ DOM
    document.body.appendChild(alertElement);

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–æ–∫–∞–∑—É
    setTimeout(() => {
        alertElement.style.opacity = '1';
        alertElement.style.transform = 'translateY(0)';
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        alertElement.style.opacity = '0';
        alertElement.style.transform = 'translateY(-20px)';

        // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            if (alertElement.parentNode) {
                document.body.removeChild(alertElement);
            }

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
            if (typeof callback === 'function') {
                callback();
            }
        }, 300);
    }, 3000);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–º—ñ—Å –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è await
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, 3300); // 3000 + 300 –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    });
}

    /**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –≤–≤–µ–¥–µ–Ω–Ω—è–º —Å—É–º–∏ –≤ —Å—Ç–∏–ª—ñ WINIX
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–∫–Ω–∞
 * @param {Function} onConfirm - –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
 */
function showInputModal(title, onConfirm) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–π —Ñ–æ–Ω
    const overlay = document.createElement('div');
    overlay.className = 'winix-modal-overlay';
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9998;
        opacity: 0;
        transition: opacity 0.3s ease;
    `;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'winix-modal';
    modal.style.cssText = `
        background: linear-gradient(135deg, #2B3144, #1A1F2F);
        border-radius: 15px;
        padding: 25px;
        width: 85%;
        max-width: 350px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        transform: scale(0.9);
        transition: transform 0.3s ease;
        color: white;
    `;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const modalTitle = document.createElement('h3');
    modalTitle.textContent = title || "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É";
    modalTitle.style.cssText = `
        margin: 0 0 20px 0;
        font-size: 18px;
        font-weight: 600;
        text-align: center;
        color: #ffffff;
    `;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É
    const inputContainer = document.createElement('div');
    inputContainer.style.cssText = `
        position: relative;
        margin-bottom: 25px;
    `;

    const input = document.createElement('input');
    input.type = 'number';
    input.placeholder = '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É';
    input.style.cssText = `
        width: 100%;
        padding: 15px;
        border: 2px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.05);
        color: white;
        font-size: 16px;
        outline: none;
        transition: border-color 0.3s;
        box-sizing: border-box;
    `;
    input.addEventListener('focus', () => {
        input.style.borderColor = '#00CFBB';
    });
    input.addEventListener('blur', () => {
        input.style.borderColor = 'rgba(255, 255, 255, 0.1)';
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    const buttonsContainer = document.createElement('div');
    buttonsContainer.style.cssText = `
        display: flex;
        justify-content: space-between;
        gap: 15px;
    `;

    const cancelButton = document.createElement('button');
    cancelButton.textContent = '–°–∫–∞—Å—É–≤–∞—Ç–∏';
    cancelButton.style.cssText = `
        flex: 1;
        padding: 14px;
        border: none;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.1);
        color: white;
        font-size: 15px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.3s;
    `;
    cancelButton.addEventListener('mouseover', () => {
        cancelButton.style.background = 'rgba(255, 255, 255, 0.15)';
    });
    cancelButton.addEventListener('mouseout', () => {
        cancelButton.style.background = 'rgba(255, 255, 255, 0.1)';
    });

    const confirmButton = document.createElement('button');
    confirmButton.textContent = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏';
    confirmButton.style.cssText = `
        flex: 1;
        padding: 14px;
        border: none;
        border-radius: 10px;
        background: linear-gradient(135deg, #00BFA5, #00CFBB);
        color: white;
        font-size: 15px;
        font-weight: 500;
        cursor: pointer;
        transition: opacity 0.3s;
    `;
    confirmButton.addEventListener('mouseover', () => {
        confirmButton.style.opacity = '0.9';
    });
    confirmButton.addEventListener('mouseout', () => {
        confirmButton.style.opacity = '1';
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    cancelButton.addEventListener('click', () => {
        closeModal();
    });

    confirmButton.addEventListener('click', () => {
        const amount = parseFloat(input.value);
        if (!isNaN(amount) && amount > 0) {
            closeModal();
            onConfirm(amount);
        } else {
            input.style.borderColor = '#FF3B58';
            showAlert('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É', true);
        }
    });

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    function closeModal() {
        overlay.style.opacity = '0';
        modal.style.transform = 'scale(0.9)';

        setTimeout(() => {
            if (overlay.parentNode) {
                document.body.removeChild(overlay);
            }
        }, 300);
    }

    // –ó–±–∏—Ä–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    inputContainer.appendChild(input);
    buttonsContainer.appendChild(cancelButton);
    buttonsContainer.appendChild(confirmButton);

    modal.appendChild(modalTitle);
    modal.appendChild(inputContainer);
    modal.appendChild(buttonsContainer);
    overlay.appendChild(modal);

    // –î–æ–¥–∞—î–º–æ –¥–æ DOM —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
    document.body.appendChild(overlay);

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥—É
    setTimeout(() => {
        overlay.style.opacity = '1';
        modal.style.transform = 'scale(1)';
        input.focus();
    }, 10);
}

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—É–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} balance - –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    function validateStakingAmount(amount, balance) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        if (isNaN(amount) || amount <= 0) {
            return {
                isValid: false,
                message: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É –±—ñ–ª—å—à–µ –Ω—É–ª—è"
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Å—É–º–∞ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º
        if (amount !== Math.floor(amount)) {
            return {
                isValid: false,
                message: "–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º"
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        if (amount < STAKING_CONFIG.minAmount) {
            return {
                isValid: false,
                message: `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${STAKING_CONFIG.minAmount} WINIX`
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å—É–º—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞–ª–∞–Ω—Å—É
        const maxAllowedAmount = Math.floor(balance * STAKING_CONFIG.maxBalancePercentage);
        if (amount > maxAllowedAmount) {
            return {
                isValid: false,
                message: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${maxAllowedAmount} WINIX (${STAKING_CONFIG.maxBalancePercentage*100}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)`
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –±–∞–ª–∞–Ω—Å—É
        if (amount > balance) {
            return {
                isValid: false,
                message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`
            };
        }

        return {
            isValid: true,
            message: ""
        };
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @returns {number} –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    function calculateExpectedReward(amount, period) {
        try {
            // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
            amount = parseFloat(amount);
            period = parseInt(period);

            if (isNaN(amount) || isNaN(period) || amount <= 0 || period <= 0) {
                return 0;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–µ—Ä—ñ–æ–¥—É
            const rewardPercent = STAKING_CONFIG.rewardRates[period] || 9; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 9%

            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            const reward = (amount * rewardPercent) / 100;

            return parseFloat(reward.toFixed(2));
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', e);
            return 0;
        }
    }

    /**
 * –û–±—Ä–æ–±–∫–∞ —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∑—Ä–æ–∑—É–º—ñ–ª–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
 * @param {Error} error - –û–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏
 * @param {string} operation - –ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –ø—ñ–¥ —á–∞—Å —è–∫–æ—ó –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞
 * @returns {string} –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
 */
function handleStakingError(error, operation = '–æ–ø–µ—Ä–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É') {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}:`, error);

    // –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
    let errorMessage = error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ —ñ —Ñ–æ—Ä–º—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (error.name === 'TypeError' && errorMessage.includes('fetch')) {
        return `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.`;
    }

    if (errorMessage.includes('timeout') || errorMessage.includes('timed out')) {
        return `–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.`;
    }

    if (errorMessage.includes('404')) {
        return `–°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–µ—Å—É—Ä—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
    }

    if (errorMessage.includes('500')) {
        return `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`;
    }

    if (errorMessage.includes('undefined') || errorMessage.includes('null')) {
        return `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.`;
    }

    if (errorMessage.includes('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
        return `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–π—Ç–∏ —Ç–∞ —É–≤—ñ–π—Ç–∏ –∑–Ω–æ–≤—É.`;
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ —Ç–∏–ø–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏
    return errorMessage;
}

/**
 * –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ API-–∑–∞–ø–∏—Ç—ñ–≤
 * @param {Function} apiCall - –§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫—É API
 * @param {string} errorPrefix - –ü—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 * @param {Function} onError - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏
 * @returns {Promise<*>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API-–∑–∞–ø–∏—Ç—É –∞–±–æ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
 */
async function tryCatchApi(apiCall, errorPrefix = '–ü–æ–º–∏–ª–∫–∞', onError = null) {
    try {
        return await apiCall();
    } catch (error) {
        // –§–æ—Ä–º—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const userMessage = `${errorPrefix}: ${handleStakingError(error)}`;

        // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        console.error(`‚ùå ${userMessage}`, error);

        // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–ª–∏–∫–∞—î–º–æ —ó—ó
        if (typeof onError === 'function') {
            return onError(error, userMessage);
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if (typeof showAlert === 'function') {
            showAlert(userMessage, true);
        } else if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.showNotification) {
            window.WinixCore.UI.showNotification(userMessage, 'error');
        } else {
            alert(userMessage);
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é
        return {
            success: false,
            message: userMessage,
            originalError: error
        };
    }
}

/**
 * –ê–≤–∞—Ä—ñ–π–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
 */
async function recoveryStakingError() {
    try {
        console.log("üõ†Ô∏è –ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof showProgressIndicator === 'function') {
            showProgressIndicator("–ê–≤–∞—Ä—ñ–π–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();
        if (!userId) {
            console.error("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è");
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –°–ø—Ä–æ–±–∞ 1: –ú'—è–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ API
        try {
            console.log("üîÑ –°–ø—Ä–æ–±–∞ 1: –ú'—è–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ API");
            const softRecoveryResult = await apiRequest(
                `/api/user/${userId}/staking/repair`,
                'POST',
                { force: false, timestamp: Date.now() }
            );

            if (softRecoveryResult.status === 'success') {
                console.log("‚úÖ –ú'—è–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ:", softRecoveryResult);

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
                if (softRecoveryResult.data && softRecoveryResult.data.staking) {
                    updateStorage(STORAGE_KEYS.STAKING_DATA, softRecoveryResult.data.staking);
                } else {
                    // –Ø–∫—â–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –≤–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ
                    removeFromStorage(STORAGE_KEYS.STAKING_DATA);
                }

                // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
                if (typeof hideProgressIndicator === 'function') {
                    hideProgressIndicator();
                }

                return {
                    success: true,
                    message: "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ",
                    data: softRecoveryResult.data
                };
            }
        } catch (softError) {
            console.warn("‚ö†Ô∏è –ú'—è–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è:", softError);
        }

        // –°–ø—Ä–æ–±–∞ 3: –ü–û–í–ù–ï –ê–í–ê–†–Ü–ô–ù–ï –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø (–≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–≤–∂–¥–∏)
        console.log("üîÑ –ê–í–ê–†–Ü–ô–ù–ï –°–ö–ò–î–ê–ù–ù–Ø: –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ localStorage —ñ sessionStorage
        try {
            localStorage.removeItem(STORAGE_KEYS.STAKING_DATA);
            localStorage.removeItem('staking_data');
            localStorage.removeItem('winix_staking');
            localStorage.removeItem('stakingData');

            try { sessionStorage.removeItem(STORAGE_KEYS.STAKING_DATA); } catch(e) {}
            try { sessionStorage.removeItem('staking_data'); } catch(e) {}
            try { sessionStorage.removeItem('winix_staking'); } catch(e) {}
            try { sessionStorage.removeItem('stakingData'); } catch(e) {}
        } catch (clearError) {
            console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", clearError);
        }

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if (typeof hideProgressIndicator === 'function') {
            hideProgressIndicator();
        }

        return {
            success: true,
            message: "–í–∏–∫–æ–Ω–∞–Ω–æ –∞–≤–∞—Ä—ñ–π–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
            recoveryType: "deep_clear"
        };

    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:", error);

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if (typeof hideProgressIndicator === 'function') {
            hideProgressIndicator();
        }

        return {
            success: false,
            message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            error: error.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
        };
    }
}

    // --------------- –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–ï–ô–ö–Ü–ù–ì–£ ---------------

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Object} –î–∞–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function getStakingData() {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
        const stakingData = getFromStorage(STORAGE_KEYS.STAKING_DATA, null, true);

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —É —Ñ–æ–Ω—ñ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
        syncStakingFromServer()
            .catch(error => {
                console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

                // –Ø–∫—â–æ —Ü–µ NotFoundError, –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
                if (error.name === 'NotFoundError' ||
                    (error.message && error.message.includes("not be found"))) {
                    console.warn("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó");
                    recoveryStakingError();
                }
            });

        // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        if (!stakingData) {
            return {
                hasActiveStaking: false,
                stakingAmount: 0,
                period: 0,
                rewardPercent: 0,
                expectedReward: 0,
                remainingDays: 0
            };
        }

        return stakingData;
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

        // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π –æ–±'—î–∫—Ç
        setTimeout(() => recoveryStakingError(), 100);

        return {
            hasActiveStaking: false,
            stakingAmount: 0,
            period: 0,
            rewardPercent: 0,
            expectedReward: 0,
            remainingDays: 0
        };
    }
}

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {boolean} –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
     */
    function hasActiveStaking() {
        const stakingData = getFromStorage(STORAGE_KEYS.STAKING_DATA, null, true);
        return stakingData && stakingData.hasActiveStaking === true;
    }

    async function syncStakingFromServer() {
    try {
        // –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–ª–µ–Ω—å–∫–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const syncIndicator = document.createElement('div');
        syncIndicator.className = 'winix-sync-indicator';
        syncIndicator.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(0, 207, 187, 0.3);
            border-radius: 50%;
            border-top-color: #00CFBB;
            animation: winix-spin 1s linear infinite;
            z-index: 9980;
        `;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ body —ñ—Å–Ω—É—î –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        if (document.body) {
            document.body.appendChild(syncIndicator);
        }

        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î
        if (!document.getElementById('winix-animations')) {
            const style = document.createElement('style');
            style.id = 'winix-animations';
            style.textContent = `
                @keyframes winix-spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            `;
            if (document.head) {
                document.head.appendChild(style);
            }
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();
        if (!userId) {
            console.error("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            // –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if (document.body && syncIndicator.parentNode) {
                document.body.removeChild(syncIndicator);
            }
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞");

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ø—Ä—è–º—É fetch –∑–∞–º—ñ—Å—Ç—å apiRequest
        const response = await fetch(`/api/user/${userId}/staking?t=${Date.now()}`);
        if (!response.ok) {
            // –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if (document.body && syncIndicator.parentNode) {
                document.body.removeChild(syncIndicator);
            }
            throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`);
        }

        const data = await response.json();

        if (data.status === 'success' && data.data) {
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
            updateStorage(STORAGE_KEYS.STAKING_DATA, data.data);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (typeof updateStakingDisplay === 'function') {
                updateStakingDisplay();
            }

            console.log("‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
            // –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if (document.body && syncIndicator.parentNode) {
                document.body.removeChild(syncIndicator);
            }
            return data.data;
        }

        console.error("‚ùå –°—Ç–µ–π–∫—ñ–Ω–≥ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞");
        // –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        if (document.body && syncIndicator.parentNode) {
            document.body.removeChild(syncIndicator);
        }
        throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞");
    } catch (error) {
        // –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        const syncIndicator = document.querySelector('.winix-sync-indicator');
        if (document.body && syncIndicator && syncIndicator.parentNode) {
            document.body.removeChild(syncIndicator);
        }

        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
        throw error;

         // –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ!
        if (error.name === 'NotFoundError' ||
            (error.message && error.message.includes("not be found"))) {
            console.log("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó");
            return await recoveryStakingError();
        }

        throw error;

    }
}

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
     */
    async function syncStakingHistoryFromServer() {
        try {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            const response = await fetch(`/api/user/${userId}/staking/history?t=${Date.now()}`);
            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${response.status}`);
            }

            const data = await response.json();

            if (data.status === 'success' && Array.isArray(data.data)) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
                updateStorage(STORAGE_KEYS.STAKING_HISTORY, data.data);
                return data.data;
            }

            throw new Error("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞");
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            throw error;
        }
    }

    /**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
 * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
 * @returns {Promise<Object>} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
async function createStaking(amount, period) {
    if (_isProcessingStakingAction) {
        return {
            success: false,
            message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
        };
    }

    _isProcessingStakingAction = true;

    try {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ tryCatchApi –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó
        return await tryCatchApi(async () => {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—É–º—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            const balance = getUserBalance();
            const validation = validateStakingAmount(amount, balance);

            if (!validation.isValid) {
                return {
                    success: false,
                    message: validation.message
                };
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const result = await apiRequest(
                `/api/user/${userId}/staking`,
                'POST',
                {
                    stakingAmount: Math.floor(amount),
                    period: period
                }
            );

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            hideProgressIndicator();

            if (result.status === 'success') {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (result.data && result.data.staking) {
                    updateStorage(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.balance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.balance);
                }

                return {
                    success: true,
                    message: "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        }, "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", async (error) => {
            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ NotFoundError
            if (error.name === 'NotFoundError' ||
                (error.message && error.message.includes("not be found"))) {
                console.warn("–í–∏—è–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É NotFoundError, –∑–∞–ø—É—Å–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è");
                await recoveryStakingError();
                return {
                    success: false,
                    message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                };
            }
            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        });
    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
        hideProgressIndicator();
        return {
            success: false,
            message: "–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        };
    } finally {
        _isProcessingStakingAction = false;
    }
}

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function addToStaking(amount) {
        if (_isProcessingStakingAction) {
            return {
                success: false,
                message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
            };
        }

        _isProcessingStakingAction = true;

        try {
            const userId = getUserId();
            if (!userId) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                };
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingDataResponse = await fetch(`/api/user/${userId}/staking?t=${Date.now()}`);
            if (!stakingDataResponse.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingDataResponse.status}`);
            }

            const stakingDataResult = await stakingDataResponse.json();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
            if (stakingDataResult.status !== 'success' || !stakingDataResult.data || !stakingDataResult.data.hasActiveStaking) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }

            const stakingData = stakingDataResult.data;
            const stakingId = stakingData.stakingId;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—É–º—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            const balance = getUserBalance();
            const validation = validateStakingAmount(amount, balance);

            if (!validation.isValid) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: validation.message
                };
            }

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch(`/api/user/${userId}/staking/${stakingId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    additionalAmount: Math.floor(amount)
                })
            });

            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${response.status}`);
            }

            const result = await response.json();

            if (result.status === 'success') {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (result.data && result.data.staking) {
                    updateStorage(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.balance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.balance);
                }

                return {
                    success: true,
                    message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`,
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        } finally {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function cancelStaking() {
    if (_isProcessingStakingAction) {
        return {
            success: false,
            message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
        };
    }

    _isProcessingStakingAction = true;

    try {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ tryCatchApi –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
        return await tryCatchApi(async () => {
            const userId = getUserId();
            if (!userId) {
                throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
            const stakingDataResponse = await fetch(`/api/user/${userId}/staking?t=${Date.now()}`);
            if (!stakingDataResponse.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingDataResponse.status}`);
            }

            const stakingDataResult = await stakingDataResponse.json();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (stakingDataResult.status !== 'success' || !stakingDataResult.data || !stakingDataResult.data.hasActiveStaking) {
                return {
                    success: false,
                    message: "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }

            const stakingData = stakingDataResult.data;
            const stakingId = stakingData.stakingId;

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            const response = await fetch(`/api/user/${userId}/staking/${stakingId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    timestamp: Date.now()
                })
            });

            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${response.status}`);
            }

            const result = await response.json();

            if (result.status === 'success') {
                // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                removeFromStorage(STORAGE_KEYS.STAKING_DATA);

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.newBalance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.newBalance);
                }

                return {
                    success: true,
                    message: result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        }, "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", async (error) => {
            // –Ø–∫—â–æ —Ü–µ NotFoundError, –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            if (error.name === 'NotFoundError' ||
                (error.message && error.message.includes("not be found"))) {
                console.warn("–í–∏—è–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É NotFoundError –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ, –∑–∞–ø—É—Å–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è");
                await recoveryStakingError();

                // –ü—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –±—É–¥—å-—è–∫–æ–º—É —Ä–∞–∑—ñ
                removeFromStorage(STORAGE_KEYS.STAKING_DATA);
                localStorage.removeItem('stakingData');
                localStorage.removeItem('winix_staking');

                return {
                    success: true,
                    message: "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                };
            }

            return {
                success: false,
                message: handleStakingError(error, "—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É")
            };
        });
    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
        return {
            success: false,
            message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
        };
    } finally {
        _isProcessingStakingAction = false;
    }
}

    /**
     * –ê–≤–∞—Ä—ñ–π–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {boolean} forceReset - –ü—Ä–∏–º—É—Å–æ–≤–æ —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function repairStaking(forceReset = false) {
        if (_isProcessingStakingAction) {
            return {
                success: false,
                message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
            };
        }

        _isProcessingStakingAction = true;

        try {
            const userId = getUserId();
            if (!userId) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                };
            }

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch(`/api/user/${userId}/staking/repair`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    force: forceReset,
                    timestamp: Date.now()
                })
            });

            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${response.status}`);
            }

            const result = await response.json();

            if (result.status === 'success') {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
                if (result.data && result.data.staking) {
                    updateStorage(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                } else {
                    // –Ø–∫—â–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –≤–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ
                    removeFromStorage(STORAGE_KEYS.STAKING_DATA);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.newBalance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.newBalance);
                }

                return {
                    success: true,
                    message: result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ",
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        } finally {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} adjustBalance - –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function deepRepairStaking(adjustBalance = 0) {
        if (_isProcessingStakingAction) {
            return {
                success: false,
                message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
            };
        }

        _isProcessingStakingAction = true;

        try {
            const userId = getUserId();
            if (!userId) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                };
            }

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch(`/api/user/${userId}/staking/deep-repair`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    balance_adjustment: adjustBalance,
                    timestamp: Date.now()
                })
            });

            if (!response.ok) {
                throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${response.status}`);
            }

            const result = await response.json();

            if (result.status === 'success') {
                // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                removeFromStorage(STORAGE_KEYS.STAKING_DATA);

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.new_balance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.new_balance);
                }

                return {
                    success: true,
                    message: result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ",
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        } finally {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ —á–µ—Ä–µ–∑ API
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<number>} –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    async function getExpectedRewardFromServer(amount, period) {
    try {
        const userId = getUserId();
        if (!userId) {
            throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }

        // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
        amount = parseInt(amount);
        period = parseInt(period);

        if (isNaN(amount) || isNaN(period) || amount <= 0 || !STAKING_CONFIG.allowedPeriods.includes(period)) {
            return calculateExpectedReward(amount, period);
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ fetch
        const response = await fetch(`/api/user/${userId}/staking/calculate-reward?amount=${amount}&period=${period}&t=${Date.now()}`);

        if (!response.ok) {
            // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            console.warn(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ (${response.status}), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫`);
            return calculateExpectedReward(amount, period);
        }

        const result = await response.json();

        if (result.status === 'success' && result.data && typeof result.data.reward === 'number') {
            return parseFloat(result.data.reward.toFixed(2));
        }

        // –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        return calculateExpectedReward(amount, period);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", error);
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        return calculateExpectedReward(amount, period);
    }
}
    // --------------- –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô –î–õ–Ø –°–¢–û–†–Ü–ù–û–ö ---------------

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—Å—Ç–µ–π–∫–∞—Ç–∏"
     */
    function handleStakeButton() {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—é
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        console.log("üí∞ –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ª—ñ–≤
            const amountInput = document.getElementById('staking-amount');
            const periodSelect = document.getElementById('staking-period');

            if (!amountInput || !periodSelect) {
                showAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª—è –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ –≤–ª–∞—Å–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            const amount = parseInt(amountInput.value, 10);
            const period = parseInt(periodSelect.value, 10);

            // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É
            const stakeButton = document.getElementById('stake-button');
            if (stakeButton) stakeButton.disabled = true;

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            createStaking(amount, period)
                .then(result => {
                    if (stakeButton) stakeButton.disabled = false;

                    if (result.success) {
                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                        showAlert("–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", false, function() {
                            window.location.href = "staking-details.html";
                        });
                    } else {
                        showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                    }
                })
                .catch(error => {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    if (stakeButton) stakeButton.disabled = false;
                    showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
     */
    function handleAddToStakeButton() {
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        console.log("üí∞ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        // –°—Ç–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
        _isProcessingStakingAction = true;

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userId = getUserId();
        if (!userId) {
            showAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", true);
            _isProcessingStakingAction = false;
            return;
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
        showInputModal('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', function(amount) {
            // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => { if (btn) btn.disabled = true; });

            // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            addToStaking(amount)
                .then(result => {
                    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });

                    if (result.success) {
                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                        showAlert(`–î–æ–¥–∞–Ω–æ ${amount} $WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`, false, function() {
                            window.location.reload();
                        });
                    } else {
                        showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                        _isProcessingStakingAction = false;
                    }
                })
                .catch(error => {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });
                    showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                    _isProcessingStakingAction = false;
                });
        });
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
     */
    function handleCancelStakingButton() {
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        console.log("üóëÔ∏è –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        _isProcessingStakingAction = true;

        // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")) {
            // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => { if (btn) btn.disabled = true; });

            // –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            cancelStaking()
                .then(result => {
                    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });

                    if (result.success) {
                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö —ñ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
                        showAlert(result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", false, function() {
                            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ
                            const currentPage = window.location.pathname.split('/').pop();
                            if (currentPage === 'staking-details.html') {
                                window.location.href = "wallet.html";
                            } else {
                                window.location.reload();
                            }
                        });
                    } else {
                        showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                        _isProcessingStakingAction = false;
                    }
                })
                .catch(error => {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });
                    showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                    _isProcessingStakingAction = false;
                });
        } else {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–µ—Ç–∞–ª—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
     */
    function handleDetailsButton() {
        console.log("üìã –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ª–æ–∫–∞–ª—å–Ω–æ
            const stakingData = getStakingData();

            // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π
            if (stakingData && stakingData.hasActiveStaking) {
                window.location.href = "staking-details.html";
            } else {
                showAlert("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π:", error);
            showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
        }
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function setMaxStakingAmount() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
            const balance = getUserBalance();

            // –û–±—á–∏—Å–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω—É —Å—É–º—É (90% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)
            const maxAllowed = Math.floor(balance * STAKING_CONFIG.maxBalancePercentage);

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥—É
            const amountInput = document.getElementById('staking-amount');
            if (amountInput) {
                amountInput.value = maxAllowed > 0 ? maxAllowed.toString() : '0';

                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                updateExpectedReward();
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏:', e);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    function updateExpectedReward() {
        const amountInput = document.getElementById('staking-amount');
        const periodSelect = document.getElementById('staking-period');
        const rewardDisplay = document.getElementById('expected-reward');

        if (!amountInput || !periodSelect || !rewardDisplay) return;

        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ª—ñ–≤
        const amount = parseInt(amountInput.value, 10) || 0;
        const period = parseInt(periodSelect.value, 10) || 14;

        if (amount <= 0) {
            rewardDisplay.textContent = '0.00';
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
        getExpectedRewardFromServer(amount, period)
            .then(reward => {
                rewardDisplay.textContent = reward.toFixed(2);
            })
            .catch(error => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', error);

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
                const localReward = calculateExpectedReward(amount, period);
                rewardDisplay.textContent = localReward.toFixed(2);
            });
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    function updateStakingDisplay() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingData = getStakingData();
            const hasStaking = stakingData && stakingData.hasActiveStaking;

            console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", hasStaking);

            // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (window.location.href.includes('staking.html')) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                const statusElement = document.getElementById('staking-status');
                if (statusElement) {
                    statusElement.textContent = hasStaking
                        ? `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingData.stakingAmount} $WINIX`
                        : "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
                const detailsButton = document.getElementById('details-button');
                const cancelButton = document.getElementById('cancel-staking-button');

                if (detailsButton) {
                    detailsButton.style.opacity = hasStaking ? '1' : '0.5';
                    detailsButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                }

                if (cancelButton) {
                    cancelButton.style.opacity = hasStaking ? '1' : '0.5';
                    cancelButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                }
            }
            // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            else if (window.location.href.includes('staking-details.html')) {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (!hasStaking) {
                    showAlert("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", false, function() {
                        window.location.href = "staking.html";
                    });
                    return;
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                const amountElement = document.getElementById('staking-amount');
                const periodElement = document.getElementById('staking-period');
                const rewardPercentElement = document.getElementById('staking-reward-percent');
                const expectedRewardElement = document.getElementById('staking-expected-reward');
                const remainingDaysElement = document.getElementById('staking-remaining-days');

                if (amountElement) amountElement.textContent = `${stakingData.stakingAmount} $WINIX`;
                if (periodElement) periodElement.textContent = `${stakingData.period} –¥–Ω—ñ–≤`;
                if (rewardPercentElement) rewardPercentElement.textContent = `${stakingData.rewardPercent}%`;
                if (expectedRewardElement) expectedRewardElement.textContent = `${stakingData.expectedReward} $WINIX`;
                if (remainingDaysElement) remainingDaysElement.textContent = stakingData.remainingDays ? stakingData.remainingDays.toString() : '0';
            }
            // –Ø–∫—â–æ –º–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≥–∞–º–∞–Ω—Ü—è
            else if (window.location.href.includes('wallet.html')) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                const stakingBalanceElement = document.getElementById('staking-amount');
                const stakingRewardsElement = document.getElementById('rewards-amount');

                if (stakingBalanceElement) {
                    stakingBalanceElement.textContent = hasStaking ? stakingData.stakingAmount.toString() : '0';
                }

                if (stakingRewardsElement) {
                    stakingRewardsElement.textContent = hasStaking ? stakingData.expectedReward.toString() : '0';
                }
            }
        } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
        if (error.name === 'NotFoundError' ||
            (error.message && error.message.includes("not be found"))) {
            console.log("üîÑ –ó–∞–ø—É—Å–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
            recoveryStakingError().then(() => {
                // –ü—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                setTimeout(updateStakingDisplay, 500);
            });
        }
    }
}

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function setupStakingAmountInput() {
        try {
            const amountInput = document.getElementById('staking-amount');
            const periodSelect = document.getElementById('staking-period');

            if (amountInput) {
                // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞
                amountInput.addEventListener('input', function() {
                    // –ó–∞–º—ñ–Ω–∞ –≤—Å—ñ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                    this.value = this.value.replace(/[^0-9]/g, '');

                    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                    updateExpectedReward();
                });
            }

            if (periodSelect) {
                periodSelect.addEventListener('change', updateExpectedReward);
            }

            // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            updateExpectedReward();
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –ø–æ–ª—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function showEmergencyButton() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        const recoveryButton = document.createElement('button');
        recoveryButton.textContent = '–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥';
        recoveryButton.className = 'recovery-button';
        recoveryButton.style.cssText = `
            position: fixed;
            bottom: 120px;
            right: 20px;
            background: linear-gradient(90deg, #FF5722, #E91E63);
            color: white;
            padding: 10px 15px;
            border-radius: 20px;
            border: none;
            font-weight: bold;
            z-index: 9999;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            cursor: pointer;
        `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó
        recoveryButton.addEventListener('click', function() {
            showRecoveryDialog();
        });

        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        document.body.appendChild(recoveryButton);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function showRecoveryDialog() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'recovery-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        `;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        const modalContent = document.createElement('div');
        modalContent.className = 'recovery-modal-content';
        modalContent.style.cssText = `
            background: linear-gradient(135deg, #263238, #37474F);
            padding: 25px;
            border-radius: 15px;
            width: 80%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
            color: white;
            text-align: center;
        `;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.createElement('h2');
        title.textContent = '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É';
        title.style.marginBottom = '20px';

        // –û–ø–∏—Å
        const description = document.createElement('p');
        description.textContent = '–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:';
        description.style.marginBottom = '20px';

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        const standardButton = document.createElement('button');
        standardButton.textContent = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è';
        standardButton.style.cssText = `
            display: block;
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            background: linear-gradient(90deg, #4CAF50, #2196F3);
            color: white;
            border: none;
            border-radius: 10px;
            font-weight: bold;
            cursor: pointer;
        `;

        // –ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        const deepButton = document.createElement('button');
        deepButton.textContent = '–ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è';
        deepButton.style.cssText = `
            display: block;
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            background: linear-gradient(90deg, #FF9800, #F44336);
            color: white;
            border: none;
            border-radius: 10px;
            font-weight: bold;
            cursor: pointer;
        `;

        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        const cancelButton = document.createElement('button');
        cancelButton.textContent = '–°–∫–∞—Å—É–≤–∞—Ç–∏';
        cancelButton.style.cssText = `
            display: block;
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            background: rgba(255,255,255,0.1);
            color: white;
            border: none;
            border-radius: 10px;
            font-weight: bold;
            cursor: pointer;
        `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        standardButton.addEventListener('click', function() {
            handleEmergencyRepair(false);
            modal.remove();
        });

        deepButton.addEventListener('click', function() {
            handleDeepEmergencyRepair();
            modal.remove();
        });

        cancelButton.addEventListener('click', function() {
            modal.remove();
        });

        // –°–∫–ª–∞–¥–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
        modalContent.appendChild(title);
        modalContent.appendChild(description);
        modalContent.appendChild(standardButton);
        modalContent.appendChild(deepButton);
        modalContent.appendChild(cancelButton);
        modal.appendChild(modalContent);

        // –î–æ–¥–∞—î–º–æ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.body.appendChild(modal);
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function handleEmergencyRepair(force = false) {
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        _isProcessingStakingAction = true;

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showProgressIndicator("–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        repairStaking(force)
            .then(result => {
                hideProgressIndicator();

                if (result.success) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
                    if (result.data && result.data.staking) {
                        updateStorage(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                    } else {
                        removeFromStorage(STORAGE_KEYS.STAKING_DATA);
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                    if (result.data && result.data.newBalance !== undefined) {
                        updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.newBalance);
                    }

                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    showAlert(result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ", false, function() {
                        window.location.reload();
                    });
                } else {
                    showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                    _isProcessingStakingAction = false;
                }
            })
            .catch(error => {
                hideProgressIndicator();
                showAlert("–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: " + error.message, true);
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
                _isProcessingStakingAction = false;
            });
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –≥–ª–∏–±–æ–∫–æ–≥–æ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    function handleDeepEmergencyRepair() {
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        // –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
        const adjustmentStr = prompt('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (–¥–æ–¥–∞—Ç–Ω–∞ - –¥–æ–¥–∞—Ç–∏, –≤—ñ–¥\'—î–º–Ω–∞ - –≤—ñ–¥–Ω—è—Ç–∏, 0 - –±–µ–∑ –∑–º—ñ–Ω):', '0');
        const adjustment = parseFloat(adjustmentStr);

        if (isNaN(adjustment)) {
            alert('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
            return;
        }

        // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (!confirm(`–£–≤–∞–≥–∞! –ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Æ —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É —ñ ${
            adjustment > 0 ? `–¥–æ–¥–∞—Å—Ç—å ${adjustment}` : 
            adjustment < 0 ? `–≤—ñ–¥–Ω—ñ–º–µ ${-adjustment}` : 
            '–Ω–µ –∑–º—ñ–Ω–∏—Ç—å'
        } WINIX –¥–æ –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?`)) {
            return;
        }

        _isProcessingStakingAction = true;

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showProgressIndicator("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≥–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...");

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        deepRepairStaking(adjustment)
            .then(result => {
                hideProgressIndicator();

                if (result.success) {
                    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                    removeFromStorage(STORAGE_KEYS.STAKING_DATA);

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                    if (result.data && result.data.new_balance !== undefined) {
                        updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.new_balance);
                    }

                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    showAlert(result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ", false, function() {
                        window.location.reload();
                    });
                } else {
                    showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                    _isProcessingStakingAction = false;
                }
            })
            .catch(error => {
                hideProgressIndicator();
                showAlert("–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: " + error.message, true);
                console.error('–ü–æ–º–∏–ª–∫–∞ –≥–ª–∏–±–æ–∫–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', error);
                _isProcessingStakingAction = false;
            });
    }

    /**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ —Å—Ç–∏–ª—ñ WINIX
 * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function showProgressIndicator(message) {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    hideProgressIndicator();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç
    const progressElement = document.createElement('div');
    progressElement.id = 'winix-progress-indicator';
    progressElement.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(26, 31, 47, 0.85);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 10001;
        color: white;
        font-size: 16px;
        opacity: 0;
        transition: opacity 0.3s ease;
    `;

    // –î–æ–¥–∞—î–º–æ —Å–ø—ñ–Ω–Ω–µ—Ä
    const spinner = document.createElement('div');
    spinner.className = 'winix-spinner';
    spinner.style.cssText = `
        width: 45px;
        height: 45px;
        border: 3px solid rgba(0, 207, 187, 0.3);
        border-radius: 50%;
        border-top-color: #00CFBB;
        animation: winix-spin 1s linear infinite;
        margin-bottom: 20px;
    `;

    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    const style = document.createElement('style');
    style.textContent = `
        @keyframes winix-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);

    // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const messageElement = document.createElement('div');
    messageElement.textContent = message || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
    messageElement.style.cssText = `
        font-size: 16px;
        font-weight: 500;
        color: white;
        text-align: center;
        max-width: 80%;
    `;

    // –°–∫–ª–∞–¥–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
    progressElement.appendChild(spinner);
    progressElement.appendChild(messageElement);
    document.body.appendChild(progressElement);

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
    setTimeout(() => {
        progressElement.style.opacity = '1';
    }, 10);
}

/**
 * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
function hideProgressIndicator() {
    const progressElement = document.getElementById('winix-progress-indicator');
    if (progressElement) {
        progressElement.style.opacity = '0';
        setTimeout(() => {
            if (progressElement.parentNode) {
                progressElement.parentNode.removeChild(progressElement);
            }
        }, 300);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function showProgressIndicator(message) {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    hideProgressIndicator();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç
    const progressElement = document.createElement('div');
    progressElement.id = 'winix-progress-indicator';
    progressElement.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(26, 31, 47, 0.85);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 10001;
        color: white;
        font-size: 16px;
        opacity: 0;
        transition: opacity 0.3s ease;
    `;

    // –î–æ–¥–∞—î–º–æ —Å–ø—ñ–Ω–Ω–µ—Ä
    const spinner = document.createElement('div');
    spinner.className = 'winix-spinner';
    spinner.style.cssText = `
        width: 45px;
        height: 45px;
        border: 3px solid rgba(0, 207, 187, 0.3);
        border-radius: 50%;
        border-top-color: #00CFBB;
        animation: winix-spin 1s linear infinite;
        margin-bottom: 20px;
    `;

    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    const style = document.createElement('style');
    style.textContent = `
        @keyframes winix-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);

    // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const messageElement = document.createElement('div');
    messageElement.textContent = message || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
    messageElement.style.cssText = `
        font-size: 16px;
        font-weight: 500;
        color: white;
        text-align: center;
        max-width: 80%;
    `;

    // –°–∫–ª–∞–¥–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
    progressElement.appendChild(spinner);
    progressElement.appendChild(messageElement);
    document.body.appendChild(progressElement);

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
    setTimeout(() => {
        progressElement.style.opacity = '1';
    }, 10);

    // –î–æ–¥–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç, —â–æ–± –Ω–µ "–∑–∞–≤–∏—Å–∞—Ç–∏" –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ
    window.progressIndicatorTimeout = setTimeout(() => {
        hideProgressIndicator();
        console.warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É. –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.");
        showAlert("–û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–π–Ω—è–ª–∞ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥
}

/**
 * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
function hideProgressIndicator() {
    // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
    if (window.progressIndicatorTimeout) {
        clearTimeout(window.progressIndicatorTimeout);
        window.progressIndicatorTimeout = null;
    }

    const progressElement = document.getElementById('winix-progress-indicator');
    if (progressElement) {
        progressElement.style.opacity = '0';
        setTimeout(() => {
            if (progressElement.parentNode) {
                progressElement.parentNode.removeChild(progressElement);
            }
        }, 300);
    }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–ª–∏–±–æ–∫–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 */
function resetStakingData() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const emptyStaking = {
        hasActiveStaking: false,
        status: "cancelled",
        stakingAmount: 0,
        period: 0,
        rewardPercent: 0,
        expectedReward: 0,
        remainingDays: 0
    };

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ö–æ–≤–∏—â–∞
    try {
        localStorage.setItem('stakingData', JSON.stringify(emptyStaking));
        localStorage.setItem('winix_staking', JSON.stringify(emptyStaking));
        sessionStorage.setItem('stakingData', JSON.stringify(emptyStaking));
        sessionStorage.setItem('winix_staking', JSON.stringify(emptyStaking));

        console.log("‚úÖ –î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ");
        return true;
    } catch (e) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
        return false;
    }
}

    // --------------- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò ---------------

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö
     */
    function initStakingSystem() {
        console.log("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

         try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        const stakingData = getFromStorage(STORAGE_KEYS.STAKING_DATA, null, true);
        if (!stakingData) {
            console.log("–î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤—ñ–¥—Å—É—Ç–Ω—ñ - –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó");
            syncStakingFromServer().catch(error => {
                console.warn("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ–π —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", error);
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                recoveryStakingError();
            });
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", error);
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        recoveryStakingError();
    }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if (currentPage === 'staking.html') {
            console.log("üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
            const stakeButton = document.getElementById('stake-button');
            if (stakeButton) {
                stakeButton.addEventListener('click', handleStakeButton);
            }

            const detailsButton = document.getElementById('details-button');
            if (detailsButton) {
                detailsButton.addEventListener('click', handleDetailsButton);
            }

            const cancelButton = document.getElementById('cancel-staking-button');
            if (cancelButton) {
                cancelButton.addEventListener('click', handleCancelStakingButton);
            }

            const maxButton = document.getElementById('max-button');
            if (maxButton) {
                maxButton.addEventListener('click', setMaxStakingAmount);
            }

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
            setupStakingAmountInput();

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            updateStakingDisplay();

            // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            showEmergencyButton();
        }
        else if (currentPage === 'staking-details.html') {
            console.log("üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
            const addToStakeButton = document.getElementById('add-to-stake-button');
            if (addToStakeButton) {
                addToStakeButton.addEventListener('click', handleAddToStakeButton);
            }

            const cancelButton = document.getElementById('cancel-staking-button');
            if (cancelButton) {
                cancelButton.addEventListener('click', handleCancelStakingButton);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            updateStakingDisplay();

            // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            showEmergencyButton();
        }
        else if (currentPage === 'wallet.html') {
            console.log("üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≥–∞–º–∞–Ω—Ü—è");

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingButton = document.getElementById('staking-button');
            if (stakingButton) {
                stakingButton.addEventListener('click', function() {
                    window.location.href = 'staking.html';
                });
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            updateStakingDisplay();
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Ä—É—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        syncStakingFromServer().catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error));
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initStakingSystem);
    } else {
        initStakingSystem();
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏ –ø–æ–¥—ñ—è—Ö Winix
    document.addEventListener('winix-initialized', initStakingSystem);
    document.addEventListener('winix-core-initialized', initStakingSystem);

    // --------------- –ü–£–ë–õ–Ü–ß–ù–ï API ---------------

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    window.WinixStakingSystem = {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        getStakingData,
        hasActiveStaking,
        syncStakingFromServer,
        syncStakingHistoryFromServer,
        createStaking,
        addToStaking,
        cancelStaking,
        repairStaking,
        deepRepairStaking,
        getExpectedRewardFromServer,
        calculateExpectedReward,

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        handleStakeButton,
        handleAddToStakeButton,
        handleCancelStakingButton,
        handleDetailsButton,

        // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        updateStakingDisplay,
        updateExpectedReward,
        setMaxStakingAmount,

        // –ê–≤–∞—Ä—ñ–π–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        showEmergencyButton,
        showRecoveryDialog,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        CONFIG: STAKING_CONFIG
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å—Ç–∞—Ä–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤
    window.handleStakeButton = handleStakeButton;
    window.handleAddToStakeButton = handleAddToStakeButton;
    window.handleCancelStakingButton = handleCancelStakingButton;
    window.handleDetailsButton = handleDetailsButton;
    window.updateStakingDisplay = updateStakingDisplay;
    window.updateExpectedReward = updateExpectedReward;
    window.setMaxStakingAmount = setMaxStakingAmount;

    console.log("‚úÖ –°–∏—Å—Ç–µ–º—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

    return window.WinixStakingSystem;
})();