/**
 * staking-system.js
 *
 * –û–Ω–æ–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º –¥–ª—è WINIX
 * –ü–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—é—î staking-buttons-fix.js —ñ emergency-staking.js
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —î–¥–∏–Ω–∏–π API –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
 */

(function() {
    console.log("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É WINIX");

    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixStakingSystem) {
        console.log("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
        return window.WinixStakingSystem;
    }

    // --------------- –ü–†–ò–í–ê–¢–ù–Ü –ó–ú–Ü–ù–ù–Ü ---------------

    // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º
    let _isProcessingStakingAction = false;

    // –§–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è, —á–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    let _isModalVisible = false;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const STAKING_CONFIG = {
        minAmount: 50,                 // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        maxBalancePercentage: 0.9,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É
        allowedPeriods: [7, 14, 28],   // –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        rewardRates: {
            7: 4,    // 4% –∑–∞ 7 –¥–Ω—ñ–≤
            14: 9,   // 9% –∑–∞ 14 –¥–Ω—ñ–≤
            28: 15   // 15% –∑–∞ 28 –¥–Ω—ñ–≤
        },
        cancellationFee: 0.2  // –®—Ç—Ä–∞—Ñ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ (20%)
    };

    // –ö–ª—é—á—ñ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    const STORAGE_KEYS = {
        USER_TOKENS: 'userTokens',
        WINIX_BALANCE: 'winix_balance',
        STAKING_DATA: 'stakingData',
        WINIX_STAKING: 'winix_staking',
        STAKING_HISTORY: 'stakingHistory',
        USER_ID: 'telegram_user_id'
    };

    // --------------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---------------

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
     * @param {string} key - –ö–ª—é—á –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
     * @param {*} defaultValue - –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     * @param {boolean} parse - –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON
     * @returns {*} –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     */
    function getFromStorage(key, defaultValue = null, parse = false) {
        try {
            const value = localStorage.getItem(key);
            if (value === null) return defaultValue;
            return parse ? JSON.parse(value) : value;
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ${key} –∑ localStorage:`, e);
            return defaultValue;
        }
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –≤—Å—ñ —Å—Ö–æ–≤–∏—â–∞
     * @param {string} key - –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     * @param {*} value - –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    function updateStorage(key, value) {
        try {
            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫, —è–∫—â–æ —Ü–µ –æ–±'—î–∫—Ç
            const valueToStore = typeof value === 'object' && value !== null
                ? JSON.stringify(value)
                : String(value);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            localStorage.setItem(key, valueToStore);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ sessionStorage (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–µ)
            try { sessionStorage.setItem(key, valueToStore); } catch(e) {}

            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ
            if (key === STORAGE_KEYS.STAKING_DATA) {
                localStorage.setItem(STORAGE_KEYS.WINIX_STAKING, valueToStore);
                try { sessionStorage.setItem(STORAGE_KEYS.WINIX_STAKING, valueToStore); } catch(e) {}
            }
            else if (key === STORAGE_KEYS.USER_TOKENS) {
                localStorage.setItem(STORAGE_KEYS.WINIX_BALANCE, valueToStore);
                try { sessionStorage.setItem(STORAGE_KEYS.WINIX_BALANCE, valueToStore); } catch(e) {}
            }

            return true;
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${key} –≤ localStorage:`, e);
            return false;
        }
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —É—Å—ñ—Ö —Å—Ö–æ–≤–∏—â
     * @param {string} key - –ö–ª—é—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
     */
    function removeFromStorage(key) {
        try {
            localStorage.removeItem(key);
            try { sessionStorage.removeItem(key); } catch(e) {}

            // –í–∏–¥–∞–ª—è—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ
            if (key === STORAGE_KEYS.STAKING_DATA) {
                localStorage.removeItem(STORAGE_KEYS.WINIX_STAKING);
                try { sessionStorage.removeItem(STORAGE_KEYS.WINIX_STAKING); } catch(e) {}
            }
            else if (key === STORAGE_KEYS.USER_TOKENS) {
                localStorage.removeItem(STORAGE_KEYS.WINIX_BALANCE);
                try { sessionStorage.removeItem(STORAGE_KEYS.WINIX_BALANCE); } catch(e) {}
            }
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ${key} –∑ localStorage:`, e);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
     * —ñ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω–Ω—è (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ undefined, null, —Ç–æ—â–æ)
     */
    function getUserId() {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ localStorage
            let userId = getFromStorage(STORAGE_KEYS.USER_ID, '');

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ ID –≤–∞–ª—ñ–¥–Ω–∏–π
            if (!userId || userId === 'undefined' || userId === 'null') {
                // –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                const urlParams = new URLSearchParams(window.location.search);
                userId = urlParams.get('id') || urlParams.get('user_id') || urlParams.get('telegram_id');

                if (userId) {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π ID
                    updateStorage(STORAGE_KEYS.USER_ID, userId);
                } else {
                    // –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ DOM
                    const userIdElement = document.getElementById('user-id');
                    if (userIdElement && userIdElement.textContent) {
                        userId = userIdElement.textContent.trim();
                        if (userId) {
                            updateStorage(STORAGE_KEYS.USER_ID, userId);
                        }
                    }
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ DOM-–µ–ª–µ–º–µ–Ω—Ç –∑ ID, —è–∫—â–æ –≤—ñ–Ω —î
            if (userId) {
                const userIdElements = document.querySelectorAll('#user-id, #display-user-id');
                userIdElements.forEach(element => {
                    if (element) element.textContent = userId;
                });
            }

            return userId;
        } catch (e) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e);
            return '';
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {number} –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
     */
    function getUserBalance() {
        const balance = parseFloat(getFromStorage(STORAGE_KEYS.USER_TOKENS, '0'));
        return isNaN(balance) ? 0 : balance;
    }

    /**
     * –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {boolean} isError - –ß–∏ —î —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å, —è–∫–∏–π —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    function showAlert(message, isError = false, callback = null) {
        console.log(`${isError ? "‚ùå" : "‚úÖ"} ${message}`);

        return new Promise((resolve) => {
            // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            if (window.simpleAlert) {
                window.simpleAlert(message, isError, callback);
                resolve();
                return;
            }

            if (window.showToast) {
                window.showToast(message);
                if (callback) setTimeout(callback, 3000);
                resolve();
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î WinixAPI –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è handleApiError
            if (isError && window.WinixAPI && typeof window.WinixAPI.handleApiError === 'function') {
                message = window.WinixAPI.handleApiError(new Error(message), '–æ–ø–µ—Ä–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É');
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const alertOverlay = document.createElement('div');
            alertOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.7);
                z-index: 9999;
                display: flex;
                justify-content: center;
                align-items: center;
                backdrop-filter: blur(3px);
                animation: alertFadeIn 0.3s ease;
            `;

            // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
            const style = document.createElement('style');
            style.textContent = `
                @keyframes alertFadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                
                @keyframes alertContentFadeIn {
                    from { opacity: 0; transform: scale(0.9); }
                    to { opacity: 1; transform: scale(1); }
                }
            `;
            document.head.appendChild(style);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const alertContent = document.createElement('div');
            alertContent.style.cssText = `
                background: ${isError ? 'linear-gradient(135deg, #2B1E29, #421E2D)' : 'linear-gradient(135deg, #1E2B3A, #1E3B4A)'};
                border: 1px solid ${isError ? 'rgba(255, 0, 0, 0.3)' : 'rgba(0, 201, 167, 0.3)'};
                border-radius: 15px;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
                padding: 20px;
                text-align: center;
                color: white;
                max-width: 80%;
                animation: alertContentFadeIn 0.3s ease;
            `;

            // –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            messageElement.style.cssText = `
                margin-bottom: 20px;
                font-size: 16px;
            `;

            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –û–ö
            const okButton = document.createElement('button');
            okButton.textContent = 'OK';
            okButton.style.cssText = `
                background: linear-gradient(90deg, #1E3A5F, #16213E, #1A7A6B);
                border: none;
                border-radius: 10px;
                color: white;
                padding: 8px 25px;
                cursor: pointer;
                font-size: 16px;
                transition: all 0.3s ease;
            `;

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            okButton.addEventListener('mouseenter', () => {
                okButton.style.transform = 'scale(1.05)';
            });

            okButton.addEventListener('mouseleave', () => {
                okButton.style.transform = 'scale(1)';
            });

            okButton.addEventListener('click', () => {
                document.body.removeChild(alertOverlay);
                if (callback) callback();
                resolve();
            });

            // –°–∫–ª–∞–¥–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
            alertContent.appendChild(messageElement);
            alertContent.appendChild(okButton);
            alertOverlay.appendChild(alertContent);
            document.body.appendChild(alertOverlay);

            // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ Esc –∞–±–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            const handleKeyDown = (e) => {
                if (e.key === 'Escape') {
                    document.body.removeChild(alertOverlay);
                    document.removeEventListener('keydown', handleKeyDown);
                    if (callback) callback();
                    resolve();
                }
            };
            document.addEventListener('keydown', handleKeyDown);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (document.body.contains(alertOverlay)) {
                    document.body.removeChild(alertOverlay);
                    if (callback) callback();
                    resolve();
                }
            }, 10000);
        });
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –≤–≤–µ–¥–µ–Ω–Ω—è–º —Å—É–º–∏
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–∫–Ω–∞
     * @param {Function} onConfirm - –§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫—É –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @returns {HTMLElement} –ï–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
     */
    function showInputModal(title, onConfirm, options = {}) {
        // –Ø–∫—â–æ –≤–∂–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
        if (_isModalVisible) {
            console.warn("–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤–∂–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ");
            return null;
        }

        _isModalVisible = true;

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
        if (window.createInputModal) {
            const modal = window.createInputModal(title, (amount) => {
                _isModalVisible = false;
                onConfirm(amount);
            }, options);

            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            const closeHandler = () => {
                _isModalVisible = false;
            };

            // –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è
            const closeButton = modal.querySelector('.modal-close, .cancel-button');
            if (closeButton) {
                closeButton.addEventListener('click', closeHandler);
            }

            return modal;
        }

        // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–≤–æ—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        return createCustomInputModal(title, (amount) => {
            _isModalVisible = false;
            onConfirm(amount);
        }, options);
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ —É–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–∫–Ω–∞
     * @param {Function} onConfirm - –§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫—É –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
     * @returns {HTMLElement} –ï–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
     */
    function createCustomInputModal(title, onConfirm, options = {}) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        const defaults = {
            min: 1,
            max: 1000000,
            step: 1,
            placeholder: '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É',
            confirmText: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
            cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
        };

        // –û–±'—î–¥–Ω—É—î–º–æ –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const settings = {...defaults, ...options};

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–π —Ñ–æ–Ω
        const overlay = document.createElement('div');
        overlay.className = 'winix-modal-overlay';
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9998;
            opacity: 0;
            transition: opacity 0.3s ease;
            backdrop-filter: blur(3px);
        `;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'winix-modal';
        modal.style.cssText = `
            background: linear-gradient(135deg, #2B3144, #1A1F2F);
            border-radius: 15px;
            padding: 25px;
            width: 85%;
            max-width: 350px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            transform: scale(0.9);
            transition: transform 0.3s ease;
            color: white;
            border: 1px solid rgba(0, 201, 167, 0.2);
        `;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const modalTitle = document.createElement('h3');
        modalTitle.textContent = title || "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É";
        modalTitle.style.cssText = `
            margin: 0 0 20px 0;
            font-size: 18px;
            font-weight: 600;
            text-align: center;
            color: #ffffff;
        `;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É
        const inputContainer = document.createElement('div');
        inputContainer.style.cssText = `
            position: relative;
            margin-bottom: 25px;
        `;

        const input = document.createElement('input');
        input.type = 'number';
        input.placeholder = settings.placeholder;
        input.min = settings.min;
        input.max = settings.max;
        input.step = settings.step;
        input.style.cssText = `
            width: 100%;
            padding: 15px;
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.05);
            color: white;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
            box-sizing: border-box;
        `;

        // –î–æ–¥–∞—î–º–æ –±–∞–ª–∞–Ω—Å–æ–≤–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        const balanceIndicator = document.createElement('div');
        balanceIndicator.style.cssText = `
            font-size: 14px;
            text-align: right;
            margin-top: 8px;
            color: rgba(255, 255, 255, 0.7);
        `;
        balanceIndicator.innerHTML = `–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: <span style="color: #00C9A7">${getUserBalance().toFixed(2)}</span> WINIX`;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
        const buttonsContainer = document.createElement('div');
        buttonsContainer.style.cssText = `
            display: flex;
            justify-content: space-between;
            gap: 15px;
        `;

        const cancelButton = document.createElement('button');
        cancelButton.textContent = settings.cancelText;
        cancelButton.style.cssText = `
            flex: 1;
            padding: 14px;
            border: none;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 15px;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.3s;
        `;

        const confirmButton = document.createElement('button');
        confirmButton.textContent = settings.confirmText;
        confirmButton.style.cssText = `
            flex: 1;
            padding: 14px;
            border: none;
            border-radius: 10px;
            background: linear-gradient(135deg, #00BFA5, #00CFBB);
            color: white;
            font-size: 15px;
            font-weight: 500;
            cursor: pointer;
            transition: opacity 0.3s;
        `;

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        function closeModal() {
            overlay.style.opacity = '0';
            modal.style.transform = 'scale(0.9)';

            setTimeout(() => {
                if (overlay.parentNode) {
                    document.body.removeChild(overlay);
                }
                _isModalVisible = false;
            }, 300);
        }

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        cancelButton.addEventListener('click', closeModal);
        confirmButton.addEventListener('click', function() {
            const amount = parseFloat(input.value);
            if (!isNaN(amount) && amount > 0) {
                closeModal();
                onConfirm(amount);
            } else {
                input.style.borderColor = '#FF3B58';

                // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ–º–∏–ª–∫–∏ (—Ç—Ä—è—Å–∫–∞)
                input.animate([
                    { transform: 'translateX(0)' },
                    { transform: 'translateX(-5px)' },
                    { transform: 'translateX(5px)' },
                    { transform: 'translateX(-5px)' },
                    { transform: 'translateX(5px)' },
                    { transform: 'translateX(0)' }
                ], {
                    duration: 500,
                    easing: 'ease'
                });

                showAlert('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É', true);
            }
        });

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–ª–∞–≤—ñ—à—ñ Enter
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                confirmButton.click();
            }
        });

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–º—ñ–Ω–∏ –≤–≤–æ–¥—É (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞ –ª—å–æ—Ç—É)
        input.addEventListener('input', function() {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            const amount = parseFloat(input.value);
            if (!isNaN(amount) && amount > 0) {
                input.style.borderColor = 'rgba(0, 201, 167, 0.6)';
            } else {
                input.style.borderColor = 'rgba(255, 255, 255, 0.1)';
            }
        });

        // –ó–±–∏—Ä–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        inputContainer.appendChild(input);
        inputContainer.appendChild(balanceIndicator);
        buttonsContainer.appendChild(cancelButton);
        buttonsContainer.appendChild(confirmButton);

        modal.appendChild(modalTitle);
        modal.appendChild(inputContainer);
        modal.appendChild(buttonsContainer);
        overlay.appendChild(modal);

        // –î–æ–¥–∞—î–º–æ –¥–æ DOM —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        document.body.appendChild(overlay);

        setTimeout(() => {
            overlay.style.opacity = '1';
            modal.style.transform = 'scale(1)';
            input.focus();
        }, 10);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ Escape
        const handleKeyDown = (e) => {
            if (e.key === 'Escape') {
                closeModal();
                document.removeEventListener('keydown', handleKeyDown);
            }
        };
        document.addEventListener('keydown', handleKeyDown);

        return overlay;
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—É–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} balance - –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    function validateStakingAmount(amount, balance) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        if (isNaN(amount) || amount <= 0) {
            return {
                isValid: false,
                message: "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É –±—ñ–ª—å—à–µ –Ω—É–ª—è"
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Å—É–º–∞ —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º
        if (amount !== Math.floor(amount)) {
            return {
                isValid: false,
                message: "–°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º"
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É
        if (amount < STAKING_CONFIG.minAmount) {
            return {
                isValid: false,
                message: `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${STAKING_CONFIG.minAmount} WINIX`
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å—É–º—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞–ª–∞–Ω—Å—É
        const maxAllowedAmount = Math.floor(balance * STAKING_CONFIG.maxBalancePercentage);
        if (amount > maxAllowedAmount) {
            return {
                isValid: false,
                message: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${maxAllowedAmount} WINIX (${STAKING_CONFIG.maxBalancePercentage*100}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)`
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –±–∞–ª–∞–Ω—Å—É
        if (amount > balance) {
            return {
                isValid: false,
                message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} WINIX`
            };
        }

        return {
            isValid: true,
            message: ""
        };
    }

    /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @returns {number} –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    function calculateExpectedReward(amount, period) {
        try {
            // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
            amount = parseFloat(amount);
            period = parseInt(period);

            if (isNaN(amount) || isNaN(period) || amount <= 0 || period <= 0) {
                return 0;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–µ—Ä—ñ–æ–¥—É
            const rewardPercent = STAKING_CONFIG.rewardRates[period] || 9; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 9%

            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            const reward = (amount * rewardPercent) / 100;

            return parseFloat(reward.toFixed(2));
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', e);
            return 0;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    function showProgressIndicator(message) {
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        hideProgressIndicator();

        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç
        const progressElement = document.createElement('div');
        progressElement.id = 'winix-progress-indicator';
        progressElement.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(26, 31, 47, 0.85);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 10001;
            color: white;
            font-size: 16px;
            opacity: 0;
            transition: opacity 0.3s ease;
            backdrop-filter: blur(3px);
        `;

        // –î–æ–¥–∞—î–º–æ —Å–ø—ñ–Ω–Ω–µ—Ä
        const spinner = document.createElement('div');
        spinner.className = 'winix-spinner';
        spinner.style.cssText = `
            width: 45px;
            height: 45px;
            border: 3px solid rgba(0, 207, 187, 0.3);
            border-radius: 50%;
            border-top-color: #00CFBB;
            animation: winix-spin 1s linear infinite;
            margin-bottom: 20px;
        `;

        // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        const style = document.createElement('style');
        style.textContent = `
            @keyframes winix-spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);

        // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const messageElement = document.createElement('div');
        messageElement.textContent = message || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
        messageElement.style.cssText = `
            font-size: 16px;
            font-weight: 500;
            color: white;
            text-align: center;
            max-width: 80%;
        `;

        // –î–æ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ
        const userId = getUserId();
        if (userId) {
            const userIdElement = document.createElement('div');
            userIdElement.textContent = `ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userId}`;
            userIdElement.style.cssText = `
                font-size: 12px;
                color: rgba(255, 255, 255, 0.7);
                margin-top: 10px;
            `;
            progressElement.appendChild(userIdElement);
        }

        // –°–∫–ª–∞–¥–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
        progressElement.appendChild(spinner);
        progressElement.appendChild(messageElement);
        document.body.appendChild(progressElement);

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        setTimeout(() => {
            progressElement.style.opacity = '1';
        }, 10);
    }

    /**
     * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function hideProgressIndicator() {
        const progressElement = document.getElementById('winix-progress-indicator');
        if (progressElement) {
            progressElement.style.opacity = '0';
            setTimeout(() => {
                if (progressElement.parentNode) {
                    progressElement.parentNode.removeChild(progressElement);
                }
            }, 300);
        }
    }

    // --------------- –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–ï–ô–ö–Ü–ù–ì–£ ---------------

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Object} –î–∞–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function getStakingData() {
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
        const stakingData = getFromStorage(STORAGE_KEYS.STAKING_DATA, null, true);

        // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        if (!stakingData) {
            return {
                hasActiveStaking: false,
                stakingAmount: 0,
                period: 0,
                rewardPercent: 0,
                expectedReward: 0,
                remainingDays: 0
            };
        }

        return stakingData;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {boolean} –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥
     */
    function hasActiveStaking() {
        const stakingData = getFromStorage(STORAGE_KEYS.STAKING_DATA, null, true);
        return stakingData && stakingData.hasActiveStaking === true;
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<Object>} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
     */
    async function syncStakingFromServer() {
        let syncIndicator = null;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API
            if (!window.WinixAPI || typeof window.WinixAPI.getStakingData !== 'function') {
                console.error("‚ùå API –º–æ–¥—É–ª—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –º–µ—Ç–æ–¥ getStakingData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
                throw new Error("API –º–æ–¥—É–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∏–π");
            }

            // –ë–µ–∑–ø–µ—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            try {
                syncIndicator = document.createElement('div');
                syncIndicator.className = 'winix-sync-indicator';
                syncIndicator.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    width: 20px;
                    height: 20px;
                    border: 2px solid rgba(0, 207, 187, 0.3);
                    border-radius: 50%;
                    border-top-color: #00CFBB;
                    animation: winix-spin 1s linear infinite;
                    z-index: 9980;
                `;
                document.body.appendChild(syncIndicator);

                // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î
                if (!document.getElementById('winix-animations')) {
                    const style = document.createElement('style');
                    style.id = 'winix-animations';
                    style.textContent = `
                        @keyframes winix-spin {
                            0% { transform: rotate(0deg); }
                            100% { transform: rotate(360deg); }
                        }
                    `;
                    document.head.appendChild(style);
                }
            } catch (domError) {
                console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", domError);
                // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            }

            console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞");

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ API
            const data = await window.WinixAPI.getStakingData();

            if (data && data.status === 'success' && data.data) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
                updateStorage(STORAGE_KEYS.STAKING_DATA, data.data);

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                if (typeof updateStakingDisplay === 'function') {
                    updateStakingDisplay();
                }

                console.log("‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                return data.data;
            }

            console.error("‚ùå –°—Ç–µ–π–∫—ñ–Ω–≥ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞");
            throw new Error(data?.message || "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞");
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            throw error;
        } finally {
            // –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if (syncIndicator && syncIndicator.parentNode) {
                try {
                    syncIndicator.parentNode.removeChild(syncIndicator);
                } catch (e) {
                    console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", e);
                }
            } else {
                try {
                    const indicator = document.querySelector('.winix-sync-indicator');
                    if (indicator && indicator.parentNode) {
                        indicator.parentNode.removeChild(indicator);
                    }
                } catch (e) {
                    console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", e);
                }
            }
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
     */
    async function syncStakingHistoryFromServer() {
        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const data = await window.WinixAPI.getStakingHistory();

            if (data.status === 'success' && Array.isArray(data.data)) {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
                updateStorage(STORAGE_KEYS.STAKING_HISTORY, data.data);
                return data.data;
            }

            throw new Error("–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞");
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            throw error;
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤ –¥–Ω—è—Ö
     * @returns {Promise<Object>} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function createStaking(amount, period) {
        if (_isProcessingStakingAction) {
            return {
                success: false,
                message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
            };
        }

        _isProcessingStakingAction = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—É–º—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            const balance = getUserBalance();
            const validation = validateStakingAmount(amount, balance);

            if (!validation.isValid) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: validation.message
                };
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const result = await window.WinixAPI.createStaking(Math.floor(amount), period);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            hideProgressIndicator();

            if (result.status === 'success') {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (result.data && result.data.staking) {
                    updateStorage(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.balance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.balance);
                }

                return {
                    success: true,
                    message: "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            hideProgressIndicator();

            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        } finally {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} amount - –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function addToStaking(amount) {
        if (_isProcessingStakingAction) {
            return {
                success: false,
                message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
            };
        }

        _isProcessingStakingAction = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingData = await window.WinixAPI.getStakingData();

            if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }

            const stakingId = stakingData.data.stakingId;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—É–º—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            const balance = getUserBalance();
            const validation = validateStakingAmount(amount, balance);

            if (!validation.isValid) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: validation.message
                };
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const result = await window.WinixAPI.addToStaking(Math.floor(amount), stakingId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            hideProgressIndicator();

            if (result.status === 'success') {
                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (result.data && result.data.staking) {
                    updateStorage(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.balance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.balance);
                }

                return {
                    success: true,
                    message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`,
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            hideProgressIndicator();
            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        } finally {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise} –ü—Ä–æ–º—ñ—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async function cancelStaking() {
        if (_isProcessingStakingAction) {
            return {
                success: false,
                message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
            };
        }

        _isProcessingStakingAction = true;

        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingData = await window.WinixAPI.getStakingData();

            if (stakingData.status !== 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }

            const stakingId = stakingData.data.stakingId;

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const result = await window.WinixAPI.cancelStaking(stakingId);

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            hideProgressIndicator();

            if (result.status === 'success') {
                // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –£–°–Ü–• –º—ñ—Å—Ü—å
                removeFromStorage(STORAGE_KEYS.STAKING_DATA);

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                if (result.data && result.data.newBalance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.newBalance);
                }

                return {
                    success: true,
                    message: result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            hideProgressIndicator();
            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        } finally {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ —á–µ—Ä–µ–∑ API
     * @param {number} amount - –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @param {number} period - –ü–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     * @returns {Promise<number>} –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
     */
    async function getExpectedRewardFromServer(amount, period) {
        try {
            // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
            amount = parseInt(amount);
            period = parseInt(period);

            if (isNaN(amount) || isNaN(period) || amount <= 0 || !STAKING_CONFIG.allowedPeriods.includes(period)) {
                return calculateExpectedReward(amount, period);
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥—É –≤ API
            if (window.WinixAPI && typeof window.WinixAPI.calculateExpectedReward === 'function') {
                const result = await window.WinixAPI.calculateExpectedReward(amount, period);

                if (result.status === 'success' && result.data && typeof result.data.reward === 'number') {
                    return parseFloat(result.data.reward.toFixed(2));
                }
            }

            // –Ø–∫—â–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π API-–∑–∞–ø–∏—Ç
            const userId = getUserId();
            const result = await fetch(`/api/user/${userId}/staking/calculate-reward?amount=${amount}&period=${period}`);
            const data = await result.json();

            if (data.status === 'success' && data.data && typeof data.data.reward === 'number') {
                return parseFloat(data.data.reward.toFixed(2));
            }

            // –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            return calculateExpectedReward(amount, period);
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:", error);
            // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            return calculateExpectedReward(amount, period);
        }
    }

    /**
     * –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º
     * @param {boolean} force - –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    async function repairStaking(force = false) {
        if (_isProcessingStakingAction) {
            return {
                success: false,
                message: "–ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
            };
        }

        _isProcessingStakingAction = true;

        try {
            const userId = getUserId();
            if (!userId) {
                _isProcessingStakingAction = false;
                return {
                    success: false,
                    message: "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                };
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            let result;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ API
            if (window.WinixAPI && typeof window.WinixAPI.repairStaking === 'function') {
                result = await window.WinixAPI.repairStaking(force);
            } else {
                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç
                const response = await fetch(`/api/user/${userId}/staking/repair`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ force: force })
                });

                result = await response.json();
            }

            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            hideProgressIndicator();

            if (result.status === 'success') {
                // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                if (result.data && result.data.staking) {
                    updateStorage(STORAGE_KEYS.STAKING_DATA, result.data.staking);
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å, —è–∫—â–æ —î
                if (result.data && result.data.balance !== undefined) {
                    updateStorage(STORAGE_KEYS.USER_TOKENS, result.data.balance);
                }

                return {
                    success: true,
                    message: result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ",
                    data: result.data
                };
            } else {
                return {
                    success: false,
                    message: result.message || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                };
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            hideProgressIndicator();
            return {
                success: false,
                message: error.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º"
            };
        } finally {
            _isProcessingStakingAction = false;
        }
    }

    // --------------- –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô –î–õ–Ø –°–¢–û–†–Ü–ù–û–ö ---------------

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—Å—Ç–µ–π–∫–∞—Ç–∏"
     */
    function handleStakeButton() {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—é
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        console.log("üí∞ –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ª—ñ–≤
            const amountInput = document.getElementById('staking-amount');
            const periodSelect = document.getElementById('staking-period');

            if (!amountInput || !periodSelect) {
                showAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª—è –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ –≤–ª–∞—Å–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            const amount = parseInt(amountInput.value, 10);
            const period = parseInt(periodSelect.value, 10);

            // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const stakeButton = document.getElementById('stake-button');
            if (stakeButton) stakeButton.disabled = true;

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            createStaking(amount, period)
                .then(result => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
                    if (stakeButton) stakeButton.disabled = false;

                    if (result.success) {
                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                        showAlert("–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", false, function() {
                            window.location.href = "staking-details.html";
                        });
                    } else {
                        showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                    }
                })
                .catch(error => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    if (stakeButton) stakeButton.disabled = false;
                    showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                });
        } catch (error) {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            hideProgressIndicator();

            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
     */
    function handleAddToStakeButton() {
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        console.log("üí∞ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        // –°—Ç–∞—î–º–æ –≤ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
        _isProcessingStakingAction = true;

        // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
        showInputModal('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', function(amount) {
            // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => { if (btn) btn.disabled = true; });

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –î–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            addToStaking(amount)
                .then(result => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });

                    if (result.success) {
                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                        showAlert(`–î–æ–¥–∞–Ω–æ ${amount} $WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`, false, function() {
                            window.location.reload();
                        });
                    } else {
                        showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                        _isProcessingStakingAction = false;
                    }
                })
                .catch(error => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });
                    showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                    _isProcessingStakingAction = false;
                });
        });
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
     */
    function handleCancelStakingButton() {
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        console.log("üóëÔ∏è –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        _isProcessingStakingAction = true;

        // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")) {
            // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => { if (btn) btn.disabled = true; });

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            cancelStaking()
                .then(result => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });

                    if (result.success) {
                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö —ñ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
                        showAlert(result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", false, function() {
                            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ
                            const currentPage = window.location.pathname.split('/').pop();
                            if (currentPage === 'staking-details.html') {
                                window.location.href = "wallet.html";
                            } else {
                                window.location.reload();
                            }
                        });
                    } else {
                        showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                        _isProcessingStakingAction = false;
                    }
                })
                .catch(error => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });
                    showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                    _isProcessingStakingAction = false;
                });
        } else {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–µ—Ç–∞–ª—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
     */
    function handleDetailsButton() {
        console.log("üìã –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ª–æ–∫–∞–ª—å–Ω–æ
            const stakingData = getStakingData();

            // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π
            if (stakingData && stakingData.hasActiveStaking) {
                window.location.href = "staking-details.html";
            } else {
                showAlert("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π:", error);
            showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–º–æ–Ω—Ç—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function handleRepairButton() {
        if (_isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        console.log("üîß –û–±—Ä–æ–±–∫–∞ —Ä–µ–º–æ–Ω—Ç—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
        _isProcessingStakingAction = true;

        // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (confirm("–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É? –¶–µ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Å—Ç–µ–π–∫—ñ–Ω–≥—É.")) {
            // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => { if (btn) btn.disabled = true; });

            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            showProgressIndicator("–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

            // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ä–µ–º–æ–Ω—Ç—É
            repairStaking(true)  // true –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
                .then(result => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });

                    if (result.success) {
                        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                        showAlert(result.message || "–î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ", false, function() {
                            window.location.reload();
                        });
                    } else {
                        showAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                        _isProcessingStakingAction = false;
                    }
                })
                .catch(error => {
                    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    hideProgressIndicator();

                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });
                    showAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                    _isProcessingStakingAction = false;
                });
        } else {
            _isProcessingStakingAction = false;
        }
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function setMaxStakingAmount() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
            const balance = getUserBalance();

            // –û–±—á–∏—Å–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω—É —Å—É–º—É (90% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)
            const maxAllowed = Math.floor(balance * STAKING_CONFIG.maxBalancePercentage);

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥—É
            const amountInput = document.getElementById('staking-amount');
            if (amountInput) {
                amountInput.value = maxAllowed > 0 ? maxAllowed.toString() : '0';

                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                updateExpectedReward();

                // –ê–Ω—ñ–º—É—î–º–æ –ø–æ–ª–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ä—Ç–∞–Ω–Ω—è —É–≤–∞–≥–∏
                amountInput.style.transition = 'all 0.3s ease';
                amountInput.style.borderColor = 'rgba(0, 201, 167, 0.8)';
                amountInput.style.boxShadow = '0 0 10px rgba(0, 201, 167, 0.4)';

                setTimeout(() => {
                    amountInput.style.borderColor = '';
                    amountInput.style.boxShadow = '';
                }, 1000);
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏:', e);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    function updateExpectedReward() {
        const amountInput = document.getElementById('staking-amount');
        const periodSelect = document.getElementById('staking-period');
        const rewardDisplay = document.getElementById('expected-reward');

        if (!amountInput || !periodSelect || !rewardDisplay) return;

        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ª—ñ–≤
        const amount = parseInt(amountInput.value, 10) || 0;
        const period = parseInt(periodSelect.value, 10) || 14;

        if (amount <= 0) {
            rewardDisplay.textContent = '0.00';
            return;
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ "..." –ø–æ–∫–∏ –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞
        rewardDisplay.textContent = '...';

        // –û—Ç—Ä–∏–º—É—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
        getExpectedRewardFromServer(amount, period)
            .then(reward => {
                // –ê–Ω—ñ–º—É—î–º–æ –∑–º—ñ–Ω—É –∑–Ω–∞—á–µ–Ω–Ω—è
                rewardDisplay.style.transition = 'all 0.3s ease';
                rewardDisplay.style.color = '#00C9A7';
                rewardDisplay.textContent = reward.toFixed(2);

                setTimeout(() => {
                    rewardDisplay.style.color = '';
                }, 1000);
            })
            .catch(error => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', error);

                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
                const localReward = calculateExpectedReward(amount, period);
                rewardDisplay.textContent = localReward.toFixed(2);
            });
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    function updateStakingDisplay() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingData = getStakingData();
            const hasStaking = stakingData && stakingData.hasActiveStaking;

            console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", hasStaking);

            // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (window.location.href.includes('staking.html')) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                const statusElement = document.getElementById('staking-status');
                if (statusElement) {
                    statusElement.textContent = hasStaking
                        ? `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingData.stakingAmount} $WINIX`
                        : "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
                const detailsButton = document.getElementById('details-button');
                const cancelButton = document.getElementById('cancel-staking-button');
                const repairButton = document.getElementById('repair-staking-button');

                if (detailsButton) {
                    detailsButton.style.opacity = hasStaking ? '1' : '0.5';
                    detailsButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                }

                if (cancelButton) {
                    cancelButton.style.opacity = hasStaking ? '1' : '0.5';
                    cancelButton.style.pointerEvents = hasStaking ? 'auto' : 'none';
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–º–æ–Ω—Ç—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (ID –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 999)
                if (repairButton) {
                    const userId = getUserId();
                    const isAdmin = userId && userId.startsWith('999');

                    repairButton.style.display = isAdmin ? 'block' : 'none';
                }
            }
            // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            else if (window.location.href.includes('staking-details.html')) {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                if (!hasStaking) {
                    showAlert("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", false, function() {
                        window.location.href = "staking.html";
                    });
                    return;
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                const amountElement = document.getElementById('staking-amount');
                const periodElement = document.getElementById('staking-period');
                const rewardPercentElement = document.getElementById('staking-reward-percent');
                const expectedRewardElement = document.getElementById('staking-expected-reward');
                const remainingDaysElement = document.getElementById('staking-remaining-days');
                const endDateElement = document.getElementById('staking-end-date');

                if (amountElement) amountElement.textContent = `${stakingData.stakingAmount} $WINIX`;
                if (periodElement) periodElement.textContent = `${stakingData.period} –¥–Ω—ñ–≤`;
                if (rewardPercentElement) rewardPercentElement.textContent = `${stakingData.rewardPercent}%`;
                if (expectedRewardElement) expectedRewardElement.textContent = `${stakingData.expectedReward} $WINIX`;
                if (remainingDaysElement) remainingDaysElement.textContent = stakingData.remainingDays ? stakingData.remainingDays.toString() : '0';

                // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è, —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç —ñ –¥–∞—Ç–∞ –ø—Ä–∏—Å—É—Ç–Ω—ñ
                if (endDateElement && stakingData.endDate) {
                    const endDate = new Date(stakingData.endDate);
                    if (!isNaN(endDate.getTime())) {
                        const dateOptions = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };
                        endDateElement.textContent = endDate.toLocaleDateString('uk-UA', dateOptions);
                    } else {
                        endDateElement.textContent = '-';
                    }
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–º–æ–Ω—Ç—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (ID –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 999)
                const repairButton = document.getElementById('repair-staking-button');
                if (repairButton) {
                    const userId = getUserId();
                    const isAdmin = userId && userId.startsWith('999');

                    repairButton.style.display = isAdmin ? 'block' : 'none';
                }
            }
            // –Ø–∫—â–æ –º–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≥–∞–º–∞–Ω—Ü—è
            else if (window.location.href.includes('wallet.html')) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                const stakingBalanceElement = document.getElementById('staking-amount');
                const stakingRewardsElement = document.getElementById('rewards-amount');

                if (stakingBalanceElement) {
                    stakingBalanceElement.textContent = hasStaking ? stakingData.stakingAmount.toString() : '0';
                }

                if (stakingRewardsElement) {
                    stakingRewardsElement.textContent = hasStaking ? stakingData.expectedReward.toString() : '0';
                }
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
        }
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function setupStakingAmountInput() {
        try {
            const amountInput = document.getElementById('staking-amount');
            const periodSelect = document.getElementById('staking-period');

            if (amountInput) {
                // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞
                amountInput.addEventListener('input', function() {
                    // –ó–∞–º—ñ–Ω–∞ –≤—Å—ñ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                    this.value = this.value.replace(/[^0-9]/g, '');

                    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                    updateExpectedReward();
                });
            }

            if (periodSelect) {
                periodSelect.addEventListener('change', updateExpectedReward);
            }

            // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            updateExpectedReward();
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –ø–æ–ª—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
        }
    }

    // --------------- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò ---------------

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö
     */
    function initStakingSystem() {
        console.log("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
        const userId = getUserId();
        console.log("üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userId);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        function autoResetIfNeeded() {
            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                const stakingData = getFromStorage(STORAGE_KEYS.STAKING_DATA, null, true);

                // –Ø–∫—â–æ –¥–∞–Ω—ñ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –∞–±–æ –≤ –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–º—É —Å—Ç–∞–Ω—ñ
                if (stakingData && (
                    typeof stakingData !== 'object' ||
                    (stakingData.hasActiveStaking === true && !stakingData.stakingId) ||
                    (stakingData.stakingAmount && isNaN(parseFloat(stakingData.stakingAmount)))
                )) {
                    console.warn("–í–∏—è–≤–ª–µ–Ω–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è");

                    // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ
                    localStorage.removeItem('winix_staking');
                    localStorage.removeItem('stakingData');

                    return true; // –î–∞–Ω—ñ –±—É–ª–∏ —Å–∫–∏–Ω—É—Ç—ñ
                }

                return false; // –î–∞–Ω—ñ –≤ –ø–æ—Ä—è–¥–∫—É
            } catch (e) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
                return false;
            }
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (autoResetIfNeeded()) {
            console.log("–î–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —Å–∫–∏–Ω—É—Ç–æ, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è");
            setTimeout(() => window.location.reload(), 100);
            return; // –ü—Ä–∏–ø–∏–Ω—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é, –±–æ –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if (currentPage === 'staking.html') {
            console.log("üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
            const stakeButton = document.getElementById('stake-button');
            if (stakeButton) {
                stakeButton.addEventListener('click', handleStakeButton);
            }

            const detailsButton = document.getElementById('details-button');
            if (detailsButton) {
                detailsButton.addEventListener('click', handleDetailsButton);
            }

            const cancelButton = document.getElementById('cancel-staking-button');
            if (cancelButton) {
                cancelButton.addEventListener('click', handleCancelStakingButton);
            }

            const maxButton = document.getElementById('max-button');
            if (maxButton) {
                maxButton.addEventListener('click', setMaxStakingAmount);
            }

            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–º–æ–Ω—Ç—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
            const repairButtonElement = document.getElementById('repair-staking-button');
            if (repairButtonElement) {
                repairButtonElement.addEventListener('click', handleRepairButton);

                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (ID –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 999)
                const isAdmin = userId && userId.startsWith('999');
                repairButtonElement.style.display = isAdmin ? 'block' : 'none';
            }

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
            setupStakingAmountInput();

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            updateStakingDisplay();
        }
        else if (currentPage === 'staking-details.html') {
            console.log("üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
            const addToStakeButton = document.getElementById('add-to-stake-button');
            if (addToStakeButton) {
                addToStakeButton.addEventListener('click', handleAddToStakeButton);
            }

            const cancelButton = document.getElementById('cancel-staking-button');
            if (cancelButton) {
                cancelButton.addEventListener('click', handleCancelStakingButton);
            }

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–µ–º–æ–Ω—Ç—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
            const repairButton = document.getElementById('repair-staking-button');
            if (repairButton) {
                repairButton.addEventListener('click', handleRepairButton);

                // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (ID –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 999)
                const isAdmin = userId && userId.startsWith('999');
                repairButton.style.display = isAdmin ? 'block' : 'none';
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            updateStakingDisplay();
        }
        else if (currentPage === 'wallet.html') {
            console.log("üìã –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≥–∞–º–∞–Ω—Ü—è");

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingButton = document.getElementById('staking-button');
            if (stakingButton) {
                stakingButton.addEventListener('click', function() {
                    window.location.href = 'staking.html';
                });
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            updateStakingDisplay();
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
        if (window.WinixAPI) {
            syncStakingFromServer().catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error));
        } else {
            console.warn("WinixAPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–µ–º–æ–∂–ª–∏–≤–∞");
        }
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initStakingSystem);
    } else {
        initStakingSystem();
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏ –ø–æ–¥—ñ—è—Ö Winix
    document.addEventListener('winix-initialized', initStakingSystem);
    document.addEventListener('winix-core-initialized', initStakingSystem);
    document.addEventListener('winix-api-initialized', initStakingSystem);

    // --------------- –ü–£–ë–õ–Ü–ß–ù–ï API ---------------

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    window.WinixStakingSystem = {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        getStakingData,
        hasActiveStaking,
        syncStakingFromServer,
        syncStakingHistoryFromServer,
        createStaking,
        addToStaking,
        cancelStaking,
        getExpectedRewardFromServer,
        calculateExpectedReward,
        repairStaking,

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        handleStakeButton,
        handleAddToStakeButton,
        handleCancelStakingButton,
        handleDetailsButton,
        handleRepairButton,

        // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        updateStakingDisplay,
        updateExpectedReward,
        setMaxStakingAmount,
        showAlert,
        showInputModal,
        showProgressIndicator,
        hideProgressIndicator,

        // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        getUserId,

        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        CONFIG: STAKING_CONFIG
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å—Ç–∞—Ä–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤
    window.handleStakeButton = handleStakeButton;
    window.handleAddToStakeButton = handleAddToStakeButton;
    window.handleCancelStakingButton = handleCancelStakingButton;
    window.handleDetailsButton = handleDetailsButton;
    window.updateStakingDisplay = updateStakingDisplay;
    window.updateExpectedReward = updateExpectedReward;
    window.setMaxStakingAmount = setMaxStakingAmount;

    console.log("‚úÖ –°–∏—Å—Ç–µ–º—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

    return window.WinixStakingSystem;
})();