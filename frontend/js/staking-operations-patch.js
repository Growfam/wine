/**
 * staking-operations-patch.js
 *
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –ø–∞—Ç—á –¥–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É:
 * - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 * - –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 * - –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
 */

(function() {
    console.log("üîß –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–∞—Ç—á—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É...");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –º–æ–¥—É–ª—è
    if (!window.WinixAPI) {
        console.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ WinixAPI! –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–∞—Ç—á –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É.");
        return;
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID
    function generateUniqueId() {
        return 'stk_' + Date.now() + '_' + Math.floor(Math.random() * 1000000);
    }

    // –§—É–Ω–∫—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —à—Ç—Ä–∞—Ñ—É –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ
    function calculateCancellationPenalty(amount) {
        const penaltyRate = 0.2; // 20%
        const penaltyAmount = amount * penaltyRate;
        return {
            originalAmount: amount,
            penaltyRate: penaltyRate,
            penaltyAmount: penaltyAmount,
            returnedAmount: amount - penaltyAmount
        };
    }

    // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    function updateUI() {
        try {
            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            if (window.WinixCore && window.WinixCore.UI) {
                window.WinixCore.UI.updateBalanceDisplay();
                window.WinixCore.UI.updateStakingDisplay();
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingStatus = document.getElementById('staking-status');
            if (stakingStatus) {
                try {
                    const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                    const stakingData = JSON.parse(stakingDataStr || '{}');

                    if (stakingData && stakingData.hasActiveStaking) {
                        stakingStatus.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingData.stakingAmount || 0} $WINIX`;
                    } else {
                        stakingStatus.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                    }
                } catch (e) {
                    stakingStatus.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
            updateButtonState();

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            document.dispatchEvent(new CustomEvent('staking-updated'));
        } catch (e) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI –ø—ñ—Å–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
        }
    }

    // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫
    function updateButtonState() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            let hasStaking = false;
            try {
                const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                const stakingData = JSON.parse(stakingDataStr || '{}');
                hasStaking = stakingData && stakingData.hasActiveStaking === true;
            } catch (e) {
                hasStaking = false;
            }

            // –ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const activeStakingButton = document.getElementById('active-staking-button');
            if (activeStakingButton) {
                if (hasStaking) {
                    activeStakingButton.classList.remove('disabled');
                    activeStakingButton.disabled = false;
                } else {
                    activeStakingButton.classList.add('disabled');
                    activeStakingButton.disabled = true;
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥"
            const cancelStakingButton = document.getElementById('cancel-staking-button');
            if (cancelStakingButton) {
                if (hasStaking) {
                    cancelStakingButton.style.opacity = '1';
                    cancelStakingButton.style.pointerEvents = 'auto';
                    cancelStakingButton.disabled = false;
                } else {
                    cancelStakingButton.style.opacity = '0.5';
                    cancelStakingButton.style.pointerEvents = 'none';
                    cancelStakingButton.disabled = true;
                }
            }
        } catch (e) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫:", e);
        }
    }

    // –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    function showNotification(message, type = 'success') {
        try {
            if (window.WinixCore && window.WinixCore.UI && window.WinixCore.UI.showNotification) {
                window.WinixCore.UI.showNotification(message, type);
            } else if (window.showToast) {
                window.showToast(message);
            } else {
                alert(message);
            }
        } catch (e) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", e);
            alert(message);
        }
    }

    // ================ –ü–ê–¢–ß–Ü –î–õ–Ø –û–ü–ï–†–ê–¶–Ü–ô –°–¢–ï–ô–ö–Ü–ù–ì–£ ================

    // 1. –ü–ê–¢–ß –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£
    const originalCreateStaking = window.WinixAPI.createStaking;
    window.WinixAPI.createStaking = function(amount, period) {
        return new Promise((resolve) => {
            // –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü—ñ—î—é
            const currentBalance = parseFloat(localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0');

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            if (isNaN(amount) || amount < 50) {
                showNotification('–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É - 50 WINIX', 'error');
                resolve({
                    status: 'error',
                    message: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É - 50 WINIX'
                });
                return;
            }

            if (amount > currentBalance) {
                showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ', 'error');
                resolve({
                    status: 'error',
                    message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ'
                });
                return;
            }

            if (![7, 14, 28].includes(period)) {
                showNotification('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', 'error');
                resolve({
                    status: 'error',
                    message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
                });
                return;
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            originalCreateStaking(amount, period)
                .then(result => {
                    // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    resolve(result);
                })
                .catch(error => {
                    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Ä–µ–∑–µ—Ä–≤–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è:", error);

                    // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É, —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ
                    try {
                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                        const rewardRates = {
                            7: 4,   // 4% –∑–∞ 7 –¥–Ω—ñ–≤
                            14: 9,  // 9% –∑–∞ 14 –¥–Ω—ñ–≤
                            28: 15  // 15% –∑–∞ 28 –¥–Ω—ñ–≤
                        };

                        const rewardPercent = rewardRates[period] || 9;
                        const expectedReward = (amount * rewardPercent) / 100;

                        // –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        const stakingData = {
                            hasActiveStaking: true,
                            stakingId: generateUniqueId(),
                            stakingAmount: amount,
                            period: period,
                            rewardPercent: rewardPercent,
                            expectedReward: expectedReward,
                            startDate: new Date().toISOString(),
                            endDate: new Date(Date.now() + period * 24 * 60 * 60 * 1000).toISOString(),
                            remainingDays: period,
                            source: 'local_fallback'
                        };

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                        localStorage.setItem('stakingData', JSON.stringify(stakingData));
                        localStorage.setItem('winix_staking', JSON.stringify(stakingData));

                        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                        const newBalance = currentBalance - amount;
                        localStorage.setItem('userTokens', newBalance.toString());
                        localStorage.setItem('winix_balance', newBalance.toString());

                        // –û–Ω–æ–≤–ª—é—î–º–æ UI
                        updateUI();

                        // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                        showNotification('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)', 'success');

                        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        resolve({
                            status: 'success',
                            data: {
                                staking: stakingData,
                                balance: newBalance,
                                previous_balance: currentBalance
                            },
                            message: '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)'
                        });
                    } catch (e) {
                        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);

                        resolve({
                            status: 'error',
                            message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥'
                        });
                    }
                });
        });
    };

    // 2. –ü–ê–¢–ß –î–õ–Ø –î–û–î–ê–í–ê–ù–ù–Ø –ö–û–®–¢–Ü–í –î–û –°–¢–ï–ô–ö–Ü–ù–ì–£
    const originalAddToStaking = window.WinixAPI.addToStaking;
    window.WinixAPI.addToStaking = function(amount, stakingId = null) {
        return new Promise((resolve) => {
            // –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å —ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const currentBalance = parseFloat(localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0');
            let stakingData = null;

            try {
                const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                stakingData = JSON.parse(stakingDataStr || '{}');
            } catch (e) {
                console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!stakingData || !stakingData.hasActiveStaking) {
                showNotification('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', 'error');
                resolve({
                    status: 'error',
                    message: '–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
                });
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Å—É–º–∏
            if (isNaN(amount) || amount <= 0) {
                showNotification('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É', 'error');
                resolve({
                    status: 'error',
                    message: '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É'
                });
                return;
            }

            if (amount > currentBalance) {
                showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ', 'error');
                resolve({
                    status: 'error',
                    message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ'
                });
                return;
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ stakingId –∑ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if (!stakingId && stakingData) {
                stakingId = stakingData.stakingId;
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            originalAddToStaking(amount, stakingId)
                .then(result => {
                    // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    resolve(result);
                })
                .catch(error => {
                    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Ä–µ–∑–µ—Ä–≤–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è:", error);

                    // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É, –¥–æ–¥–∞—î–º–æ –∫–æ—à—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    try {
                        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        const newAmount = stakingData.stakingAmount + amount;
                        const rewardPercent = stakingData.rewardPercent || 9;
                        const expectedReward = (newAmount * rewardPercent) / 100;

                        // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±'—î–∫—Ç –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        stakingData.stakingAmount = newAmount;
                        stakingData.expectedReward = expectedReward;
                        stakingData.source = 'local_fallback_add';

                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
                        localStorage.setItem('stakingData', JSON.stringify(stakingData));
                        localStorage.setItem('winix_staking', JSON.stringify(stakingData));

                        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                        const newBalance = currentBalance - amount;
                        localStorage.setItem('userTokens', newBalance.toString());
                        localStorage.setItem('winix_balance', newBalance.toString());

                        // –û–Ω–æ–≤–ª—é—î–º–æ UI
                        updateUI();

                        // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                        showNotification(`–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–ª–æ–∫–∞–ª—å–Ω–æ)`, 'success');

                        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        resolve({
                            status: 'success',
                            data: {
                                staking: stakingData,
                                balance: newBalance,
                                previous_balance: currentBalance,
                                added_amount: amount
                            },
                            message: `–î–æ–¥–∞–Ω–æ ${amount} WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–ª–æ–∫–∞–ª—å–Ω–æ)`
                        });
                    } catch (e) {
                        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);

                        resolve({
                            status: 'error',
                            message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ—à—Ç–∏ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
                        });
                    }
                });
        });
    };

    // 3. –ü–ê–¢–ß –î–õ–Ø –°–ö–ê–°–£–í–ê–ù–ù–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£
    const originalCancelStaking = window.WinixAPI.cancelStaking;
    window.WinixAPI.cancelStaking = function(stakingId = null) {
        return new Promise((resolve) => {
            // –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å —ñ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const currentBalance = parseFloat(localStorage.getItem('userTokens') || localStorage.getItem('winix_balance') || '0');
            let stakingData = null;

            try {
                const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                stakingData = JSON.parse(stakingDataStr || '{}');
            } catch (e) {
                console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            if (!stakingData || !stakingData.hasActiveStaking) {
                showNotification('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É', 'error');
                resolve({
                    status: 'error',
                    message: '–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É'
                });
                return;
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ stakingId –∑ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if (!stakingId && stakingData) {
                stakingId = stakingData.stakingId;
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            originalCancelStaking(stakingId)
                .then(result => {
                    // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    resolve(result);
                })
                .catch(error => {
                    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Ä–µ–∑–µ—Ä–≤–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è:", error);

                    // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É, —Å–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ
                    try {
                        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —à—Ç—Ä–∞—Ñ –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                        const penalty = calculateCancellationPenalty(stakingData.stakingAmount);

                        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —à—Ç—Ä–∞—Ñ—É
                        const newBalance = currentBalance + penalty.returnedAmount;
                        localStorage.setItem('userTokens', newBalance.toString());
                        localStorage.setItem('winix_balance', newBalance.toString());

                        // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        localStorage.removeItem('stakingData');
                        localStorage.removeItem('winix_staking');

                        // –û–Ω–æ–≤–ª—é—î–º–æ UI
                        updateUI();

                        // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                        showNotification('–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)', 'success');

                        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        resolve({
                            status: 'success',
                            data: {
                                newBalance: newBalance,
                                previous_balance: currentBalance,
                                penalty_amount: penalty.penaltyAmount,
                                returned_amount: penalty.returnedAmount,
                                original_amount: penalty.originalAmount
                            },
                            message: '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)'
                        });
                    } catch (e) {
                        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);

                        resolve({
                            status: 'error',
                            message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥'
                        });
                    }
                });
        });
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å StakingSystem —ñ –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ –π–æ–≥–æ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω—ñ—Å—Ç—å
    if (window.StakingSystem && !window.WinixStakingSystem) {
        window.WinixStakingSystem = window.StakingSystem;
    }

    if (window.WinixStakingSystem) {
        // –ü–∞—Ç—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó StakingSystem
        if (window.WinixStakingSystem.createStaking) {
            const originalStakingCreate = window.WinixStakingSystem.createStaking;
            window.WinixStakingSystem.createStaking = function(amount, period) {
                return window.WinixAPI.createStaking(amount, period);
            };
        }

        if (window.WinixStakingSystem.addToStaking) {
            const originalStakingAdd = window.WinixStakingSystem.addToStaking;
            window.WinixStakingSystem.addToStaking = function(amount, stakingId) {
                return window.WinixAPI.addToStaking(amount, stakingId);
            };
        }

        if (window.WinixStakingSystem.cancelStaking) {
            const originalStakingCancel = window.WinixStakingSystem.cancelStaking;
            window.WinixStakingSystem.cancelStaking = function(stakingId) {
                return window.WinixAPI.cancelStaking(stakingId);
            };
        }
    }

    // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    const originalGetStakingData = window.WinixAPI.getStakingData;
    window.WinixAPI.getStakingData = function() {
        return new Promise((resolve) => {
            originalGetStakingData()
                .then(result => {
                    resolve(result);
                })
                .catch(error => {
                    console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:", error);

                    try {
                        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
                        const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
                        const stakingData = JSON.parse(stakingDataStr || '{}');

                        resolve({
                            status: 'success',
                            data: stakingData || {
                                hasActiveStaking: false,
                                stakingAmount: 0,
                                period: 0,
                                rewardPercent: 0,
                                expectedReward: 0,
                                remainingDays: 0,
                                source: 'local_fallback_get'
                            }
                        });
                    } catch (e) {
                        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", e);

                        resolve({
                            status: 'success',
                            data: {
                                hasActiveStaking: false,
                                stakingAmount: 0,
                                period: 0,
                                rewardPercent: 0,
                                expectedReward: 0,
                                remainingDays: 0,
                                source: 'local_fallback_empty'
                            }
                        });
                    }
                });
        });
    };

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    document.addEventListener('DOMContentLoaded', function() {
        // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥" –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        const cancelButton = document.getElementById('cancel-staking-button');
        if (cancelButton) {
            cancelButton.addEventListener('click', function(event) {
                event.preventDefault();

                // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ —à—Ç—Ä–∞—Ñ –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.')) {
                    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    showNotification('–°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥...', 'info');

                    // –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                    window.WinixAPI.cancelStaking()
                        .then(result => {
                            if (result.status === 'success') {
                                showNotification(result.message || '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ', 'success');
                                // –û–Ω–æ–≤–ª—é—î–º–æ UI –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                                setTimeout(updateUI, 500);
                            } else {
                                showNotification(result.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', 'error');
                            }
                        })
                        .catch(error => {
                            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                            showNotification('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', 'error');
                        });
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
        const modalCancelButton = document.getElementById('modal-cancel-staking-button');
        if (modalCancelButton) {
            modalCancelButton.addEventListener('click', function(event) {
                event.preventDefault();

                // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, —è–∫—â–æ –≤–æ–Ω–æ —î
                const modal = document.getElementById('staking-modal');
                if (modal) {
                    modal.classList.remove('active');
                }

                // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ —à—Ç—Ä–∞—Ñ –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.')) {
                    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    showNotification('–°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥...', 'info');

                    // –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–µ–π–∫—ñ–Ω–≥
                    window.WinixAPI.cancelStaking()
                        .then(result => {
                            if (result.status === 'success') {
                                showNotification(result.message || '–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ', 'success');
                                // –û–Ω–æ–≤–ª—é—î–º–æ UI –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                                setTimeout(updateUI, 500);
                            } else {
                                showNotification(result.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', 'error');
                            }
                        })
                        .catch(error => {
                            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                            showNotification('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É', 'error');
                        });
                }
            });
        }
    });

    console.log("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –ø–∞—Ç—á –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ");
})();