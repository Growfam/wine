/**
 * staking-buttons.js
 * –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É WINIX.
 * –í—Å—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–∏—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç–∏.
 */

(function() {
    console.log("üîí –ó–∞–ø—É—Å–∫ —Å–ø—Ä–æ—â–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (window.WinixStakingButtonsFixed) {
        console.log("‚ö†Ô∏è –°–∏—Å—Ç–µ–º—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
        return;
    }

    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Å–∏—Å—Ç–µ–º—É –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    window.WinixStakingButtonsFixed = true;

    // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –∫–ª—ñ–∫–æ–º
    let isProcessingStakingAction = false;

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {string} ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    function getUserId() {
        return localStorage.getItem('telegram_user_id') ||
               (document.getElementById('user-id') ? document.getElementById('user-id').textContent : null);
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
     * @param {string} title –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
     * @param {Function} onConfirm Callback –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
     */
    function createInputModal(title, onConfirm) {
        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–∞—è–≤–Ω—ñ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞ –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
        document.querySelectorAll('.modal-overlay').forEach(modal => {
            modal.remove();
        });

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –∞–±–æ –±–∞–∑–æ–≤–∏–π —Ç–µ–∫—Å—Ç
        const modalTitle = title || '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:';
        const cancelText = '–°–∫–∞—Å—É–≤–∞—Ç–∏';
        const confirmText = 'OK';
        const inputPlaceholder = '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É';

        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        const overlay = document.createElement('div');
        overlay.className = 'modal-overlay';

        const container = document.createElement('div');
        container.className = 'modal-container';

        const titleElement = document.createElement('div');
        titleElement.className = 'modal-title';
        titleElement.textContent = modalTitle;

        const inputContainer = document.createElement('div');
        inputContainer.className = 'input-container';

        const input = document.createElement('input');
        input.className = 'modal-input';
        input.type = 'number';
        input.min = '0';
        input.step = '1'; // –¢—ñ–ª—å–∫–∏ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞
        input.placeholder = inputPlaceholder;
        input.value = '0';

        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'modal-buttons';

        const cancelButton = document.createElement('button');
        cancelButton.className = 'modal-button cancel-button';
        cancelButton.textContent = cancelText;

        const confirmButton = document.createElement('button');
        confirmButton.className = 'modal-button confirm-button';
        confirmButton.textContent = confirmText;

        // –°–∫–ª–∞–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ä–∞–∑–æ–º
        inputContainer.appendChild(input);
        buttonContainer.appendChild(cancelButton);
        buttonContainer.appendChild(confirmButton);
        container.appendChild(titleElement);
        container.appendChild(inputContainer);
        container.appendChild(buttonContainer);
        overlay.appendChild(container);

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        cancelButton.addEventListener('click', function() {
            overlay.remove();
        });

        confirmButton.addEventListener('click', function() {
            const amount = parseInt(input.value, 10);
            if (isNaN(amount) || amount <= 0) {
                input.classList.add('error');
                setTimeout(() => input.classList.remove('error'), 500);
                return;
            }
            overlay.remove();
            if (typeof onConfirm === 'function') {
                onConfirm(amount);
            }
        });

        // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.body.appendChild(overlay);

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª—ñ –≤–≤–µ–¥–µ–Ω–Ω—è
        setTimeout(() => input.focus(), 100);

        return overlay;
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω—å
     * @param {string} message –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {boolean} isError –ß–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @param {Function} callback –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
     */
    function simpleAlert(message, isError = false, callback = null) {
        if (window.winixUI && window.winixUI.simpleAlert) {
            return window.winixUI.simpleAlert(message, isError, callback);
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î winixUI
        const overlay = document.createElement('div');
        overlay.className = 'alert-overlay';

        const container = document.createElement('div');
        container.className = isError ? 'alert-container error' : 'alert-container success';

        const messageElement = document.createElement('div');
        messageElement.className = 'alert-message';
        messageElement.textContent = message;

        const button = document.createElement('button');
        button.className = 'alert-button';
        button.textContent = 'OK';

        container.appendChild(messageElement);
        container.appendChild(button);
        overlay.appendChild(container);
        document.body.appendChild(overlay);

        button.addEventListener('click', function() {
            overlay.remove();
            if (callback) setTimeout(callback, 100);
        });

        return new Promise(resolve => {
            button.addEventListener('click', function() {
                resolve();
            });
        });
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
     * @param {string} buttonId ID –∫–Ω–æ–ø–∫–∏
     * @param {Function} clickHandler –§—É–Ω–∫—Ü—ñ—è-–æ–±—Ä–æ–±–Ω–∏–∫
     */
    function setupCleanButton(buttonId, clickHandler) {
        // –í–∏–∫–æ–Ω—É—î–º–æ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
        function initButton() {
            const button = document.getElementById(buttonId);
            if (!button) return;

            console.log(`üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ ${buttonId} –∑ —î–¥–∏–Ω–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–æ–º`);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–æ–Ω –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);

            // –î–æ–¥–∞—î–º–æ —î–¥–∏–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
            newButton.addEventListener('click', clickHandler);
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initButton);
        } else {
            initButton();
        }

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ AJAX
        document.addEventListener('winix-initialized', initButton);
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
     */
    function handleCancelStakingButton() {
    if (isProcessingStakingAction) {
        console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
        return;
    }

    isProcessingStakingAction = true;
    console.log("üíº –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userId = localStorage.getItem('telegram_user_id') || document.getElementById('user-id').textContent;
    if (!userId) {
        simpleAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", true);
        isProcessingStakingAction = false;
        return;
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const spinner = document.getElementById('loading-spinner');
    if (spinner) spinner.classList.add('show');

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    fetch(`/api/user/${userId}/staking`)
        .then(response => response.json())
        .then(data => {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if (spinner) spinner.classList.remove('show');

            if (data.status !== 'success' || !data.data || !data.data.hasActiveStaking) {
                simpleAlert("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                isProcessingStakingAction = false;
                return;
            }

            const stakingData = data.data;
            const stakingId = stakingData.stakingId;

            // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥? –ë—É–¥–µ —É—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é –∑–∞ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")) {
                // –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
                const buttons = document.querySelectorAll('button');
                buttons.forEach(btn => { if (btn) btn.disabled = true; });

                // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–Ω–æ–≤—É
                if (spinner) spinner.classList.add('show');

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                console.log(`–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingId}`);

                fetch(`/api/user/${userId}/staking/${stakingId}/cancel`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({})
                })
                .then(response => {
                    if (spinner) spinner.classList.remove('show');

                    if (!response.ok) {
                        throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ! –°—Ç–∞—Ç—É—Å: ${response.status}`);
                    }
                    return response.json();
                })
                .then(result => {
                    isProcessingStakingAction = false;

                    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });

                    if (result.status === 'success') {
                        // –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
                        localStorage.removeItem('stakingData');
                        localStorage.removeItem('winix_staking');

                        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
                        if (result.data && result.data.newBalance !== undefined) {
                            localStorage.setItem('userTokens', result.data.newBalance.toString());
                            localStorage.setItem('winix_balance', result.data.newBalance.toString());
                        }

                        // –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
                        simpleAlert(result.message || "–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", false, function() {
                            window.location.reload();
                        });
                    } else {
                        simpleAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                    }
                })
                .catch(error => {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                    if (spinner) spinner.classList.remove('show');
                    buttons.forEach(btn => { if (btn) btn.disabled = false; });
                    simpleAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                    isProcessingStakingAction = false;
                });
            } else {
                isProcessingStakingAction = false;
            }
        })
        .catch(error => {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            if (spinner) spinner.classList.remove('show');
            simpleAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
            isProcessingStakingAction = false;
        });
}

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –±–µ–∑ –≤–ª–∞—Å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    function handleAddToStakeButton() {
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–º –¥—ñ—è–º
    if (isProcessingStakingAction) {
        console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
        return;
    }

    isProcessingStakingAction = true;
    console.log("üíº –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userId = localStorage.getItem('telegram_user_id') || document.getElementById('user-id').textContent;
    if (!userId) {
        simpleAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", true);
        isProcessingStakingAction = false;
        return;
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
    createInputModal('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', function(amount) {
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ UI
        const spinner = document.getElementById('loading-spinner');
        const buttons = document.querySelectorAll('button');
        buttons.forEach(btn => { if (btn) btn.disabled = true; });
        if (spinner) spinner.classList.add('show');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        fetch(`/api/user/${userId}/staking`)
            .then(response => response.json())
            .then(stakingData => {
                if (!stakingData.status === 'success' || !stakingData.data || !stakingData.data.hasActiveStaking) {
                    throw new Error("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É");
                }

                const stakingId = stakingData.data.stakingId;

                // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ API
                return fetch(`/api/user/${userId}/staking/${stakingId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ additionalAmount: Math.floor(amount) })
                });
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (spinner) spinner.classList.remove('show');
                buttons.forEach(btn => { if (btn) btn.disabled = false; });

                if (result.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                    if (result.data.balance !== undefined) {
                        localStorage.setItem('userTokens', result.data.balance.toString());
                        localStorage.setItem('winix_balance', result.data.balance.toString());
                    }

                    if (result.data.staking) {
                        localStorage.setItem('stakingData', JSON.stringify(result.data.staking));
                        localStorage.setItem('winix_staking', JSON.stringify(result.data.staking));
                    }

                    // –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
                    simpleAlert(`–î–æ–¥–∞–Ω–æ ${amount} $WINIX –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É`, false, function() {
                        window.location.reload();
                    });
                } else {
                    simpleAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                }

                isProcessingStakingAction = false;
            })
            .catch(error => {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                if (spinner) spinner.classList.remove('show');
                buttons.forEach(btn => { if (btn) btn.disabled = false; });
                simpleAlert(error.message || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                isProcessingStakingAction = false;
            });
    });
}

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    function updateBalanceDisplays(balance) {
        const balanceElements = document.querySelectorAll('#user-tokens, #main-balance, .balance-amount, #current-balance, .balance-value');
        balanceElements.forEach(element => {
            if (element) {
                if (element.id === 'main-balance' && element.innerHTML && element.innerHTML.includes('main-balance-icon')) {
                    element.innerHTML = `${balance.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" width="100" height="100" alt="WINIX"></span>`;
                } else {
                    element.textContent = balance.toFixed(2);
                }
            }
        });

        // –í–∏–∫–ª–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
        if (window.WinixCore && window.WinixCore.UI) {
            window.WinixCore.UI.updateBalanceDisplay();
        } else if (typeof updateBalanceDisplay === 'function') {
            updateBalanceDisplay();
        }
    }

    function updateStakingDisplays() {
        if (window.WinixCore && window.WinixCore.UI) {
            window.WinixCore.UI.updateStakingDisplay();
        } else if (typeof updateStakingDisplay === 'function') {
            updateStakingDisplay();
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    function updateBalanceDisplay() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
            const tokens = parseFloat(localStorage.getItem('userTokens') || '0');
            const coins = parseFloat(localStorage.getItem('userCoins') || '0');

            console.log(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: ${tokens.toFixed(2)} WINIX, ${coins} –∂–µ—Ç–æ–Ω—ñ–≤`);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –ø–æ–∫–∞–∑—É—é—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤
            const tokenSelectors = [
                '#user-tokens',
                '#main-balance',
                '.balance-amount',
                '#current-balance',
                '.balance-value'
            ];

            tokenSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    if (element) {
                        // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É –¥–ª—è —ñ–∫–æ–Ω–∫–∏, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó
                        if (element.id === 'main-balance' && element.innerHTML && element.innerHTML.includes('main-balance-icon')) {
                            element.innerHTML = `${tokens.toFixed(2)} <span class="main-balance-icon"><img src="assets/token.png" width="100" height="100" alt="WINIX"></span>`;
                        } else {
                            element.textContent = tokens.toFixed(2);
                        }
                    }
                });
            });

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤
            const coinsSelectors = [
                '#user-coins',
                '.coins-amount',
                '.coins-value'
            ];

            coinsSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    if (element) {
                        element.textContent = coins.toFixed(0);
                    }
                });
            });
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', e);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     */
    function updateStakingDisplay() {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
            const stakingDataStr = localStorage.getItem('stakingData') || localStorage.getItem('winix_staking');
            if (!stakingDataStr) {
                console.log("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è");

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å "–Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                const statusElement = document.getElementById('staking-status');
                if (statusElement) {
                    statusElement.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }

                // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                const detailsButton = document.getElementById('details-button');
                if (detailsButton) {
                    detailsButton.style.opacity = '0.5';
                    detailsButton.style.pointerEvents = 'none';
                }

                const cancelButton = document.getElementById('cancel-staking-button');
                if (cancelButton) {
                    cancelButton.style.opacity = '0.5';
                    cancelButton.style.pointerEvents = 'none';
                }

                return;
            }

            // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            const stakingData = JSON.parse(stakingDataStr);
            console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", stakingData);

            if (stakingData && stakingData.hasActiveStaking) {
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                const statusElement = document.getElementById('staking-status');
                if (statusElement) {
                    statusElement.textContent = `–£ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: ${stakingData.stakingAmount} $WINIX`;
                }

                // –ê–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                const detailsButton = document.getElementById('details-button');
                if (detailsButton) {
                    detailsButton.style.opacity = '1';
                    detailsButton.style.pointerEvents = 'auto';
                }

                const cancelButton = document.getElementById('cancel-staking-button');
                if (cancelButton) {
                    cancelButton.style.opacity = '1';
                    cancelButton.style.pointerEvents = 'auto';
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É, —è–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥–µ—Ç–∞–ª–µ–π
                if (window.location.href.includes('staking-details.html')) {
                    const amountElement = document.getElementById('staking-amount');
                    const periodElement = document.getElementById('staking-period');
                    const rewardPercentElement = document.getElementById('staking-reward-percent');
                    const expectedRewardElement = document.getElementById('staking-expected-reward');
                    const remainingDaysElement = document.getElementById('staking-remaining-days');

                    if (amountElement) amountElement.textContent = `${stakingData.stakingAmount} $WINIX`;
                    if (periodElement) periodElement.textContent = `${stakingData.period} –¥–Ω—ñ–≤`;
                    if (rewardPercentElement) rewardPercentElement.textContent = `${stakingData.rewardPercent}%`;
                    if (expectedRewardElement) expectedRewardElement.textContent = `${stakingData.expectedReward} $WINIX`;
                    if (remainingDaysElement) remainingDaysElement.textContent = stakingData.remainingDays.toString();
                }
            } else {
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å "–Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
                const statusElement = document.getElementById('staking-status');
                if (statusElement) {
                    statusElement.textContent = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—ñ–≤";
                }

                // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
                const detailsButton = document.getElementById('details-button');
                if (detailsButton) {
                    detailsButton.style.opacity = '0.5';
                    detailsButton.style.pointerEvents = 'none';
                }

                const cancelButton = document.getElementById('cancel-staking-button');
                if (cancelButton) {
                    cancelButton.style.opacity = '0.5';
                    cancelButton.style.pointerEvents = 'none';
                }
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:', e);
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Å—Ç–µ–π–∫–∞—Ç–∏" - –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
     */
    function handleStakeButton() {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—é
        if (isProcessingStakingAction) {
            console.log("üö´ –î—ñ—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è");
            return;
        }

        isProcessingStakingAction = true;
        console.log("üíº –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ª—ñ–≤
            const amountInput = document.getElementById('staking-amount');
            const periodSelect = document.getElementById('staking-period');

            if (!amountInput || !periodSelect) {
                simpleAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª—è –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                isProcessingStakingAction = false;
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ –≤–ª–∞—Å–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            const amount = parseInt(amountInput.value, 10);
            const period = parseInt(periodSelect.value, 10);

            // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É
            const stakeButton = document.getElementById('stake-button');
            if (stakeButton) stakeButton.disabled = true;

            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();
            if (!userId) {
                simpleAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", true);
                if (stakeButton) stakeButton.disabled = false;
                isProcessingStakingAction = false;
                return;
            }

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–≤—Å—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ä–æ–±–∏—Ç—å —Å–µ—Ä–≤–µ—Ä)
            fetch(`/api/user/${userId}/staking`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    stakingAmount: amount,
                    period: period
                })
            })
            .then(response => response.json())
            .then(result => {
                if (stakeButton) stakeButton.disabled = false;

                if (result.status === 'success') {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ localStorage
                    if (result.data && result.data.staking) {
                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≤ –æ—Ñ–ª–∞–π–Ω—ñ
                        localStorage.setItem('stakingData', JSON.stringify(result.data.staking));
                        localStorage.setItem('winix_staking', JSON.stringify(result.data.staking));
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                    if (result.data && result.data.balance !== undefined) {
                        localStorage.setItem('userTokens', result.data.balance.toString());
                        localStorage.setItem('winix_balance', result.data.balance.toString());
                    }

                    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    if (window.WinixCore && window.WinixCore.UI) {
                        window.WinixCore.UI.updateBalanceDisplay();
                        window.WinixCore.UI.updateStakingDisplay();
                    }

                    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    simpleAlert("–°—Ç–µ–π–∫—ñ–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", false, function() {
                        window.location.href = "staking-details.html";
                    });
                } else {
                    simpleAlert(result.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                }
                isProcessingStakingAction = false;
            })
            .catch(error => {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
                simpleAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
                if (stakeButton) stakeButton.disabled = false;
                isProcessingStakingAction = false;
            });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            simpleAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
            isProcessingStakingAction = false;
        }
    }

    /**
     * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–µ—Ç–∞–ª—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É"
     */
    function handleDetailsButton() {
        console.log("üíº –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userId = getUserId();
            if (!userId) {
                simpleAlert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", true);
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ API
            fetch(`/api/user/${userId}/staking`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success' && data.data && data.data.hasActiveStaking) {
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
                        window.location.href = "staking-details.html";
                    } else {
                        simpleAlert("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                    }
                })
                .catch(error => {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –º–µ—Ä–µ–∂—ñ
                    try {
                        const stakingData = JSON.parse(localStorage.getItem('stakingData') || '{}');
                        if (stakingData && stakingData.hasActiveStaking) {
                            window.location.href = "staking-details.html";
                        } else {
                            simpleAlert("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                        }
                    } catch (e) {
                        simpleAlert("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É", true);
                    }
                });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É:", error);
            simpleAlert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", true);
        }
    }

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞
     */
    // –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π frontend –∫–æ–¥ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
function updateExpectedReward() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —á–∏—Å–ª–∞
    const amountInput = document.getElementById('staking-amount');
    const periodSelect = document.getElementById('staking-period');
    const rewardDisplay = document.getElementById('expected-reward');

    if (!amountInput || !periodSelect || !rewardDisplay) return;

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ü—ñ–ª–µ —á–∏—Å–ª–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ parseInt –∑ –æ—Å–Ω–æ–≤–æ—é 10
    const amount = parseInt(amountInput.value, 10) || 0;
    const period = parseInt(periodSelect.value, 10) || 14;

    if (amount <= 0) {
        rewardDisplay.textContent = '0.00';
        return;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userId = document.getElementById('user-id').textContent;

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    fetch(`/api/user/${userId}/staking/calculate-reward?amount=${amount}&period=${period}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞');
            }
            return response.json();
        })
        .then(data => {
            if (data.status === 'success' && data.data) {
                // –í–∏–≤–æ–¥–∏–º–æ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é
                rewardDisplay.textContent = parseFloat(data.data.reward).toFixed(2);
            } else {
                // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ API, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
                let rewardPercent;
                switch(period) {
                    case 7: rewardPercent = 4; break;
                    case 14: rewardPercent = 9; break;
                    case 28: rewardPercent = 15; break;
                    default: rewardPercent = 9;
                }

                const reward = amount * (rewardPercent / 100);
                rewardDisplay.textContent = reward.toFixed(2);
            }
        })
        .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:', error);

            // –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            let rewardPercent;
            switch(period) {
                case 7: rewardPercent = 4; break;
                case 14: rewardPercent = 9; break;
                case 28: rewardPercent = 15; break;
                default: rewardPercent = 9;
            }

            const reward = amount * (rewardPercent / 100);
            rewardDisplay.textContent = reward.toFixed(2);
        });
}

    /**
     * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
     */
    function setupStakingAmountInput() {
        const amountInput = document.getElementById('staking-amount');
        const periodSelect = document.getElementById('staking-period');

        if (amountInput) {
            // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞
            amountInput.addEventListener('input', function() {
                // –ó–∞–º—ñ–Ω–∞ –≤—Å—ñ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                this.value = this.value.replace(/[^0-9]/g, '');
                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
                updateExpectedReward();
            });
        }

        if (periodSelect) {
            periodSelect.addEventListener('change', updateExpectedReward);
        }

        // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        updateExpectedReward();
    }

    // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –º–æ–¥–∞–ª–æ–∫
    window.createInputModal = createInputModal;

    // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    window.simpleAlert = simpleAlert;

    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    document.addEventListener('DOMContentLoaded', setupStakingAmountInput);

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    setupCleanButton('add-to-stake-button', handleAddToStakeButton);
    setupCleanButton('cancel-staking-button', handleCancelStakingButton);
    setupCleanButton('stake-button', handleStakeButton);
    setupCleanButton('details-button', handleDetailsButton);

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ü—è—Ö
    window.WinixStakingButtons = {
        setupAddButton: function() { setupCleanButton('add-to-stake-button', handleAddToStakeButton); },
        setupCancelButton: function() { setupCleanButton('cancel-staking-button', handleCancelStakingButton); },
        setupStakeButton: function() { setupCleanButton('stake-button', handleStakeButton); },
        setupDetailsButton: function() { setupCleanButton('details-button', handleDetailsButton); },
        updateExpectedReward: updateExpectedReward
    };

    console.log("‚úÖ –°–∏—Å—Ç–µ–º—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
})();