"""
API –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó Telegram –±–æ—Ç–∞ –∑ –º—ñ–Ω—ñ-–∞–ø–ø–æ–º
–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π
"""

import logging
import os
import requests
from flask import request, jsonify
from datetime import datetime, timezone

from supabase_client import get_user, update_balance, update_coins
from users.controllers import get_user_profile, create_new_user
from referrals.controllers import ReferralController, EarningsController
from staking.controllers import get_user_staking

logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"


class TelegramBot:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API"""

    @staticmethod
    def send_message(chat_id, text, reply_markup=None):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }

            if reply_markup:
                data['reply_markup'] = reply_markup

            response = requests.post(f"{TELEGRAM_API_URL}/sendMessage", json=data)
            return response.json()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
            return None

    @staticmethod
    def send_referral_notification(referrer_id, referee_id, bonus_amount):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
        try:
            message = f"""
üéâ <b>–ù–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {referee_id} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –∑–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º!
üí∞ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ <b>{bonus_amount} WINIX</b> —è–∫ –±–æ–Ω—É—Å.

üîó –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –±—ñ–ª—å—à–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ —Ä–∞–∑–æ–º!
            """

            keyboard = {
                'inline_keyboard': [[
                    {'text': 'üë• –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏', 'web_app': {'url': 'https://yourapp.com/referrals'}},
                    {'text': 'üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è', 'switch_inline_query': f'–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ WINIX —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π! {referrer_id}'}
                ]]
            }

            return TelegramBot.send_message(referrer_id, message, keyboard)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {str(e)}")
            return None


def register_telegram_api_routes(app):
    """–†–µ—î—Å—Ç—Ä—É—î API –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º"""

    @app.route('/api/telegram/user/<telegram_id>/sync', methods=['POST'])
    def sync_user_with_bot(telegram_id):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º—ñ–∂ –±–æ—Ç–æ–º —ñ –º—ñ–Ω—ñ-–∞–ø–ø–æ–º"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –º—ñ–Ω—ñ-–∞–ø–ø
            user_response, status_code = get_user_profile(telegram_id)

            if status_code != 200:
                return jsonify({'error': 'User not found'}), 404

            user_data = user_response.json['data']

            # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –±–æ—Ç–∞
            sync_data = {
                'telegram_id': telegram_id,
                'balance': user_data.get('balance', 0),
                'coins': user_data.get('coins', 0),
                'participations_count': user_data.get('participations_count', 0),
                'wins_count': user_data.get('wins_count', 0),
                'last_sync': datetime.now(timezone.utc).isoformat()
            }

            return jsonify({
                'status': 'success',
                'data': sync_data
            })

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
            return jsonify({'error': str(e)}), 500

    @app.route('/api/telegram/user/<telegram_id>/referrals', methods=['GET'])
    def get_user_referrals_for_bot(telegram_id):
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É –≤ –±–æ—Ç—ñ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            referrals_result = ReferralController.get_referral_structure(telegram_id)

            if not referrals_result['success']:
                return jsonify({'error': 'Failed to get referrals'}), 500

            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏ –≤—ñ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            earnings_result = EarningsController.get_earnings_summary(telegram_id)

            # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –±–æ—Ç–∞
            bot_data = {
                'total_referrals': referrals_result['statistics']['totalReferrals'],
                'level1_count': referrals_result['statistics']['level1Count'],
                'level2_count': referrals_result['statistics']['level2Count'],
                'active_referrals': referrals_result['statistics']['activeReferrals'],
                'total_earnings': earnings_result.get('total_earnings', {}).get('total', 0) if earnings_result.get(
                    'success') else 0,
                'referral_link': f"https://t.me/WINIX_Official_bot?start={telegram_id}"
            }

            return jsonify({
                'status': 'success',
                'data': bot_data
            })

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {str(e)}")
            return jsonify({'error': str(e)}), 500

    @app.route('/api/telegram/user/<telegram_id>/balance/update', methods=['POST'])
    def update_user_balance_from_bot(telegram_id):
        """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–æ—Ç–∞"""
        try:
            data = request.get_json()
            amount = data.get('amount')
            description = data.get('description', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞')

            if not amount:
                return jsonify({'error': 'Amount required'}), 400

            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            result = update_balance(telegram_id, float(amount))

            if result:
                return jsonify({
                    'status': 'success',
                    'new_balance': result.get('balance', 0),
                    'description': description
                })
            else:
                return jsonify({'error': 'Failed to update balance'}), 500

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {str(e)}")
            return jsonify({'error': str(e)}), 500

    @app.route('/api/telegram/user/<telegram_id>/coins/add', methods=['POST'])
    def add_user_coins_from_bot(telegram_id):
        """–î–æ–¥–∞—î –∂–µ—Ç–æ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –±–æ—Ç–∞"""
        try:
            data = request.get_json()
            amount = data.get('amount')
            description = data.get('description', '–î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ –∑ –±–æ—Ç–∞')

            if not amount:
                return jsonify({'error': 'Amount required'}), 400

            # –î–æ–¥–∞—î–º–æ –∂–µ—Ç–æ–Ω–∏
            result = update_coins(telegram_id, int(amount))

            if result:
                return jsonify({
                    'status': 'success',
                    'new_coins': result.get('coins', 0),
                    'added': amount,
                    'description': description
                })
            else:
                return jsonify({'error': 'Failed to add coins'}), 500

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤: {str(e)}")
            return jsonify({'error': str(e)}), 500

    @app.route('/api/telegram/user/<telegram_id>/staking', methods=['GET'])
    def get_user_staking_for_bot(telegram_id):
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è –ø–æ–∫–∞–∑—É –≤ –±–æ—Ç—ñ"""
        try:
            staking_result, status_code = get_user_staking(telegram_id)

            if status_code == 200:
                staking_data = staking_result.json.get('data', {})

                # –§–æ—Ä–º—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –±–æ—Ç–∞
                bot_staking_data = {
                    'has_active_staking': staking_data.get('active_sessions_count', 0) > 0,
                    'total_staked': staking_data.get('total_staked', 0),
                    'total_sessions': staking_data.get('total_sessions', 0),
                    'active_sessions': staking_data.get('active_sessions_count', 0)
                }

                return jsonify({
                    'status': 'success',
                    'data': bot_staking_data
                })
            else:
                return jsonify({'error': 'Failed to get staking data'}), status_code

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É: {str(e)}")
            return jsonify({'error': str(e)}), 500

    @app.route('/api/telegram/notifications/send', methods=['POST'])
    def send_notification_to_user():
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        try:
            data = request.get_json()
            telegram_id = data.get('telegram_id')
            message = data.get('message')
            keyboard = data.get('keyboard')

            if not telegram_id or not message:
                return jsonify({'error': 'telegram_id and message required'}), 400

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            result = TelegramBot.send_message(telegram_id, message, keyboard)

            if result and result.get('ok'):
                return jsonify({
                    'status': 'success',
                    'message_id': result.get('result', {}).get('message_id')
                })
            else:
                return jsonify({'error': 'Failed to send message'}), 500

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {str(e)}")
            return jsonify({'error': str(e)}), 500

    @app.route('/api/telegram/referral/notify', methods=['POST'])
    def notify_referral_bonus():
        """–°–ø–æ–≤—ñ—â–∞—î —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–∏–π –±–æ–Ω—É—Å"""
        try:
            data = request.get_json()
            referrer_id = data.get('referrer_id')
            referee_id = data.get('referee_id')
            bonus_amount = data.get('bonus_amount', 50)

            if not referrer_id or not referee_id:
                return jsonify({'error': 'referrer_id and referee_id required'}), 400

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            result = TelegramBot.send_referral_notification(referrer_id, referee_id, bonus_amount)

            if result and result.get('ok'):
                return jsonify({
                    'status': 'success',
                    'notification_sent': True
                })
            else:
                return jsonify({'error': 'Failed to send notification'}), 500

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {str(e)}")
            return jsonify({'error': str(e)}), 500