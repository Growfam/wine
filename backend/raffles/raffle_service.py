"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏, —â–æ –≤–∫–ª—é—á–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤,
–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º.
"""

import os
import sys
import time
import logging
import threading
import schedule
import requests
import random
import json
from datetime import datetime, timezone, timedelta

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("raffle_service.log")
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –±–µ–∫–µ–Ω–¥—É –¥–æ —à–ª—è—Ö—É Python –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
try:
    from supabase_client import supabase, get_user
    from raffles.controllers import finish_raffle, check_and_finish_expired_raffles
except ImportError:
    logger.critical("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤. –°–µ—Ä–≤—ñ—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ.")
    sys.exit(1)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "")

# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
WINNER_MESSAGE_TEMPLATE = """
üéâ –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é! üéâ

–í–∏ –ø–æ—Å—ñ–ª–∏ {place} –º—ñ—Å—Ü–µ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ '{raffle_title}'
–í–∞—à –ø—Ä–∏–∑: {prize_amount} {prize_currency}

–ü—Ä–∏–∑ –≤–∂–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!
"""

DAILY_RAFFLE_NOTIFICATION = """
üéÆ WINIX: –ù–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à üéÆ

–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–∞ {prize_amount} {prize_currency} –≤–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π!
15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø—Ä–∏–∑–∏.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≤–∞—à—ñ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑.
"""


class RaffleService:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ –∞—Å–ø–µ–∫—Ç–∞–º–∏ —Ä–æ–±–æ—Ç–∏ –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏"""

    def __init__(self):
        self.active = False
        self.thread = None
        self.check_interval = 60  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        if self.active:
            logger.warning("–°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False

        self.active = True
        self.thread = threading.Thread(target=self._run_service)
        self.thread.daemon = True
        self.thread.start()

        logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        return True

    def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É"""
        if not self.active:
            logger.warning("–°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False

        self.active = False
        if self.thread:
            self.thread.join(timeout=5.0)

        logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ")
        return True

    def _run_service(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å–µ—Ä–≤—ñ—Å—É"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        self._setup_scheduler()

        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        self._initial_checks()

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
        while self.active:
            try:
                schedule.run_pending()
                time.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ —Å–µ—Ä–≤—ñ—Å—É: {str(e)}", exc_info=True)
                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                time.sleep(300)

    def _setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–≤–¥–∞–Ω—å"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        schedule.every(1).hour.do(self.check_expired_raffles)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ 12:05 —â–æ–¥–Ω—è
        schedule.every().day.at("12:05").do(self.check_and_create_daily_raffle)

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
        schedule.every(30).minutes.do(self.send_notifications_to_winners)

        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –æ 9:00 —Ç–∞ 18:00
        schedule.every().day.at("09:00").do(self.send_daily_raffle_reminder)
        schedule.every().day.at("18:00").do(self.send_daily_raffle_reminder)

        # –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —â–æ–¥–Ω—è –æ 3:00
        schedule.every().day.at("03:00").do(self.backup_raffle_data)

        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

    def _initial_checks(self):
        """–ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        self.check_expired_raffles()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        self.check_and_create_daily_raffle()

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º
        self.send_notifications_to_winners()

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É
        self._send_admin_notification("üéÆ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX –∑–∞–ø—É—â–µ–Ω–æ")

    def check_expired_raffles(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")
            result = check_and_finish_expired_raffles()

            if result.get("status") == "success":
                finished_count = result.get("finished_count", 0)
                if finished_count > 0:
                    logger.info(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {finished_count} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    self._send_admin_notification(f"üèÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {finished_count} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è–º
                    self.send_notifications_to_winners()
                else:
                    logger.info("–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {result.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
                self._send_admin_notification(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {result.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}", exc_info=True)
            self._send_admin_notification(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}")

    def send_notifications_to_winners(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —á–µ—Ä–µ–∑ Telegram Bot API"""
        try:
            if not TELEGRAM_BOT_TOKEN:
                logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
                return

            logger.info("–ó–∞–ø—É—Å–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º")

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤, —è–∫–∏–º —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            winners_response = supabase.table("raffle_winners").select("*").eq("notification_sent", False).execute()

            if not winners_response.data:
                logger.info("–ù–µ–º–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤, —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return

            sent_count = 0
            for winner in winners_response.data:
                telegram_id = winner.get("telegram_id")
                raffle_id = winner.get("raffle_id")
                place = winner.get("place")
                prize_amount = winner.get("prize_amount")
                prize_currency = winner.get("prize_currency", "WINIX")

                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                raffle_response = supabase.table("raffles").select("title").eq("id", raffle_id).execute()
                raffle_title = raffle_response.data[0].get("title", "–†–æ–∑—ñ–≥—Ä–∞—à") if raffle_response.data else "–†–æ–∑—ñ–≥—Ä–∞—à"

                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                message = WINNER_MESSAGE_TEMPLATE.format(
                    place=place,
                    raffle_title=raffle_title,
                    prize_amount=prize_amount,
                    prize_currency=prize_currency
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                success = self._send_telegram_message(telegram_id, message)

                if success:
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    supabase.table("raffle_winners").update({
                        "notification_sent": True
                    }).eq("id", winner.get("id")).execute()

                    sent_count += 1
                    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é {telegram_id}")
                else:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é {telegram_id}")

            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {sent_count} –∑ {len(winners_response.data)}")
            if sent_count > 0:
                self._send_admin_notification(f"üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º: {str(e)}", exc_info=True)
            self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º: {str(e)}")

    def check_and_create_daily_raffle(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É"""
        try:
            logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            daily_raffles_response = supabase.table("raffles").select("id, end_time").eq("is_daily", True).eq("status",
                                                                                                              "active").execute()

            if daily_raffles_response.data:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–π–ø—ñ–∑–Ω—ñ—à–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                latest_raffle = max(daily_raffles_response.data, key=lambda r: r.get("end_time", ""))
                end_time = datetime.fromisoformat(latest_raffle.get("end_time").replace('Z', '+00:00'))

                # –Ø–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                now = datetime.now(timezone.utc)
                if end_time > now:
                    logger.info(f"–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {end_time.isoformat()}")
                    return

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            result = self._create_daily_raffle()
            if result:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
                self.send_daily_raffle_notification()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}", exc_info=True)
            self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}")

    def _create_daily_raffle(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É"""
        try:
            logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É")

            # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
            now = datetime.now(timezone.utc)

            # –ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è (24 –≥–æ–¥–∏–Ω–∏)
            end_time = now + timedelta(days=1)

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
            prize_distribution = {
                "1": {"amount": 5000, "currency": "WINIX"},
                "2": {"amount": 3000, "currency": "WINIX"},
                "3": {"amount": 2000, "currency": "WINIX"},
                "4": {"amount": 1000, "currency": "WINIX"},
                "5": {"amount": 1000, "currency": "WINIX"},
                "6": {"amount": 500, "currency": "WINIX"},
                "7": {"amount": 500, "currency": "WINIX"},
                "8": {"amount": 500, "currency": "WINIX"},
                "9": {"amount": 500, "currency": "WINIX"},
                "10": {"amount": 500, "currency": "WINIX"},
                "11": {"amount": 500, "currency": "WINIX"},
                "12": {"amount": 500, "currency": "WINIX"},
                "13": {"amount": 500, "currency": "WINIX"},
                "14": {"amount": 500, "currency": "WINIX"},
                "15": {"amount": 500, "currency": "WINIX"}
            }

            # –î–∞–Ω—ñ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            daily_raffle_data = {
                "title": f"–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à {now.strftime('%d.%m.%Y')}",
                "description": "–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à WINIX. 15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø—Ä–∏–∑–∏! –ö–æ–∂–µ–Ω –∂–µ—Ç–æ–Ω –∑–±—ñ–ª—å—à—É—î –≤–∞—à—ñ —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É.",
                "prize_amount": 17000,  # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—Ä–∏–∑—ñ–≤
                "prize_currency": "WINIX",
                "entry_fee": 1,  # –í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ –≤ –∂–µ—Ç–æ–Ω–∞—Ö
                "start_time": now.isoformat(),
                "end_time": end_time.isoformat(),
                "winners_count": 15,
                "status": "active",
                "is_daily": True,
                "image_url": "assets/daily-prize.png",
                "prize_distribution": prize_distribution,
                "created_by": "system",
                "created_at": now.isoformat(),
                "updated_at": now.isoformat()
            }

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
            response = supabase.table("raffles").insert(daily_raffle_data).execute()

            if response.data:
                raffle_id = response.data[0].get('id')
                logger.info(f"–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: {raffle_id}")
                self._send_admin_notification(
                    f"üéÆ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–∞ {daily_raffle_data['prize_amount']} {daily_raffle_data['prize_currency']} (ID: {raffle_id})")
                return raffle_id
            else:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
                self._send_admin_notification(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
                return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}", exc_info=True)
            self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}")
            return None

    def send_daily_raffle_notification(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à"""
        try:
            if not TELEGRAM_BOT_TOKEN:
                logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_response = supabase.table("raffles").select("*").eq("is_daily", True).eq("status", "active").order(
                "created_at", desc=True).limit(1).execute()

            if not raffle_response.data:
                logger.warning("–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return

            raffle = raffle_response.data[0]

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = DAILY_RAFFLE_NOTIFICATION.format(
                prize_amount=raffle.get("prize_amount"),
                prize_currency=raffle.get("prize_currency", "WINIX")
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–æ–±–º–µ–∂–µ–Ω–Ω—è 100 –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
            users_response = supabase.table("winix").select("telegram_id").limit(100).execute()

            if not users_response.data:
                logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            sent_count = 0
            for user in users_response.data:
                telegram_id = user.get("telegram_id")

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if self._send_telegram_message(telegram_id, message):
                    sent_count += 1

            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
            self._send_admin_notification(f"üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à: {str(e)}", exc_info=True)
            self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à: {str(e)}")

    def send_daily_raffle_reminder(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à"""
        try:
            if not TELEGRAM_BOT_TOKEN:
                logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_response = supabase.table("raffles").select("*").eq("is_daily", True).eq("status", "active").order(
                "created_at", desc=True).limit(1).execute()

            if not raffle_response.data:
                logger.warning("–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
                return

            raffle = raffle_response.data[0]

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–ª–∏—à–∏–ª–æ—Å—å
            now = datetime.now(timezone.utc)
            end_time = datetime.fromisoformat(raffle.get("end_time").replace('Z', '+00:00'))
            time_left = end_time - now

            hours_left = int(time_left.total_seconds() // 3600)
            minutes_left = int((time_left.total_seconds() % 3600) // 60)

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = f"""
üéÆ WINIX: –ù–µ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à! üéÆ

–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle.get("title")} –∑–∞–ª–∏—à–∏–ª–æ—Å—å {hours_left} –≥–æ–¥ {minutes_left} —Ö–≤.

–ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {raffle.get("prize_amount")} {raffle.get("prize_currency", "WINIX")}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: {raffle.get("winners_count")}

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≤–∞—à—ñ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑!
"""

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ —â–µ –ù–ï –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∏—Ö, —Ö—Ç–æ –≤–∂–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—å
            participants_response = supabase.table("raffle_participants").select("telegram_id").eq("raffle_id",
                                                                                                   raffle.get(
                                                                                                       "id")).execute()

            participant_ids = [p.get("telegram_id") for p in
                               participants_response.data] if participants_response.data else []

            # –¢–µ–ø–µ—Ä –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–µ —î –≤ —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤ (–æ–±–º–µ–∂–µ–Ω–Ω—è 50 –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
            users_query = supabase.table("winix").select("telegram_id")

            if participant_ids:
                users_query = users_query.not_.in_("telegram_id", participant_ids)

            users_response = users_query.limit(50).execute()

            if not users_response.data:
                logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤—ñ–π –ø—ñ–¥–º–Ω–æ–∂–∏–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            sample_size = min(20, len(users_response.data))  # –ú–∞–∫—Å–∏–º—É–º 20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ —Ä–∞–∑
            selected_users = random.sample(users_response.data, sample_size)

            sent_count = 0
            for user in selected_users:
                telegram_id = user.get("telegram_id")

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if self._send_telegram_message(telegram_id, message):
                    sent_count += 1

            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à")
            self._send_admin_notification(f"‚è∞ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à: {str(e)}", exc_info=True)
            self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à: {str(e)}")

    def backup_raffle_data(self):
        """–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        try:
            logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
            backup_dir = os.path.join(current_dir, "backups")
            os.makedirs(backup_dir, exist_ok=True)

            # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
            today = datetime.now().strftime('%Y-%m-%d')

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            raffles_response = supabase.table("raffles").select("*").execute()
            participants_response = supabase.table("raffle_participants").select("*").execute()
            winners_response = supabase.table("raffle_winners").select("*").execute()

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "raffles": raffles_response.data if raffles_response.data else [],
                "participants": participants_response.data if participants_response.data else [],
                "winners": winners_response.data if winners_response.data else []
            }

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ñ–∞–π–ª
            backup_file = os.path.join(backup_dir, f"raffles_backup_{today}.json")
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)

            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_file}")
            self._send_admin_notification(
                f"üíæ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {len(backup_data['raffles'])} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, {len(backup_data['participants'])} —É—á–∞—Å–Ω–∏–∫—ñ–≤, {len(backup_data['winners'])} –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤")

            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó (—Å—Ç–∞—Ä—à—ñ 30 –¥–Ω—ñ–≤)
            self._cleanup_old_backups(backup_dir)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {str(e)}", exc_info=True)
            self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}")

    def _cleanup_old_backups(self, backup_dir, days_to_keep=30):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π"""
        try:
            # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
            now = datetime.now()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π
            for filename in os.listdir(backup_dir):
                filepath = os.path.join(backup_dir, filename)

                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                if os.path.isdir(filepath):
                    continue

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª —î —Ä–µ–∑–µ—Ä–≤–Ω–æ—é –∫–æ–ø—ñ—î—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if not filename.startswith("raffles_backup_"):
                    continue

                # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É
                file_time = datetime.fromtimestamp(os.path.getmtime(filepath))

                # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω —Å—Ç–∞—Ä—à–∏–π –∑–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
                if (now - file_time).days > days_to_keep:
                    os.remove(filepath)
                    logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—É —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {filename}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π: {str(e)}")

    def _send_telegram_message(self, telegram_id, message):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram Bot API"""
        try:
            if not TELEGRAM_BOT_TOKEN:
                logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
                return False

            url = f"{TELEGRAM_API_URL}/sendMessage"
            payload = {
                "chat_id": telegram_id,
                "text": message,
                "parse_mode": "HTML"
            }

            response = requests.post(url, json=payload, timeout=10)

            if response.status_code == 200:
                return True
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {response.text}")
                return False
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
            return False

    def _send_admin_notification(self, message):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if not ADMIN_CHAT_ID:
            logger.warning("ADMIN_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False

        return self._send_telegram_message(ADMIN_CHAT_ID, message)


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É —Å–µ—Ä–≤—ñ—Å—É
raffle_service = RaffleService()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É
def start_raffle_service():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
    return raffle_service.start()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤—ñ—Å—É
def stop_raffle_service():
    """–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
    return raffle_service.stop()


# –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —è–∫ –æ–∫—Ä–µ–º–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É")
    start_raffle_service()

    try:
        # –£—Ç—Ä–∏–º—É—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏")
        stop_raffle_service()