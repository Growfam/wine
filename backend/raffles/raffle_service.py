"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏, —â–æ –≤–∫–ª—é—á–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤,
–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º.
"""

import os
import sys
import time
import logging
import threading
import schedule
import secrets
import json
import uuid
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
                    handlers=[
                        logging.StreamHandler(),
                        logging.FileHandler("raffle_service.log")
                    ])
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
try:
    from ..supabase_client import supabase, get_user, execute_transaction, cache_get, cache_set, clear_cache
    from ..raffles.controllers import finish_raffle, check_and_finish_expired_raffles
except ImportError:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    try:
        from supabase_client import supabase, get_user, execute_transaction, cache_get, cache_set, clear_cache
        from raffles.controllers import finish_raffle, check_and_finish_expired_raffles
    except ImportError:
        logger.critical("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤. –°–µ—Ä–≤—ñ—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ.")
        sys.exit(1)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "")
MAX_RETRY_ATTEMPTS = 3

# –¢–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
class NotificationType:
    WELCOME = "welcome"
    RAFFLE_START = "raffle_start"
    RAFFLE_END = "raffle_end"
    WINNER = "winner"
    DAILY_REMINDER = "daily_reminder"
    SYSTEM = "system"

# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGE_TEMPLATES = {
    NotificationType.WINNER: """
üéâ –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é! üéâ

–í–∏ –ø–æ—Å—ñ–ª–∏ {place} –º—ñ—Å—Ü–µ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ '{raffle_title}'
–í–∞—à –ø—Ä–∏–∑: {prize_amount} {prize_currency}

–ü—Ä–∏–∑ –≤–∂–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!
""",

    NotificationType.DAILY_REMINDER: """
üéÆ WINIX: –ù–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à üéÆ

–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–∞ {prize_amount} {prize_currency} –≤–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π!
15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø—Ä–∏–∑–∏.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≤–∞—à—ñ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑.
""",

    NotificationType.SYSTEM: """
üîî WINIX: –°–∏—Å—Ç–µ–º–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

{message}

–ß–∞—Å: {time}
"""
}


class WebhookException(Exception):
    """–í–∏–Ω—è—Ç–æ–∫ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ webhooks"""
    pass

class TelegramApiException(Exception):
    """–í–∏–Ω—è—Ç–æ–∫ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ Telegram API"""
    pass


def send_telegram_message(chat_id: str, message: str, retry_count: int = 0) -> bool:
    """–ù–∞–¥—ñ–π–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram Bot API –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
    if not TELEGRAM_BOT_TOKEN:
        logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return False

    try:
        import requests
        url = f"{TELEGRAM_API_URL}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML"
        }

        response = requests.post(url, json=payload, )

        if response.status_code == 200:
            return True
        else:
            error_info = response.json() if response.text else {"description": "–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"}
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {error_info}")

            # –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
            if retry_count < MAX_RETRY_ATTEMPTS:
                # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                delay = 2 ** retry_count
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay)
                return send_telegram_message(chat_id, message, retry_count + 1)
            return False
    except Exception as e:
        logger.error(f"–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")

        # –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
        if retry_count < MAX_RETRY_ATTEMPTS:
            delay = 2 ** retry_count
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            return send_telegram_message(chat_id, message, retry_count + 1)
        return False


class RaffleServiceState:
    """–ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É"""
    def __init__(self):
        self.active = False
        self.start_time = None
        self.task_statuses = {}
        self.thread = None
        self.notifications_enabled = True
        self.last_backup = None
        self.task_lock = threading.Lock()


class RaffleService:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ –∞—Å–ø–µ–∫—Ç–∞–º–∏ —Ä–æ–±–æ—Ç–∏ –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏"""

    def __init__(self):
        self.state = RaffleServiceState()
        self.check_interval = 60  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

    def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        if self.state.active:
            logger.warning("–°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False

        try:
            self.state.active = True
            self.state.start_time = datetime.now().isoformat()
            self.state.thread = threading.Thread(target=self._run_service, daemon=True)
            self.state.thread.start()

            logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if ADMIN_CHAT_ID:
                send_telegram_message(
                    ADMIN_CHAT_ID,
                    f"üéÆ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX –∑–∞–ø—É—â–µ–Ω–æ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )

            return True
        except Exception as e:
            logger.critical(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}")
            self.state.active = False
            return False

    def stop(self) -> bool:
        """–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É"""
        if not self.state.active:
            logger.warning("–°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False

        try:
            self.state.active = False
            if self.state.thread:
                self.state.thread.join()

            logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ")

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if ADMIN_CHAT_ID:
                send_telegram_message(
                    ADMIN_CHAT_ID,
                    f"‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX –∑—É–ø–∏–Ω–µ–Ω–æ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )

            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}")
            return False

    def _run_service(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å–µ—Ä–≤—ñ—Å—É"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        self._setup_scheduler()

        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        self._initial_checks()

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
        retry_count = 0
        while self.state.active:
            try:
                schedule.run_pending()
                time.sleep(self.check_interval)
                retry_count = 0  # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É —Ü–∏–∫–ª—ñ
            except Exception as e:
                retry_count += 1
                wait_time = min(300, 30 * retry_count)  # –ú–∞–∫—Å–∏–º—É–º 5 —Ö–≤–∏–ª–∏–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ —Å–µ—Ä–≤—ñ—Å—É (—Å–ø—Ä–æ–±–∞ {retry_count}): {str(e)}", exc_info=True)

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if retry_count >= 3 and ADMIN_CHAT_ID:
                    send_telegram_message(
                        ADMIN_CHAT_ID,
                        f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Å–µ—Ä–≤—ñ—Å—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}\n–°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥"
                    )

                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                time.sleep(wait_time)

    def _setup_scheduler(self) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–≤–¥–∞–Ω—å"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        schedule.every(1).hour.do(self.run_task, "check_expired_raffles", self.check_expired_raffles)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –æ 12:05 —â–æ–¥–Ω—è
        schedule.every().day.at("12:05").do(self.run_task, "create_daily_raffle", self.check_and_create_daily_raffle)

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
        schedule.every(30).minutes.do(self.run_task, "send_winner_notifications", self.send_notifications_to_winners)

        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –æ 9:00 —Ç–∞ 18:00
        schedule.every().day.at("09:00").do(self.run_task, "morning_reminder", self.send_daily_raffle_reminder)
        schedule.every().day.at("18:00").do(self.run_task, "evening_reminder", self.send_daily_raffle_reminder)

        # –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —â–æ–¥–Ω—è –æ 3:00
        schedule.every().day.at("03:00").do(self.run_task, "backup_data", self.backup_raffle_data)

        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

    def run_task(self, task_name: str, task_func) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –æ–¥–Ω–æ—á–∞—Å–Ω–æ–º—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—é –æ–¥–Ω—ñ—î—ó —ñ —Ç—ñ—î—ó –∂ –∑–∞–¥–∞—á—ñ
        with self.state.task_lock:
            try:
                logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ: {task_name}")

                # –§—ñ–∫—Å—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                self.state.task_statuses[task_name] = {
                    "start_time": datetime.now().isoformat(),
                    "status": "running"
                }

                # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–¥–∞—á—É
                result = task_func()

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
                self.state.task_statuses[task_name] = {
                    "last_run": datetime.now().isoformat(),
                    "status": "success",
                    "result": result
                }

                logger.info(f"–ó–∞–¥–∞—á–∞ {task_name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞")
                return result
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ {task_name}: {str(e)}", exc_info=True)

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑ –ø–æ–º–∏–ª–∫–æ—é
                self.state.task_statuses[task_name] = {
                    "last_run": datetime.now().isoformat(),
                    "status": "error",
                    "error": str(e)
                }

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                if ADMIN_CHAT_ID:
                    self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ {task_name}: {str(e)}")

                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None, –∞ –Ω–µ –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫, —â–æ–± –Ω–µ –∑—É–ø–∏–Ω—è—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
                return {
                    "status": "error",
                    "message": str(e),
                    "task": task_name
                }

    def _initial_checks(self) -> None:
        """–ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        self.run_task("initial_check_expired", self.check_expired_raffles)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        self.run_task("initial_check_daily", self.check_and_create_daily_raffle)

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º
        self.run_task("initial_send_notifications", self.send_notifications_to_winners)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É
        self._send_admin_notification("üéÆ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX –∑–∞–ø—É—â–µ–Ω–æ")

    def check_expired_raffles(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

        try:
            result = check_and_finish_expired_raffles()

            if result.get("status") == "success":
                finished_count = result.get("finished_count", 0)
                if finished_count > 0:
                    finished_raffles = result.get("finished_raffles", [])
                    logger.info(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {finished_count} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {finished_raffles}")

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    self._send_admin_notification(f"üèÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {finished_count} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è–º
                    self.send_notifications_to_winners()
                else:
                    logger.info("–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            else:
                error_message = result.get('message', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {error_message}")
                self._send_admin_notification(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {error_message}")

            return result
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}", exc_info=True)
            return {
                "status": "error",
                "message": str(e)
            }

    def send_notifications_to_winners(self) -> Dict[str, Any]:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —á–µ—Ä–µ–∑ Telegram API"""
        if not TELEGRAM_BOT_TOKEN:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
            return {"status": "error", "message": "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"}

        if not self.state.notifications_enabled:
            logger.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Å–µ—Ä–≤—ñ—Å—É")
            return {"status": "skipped", "message": "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ"}

        logger.info("–ó–∞–ø—É—Å–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º")

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤, —è–∫–∏–º —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            winners_response = supabase.table("raffle_winners").select("*").eq("notification_sent", False).execute()

            if not winners_response.data:
                logger.info("–ù–µ–º–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤, —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return {"status": "success", "message": "–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏", "count": 0}

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
            raffle_ids = list(set([w.get("raffle_id") for w in winners_response.data if w.get("raffle_id")]))
            raffles_response = supabase.table("raffles").select("id,title").in_("id", raffle_ids).execute()

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑–∞ id
            raffles_by_id = {r.get("id"): r for r in raffles_response.data if r.get("id")}

            sent_count = 0
            failed_count = 0

            for winner in winners_response.data:
                winner_id = winner.get("id")
                telegram_id = winner.get("telegram_id")
                raffle_id = winner.get("raffle_id")

                if not telegram_id or not raffle_id:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è –∑ –Ω–µ–ø–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {winner_id}")
                    continue

                place = winner.get("place")
                prize_amount = winner.get("prize_amount")
                prize_currency = winner.get("prize_currency", "WINIX")

                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ä–æ–∑—ñ–≥—Ä–∞—à—É –∑ –∫–µ—à—É
                raffle = raffles_by_id.get(raffle_id, {})
                raffle_title = raffle.get("title", "–†–æ–∑—ñ–≥—Ä–∞—à")

                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                message = MESSAGE_TEMPLATES[NotificationType.WINNER].format(
                    place=place,
                    raffle_title=raffle_title,
                    prize_amount=prize_amount,
                    prize_currency=prize_currency
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                success = send_telegram_message(telegram_id, message)

                if success:
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    supabase.table("raffle_winners").update({
                        "notification_sent": True
                    }).eq("id", winner_id).execute()

                    sent_count += 1
                    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é {telegram_id}")
                else:
                    failed_count += 1
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é {telegram_id}")

            result = {
                "status": "success",
                "message": f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ {failed_count}",
                "sent_count": sent_count,
                "failed_count": failed_count,
                "total": len(winners_response.data)
            }

            if sent_count > 0:
                self._send_admin_notification(f"üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

            return result
        except Exception as e:
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º: {str(e)}"
            logger.error(error_message, exc_info=True)
            self._send_admin_notification(f"‚ùå {error_message}")

            return {
                "status": "error",
                "message": error_message,
                "sent_count": 0,
                "failed_count": 0
            }

    def check_and_create_daily_raffle(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É"""
        try:
            logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            daily_raffles_response = supabase.table("raffles").select("id, end_time").eq("is_daily", True).eq("status", "active").execute()

            if daily_raffles_response.data:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–π–ø—ñ–∑–Ω—ñ—à–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                latest_raffle = max(daily_raffles_response.data, key=lambda r: r.get("end_time", ""))

                try:
                    end_time = datetime.fromisoformat(latest_raffle.get("end_time", "").replace('Z', '+00:00'))

                    # –Ø–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                    now = datetime.now(timezone.utc)
                    if end_time > now:
                        logger.info(f"–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {end_time.isoformat()}")
                        return {
                            "status": "skipped",
                            "message": "–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                            "raffle_id": latest_raffle.get("id"),
                            "end_time": end_time.isoformat()
                        }
                except (ValueError, AttributeError):
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —á–∞—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            result = self._create_daily_raffle()

            if result and result.get("status") == "success":
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
                notification_result = self.send_daily_raffle_notification()
                result["notification"] = notification_result

            return result
        except Exception as e:
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}"
            logger.error(error_message, exc_info=True)
            self._send_admin_notification(f"‚ùå {error_message}")

            return {
                "status": "error",
                "message": error_message
            }

    def _create_daily_raffle(self) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É"""
        try:
            logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É")

            # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
            now = datetime.now(timezone.utc)

            # –ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è (24 –≥–æ–¥–∏–Ω–∏)
            end_time = now + timedelta(days=1)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
            raffle_id = str(uuid.uuid4())

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
            prize_distribution = {
                "1": {"amount": 5000, "currency": "WINIX"},
                "2": {"amount": 3000, "currency": "WINIX"},
                "3": {"amount": 2000, "currency": "WINIX"},
                "4": {"amount": 1000, "currency": "WINIX"},
                "5": {"amount": 1000, "currency": "WINIX"},
                "6": {"amount": 500, "currency": "WINIX"},
                "7": {"amount": 500, "currency": "WINIX"},
                "8": {"amount": 500, "currency": "WINIX"},
                "9": {"amount": 500, "currency": "WINIX"},
                "10": {"amount": 500, "currency": "WINIX"},
                "11": {"amount": 500, "currency": "WINIX"},
                "12": {"amount": 500, "currency": "WINIX"},
                "13": {"amount": 500, "currency": "WINIX"},
                "14": {"amount": 500, "currency": "WINIX"},
                "15": {"amount": 500, "currency": "WINIX"}
            }

            # –î–∞–Ω—ñ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            daily_raffle_data = {
                "id": raffle_id,
                "title": f"–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à {now.strftime('%d.%m.%Y')}",
                "description": "–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à WINIX. 15 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø—Ä–∏–∑–∏! –ö–æ–∂–µ–Ω –∂–µ—Ç–æ–Ω –∑–±—ñ–ª—å—à—É—î –≤–∞—à—ñ —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É.",
                "prize_amount": 17000,  # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—Ä–∏–∑—ñ–≤
                "prize_currency": "WINIX",
                "entry_fee": 1,  # –í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ –≤ –∂–µ—Ç–æ–Ω–∞—Ö
                "start_time": now.isoformat(),
                "end_time": end_time.isoformat(),
                "winners_count": 15,
                "status": "active",
                "is_daily": True,
                "image_url": "assets/daily-prize.png",
                "prize_distribution": prize_distribution,
                "created_by": "system",
                "created_at": now.isoformat(),
                "updated_at": now.isoformat(),
                "participants_count": 0
            }

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
            response = supabase.table("raffles").insert(daily_raffle_data).execute()

            if response.data:
                logger.info(f"–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: {raffle_id}")
                self._send_admin_notification(
                    f"üéÆ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–∞ {daily_raffle_data['prize_amount']} {daily_raffle_data['prize_currency']} (ID: {raffle_id})"
                )

                return {
                    "status": "success",
                    "message": "–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                    "raffle_id": raffle_id,
                    "prize_amount": daily_raffle_data['prize_amount'],
                    "prize_currency": daily_raffle_data['prize_currency']
                }
            else:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
                self._send_admin_notification(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")

                return {
                    "status": "error",
                    "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à"
                }
        except Exception as e:
            error_message = f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}"
            logger.error(error_message, exc_info=True)
            self._send_admin_notification(f"‚ùå {error_message}")

            return {
                "status": "error",
                "message": error_message
            }

    def send_daily_raffle_notification(self) -> Dict[str, Any]:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à"""
        if not TELEGRAM_BOT_TOKEN:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
            return {"status": "error", "message": "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"}

        if not self.state.notifications_enabled:
            logger.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Å–µ—Ä–≤—ñ—Å—É")
            return {"status": "skipped", "message": "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ"}

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_response = supabase.table("raffles").select("*") \
                                    .eq("is_daily", True) \
                                    .eq("status", "active") \
                                    .order("created_at", desc=True) \
                                    .limit(1) \
                                    .execute()

            if not raffle_response.data:
                logger.warning("–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return {
                    "status": "error",
                    "message": "–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                }

            raffle = raffle_response.data[0]

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = MESSAGE_TEMPLATES[NotificationType.DAILY_REMINDER].format(
                prize_amount=raffle.get("prize_amount"),
                prize_currency=raffle.get("prize_currency", "WINIX")
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
            users_response = supabase.table("winix").select("telegram_id").limit(100).execute()

            if not users_response.data:
                logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return {
                    "status": "error",
                    "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                }

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ –±–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
            sample_size = min(50, len(users_response.data))
            selected_indexes = []

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
            pool = list(range(len(users_response.data)))
            for _ in range(sample_size):
                if not pool:
                    break
                idx = secrets.randbelow(len(pool))
                selected_indexes.append(pool.pop(idx))

            selected_users = [users_response.data[i] for i in selected_indexes]

            sent_count = 0
            failed_count = 0

            for user in selected_users:
                telegram_id = user.get("telegram_id")
                if not telegram_id:
                    continue

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if send_telegram_message(telegram_id, message):
                    sent_count += 1
                else:
                    failed_count += 1

                # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API
                time.sleep(0.1)

            result = {
                "status": "success",
                "message": f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {len(selected_users)}",
                "sent_count": sent_count,
                "failed_count": failed_count,
                "raffle_id": raffle.get("id")
            }

            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
            self._send_admin_notification(f"üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")

            return result
        except Exception as e:
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à: {str(e)}"
            logger.error(error_message, exc_info=True)
            self._send_admin_notification(f"‚ùå {error_message}")

            return {
                "status": "error",
                "message": error_message
            }

    def send_daily_raffle_reminder(self) -> Dict[str, Any]:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à"""
        if not TELEGRAM_BOT_TOKEN:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.")
            return {"status": "error", "message": "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"}

        if not self.state.notifications_enabled:
            logger.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Å–µ—Ä–≤—ñ—Å—É")
            return {"status": "skipped", "message": "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ"}

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_response = supabase.table("raffles").select("*") \
                                    .eq("is_daily", True) \
                                    .eq("status", "active") \
                                    .order("created_at", desc=True) \
                                    .limit(1) \
                                    .execute()

            if not raffle_response.data:
                logger.warning("–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
                return {
                    "status": "error",
                    "message": "–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                }

            raffle = raffle_response.data[0]
            raffle_id = raffle.get("id")

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–ª–∏—à–∏–ª–æ—Å—å
            now = datetime.now(timezone.utc)

            try:
                end_time = datetime.fromisoformat(raffle.get("end_time", "").replace('Z', '+00:00'))
                time_left = end_time - now

                hours_left = int(time_left.total_seconds() // 3600)
                minutes_left = int((time_left.total_seconds() % 3600) // 60)

                time_left_str = f"{hours_left} –≥–æ–¥ {minutes_left} —Ö–≤"
            except (ValueError, AttributeError):
                logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —á–∞—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É")
                time_left_str = "—Å–∫–æ—Ä–æ"

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = f"""
üéÆ WINIX: –ù–µ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à! üéÆ

–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle.get("title")} –∑–∞–ª–∏—à–∏–ª–æ—Å—å {time_left_str}.

–ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {raffle.get("prize_amount")} {raffle.get("prize_currency", "WINIX")}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: {raffle.get("winners_count")}

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≤–∞—à—ñ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –∑–∞—Ä–∞–∑!
"""

            # –û—Ç—Ä–∏–º—É—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            participants_response = supabase.table("raffle_participants") \
                                        .select("telegram_id") \
                                        .eq("raffle_id", raffle_id) \
                                        .execute()

            participant_ids = [p.get("telegram_id") for p in participants_response.data] if participants_response.data else []

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ —â–µ –Ω–µ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å
            users_query = supabase.table("winix").select("telegram_id,coins")

            if participant_ids:
                users_query = users_query.not_.in_("telegram_id", participant_ids)

            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ –±–µ—Ä–µ–º–æ –ª–∏—à–µ —Ç–∏—Ö, —Ö—Ç–æ –º–∞—î –∂–µ—Ç–æ–Ω–∏
            users_query = users_query.gt("coins", 0).limit(50)
            users_response = users_query.execute()

            if not users_response.data:
                logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return {
                    "status": "success",
                    "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    "sent_count": 0
                }

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ –±–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
            sample_size = min(20, len(users_response.data))
            selected_indexes = []

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
            pool = list(range(len(users_response.data)))
            for _ in range(sample_size):
                if not pool:
                    break
                idx = secrets.randbelow(len(pool))
                selected_indexes.append(pool.pop(idx))

            selected_users = [users_response.data[i] for i in selected_indexes]

            sent_count = 0
            for user in selected_users:
                telegram_id = user.get("telegram_id")
                coins = user.get("coins", 0)

                if not telegram_id:
                    continue

                # –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                personalized_message = message + f"\n\n–£ –≤–∞—Å —î {coins} –∂–µ—Ç–æ–Ω—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ó—Ö –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —à–∞–Ω—Å—ñ–≤ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É!"

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if send_telegram_message(telegram_id, personalized_message):
                    sent_count += 1

                # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API
                time.sleep(0.1)

            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à")

            result = {
                "status": "success",
                "message": f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑ {len(selected_users)}",
                "sent_count": sent_count,
                "raffle_id": raffle_id
            }

            if sent_count > 0:
                self._send_admin_notification(f"‚è∞ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")

            return result
        except Exception as e:
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à: {str(e)}"
            logger.error(error_message, exc_info=True)
            self._send_admin_notification(f"‚ùå {error_message}")

            return {
                "status": "error",
                "message": error_message
            }

    def backup_raffle_data(self) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        try:
            logger.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
            backup_dir = os.path.join(os.getcwd(), "backups")
            os.makedirs(backup_dir, exist_ok=True)

            # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
            today = datetime.now().strftime('%Y-%m-%d')

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
            raffles_response = supabase.table("raffles").select("*").limit(1000).execute()
            participants_response = supabase.table("raffle_participants").select("*").limit(1000).execute()
            winners_response = supabase.table("raffle_winners").select("*").limit(1000).execute()

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
            backup_data = {
                "timestamp": datetime.now().isoformat(),
                "raffles": raffles_response.data if raffles_response.data else [],
                "participants": participants_response.data if participants_response.data else [],
                "winners": winners_response.data if winners_response.data else []
            }

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ñ–∞–π–ª –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
            backup_id = secrets.token_hex(8)
            backup_file = os.path.join(backup_dir, f"raffles_backup_{today}_{backup_id}.json")

            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
            self.state.last_backup = datetime.now().isoformat()

            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_file}")

            backup_info = {
                "status": "success",
                "message": "–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                "file": backup_file,
                "timestamp": datetime.now().isoformat(),
                "raffles_count": len(backup_data['raffles']),
                "participants_count": len(backup_data['participants']),
                "winners_count": len(backup_data['winners'])
            }

            self._send_admin_notification(
                f"üíæ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {len(backup_data['raffles'])} —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, "
                f"{len(backup_data['participants'])} —É—á–∞—Å–Ω–∏–∫—ñ–≤, {len(backup_data['winners'])} –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤"
            )

            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó (—Å—Ç–∞—Ä—à—ñ 30 –¥–Ω—ñ–≤)
            self._cleanup_old_backups(backup_dir)

            return backup_info
        except Exception as e:
            error_message = f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {str(e)}"
            logger.error(error_message, exc_info=True)
            self._send_admin_notification(f"‚ùå {error_message}")

            return {
                "status": "error",
                "message": error_message
            }

    def _cleanup_old_backups(self, backup_dir: str, days_to_keep: int = 30) -> Dict[str, Any]:
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π"""
        try:
            # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
            now = datetime.now()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π
            deleted_count = 0
            for filename in os.listdir(backup_dir):
                filepath = os.path.join(backup_dir, filename)

                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                if os.path.isdir(filepath):
                    continue

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª —î —Ä–µ–∑–µ—Ä–≤–Ω–æ—é –∫–æ–ø—ñ—î—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
                if not filename.startswith("raffles_backup_"):
                    continue

                # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ñ–∞–π–ª—É
                file_time = datetime.fromtimestamp(os.path.getmtime(filepath))

                # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω —Å—Ç–∞—Ä—à–∏–π –∑–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
                if (now - file_time).days > days_to_keep:
                    os.remove(filepath)
                    deleted_count += 1
                    logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—É —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {filename}")

            return {
                "status": "success",
                "message": f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π",
                "deleted_count": deleted_count
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π: {str(e)}")
            return {
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π: {str(e)}"
            }

    def _send_admin_notification(self, message: str) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if not ADMIN_CHAT_ID:
            logger.warning("ADMIN_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False

        if not self.state.notifications_enabled:
            logger.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Å–µ—Ä–≤—ñ—Å—É")
            return False

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Å–æ–º
        formatted_message = MESSAGE_TEMPLATES[NotificationType.SYSTEM].format(
            message=message,
            time=datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        )

        return send_telegram_message(ADMIN_CHAT_ID, formatted_message)

    def toggle_notifications(self, enabled: bool = True) -> Dict[str, Any]:
        """–í–º–∏–∫–∞—î –∞–±–æ –≤–∏–º–∏–∫–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        previous_state = self.state.notifications_enabled
        self.state.notifications_enabled = enabled

        logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else '–≤–∏–º–∫–Ω–µ–Ω–æ'}")

        if enabled and not previous_state:
            self._send_admin_notification("üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ")

        return {
            "status": "success",
            "notifications_enabled": enabled,
            "previous_state": previous_state
        }

    def get_status(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
            active_raffles_response = supabase.table("raffles").select("id,title,end_time").eq("status",
                                                                                               "active").execute()
            active_raffles = active_raffles_response.data if active_raffles_response.data else []

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
            task_statuses = {k: v for k, v in self.state.task_statuses.items()}

            return {
                "status": "running" if self.state.active else "stopped",
                "start_time": self.state.start_time,
                "active_raffles_count": len(active_raffles),
                "active_raffles": active_raffles,
                "task_statuses": task_statuses,
                "notifications_enabled": self.state.notifications_enabled,
                "last_backup": self.state.last_backup
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—É: {str(e)}")
            return {
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {str(e)}"
            }


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —î–¥–∏–Ω–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä—É —Å–µ—Ä–≤—ñ—Å—É (Singleton)
_raffle_service_instance = None


def get_raffle_service() -> RaffleService:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ (Singleton)"""
    global _raffle_service_instance
    if _raffle_service_instance is None:
        _raffle_service_instance = RaffleService()
    return _raffle_service_instance


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
def start_raffle_service() -> bool:
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
    service = get_raffle_service()
    return service.start()


def stop_raffle_service() -> bool:
    """–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
    service = get_raffle_service()
    return service.stop()


def get_raffle_service_status() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
    service = get_raffle_service()
    return service.get_status()


def toggle_notifications(enabled: bool = True) -> Dict[str, Any]:
    """–í–º–∏–∫–∞—î –∞–±–æ –≤–∏–º–∏–∫–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    service = get_raffle_service()
    return service.toggle_notifications(enabled)


# –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–µ–±-—Ö—É–∫—ñ–≤ –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–∏—Å—Ç–µ–º
def process_webhook(event_type: str, data: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –≤–µ–±-—Ö—É–∫—ñ–≤ –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–∏—Å—Ç–µ–º"""
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ webhook –ø–æ–¥—ñ—é: {event_type}")
        service = get_raffle_service()

        if event_type == "raffle_created":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_id = data.get("raffle_id")
            if raffle_id:
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                threading.Thread(
                    target=lambda: service.send_daily_raffle_notification(),
                    daemon=True
                ).start()
                return {"status": "success", "message": "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"}

        elif event_type == "raffle_completed":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º
            raffle_id = data.get("raffle_id")
            if raffle_id:
                threading.Thread(
                    target=lambda: service.send_notifications_to_winners(),
                    daemon=True
                ).start()
                return {"status": "success", "message": "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è–º –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"}

        elif event_type == "toggle_notifications":
            # –í–º–∏–∫–∞–Ω–Ω—è/–≤–∏–º–∏–∫–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
            enabled = data.get("enabled", True)
            return toggle_notifications(enabled)

        else:
            logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}")
            return {"status": "error", "message": "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó"}

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {str(e)}", exc_info=True)
        return {"status": "error", "message": str(e)}


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É, —è–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —è–∫ –æ–∫—Ä–µ–º–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É")
    start_raffle_service()

    try:
        # –£—Ç—Ä–∏–º—É—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏")
        stop_raffle_service()