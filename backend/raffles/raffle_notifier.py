"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —á–µ—Ä–µ–∑ Telegram API.
–ó–∞–º—ñ–Ω–∞ –¥–ª—è raffle_bot.py –∑ –ø—Ä–æ—Å—Ç—ñ—à–∏–º API —Ç–∞ –∫—Ä–∞—â–æ—é —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –∑ Telegram Mini App.
"""

import os
import sys
import logging
import threading
import requests
import json
import time
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
                    handlers=[
                        logging.StreamHandler(),
                        logging.FileHandler("raffle_notifier.log")
                    ])
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
try:
    from ..supabase_client import supabase, get_user, cache_get, cache_set, clear_cache
except ImportError:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    try:
        from supabase_client import supabase, get_user, cache_get, cache_set, clear_cache
    except ImportError:
        logger.critical("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤. –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        sys.exit(1)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
MAX_RETRY_ATTEMPTS = 3
MIN_TIME_BETWEEN_MESSAGES = 0.05  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


# –¢–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å —ñ —à–∞–±–ª–æ–Ω–∏
class NotificationType:
    """–¢–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    RAFFLE_CREATED = "raffle_created"  # –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
    RAFFLE_COMPLETED = "raffle_completed"  # –†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    WINNER_NOTIFICATION = "winner"  # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
    DAILY_REMINDER = "daily_reminder"  # –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    CUSTOM_MESSAGE = "custom_message"  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    SYSTEM_NOTIFICATION = "system"  # –°–∏—Å—Ç–µ–º–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è


# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGE_TEMPLATES = {
    NotificationType.RAFFLE_CREATED: """
üéâ *–ù–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à WINIX* üéâ

*{raffle_title}*
–ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {prize_amount} {prize_currency}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: {winners_count}
–í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ: {entry_fee} –∂–µ—Ç–æ–Ω—ñ–≤

‚è∞ –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {end_time}

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Å–≤–æ—ó –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ —Ç–∞ –∑–±—ñ–ª—å—à—ñ—Ç—å —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É!
""",

    NotificationType.RAFFLE_COMPLETED: """
üèÅ *–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ* üèÅ

*{raffle_title}* 
–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {prize_amount} {prize_currency}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤: {participants_count}

{winners_info}

–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å! –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ —Å–∫–æ—Ä–æ.
""",

    NotificationType.WINNER_NOTIFICATION: """
üèÜ *–í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!* üèÜ

–í–∏ –∑–∞–π–Ω—è–ª–∏ *{place} –º—ñ—Å—Ü–µ* –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ "{raffle_title}"
–í–∞—à –ø—Ä–∏–∑: *{prize_amount} {prize_currency}*

–ü—Ä–∏–∑ –≤–∂–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. 
–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} {prize_currency}

–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —Ç–∞ –≤—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é! üéâ
""",

    NotificationType.DAILY_REMINDER: """
‚è∞ *–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à WINIX* ‚è∞

–ù–µ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —â–æ–¥–µ–Ω–Ω–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!

–ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {prize_amount} {prize_currency}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: {winners_count}
–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {time_left}

–£ –≤–∞—Å —î {coins} –∂–µ—Ç–æ–Ω—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ó—Ö –∑–∞—Ä–∞–∑ —ñ –∑–±—ñ–ª—å—à—ñ—Ç—å —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É!
""",

    NotificationType.CUSTOM_MESSAGE: "{message}",

    NotificationType.SYSTEM_NOTIFICATION: """
üîî *WINIX: –°–∏—Å—Ç–µ–º–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è*

{message}

_–ß–∞—Å: {time}_
"""
}


class NotifierException(Exception):
    """–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –≤–∏–Ω—è—Ç–∫—ñ–≤ –≤ –º–æ–¥—É–ª—ñ notifier"""
    pass


class TelegramApiException(NotifierException):
    """–í–∏–Ω—è—Ç–æ–∫, —â–æ –≤–∏–Ω–∏–∫–∞—î –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö Telegram API"""
    pass


class UserNotFoundException(NotifierException):
    """–í–∏–Ω—è—Ç–æ–∫, —â–æ –≤–∏–Ω–∏–∫–∞—î, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"""
    pass


class TemplateFormatException(NotifierException):
    """–í–∏–Ω—è—Ç–æ–∫, —â–æ –≤–∏–Ω–∏–∫–∞—î –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"""
    pass


def send_telegram_message(
        chat_id: str,
        message: str,
        parse_mode: str = "Markdown",
        retry_count: int = 0,
        disable_web_page_preview: bool = True
) -> bool:
    """
    –ù–∞–¥—ñ–π–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram Bot API –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏.

    Args:
        chat_id: ID —á–∞—Ç—É/–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è ("Markdown" –∞–±–æ "HTML")
        retry_count: –ü–æ—Ç–æ—á–Ω–∞ —Å–ø—Ä–æ–±–∞ (–¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
        disable_web_page_preview: –í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ—Å–∏–ª–∞–Ω—å

    Returns:
        bool: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, False —ñ–Ω–∞–∫—à–µ
    """
    if not TELEGRAM_BOT_TOKEN:
        logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return False

    try:
        url = f"{TELEGRAM_API_URL}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": parse_mode,
            "disable_web_page_preview": disable_web_page_preview
        }

        response = requests.post(url, json=payload, )

        if response.status_code == 200:
            return True
        else:
            # –û–±—Ä–æ–±–∫–∞ —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ Telegram API
            try:
                error_data = response.json()
                error_code = error_data.get("error_code", 0)
                error_description = error_data.get("description", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")

                logger.warning(f"–ü–æ–º–∏–ª–∫–∞ Telegram API {error_code}: {error_description}")

                # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
                if error_code == 400 and "parse mode is invalid" in error_description.lower():
                    # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±–µ–∑ —Ä–µ–∂–∏–º—É —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                    logger.info(f"–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}")
                    return send_telegram_message(chat_id, message, parse_mode=None, retry_count=retry_count)

                if error_code == 400 and "chat not found" in error_description.lower():
                    logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ Telegram")
                    return False

                if error_code == 403 and "bot was blocked by the user" in error_description.lower():
                    logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
                    return False

            except Exception as parse_error:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Telegram API: {parse_error}")

            # –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
            if retry_count < MAX_RETRY_ATTEMPTS:
                # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                delay = 2 ** retry_count
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay)
                return send_telegram_message(chat_id, message, parse_mode, retry_count + 1, disable_web_page_preview)

            return False
    except requests.RequestException as e:
        logger.error(f"–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")

        # –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö
        if retry_count < MAX_RETRY_ATTEMPTS:
            delay = 2 ** retry_count
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            return send_telegram_message(chat_id, message, parse_mode, retry_count + 1, disable_web_page_preview)

        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
        return False


def send_notification(
        user_id: str,
        notification_type: str,
        data: Dict[str, Any],
        delay: float = 0
) -> bool:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        notification_type: –¢–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–∑ NotificationType)
        data: –î–∞–Ω—ñ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        delay: –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        bool: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, False —ñ–Ω–∞–∫—à–µ
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —à–∞–±–ª–æ–Ω
        template = MESSAGE_TEMPLATES.get(notification_type)
        if not template:
            # –Ø–∫—â–æ —à–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ data['message']
            if "message" in data:
                message = data["message"]
            else:
                raise TemplateFormatException(f"–®–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø—É {notification_type} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —à–∞–±–ª–æ–Ω
            try:
                message = template.format(**data)
            except KeyError as e:
                logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —à–∞–±–ª–æ–Ω—É {notification_type}: {e}")
                raise TemplateFormatException(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ - {e}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É {notification_type}: {e}")
                raise TemplateFormatException(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É: {e}")

        # –û—á—ñ–∫—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞
        if delay > 0:
            time.sleep(delay)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return send_telegram_message(user_id, message)

    except NotifierException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è {user_id}: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è {user_id}: {str(e)}")
        return False


def send_bulk_notification(
        user_ids: List[str],
        notification_type: str,
        data: Dict[str, Any],
        max_users: int = 100
) -> Dict[str, Any]:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –º–∞—Å–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–∞–≥–∞—Ç—å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º

    Args:
        user_ids: –°–ø–∏—Å–æ–∫ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Telegram
        notification_type: –¢–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–∑ NotificationType)
        data: –î–∞–Ω—ñ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        max_users: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏
    """
    if not user_ids:
        return {
            "status": "error",
            "message": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            "sent_count": 0,
            "failed_count": 0
        }

    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if max_users > 0 and len(user_ids) > max_users:
        user_ids = user_ids[:max_users]

    sent_count = 0
    failed_count = 0

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
    for i, user_id in enumerate(user_ids):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å ID
        if not user_id or not isinstance(user_id, str):
            failed_count += 1
            continue

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å API
        delay = i * MIN_TIME_BETWEEN_MESSAGES

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if send_notification(user_id, notification_type, data, delay):
            sent_count += 1
        else:
            failed_count += 1

    return {
        "status": "success" if sent_count > 0 else "error",
        "message": f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –Ω–µ–≤–¥–∞–ª–æ: {failed_count}",
        "sent_count": sent_count,
        "failed_count": failed_count,
        "total_requested": len(user_ids)
    }


def notify_winners(raffle_id: str) -> Dict[str, Any]:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É

    Args:
        raffle_id: ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        raffle_response = supabase.table("raffles").select("*").eq("id", raffle_id).execute()
        if not raffle_response.data:
            logger.error(f"–†–æ–∑—ñ–≥—Ä–∞—à –∑ ID {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {
                "status": "error",
                "message": f"–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {raffle_id}"
            }

        raffle = raffle_response.data[0]

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        winners_response = supabase.table("raffle_winners").select("*").eq("raffle_id", raffle_id).order("place").execute()
        if not winners_response.data:
            logger.warning(f"–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {
                "status": "error",
                "message": f"–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {raffle_id}"
            }

        success_count = 0
        failed_count = 0

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –ø–µ—Ä–µ–º–æ–∂—Ü—é
        for winner in winners_response.data:
            winner_id = winner.get("id")
            telegram_id = winner.get("telegram_id")

            if not telegram_id:
                failed_count += 1
                continue

            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            user = get_user(telegram_id)
            if not user:
                logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É")
                failed_count += 1
                continue

            # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –±–∞–ª–∞–Ω—Å
            balance = user.get("balance", 0)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            notification_data = {
                "raffle_title": raffle.get("title"),
                "place": winner.get("place"),
                "prize_amount": winner.get("prize_amount"),
                "prize_currency": winner.get("prize_currency", "WINIX"),
                "balance": balance
            }

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å API
            delay = success_count * MIN_TIME_BETWEEN_MESSAGES
            if send_notification(telegram_id, NotificationType.WINNER_NOTIFICATION, notification_data, delay):
                success_count += 1

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                supabase.table("raffle_winners").update({
                    "notification_sent": True
                }).eq("id", winner_id).execute()
            else:
                failed_count += 1

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}")

        return {
            "status": "success" if success_count > 0 else "error",
            "message": f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º, –Ω–µ–≤–¥–∞–ª–æ: {failed_count}",
            "sent_count": success_count,
            "failed_count": failed_count,
            "raffle_id": raffle_id,
            "total_winners": len(winners_response.data)
        }
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}: {str(e)}", exc_info=True)
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å: {str(e)}",
            "raffle_id": raffle_id
        }


def notify_about_new_raffle(raffle_id: str, max_users: int = 50) -> Dict[str, Any]:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∫—ñ–ª—å–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º

    Args:
        raffle_id: ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        max_users: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        raffle_response = supabase.table("raffles").select("*").eq("id", raffle_id).execute()
        if not raffle_response.data:
            logger.error(f"–†–æ–∑—ñ–≥—Ä–∞—à –∑ ID {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {
                "status": "error",
                "message": f"–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {raffle_id}"
            }

        raffle = raffle_response.data[0]

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            end_time = datetime.fromisoformat(raffle.get("end_time", "").replace('Z', '+00:00'))
            end_time_str = end_time.strftime("%d.%m.%Y %H:%M")
        except (ValueError, AttributeError):
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}")
            end_time_str = "—Å–∫–æ—Ä–æ"

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        notification_data = {
            "raffle_title": raffle.get("title"),
            "prize_amount": raffle.get("prize_amount"),
            "prize_currency": raffle.get("prize_currency", "WINIX"),
            "winners_count": raffle.get("winners_count"),
            "entry_fee": raffle.get("entry_fee"),
            "end_time": end_time_str
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
        users_response = supabase.table("winix").select("telegram_id").limit(max_users).execute()
        if not users_response.data:
            logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {
                "status": "error",
                "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            }

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ telegram_id
        user_ids = [user.get("telegram_id") for user in users_response.data if user.get("telegram_id")]

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        result = send_bulk_notification(user_ids, NotificationType.RAFFLE_CREATED, notification_data)
        result["raffle_id"] = raffle_id

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {result.get('sent_count')} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à {raffle_id}")
        return result

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à {raffle_id}: {str(e)}", exc_info=True)
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å: {str(e)}",
            "raffle_id": raffle_id
        }


def send_daily_reminder(raffle_id: str = None, max_users: int = 30) -> Dict[str, Any]:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —â–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ

    Args:
        raffle_id: ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É (—è–∫—â–æ None, –±—É–¥–µ –≤–∏–±—Ä–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à)
        max_users: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    """
    try:
        # –Ø–∫—â–æ raffle_id –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –æ—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
        if not raffle_id:
            raffle_response = supabase.table("raffles").select("*") \
                .eq("is_daily", True) \
                .eq("status", "active") \
                .order("created_at", desc=True) \
                .limit(1) \
                .execute()

            if not raffle_response.data:
                logger.warning("–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
                return {
                    "status": "error",
                    "message": "–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                }

            raffle = raffle_response.data[0]
            raffle_id = raffle.get("id")
        else:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_response = supabase.table("raffles").select("*").eq("id", raffle_id).execute()
            if not raffle_response.data:
                logger.error(f"–†–æ–∑—ñ–≥—Ä–∞—à –∑ ID {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return {
                    "status": "error",
                    "message": f"–†–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {raffle_id}"
                }

            raffle = raffle_response.data[0]

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
        try:
            end_time = datetime.fromisoformat(raffle.get("end_time", "").replace('Z', '+00:00'))
            now = datetime.now(timezone.utc)
            time_left = end_time - now

            hours_left = int(time_left.total_seconds() // 3600)
            minutes_left = int((time_left.total_seconds() % 3600) // 60)

            if hours_left < 0:
                time_left_str = "—Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è"
            else:
                time_left_str = f"{hours_left} –≥–æ–¥ {minutes_left} —Ö–≤"

        except (ValueError, AttributeError):
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—É, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}")
            time_left_str = "—Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è"

        # –û—Ç—Ä–∏–º—É—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É (—â–æ–± –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —ó–º –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è)
        participants_response = supabase.table("raffle_participants") \
            .select("telegram_id") \
            .eq("raffle_id", raffle_id) \
            .execute()

        participant_ids = [p.get("telegram_id") for p in
                           participants_response.data] if participants_response.data else []

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ —â–µ –Ω–µ –≤–∑—è–ª–∏ —É—á–∞—Å—Ç—å —ñ –º–∞—é—Ç—å –∂–µ—Ç–æ–Ω–∏
        query = supabase.table("winix").select("telegram_id,coins")

        if participant_ids:
            query = query.not_.in_("telegram_id", participant_ids)

        query = query.gt("coins", 0).limit(max_users)
        users_response = query.execute()

        if not users_response.data:
            logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return {
                "status": "success",
                "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                "sent_count": 0,
                "raffle_id": raffle_id
            }

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        sent_count = 0
        failed_count = 0

        for user in users_response.data:
            telegram_id = user.get("telegram_id")
            coins = user.get("coins", 0)

            if not telegram_id:
                continue

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            notification_data = {
                "prize_amount": raffle.get("prize_amount"),
                "prize_currency": raffle.get("prize_currency", "WINIX"),
                "winners_count": raffle.get("winners_count"),
                "time_left": time_left_str,
                "coins": coins
            }

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
            delay = sent_count * MIN_TIME_BETWEEN_MESSAGES
            if send_notification(telegram_id, NotificationType.DAILY_REMINDER, notification_data, delay):
                sent_count += 1
            else:
                failed_count += 1

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à {raffle_id}")

        return {
            "status": "success" if sent_count > 0 else "warning",
            "message": f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å, –Ω–µ–≤–¥–∞–ª–æ: {failed_count}",
            "sent_count": sent_count,
            "failed_count": failed_count,
            "raffle_id": raffle_id
        }
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {str(e)}", exc_info=True)
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {str(e)}",
            "raffle_id": raffle_id if raffle_id else None
        }


def send_custom_message(user_id: str, message: str) -> bool:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    Returns:
        bool: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, False —ñ–Ω–∞–∫—à–µ
    """
    try:
        return send_notification(user_id, NotificationType.CUSTOM_MESSAGE, {"message": message})
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user_id}: {str(e)}")
        return False


def send_admin_notification(message: str, admin_chat_id: str = None) -> bool:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–∏—Å—Ç–µ–º–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É

    Args:
        message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        admin_chat_id: ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑ –æ—Ç–æ—á–µ–Ω–Ω—è)

    Returns:
        bool: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, False —ñ–Ω–∞–∫—à–µ
    """
    if not admin_chat_id:
        admin_chat_id = os.getenv("ADMIN_CHAT_ID", "")

    if not admin_chat_id:
        logger.warning("ADMIN_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return False

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Å–æ–º
    notification_data = {
        "message": message,
        "time": datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    }

    return send_notification(admin_chat_id, NotificationType.SYSTEM_NOTIFICATION, notification_data)


# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ webhook –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–∏—Å—Ç–µ–º
def process_notification_request(event_type: str, data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–∏—Å—Ç–µ–º

    Args:
        event_type: –¢–∏–ø –ø–æ–¥—ñ—ó
        data: –î–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏
    """
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∏–ø—É: {event_type}")

        if event_type == "raffle_created":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_id = data.get("raffle_id")
            max_users = data.get("max_users", 50)

            if not raffle_id:
                return {
                    "status": "error",
                    "message": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É"
                }

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
            thread = threading.Thread(
                target=lambda: notify_about_new_raffle(raffle_id, max_users),
                daemon=True
            )
            thread.start()

            return {
                "status": "success",
                "message": "–í—ñ–¥–ø—Ä–∞–≤–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ",
                "raffle_id": raffle_id
            }

        elif event_type == "raffle_completed":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º
            raffle_id = data.get("raffle_id")

            if not raffle_id:
                return {
                    "status": "error",
                    "message": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É"
                }

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
            thread = threading.Thread(
                target=lambda: notify_winners(raffle_id),
                daemon=True
            )
            thread.start()

            return {
                "status": "success",
                "message": "–í—ñ–¥–ø—Ä–∞–≤–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ",
                "raffle_id": raffle_id
            }

        elif event_type == "daily_reminder":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            raffle_id = data.get("raffle_id")
            max_users = data.get("max_users", 30)

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
            thread = threading.Thread(
                target=lambda: send_daily_reminder(raffle_id, max_users),
                daemon=True
            )
            thread.start()

            return {
                "status": "success",
                "message": "–í—ñ–¥–ø—Ä–∞–≤–∫—É —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"
            }

        elif event_type == "custom_message":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            user_id = data.get("user_id")
            message = data.get("message")

            if not user_id or not message:
                return {
                    "status": "error",
                    "message": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                }

            result = send_custom_message(user_id, message)

            return {
                "status": "success" if result else "error",
                "message": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" if result else "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                "user_id": user_id
            }

        elif event_type == "admin_notification":
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            message = data.get("message")
            admin_chat_id = data.get("admin_chat_id")

            if not message:
                return {
                    "status": "error",
                    "message": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                }

            result = send_admin_notification(message, admin_chat_id)

            return {
                "status": "success" if result else "error",
                "message": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" if result else "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            }

        else:
            logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}")
            return {
                "status": "error",
                "message": f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}"
            }

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {str(e)}", exc_info=True)
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {str(e)}"
        }


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –º–æ–¥—É–ª—è
def check_status() -> Dict[str, Any]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –º–æ–¥—É–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å

    Returns:
        Dict: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∞–Ω –º–æ–¥—É–ª—è
    """
    try:
        telegram_configured = bool(TELEGRAM_BOT_TOKEN)

        test_result = None
        if telegram_configured and os.getenv("ADMIN_CHAT_ID"):
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
            test_result = send_admin_notification("–¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API")

        return {
            "status": "ok",
            "telegram_api_configured": telegram_configured,
            "admin_chat_configured": bool(os.getenv("ADMIN_CHAT_ID")),
            "test_message_sent": test_result,
            "version": "1.0",
            "templates_available": list(MESSAGE_TEMPLATES.keys())
        }
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –º–æ–¥—É–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å: {str(e)}")
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É: {str(e)}"
        }


# –ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤ —Ä–µ–∂–∏–º—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")

    status = check_status()
    print(json.dumps(status, indent=2, ensure_ascii=False))

    if status["status"] == "ok" and status["telegram_api_configured"] and status["admin_chat_configured"]:
        print("–ú–æ–¥—É–ª—å —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    else:
        print("–ú–æ–¥—É–ª—å —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")