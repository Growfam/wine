from flask import request, jsonify, g
import logging
import jwt
import os
import sys
import time
import uuid
import re
from datetime import datetime, timedelta
from functools import wraps

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏
try:
    from . import controllers
except ImportError:
    try:
        import controllers
    except ImportError:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É controllers.py")
        controllers = None

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
try:
    from backend.settings.config import JWT_SECRET, JWT_ALGORITHM
except ImportError:
    try:
        from settings.config import JWT_SECRET, JWT_ALGORITHM
    except ImportError:
        logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ JWT_SECRET —Ç–∞ JWT_ALGORITHM")
        JWT_SECRET = "winix-secret-key"
        JWT_ALGORITHM = "HS256"

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ load_dotenv")

# –ß–∞—Å–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
RATE_LIMITS = {
    "get_active_raffles": 20,
    "get_raffles_history": 180,
    "get_user_raffles": 30,
    "participate_in_raffle": 30,
}

# –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
last_requests = {}

# –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤
DISABLE_RATE_LIMITS = os.getenv("DISABLE_RATE_LIMITS", "true").lower() == "true"
if DISABLE_RATE_LIMITS:
    logger.info("üì¢ –û–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ")
else:
    logger.info("üì¢ –û–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤ –≤–∫–ª—é—á–µ–Ω–æ")


def is_valid_uuid(uuid_string):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID - –ø—Ä–∏–π–º–∞—î –±—É–¥—å-—è–∫–∏–π —Ä—è–¥–æ–∫, —è–∫–∏–π –º–æ–∂–Ω–∞
    –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ UUID –æ–±'—î–∫—Ç, –≤–∫–ª—é—á–∞—é—á–∏ —Ä—è–¥–∫–∏ –±–µ–∑ –¥–µ—Ñ—ñ—Å—ñ–≤
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ None —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
    if not uuid_string:
        return False

    # –°–ø–æ—á–∞—Ç–∫—É –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ä—è–¥–æ–∫
    normalized_uuid = uuid_string.strip().lower()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ UUID –±–µ–∑ –¥–µ—Ñ—ñ—Å—ñ–≤ (32 —Å–∏–º–≤–æ–ª–∏)
    if re.match(r'^[0-9a-f]{32}$', normalized_uuid):
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É —Ñ–æ—Ä–º–∞—Ç –∑ –¥–µ—Ñ—ñ—Å–∞–º–∏
        formatted_uuid = f"{normalized_uuid[0:8]}-{normalized_uuid[8:12]}-{normalized_uuid[12:16]}-{normalized_uuid[16:20]}-{normalized_uuid[20:]}"
        normalized_uuid = formatted_uuid

    try:
        # –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ –≤ UUID –æ–±'—î–∫—Ç
        uuid_obj = uuid.UUID(normalized_uuid)
        return True
    except Exception:
        return False


def require_authentication(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤"""

    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            # –Ø–∫—â–æ —Ü–µ GET –∑–∞–ø–∏—Ç, –¥–æ–∑–≤–æ–ª—è—î–º–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è
            if request.method == 'GET':
                g.user = request.headers.get('X-Telegram-User-Id') or kwargs.get('telegram_id', None)
                return f(*args, **kwargs)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            auth_header = request.headers.get("Authorization")

            if not auth_header or not auth_header.startswith("Bearer "):
                return jsonify({
                    "status": "error",
                    "message": "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è"
                }), 401

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω
            token = auth_header.split(" ")[1]

            try:
                # –î–µ–∫–æ–¥—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
                payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
                # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø–∏—Ç—É
                g.user = payload.get("user_id")
            except jwt.ExpiredSignatureError:
                return jsonify({
                    "status": "error",
                    "message": "–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞ –º–∏–Ω—É–≤"
                }), 401
            except jwt.InvalidTokenError:
                return jsonify({
                    "status": "error",
                    "message": "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω"
                }), 401

            return f(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ require_authentication: {str(e)}")
            # –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏, –≤—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            return f(*args, **kwargs)

    return decorated_function


def rate_limit(route_name):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤"""

    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            try:
                # –Ø–∫—â–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ–Ω—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
                if DISABLE_RATE_LIMITS:
                    return f(*args, **kwargs)

                # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–±–æ IP –∞–¥—Ä–µ—Å—É, —è–∫—â–æ ID –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
                user_id = getattr(g, 'user', None) or request.headers.get('X-Forwarded-For') or request.remote_addr

                # –ö–ª—é—á –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
                key = f"{route_name}:{user_id}"

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏–π –∑–∞–ø–∏—Ç
                now = time.time()
                last_request_time = last_requests.get(key, 0)
                time_since_last = now - last_request_time

                # –û—Ç—Ä–∏–º—É—î–º–æ –ª—ñ–º—ñ—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É
                rate_limit_seconds = RATE_LIMITS.get(route_name, 5)

                if time_since_last < rate_limit_seconds:
                    retry_after = rate_limit_seconds - time_since_last
                    logger.warning(f"Rate limit –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –¥–ª—è {key}. Retry-After: {retry_after:.2f}—Å")

                    return jsonify({
                        "status": "error",
                        "message": f"–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {int(retry_after) + 1} —Å–µ–∫—É–Ω–¥.",
                        "retry_after": retry_after
                    }), 429

                # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
                last_requests[key] = now
                return f(*args, **kwargs)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ rate_limit: {str(e)}")
                # –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏, –≤—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç
                return f(*args, **kwargs)

        return decorated_function

    return decorator


def validate_raffle_id(f):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–æ—Ä–º–∞—Ç UUID —Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î –π–æ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ.
    """

    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è raffle_id
        raffle_id = kwargs.get('raffle_id')

        if raffle_id:
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ ID
            raffle_id = str(raffle_id).strip()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç
            if not is_valid_uuid(raffle_id):
                logger.warning(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –≤ –∑–∞–ø–∏—Ç—ñ: {raffle_id}")
                return jsonify({
                    "status": "error",
                    "message": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É",
                    "code": "invalid_uuid"
                }), 400

            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ UUID –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if re.match(r'^[0-9a-f]{32}$', raffle_id.lower()):
                normalized = raffle_id.lower()
                formatted = f"{normalized[0:8]}-{normalized[8:12]}-{normalized[12:16]}-{normalized[16:20]}-{normalized[20:]}"
                kwargs['raffle_id'] = formatted
                logger.info(f"UUID –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ {raffle_id} –¥–æ {formatted}")

        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
        return f(*args, **kwargs)

    return decorated_function


def register_raffles_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
    if not controllers:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ controllers, –º–∞—Ä—à—Ä—É—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–µ –±—É–¥—É—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
        return False

    logger.info("üì¢ –ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")

    # –ü—É–±–ª—ñ—á–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    @app.route('/api/raffles', methods=['GET'])
    def api_get_active_raffles():
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        start_time = time.time()
        try:
            logger.info("api_get_active_raffles: –ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ")
            result = controllers.get_active_raffles()
            execution_time = time.time() - start_time
            logger.info(f"api_get_active_raffles: –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {execution_time:.4f}—Å")
            return result
        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"api_get_active_raffles: –ø–æ–º–∏–ª–∫–∞ –∑–∞ {execution_time:.4f}—Å - {str(e)}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return jsonify({
                "status": "success",
                "data": [],
                "error": str(e)
            })

    @app.route('/api/raffles/<raffle_id>', methods=['GET'])
    @validate_raffle_id
    def api_get_raffle_details(raffle_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É"""
        try:
            logger.info(f"api_get_raffle_details: –ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è {raffle_id}")
            return controllers.get_raffle_details(raffle_id)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}: {str(e)}")
            return jsonify({
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}"
            }), 500

    @app.route('/api/user/<telegram_id>/raffles', methods=['GET'])
    def api_get_user_raffles(telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —É —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"""
        try:
            logger.info(f"api_get_user_raffles: –ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è {telegram_id}")
            return controllers.get_user_raffles(telegram_id)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
            return jsonify({
                "status": "success",
                "data": [],
                "error_details": str(e)
            })

    @app.route('/api/user/<telegram_id>/raffles-history', methods=['GET'])
    def api_get_user_raffles_history(telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —É—á–∞—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö"""
        start_time = time.time()
        try:
            logger.info(f"api_get_user_raffles_history: –ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è {telegram_id}")
            result = controllers.get_raffles_history(telegram_id)
            execution_time = time.time() - start_time
            logger.info(f"api_get_user_raffles_history: –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {execution_time:.4f}—Å")

            return result
        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"api_get_user_raffles_history: –ø–æ–º–∏–ª–∫–∞ –∑–∞ {execution_time:.4f}—Å - {str(e)}")

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return jsonify({
                "status": "success",
                "data": [],
                "error_details": str(e)
            })

    @app.route('/api/user/<telegram_id>/participate-raffle', methods=['POST'])
    def api_participate_in_raffle(telegram_id):
        """–£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ"""
        start_time = time.time()

        try:
            logger.info(f"api_participate_in_raffle: –ó–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è {telegram_id}")

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö JSON
            if not request.is_json:
                return jsonify({
                    "status": "error",
                    "message": "–ù–µ–≤–µ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É. –û—á—ñ–∫—É—î—Ç—å—Å—è JSON."
                }), 400

            data = request.json
            if not data or not data.get('raffle_id'):
                return jsonify({
                    "status": "error",
                    "message": "–í—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É –≤ –∑–∞–ø–∏—Ç—ñ"
                }), 400

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è UUID
            raffle_id = data.get('raffle_id')
            if not is_valid_uuid(raffle_id):
                logger.warning(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID –≤ –∑–∞–ø–∏—Ç—ñ —É—á–∞—Å—Ç—ñ: {raffle_id}")
                return jsonify({
                    "status": "error",
                    "message": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É",
                    "code": "invalid_uuid"
                }), 400

            # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è UUID (–¥–ª—è UUID –±–µ–∑ –¥–µ—Ñ—ñ—Å—ñ–≤)
            if re.match(r'^[0-9a-f]{32}$', str(raffle_id).lower()):
                normalized = str(raffle_id).lower()
                formatted = f"{normalized[0:8]}-{normalized[8:12]}-{normalized[12:16]}-{normalized[16:20]}-{normalized[20:]}"
                data['raffle_id'] = formatted
                logger.info(f"UUID –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ {raffle_id} –¥–æ {formatted}")
                raffle_id = formatted

            # –î–æ–¥–∞—î–º–æ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            data['_timestamp'] = int(time.time() * 1000)
            data['_client_timestamp'] = request.args.get('t', 0)

            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            try:
                logger.info(f"–°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ RPC –º–µ—Ç–æ–¥ –¥–ª—è —É—á–∞—Å—Ç—ñ {telegram_id} –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ {raffle_id}")
                from raffles.raffle_service import get_raffle_service

                raffle_service = get_raffle_service()
                entry_count = data.get('entry_count', 1)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å entry_count
                try:
                    entry_count = int(entry_count)
                    if entry_count <= 0:
                        entry_count = 1
                except (ValueError, TypeError):
                    entry_count = 1

                result = raffle_service.participate_in_raffle(telegram_id, raffle_id, entry_count)

                execution_time = time.time() - start_time
                logger.info(f"api_participate_in_raffle: RPC –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {execution_time:.4f}—Å")

                if result.get('success'):
                    return jsonify({
                        "status": "success",
                        "data": result.get('data', {}),
                        "execution_time": execution_time
                    })
                else:
                    return jsonify({
                        "status": "error",
                        "message": result.get('error', '–ü–æ–º–∏–ª–∫–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ'),
                        "execution_time": execution_time
                    }), 400

            except ImportError:
                # –Ø–∫—â–æ —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
                logger.info(
                    f"RPC –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —É—á–∞—Å—Ç—ñ {telegram_id} –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ {raffle_id}")
                result = controllers.participate_in_raffle(telegram_id, data)

                execution_time = time.time() - start_time
                logger.info(f"api_participate_in_raffle: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {execution_time:.4f}—Å")

                return result

        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"api_participate_in_raffle: –ø–æ–º–∏–ª–∫–∞ –∑–∞ {execution_time:.4f}—Å - {str(e)}", exc_info=True)

            return jsonify({
                "status": "error",
                "message": f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ: {str(e)}",
                "execution_time": execution_time
            }), 500

    # –î–æ–¥–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID
    @app.route('/api/validate-uuid/<uuid_string>', methods=['GET'])
    def validate_uuid_endpoint(uuid_string):
        """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID"""
        valid = is_valid_uuid(uuid_string)

        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ UUID, —è–∫—â–æ –≤—ñ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π –∞–ª–µ –≤ –Ω–µ–∫–∞–Ω–æ–Ω—ñ—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        normalized_uuid = uuid_string
        if valid and re.match(r'^[0-9a-f]{32}$', uuid_string.lower()):
            normalized = uuid_string.lower()
            normalized_uuid = f"{normalized[0:8]}-{normalized[8:12]}-{normalized[12:16]}-{normalized[16:20]}-{normalized[20:]}"

        return jsonify({
            "status": "success",
            "valid": valid,
            "uuid": uuid_string,
            "normalized_uuid": normalized_uuid if valid else None,
            "message": "UUID –≤–∞–ª—ñ–¥–Ω–∏–π" if valid else "UUID –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π"
        })

    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å—É –±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏
    @app.route('/api/user/<telegram_id>/balance', methods=['GET'])
    def get_user_balance_endpoint(telegram_id):
        """–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            from users.controllers import get_user_info
            user = get_user_info(telegram_id)

            if not user:
                return jsonify({
                    "status": "error",
                    "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                }), 404

            return jsonify({
                "status": "success",
                "data": {
                    "balance": user.get("balance", 0),
                    "coins": user.get("coins", 0)
                }
            })
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {str(e)}")
            return jsonify({
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            }), 500

    # –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –ø–µ—Ä–µ–¥ —É—á–∞—Å—Ç—é
    @app.route('/api/raffles/<raffle_id>/check', methods=['GET'])
    @validate_raffle_id
    def api_check_raffle_exists(raffle_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É –ø–µ—Ä–µ–¥ —É—á–∞—Å—Ç—é"""
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
            try:
                from supabase_client import supabase
                response = supabase.table("raffles").select("id, status, end_time").eq("id", raffle_id).execute()

                if not response.data or len(response.data) == 0:
                    return jsonify({
                        "status": "error",
                        "message": f"–†–æ–∑—ñ–≥—Ä–∞—à –∑ ID {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                        "code": "raffle_not_found"
                    }), 404

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—É
                raffle = response.data[0]
                if raffle.get("status") != "active":
                    logger.warning(f"–†–æ–∑—ñ–≥—Ä–∞—à {raffle_id} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π: {raffle.get('status')}")
                    return jsonify({
                        "status": "error",
                        "message": "–†–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π",
                        "code": "raffle_not_active"
                    }), 400

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                try:
                    end_time = datetime.fromisoformat(raffle.get("end_time", "").replace('Z', '+00:00'))
                    now = datetime.now().astimezone()

                    if now >= end_time:
                        logger.warning(f"–†–æ–∑—ñ–≥—Ä–∞—à {raffle_id} –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è: {end_time}")
                        return jsonify({
                            "status": "error",
                            "message": "–†–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑–∞ —á–∞—Å–æ–º",
                            "code": "raffle_ended"
                        }), 400
                except (ValueError, AttributeError) as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–ª—è {raffle_id}: {str(e)}")

                # –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ
                return jsonify({
                    "status": "success",
                    "message": "–†–æ–∑—ñ–≥—Ä–∞—à —ñ—Å–Ω—É—î —Ç–∞ –≤–∞–ª—ñ–¥–Ω–∏–π",
                    "raffle_id": raffle_id,
                    "data": {
                        "status": raffle.get("status"),
                        "end_time": raffle.get("end_time")
                    }
                })

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {str(e)}")
                raise e

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}: {str(e)}")
            return jsonify({
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {str(e)}"
            }), 500

    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å—ñ—Ö API –∑–∞–ø–∏—Ç—ñ–≤
    @app.route('/api/system-info', methods=['GET'])
    def api_system_info():
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            return jsonify({
                "status": "success",
                "system_info": {
                    "python_version": sys.version,
                    "app_directory": os.path.dirname(os.path.abspath(__file__)),
                    "environment": os.environ.get("FLASK_ENV", "production"),
                    "debug_mode": os.environ.get("DEBUG", "false"),
                    "server_time": datetime.now().isoformat(),
                    "api_routes_registered": True,
                    "rate_limits": RATE_LIMITS,
                    "rate_limits_disabled": DISABLE_RATE_LIMITS
                }
            })
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}")
            return jsonify({
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}"
            }), 500

    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    @app.route('/api/raffles-healthcheck', methods=['GET'])
    def api_raffles_healthcheck():
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        return jsonify({
            "status": "success",
            "message": "API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ",
            "timestamp": datetime.now().isoformat()
        })

    # –î–æ–¥–∞—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    @app.route('/api/user/<telegram_id>/transaction/<transaction_id>', methods=['GET'])
    def api_check_transaction(telegram_id, transaction_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            try:
                from supabase_client import supabase
                response = supabase.table("transactions").select("*").eq("id", transaction_id).execute()

                if not response.data or len(response.data) == 0:
                    return jsonify({
                        "status": "error",
                        "message": f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ ID {transaction_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                        "code": "transaction_not_found"
                    }), 404

                transaction = response.data[0]

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–∞–ª–µ–∂–∏—Ç—å —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                if str(transaction.get("telegram_id")) != str(telegram_id):
                    return jsonify({
                        "status": "error",
                        "message": "–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó",
                        "code": "unauthorized"
                    }), 403

                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                return jsonify({
                    "status": "success",
                    "data": transaction
                })

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {str(e)}")
                raise e

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó {transaction_id}: {str(e)}")
            return jsonify({
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {str(e)}"
            }), 500

    logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    return True