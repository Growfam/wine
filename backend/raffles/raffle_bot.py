#!/usr/bin/env python
"""
Telegram Bot –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ Telegram, –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
–ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –ø–µ—Ä–µ–º–æ–≥–∏ —Ç–∞ —ñ–Ω—à—ñ –ø–æ–¥—ñ—ó.
"""

import os
import sys
import logging
import asyncio
from datetime import datetime, timezone, timedelta
import json
import aiohttp
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –±–µ–∫–µ–Ω–¥—É –¥–æ —à–ª—è—Ö—É Python –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("raffle_bot.log")
    ]
)
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
try:
    from supabase_client import supabase, get_user
except ImportError:
    logger.critical("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—è supabase_client.py")
    sys.exit(1)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.critical("–ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_BOT_TOKEN")
    sys.exit(1)

API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:5000")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGE_TYPES = {
    "WELCOME": "welcome",
    "RAFFLE_START": "raffle_start",
    "RAFFLE_END": "raffle_end",
    "WINNER": "winner",
    "DAILY_REMINDER": "daily_reminder"
}

# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGE_TEMPLATES = {
    MESSAGE_TYPES["WELCOME"]: """
üéÆ *–í—ñ—Ç–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX* üéÆ

–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞—Ç–∏ WINIX —Ç–æ–∫–µ–Ω–∏.

*–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:*
1. –û—Ç—Ä–∏–º—É–π—Ç–µ –∂–µ—Ç–æ–Ω–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
3. –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ WINIX

*–í–∞—à—ñ –¥–∞–Ω—ñ:*
üë§ ID: {user_id}
üí∞ –ë–∞–ª–∞–Ω—Å: {balance} WINIX
üéüÔ∏è –ñ–µ—Ç–æ–Ω–∏: {coins}

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:
""",

    MESSAGE_TYPES["RAFFLE_START"]: """
üéâ *–ù–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à WINIX* üéâ

*{raffle_title}*
–ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {prize_amount} {prize_currency}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: {winners_count}
–í–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ: {entry_fee} –∂–µ—Ç–æ–Ω—ñ–≤

‚è∞ –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {end_time}

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Å–≤–æ—ó –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ —Ç–∞ –∑–±—ñ–ª—å—à—ñ—Ç—å —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É!
""",

    MESSAGE_TYPES["RAFFLE_END"]: """
üèÅ *–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ* üèÅ

*{raffle_title}* 
–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {prize_amount} {prize_currency}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤: {participants_count}

{result_message}

–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å! –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ —Å–∫–æ—Ä–æ.
""",

    MESSAGE_TYPES["WINNER"]: """
üèÜ *–í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!* üèÜ

–í–∏ –∑–∞–π–Ω—è–ª–∏ *{place} –º—ñ—Å—Ü–µ* –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ "{raffle_title}"
–í–∞—à –ø—Ä–∏–∑: *{prize_amount} {prize_currency}*

–ü—Ä–∏–∑ –≤–∂–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. 
–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} {prize_currency}

–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —Ç–∞ –≤—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é! üéâ
""",

    MESSAGE_TYPES["DAILY_REMINDER"]: """
‚è∞ *–©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à WINIX* ‚è∞

–ù–µ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —â–æ–¥–µ–Ω–Ω–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!

–ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: {prize_amount} {prize_currency}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: {winners_count}
–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {time_left}

–£ –≤–∞—Å —î {coins} –∂–µ—Ç–æ–Ω—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ó—Ö –∑–∞—Ä–∞–∑ —ñ –∑–±—ñ–ª—å—à—ñ—Ç—å —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É!
"""
}


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        telegram_id = str(message.from_user.id)
        user = get_user(telegram_id)

        if user:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üéÆ –†–æ–∑—ñ–≥—Ä–∞—à—ñ", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/raffles")),
                InlineKeyboardButton("üí∞ –ì–∞–º–∞–Ω–µ—Ü—å", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/wallet"))
            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            welcome_text = MESSAGE_TEMPLATES[MESSAGE_TYPES["WELCOME"]].format(
                user_id=telegram_id,
                balance=user.get("balance", 0),
                coins=user.get("coins", 0)
            )

            await message.answer(welcome_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)

            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            await message.answer(
                "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ WINIX. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è —á–µ—Ä–µ–∑ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫.")
            logger.warning(f"–°–ø—Ä–æ–±–∞ —Å—Ç–∞—Ä—Ç—É –≤—ñ–¥ –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /start: {str(e)}", exc_info=True)
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message_handler(commands=['raffles'])
async def cmd_raffles(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /raffles - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ"""
    try:
        telegram_id = str(message.from_user.id)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        user = get_user(telegram_id)
        if not user:
            await message.answer(
                "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ WINIX. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è —á–µ—Ä–µ–∑ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        raffles_response = supabase.table("raffles").select("*").eq("status", "active").order("is_daily",
                                                                                              desc=True).order(
            "end_time", asc=True).execute()

        if not raffles_response.data:
            await message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üéÆ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/raffles"))
        )

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        msg_text = "üéÆ *–ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ WINIX* üéÆ\n\n"

        for raffle in raffles_response.data:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            end_time = datetime.fromisoformat(raffle.get("end_time").replace('Z', '+00:00'))
            now = datetime.now(timezone.utc)
            time_left = end_time - now

            days = time_left.days
            hours = time_left.seconds // 3600
            minutes = (time_left.seconds % 3600) // 60

            if days > 0:
                time_str = f"{days}–¥ {hours}–≥–æ–¥"
            else:
                time_str = f"{hours}–≥–æ–¥ {minutes}—Ö–≤"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
            raffle_type = "üîÑ –©–æ–¥–µ–Ω–Ω–∏–π" if raffle.get("is_daily") else "üåü –ì—Ä–∞–Ω–¥"
            msg_text += f"*{raffle_type}: {raffle.get('title')}*\n"
            msg_text += f"üí∞ –ü—Ä–∏–∑: {raffle.get('prize_amount')} {raffle.get('prize_currency')}\n"
            msg_text += f"üë• –£—á–∞—Å–Ω–∏–∫—ñ–≤: {raffle.get('participants_count', 0)}\n"
            msg_text += f"‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {time_str}\n\n"

        msg_text += f"–£ –≤–∞—Å —î {user.get('coins', 0)} –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö."

        await message.answer(msg_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /raffles: {str(e)}", exc_info=True)
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message_handler(commands=['balance'])
async def cmd_balance(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /balance - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        telegram_id = str(message.from_user.id)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        user = get_user(telegram_id)
        if not user:
            await message.answer(
                "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ WINIX. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è —á–µ—Ä–µ–∑ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üí∞ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–∞–º–∞–Ω—Ü—è", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/wallet"))
        )

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±–∞–ª–∞–Ω—Å
        msg_text = "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å WINIX* üí∞\n\n"
        msg_text += f"*WINIX*: {user.get('balance', 0)}\n"
        msg_text += f"*–ñ–µ—Ç–æ–Ω–∏*: {user.get('coins', 0)}\n\n"

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
        msg_text += f"üë• –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö: {user.get('participations_count', 0)}\n"
        msg_text += f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {user.get('wins_count', 0)}\n"

        await message.answer(msg_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /balance: {str(e)}", exc_info=True)
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–∞–ª–∞–Ω—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help - –¥–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"""
    try:
        help_text = """
üìã *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É WINIX* üìã

*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/raffles - –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

*–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:*
1. –û—Ç—Ä–∏–º—É–π—Ç–µ –∂–µ—Ç–æ–Ω–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º—ñ
2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∂–µ—Ç–æ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
3. –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ WINIX —Ç–æ–∫–µ–Ω–∏

*–¢–∏–ø–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:*
üîÑ *–©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ* - –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–∏–∑–∞–º–∏
üåü *–ì—Ä–∞–Ω–¥ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ* - —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –ø—Ä–∏–∑–∞–º–∏

–©–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:
        """

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üéÆ –†–æ–∑—ñ–≥—Ä–∞—à—ñ", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/raffles")),
            InlineKeyboardButton("üí∞ –ì–∞–º–∞–Ω–µ—Ü—å", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/wallet"))
        )

        await message.answer(help_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ–≤—ñ–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /help: {str(e)}", exc_info=True)
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ–≤—ñ–¥–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


async def send_raffle_notification(user_id, raffle_data, message_type):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        if message_type not in MESSAGE_TEMPLATES:
            logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_type}")
            return False

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—É
        user = get_user(user_id)
        if not user:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if "end_time" in raffle_data:
            end_time = datetime.fromisoformat(raffle_data["end_time"].replace('Z', '+00:00'))
            raffle_data["end_time"] = end_time.strftime("%d.%m.%Y %H:%M")

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
            now = datetime.now(timezone.utc)
            time_left = end_time - now

            days = time_left.days
            hours = time_left.seconds // 3600
            minutes = (time_left.seconds % 3600) // 60

            if days > 0:
                raffle_data["time_left"] = f"{days}–¥ {hours}–≥–æ–¥"
            else:
                raffle_data["time_left"] = f"{hours}–≥–æ–¥ {minutes}—Ö–≤"

        # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        raffle_data["balance"] = user.get("balance", 0)
        raffle_data["coins"] = user.get("coins", 0)

        # –û—Ç—Ä–∏–º—É—î–º–æ —à–∞–±–ª–æ–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ –π–æ–≥–æ
        message_template = MESSAGE_TEMPLATES[message_type]
        message_text = message_template.format(**raffle_data)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        keyboard = InlineKeyboardMarkup(row_width=1)

        if message_type in [MESSAGE_TYPES["RAFFLE_START"], MESSAGE_TYPES["DAILY_REMINDER"]]:
            keyboard.add(
                InlineKeyboardButton("üéÆ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/raffles"))
            )
        elif message_type == MESSAGE_TYPES["WINNER"]:
            keyboard.add(
                InlineKeyboardButton("üí∞ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/wallet")),
                InlineKeyboardButton("üèÜ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/raffles"))
            )
        else:
            keyboard.add(
                InlineKeyboardButton("üéÆ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤", web_app=types.WebAppInfo(url=f"{API_BASE_URL}/raffles"))
            )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode=types.ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É {message_type} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        return True
    except BotBlocked:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
        return False
    except ChatNotFound:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: —á–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    except UserDeactivated:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π")
        return False
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {str(e)}", exc_info=True)
        return False


async def notify_winners(raffle_id):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        raffle_response = supabase.table("raffles").select("*").eq("id", raffle_id).execute()
        if not raffle_response.data:
            logger.error(f"–†–æ–∑—ñ–≥—Ä–∞—à –∑ ID {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        raffle = raffle_response.data[0]

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
        winners_response = supabase.table("raffle_winners").select("*").eq("raffle_id", raffle_id).order("place",
                                                                                                         asc=True).execute()
        if not winners_response.data:
            logger.warning(f"–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        success_count = 0
        for winner in winners_response.data:
            telegram_id = winner.get("telegram_id")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            notification_data = {
                "raffle_title": raffle.get("title"),
                "place": winner.get("place"),
                "prize_amount": winner.get("prize_amount"),
                "prize_currency": winner.get("prize_currency", "WINIX")
            }

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if await send_raffle_notification(telegram_id, notification_data, MESSAGE_TYPES["WINNER"]):
                success_count += 1

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                supabase.table("raffle_winners").update({
                    "notification_sent": True
                }).eq("id", winner.get("id")).execute()

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}")
        return success_count > 0
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–º–æ–∂—Ü—è–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É {raffle_id}: {str(e)}", exc_info=True)
        return False


async def notify_about_new_raffle(raffle_id):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        raffle_response = supabase.table("raffles").select("*").eq("id", raffle_id).execute()
        if not raffle_response.data:
            logger.error(f"–†–æ–∑—ñ–≥—Ä–∞—à –∑ ID {raffle_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        raffle = raffle_response.data[0]

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        notification_data = {
            "raffle_title": raffle.get("title"),
            "prize_amount": raffle.get("prize_amount"),
            "prize_currency": raffle.get("prize_currency", "WINIX"),
            "winners_count": raffle.get("winners_count"),
            "entry_fee": raffle.get("entry_fee"),
            "end_time": raffle.get("end_time")
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
        users_response = supabase.table("winix").select("telegram_id").limit(100).execute()
        if not users_response.data:
            logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        success_count = 0
        for user in users_response.data:
            telegram_id = user.get("telegram_id")

            if await send_raffle_notification(telegram_id, notification_data, MESSAGE_TYPES["RAFFLE_START"]):
                success_count += 1

            # –ü–∞—É–∑–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å Telegram API
            await asyncio.sleep(0.05)

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à {raffle_id}")
        return success_count > 0
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à {raffle_id}: {str(e)}", exc_info=True)
        return False


async def send_daily_reminder():
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à
        raffle_response = supabase.table("raffles").select("*").eq("is_daily", True).eq("status", "active").order(
            "end_time", asc=True).limit(1).execute()
        if not raffle_response.data:
            logger.warning("–ê–∫—Ç–∏–≤–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        raffle = raffle_response.data[0]

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        notification_data = {
            "raffle_title": raffle.get("title"),
            "prize_amount": raffle.get("prize_amount"),
            "prize_currency": raffle.get("prize_currency", "WINIX"),
            "winners_count": raffle.get("winners_count"),
            "end_time": raffle.get("end_time")
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ —â–µ –Ω–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ IDs –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤–∂–µ –±–µ—Ä—É—Ç—å —É—á–∞—Å—Ç—å
        participants_response = supabase.table("raffle_participants").select("telegram_id").eq("raffle_id", raffle.get(
            "id")).execute()
        participant_ids = [p.get("telegram_id") for p in
                           participants_response.data] if participants_response.data else []

        # –¢–µ–ø–µ—Ä –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–µ —î –≤ —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤
        users_query = supabase.table("winix").select("telegram_id")
        if participant_ids:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ not_.in_ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            users_query = users_query.not_.in_("telegram_id", participant_ids)

        # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        users_response = users_query.limit(50).execute()
        if not users_response.data:
            logger.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        success_count = 0
        for user in users_response.data:
            telegram_id = user.get("telegram_id")

            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∂–µ—Ç–æ–Ω–∏
            user_data = get_user(telegram_id)
            if not user_data:
                continue

            # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            notification_data["coins"] = user_data.get("coins", 0)

            if await send_raffle_notification(telegram_id, notification_data, MESSAGE_TYPES["DAILY_REMINDER"]):
                success_count += 1

            # –ü–∞—É–∑–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å Telegram API
            await asyncio.sleep(0.05)

        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à")
        return success_count > 0
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à: {str(e)}", exc_info=True)
        return False


# –í–µ–±-—Ö—É–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ API
async def process_webhook(request):
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ API —á–µ—Ä–µ–∑ –≤–µ–±-—Ö—É–∫"""
    try:
        data = await request.json()
        event_type = data.get("event_type")

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é: {event_type}")

        if event_type == "raffle_created":
            # –ù–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —Å—Ç–≤–æ—Ä–µ–Ω–æ
            raffle_id = data.get("raffle_id")
            if raffle_id:
                asyncio.create_task(notify_about_new_raffle(raffle_id))
                return {"status": "success", "message": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"}

        elif event_type == "raffle_completed":
            # –†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            raffle_id = data.get("raffle_id")
            if raffle_id:
                asyncio.create_task(notify_winners(raffle_id))
                return {"status": "success", "message": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è–º –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"}

        elif event_type == "daily_reminder":
            # –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            asyncio.create_task(send_daily_reminder())
            return {"status": "success", "message": "–©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"}

        else:
            logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}")
            return {"status": "error", "message": "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó"}

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±-—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return {"status": "error", "message": str(e)}


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ long-polling
def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ WINIX")
    executor.start_polling(dp, skip_updates=True)


# –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É
if __name__ == "__main__":
    main()