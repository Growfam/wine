"""
üî• WINIX Supabase Client - Enhanced Edition v2.2 (FIXED + STAKING COMPLETE)
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Supabase API –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é WINIX Quests System + STAKING.

–ó–∞–±–µ–∑–ø–µ—á—É—î:
- –ù–∞–¥—ñ–π–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö –∑ retry –ª–æ–≥—ñ–∫–æ—é
- –†–æ–∑—É–º–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è –∑ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è–º
- –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π–Ω—É –æ–±—Ä–æ–±–∫—É
- –ü–æ–≤–Ω—É —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ WINIX —Å–∏—Å—Ç–µ–º–æ—é –∑–∞–≤–¥–∞–Ω—å
- Backward compatibility –∑ —ñ—Å–Ω—É—é—á–æ—é —Å–∏—Å—Ç–µ–º–æ—é
- –Ü–¥–µ–∞–ª—å–Ω—É —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –Ω–æ–≤–∏–º–∏ —Ç–∞–±–ª–∏—Ü—è–º–∏
- –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—Å—ñ IDE –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
- –ü–û–í–ù–£ –ü–Ü–î–¢–†–ò–ú–ö–£ –°–¢–ï–ô–ö–Ü–ù–ì–£

–ê–≤—Ç–æ—Ä: —Ä–æ—Å—Ç—ñ–∫ üá∫üá¶
–í–µ—Ä—Å—ñ—è: 2.3.0 (WINIX Enhanced + Perfect Compatibility + STAKING FIXED)
"""

import os
import time
import logging
import json
import uuid
import functools
import warnings
from datetime import datetime, timezone, timedelta  # ‚úÖ –î–û–î–ê–ù–û timedelta –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
from typing import Dict, Any, List, Optional, Callable, TypeVar, Union
from contextlib import contextmanager
from requests.exceptions import RequestException, Timeout, ConnectTimeout, ReadTimeout
from supabase import create_client, Client
from dotenv import load_dotenv

# –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è PyCharm –¥–ª—è Supabase
warnings.filterwarnings("ignore", category=UserWarning, module="supabase")

# ===== –ü–û–ß–ê–¢–ö–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ .env
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Ç—ñ–≤
CACHE_TIMEOUT = int(os.getenv("CACHE_TIMEOUT", "300"))  # 5 —Ö–≤–∏–ª–∏–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
CACHE_ENABLED = os.getenv("CACHE_ENABLED", "True").lower() == "true"
MAX_RETRIES = int(os.getenv("MAX_RETRIES", "3"))  # –º–∞–∫—Å–∏–º—É–º 3 —Å–ø—Ä–æ–±–∏
RETRY_DELAY = float(os.getenv("RETRY_DELAY", "2.5"))  # –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ 2.5 —Å–µ–∫—É–Ω–¥–∞
DEFAULT_TIMEOUT = int(os.getenv("DEFAULT_TIMEOUT", "10"))  # —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_CACHE_SIZE = int(os.getenv("MAX_CACHE_SIZE", "1000"))  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not SUPABASE_URL or not SUPABASE_KEY:
    logger.error("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SUPABASE_URL –∞–±–æ SUPABASE_ANON_KEY")

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–µ—à—É –∑—ñ —Å—Ç—Ä–æ–≥–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –∑–∞–ø–∏—Å—ñ–≤
_cache: Dict[str, Dict[str, Any]] = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏
try:
    if SUPABASE_URL and SUPABASE_SERVICE_KEY:
        supabase: Optional[Client] = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase –∑ Service Role Key")
    elif SUPABASE_URL and SUPABASE_KEY:
        # Fallback –Ω–∞ anon key —è–∫—â–æ service key –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        supabase: Optional[Client] = create_client(SUPABASE_URL, SUPABASE_KEY)
        logger.warning("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ANON KEY - –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ RLS")
    else:
        supabase = None
        logger.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ SUPABASE")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase: {str(e)}", exc_info=True)
    supabase = None

# –¢–∏–ø, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑ —Ñ—É–Ω–∫—Ü—ñ—ó
T = TypeVar('T')

# ===== –ö–õ–ê–°–ò –¢–ê –£–¢–ò–õ–Ü–¢–ò =====

class CacheStats:
    """–ö–ª–∞—Å –¥–ª—è –∑–±–æ—Ä—É —Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è"""

    def __init__(self):
        self.hits = 0
        self.misses = 0
        self.invalidations = 0
        self.entries = 0
        self.last_cleanup = time.time()

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É–≤–∞–Ω–Ω—è"""
        total_requests = self.hits + self.misses
        hit_rate = (self.hits / total_requests) * 100 if total_requests > 0 else 0

        return {
            "hits": self.hits,
            "misses": self.misses,
            "invalidations": self.invalidations,
            "entries": self.entries,
            "hit_rate": f"{hit_rate:.2f}%",
            "cache_enabled": CACHE_ENABLED,
            "last_cleanup": datetime.fromtimestamp(self.last_cleanup).isoformat()
        }

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
cache_stats = CacheStats()

# ===== –ë–ï–ó–ü–ï–ß–ù–Ü –í–ò–ö–õ–ò–ö–ò SUPABASE =====

def safe_supabase_call(operation_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–ø–µ—á–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ Supabase"""

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            if not supabase:
                logger.error(f"‚ùå {operation_name}: –ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
                return None

            try:
                return func(*args, **kwargs)
            except (RequestException, ConnectionError, Timeout, ConnectTimeout, ReadTimeout) as e:
                logger.error(f"‚ùå {operation_name}: –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
                return None
            except Exception as e:
                error_msg = str(e)
                if "supabase" in error_msg.lower() or "postgrest" in error_msg.lower():
                    logger.error(f"‚ùå {operation_name}: –ü–æ–º–∏–ª–∫–∞ Supabase: {error_msg}")
                else:
                    logger.error(f"‚ùå {operation_name}: –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {error_msg}")
                return None

        return wrapper

    return decorator

# ===== –ö–ï–®–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ê =====

def cache_key(func_name: str, *args, **kwargs) -> str:
    """
    –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å—É –≤ –∫–µ—à—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤

    Args:
        func_name: –Ü–º'—è —Ñ—É–Ω–∫—Ü—ñ—ó
        *args: –ü–æ–∑–∏—Ü—ñ–π–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        **kwargs: –Ü–º–µ–Ω–æ–≤–∞–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏

    Returns:
        –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
    """
    key_parts = [func_name]
    key_parts.extend([str(arg) for arg in args])
    key_parts.extend([f"{k}={v}" for k, v in sorted(kwargs.items())])
    return ":".join(key_parts)

def cache_get(key: str) -> Optional[Any]:
    """
    –û—Ç—Ä–∏–º—É—î –∑–∞–ø–∏—Å –∑ –∫–µ—à—É, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î —ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–≤

    Args:
        key: –ö–ª—é—á –∫–µ—à—É

    Returns:
        –î–∞–Ω—ñ –∑ –∫–µ—à—É –∞–±–æ None, —è–∫—â–æ –∑–∞–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤
    """
    if not CACHE_ENABLED:
        return None

    cache_entry = _cache.get(key)
    if not cache_entry:
        cache_stats.misses += 1
        return None

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–≤ –∑–∞–ø–∏—Å
    current_time = time.time()
    if current_time > cache_entry.get("—Ç–µ—Ä–º—ñ–Ω_–¥—ñ—ó", 0):
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∑–∞–ø–∏—Å
        _cache.pop(key, None)
        cache_stats.misses += 1
        cache_stats.entries = len(_cache)
        return None

    cache_stats.hits += 1
    return cache_entry.get("–¥–∞–Ω—ñ")

def cache_set(key: str, data: Any, timeout: int = CACHE_TIMEOUT) -> None:
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ –∫–µ—à—ñ —ñ–∑ –∑–∞–¥–∞–Ω–∏–º —Ç–µ—Ä–º—ñ–Ω–æ–º –¥—ñ—ó

    Args:
        key: –ö–ª—é—á –∫–µ—à—É
        data: –î–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        timeout: –ß–∞—Å –∂–∏—Ç—Ç—è –∑–∞–ø–∏—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    if not CACHE_ENABLED:
        return

    current_time = time.time()
    _cache[key] = {
        "–¥–∞–Ω—ñ": data,
        "—á–∞—Å_—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è": current_time,
        "—Ç–µ—Ä–º—ñ–Ω_–¥—ñ—ó": current_time + timeout
    }
    cache_stats.entries = len(_cache)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É
    if len(_cache) > MAX_CACHE_SIZE or (current_time - cache_stats.last_cleanup > 3600):
        cleanup_cache()

def cleanup_cache() -> None:
    """–û—á–∏—â—É—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à—ñ"""
    if not CACHE_ENABLED:
        return

    current_time = time.time()
    keys_to_delete = []

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏
    for key, entry in list(_cache.items()):
        if current_time > entry.get("—Ç–µ—Ä–º—ñ–Ω_–¥—ñ—ó", 0):
            keys_to_delete.append(key)

    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏
    for key in keys_to_delete:
        _cache.pop(key, None)

    # –Ø–∫—â–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫–µ—à –≤—Å–µ —â–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π,
    # –≤–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞–ø–∏—Å–∏
    if len(_cache) > MAX_CACHE_SIZE:
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        sorted_keys = sorted(_cache.keys(),
                           key=lambda k: _cache[k].get("—á–∞—Å_—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", 0))

        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞–ø–∏—Å–∏, —â–æ–± –¥–æ—Å—è–≥—Ç–∏ 75% –≤—ñ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        target_size = int(MAX_CACHE_SIZE * 0.75)
        keys_to_delete = sorted_keys[:len(_cache) - target_size]

        for key in keys_to_delete:
            _cache.pop(key, None)

    cache_stats.entries = len(_cache)
    cache_stats.last_cleanup = current_time
    logger.info(f"–û—á–∏—â–µ–Ω–æ {len(keys_to_delete)} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —É –∫–µ—à—ñ. –ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {len(_cache)}")

def cached(timeout: int = CACHE_TIMEOUT):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –∫–µ—à—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó

    Args:
        timeout: –ß–∞—Å –∂–∏—Ç—Ç—è –∑–∞–ø–∏—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –î–µ–∫–æ—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    """

    def decorator(func: Callable[..., T]) -> Callable[..., T]:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> T:
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö
            if func.__name__.startswith(('update_', 'create_', 'delete_', 'add_')):
                # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è get_ —Ñ—É–Ω–∫—Ü—ñ–π, —â–æ –º–∞—é—Ç—å —Å–ø—ñ–ª—å–Ω–µ —ñ–º'—è —Å—É—Ç–Ω–æ—Å—Ç—ñ
                if args:
                    invalidate_cache_for_entity(args[0])
                return func(*args, **kwargs)

            # –î–ª—è —Ñ—É–Ω–∫—Ü—ñ–π –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à
            key = cache_key(func.__name__, *args, **kwargs)
            result = cache_get(key)

            if result is not None:
                logger.debug(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {func.__name__}")
                return result

            result = func(*args, **kwargs)
            cache_set(key, result, timeout)
            return result

        return wrapper

    return decorator

def invalidate_cache_for_entity(entity_id: Any) -> None:
    """
    –Ü–Ω–≤–∞–ª—ñ–¥—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à—ñ, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –≤–∫–∞–∑–∞–Ω–∏–º ID

    Args:
        entity_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—É—Ç–Ω–æ—Å—Ç—ñ
    """
    if not CACHE_ENABLED:
        return

    keys_to_delete = []
    entity_id_str = str(entity_id)

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ list() –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ—ó –∫–ª—é—á—ñ–≤
    for key in list(_cache.keys()):
        if entity_id_str in key:
            keys_to_delete.append(key)

    for key in keys_to_delete:
        _cache.pop(key, None)
        cache_stats.invalidations += 1

    cache_stats.entries = len(_cache)

    if keys_to_delete:
        logger.debug(f"–Ü–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ {len(keys_to_delete)} –∑–∞–ø–∏—Å—ñ–≤ —É –∫–µ—à—ñ –¥–ª—è {entity_id}")

def clear_cache(pattern: Optional[str] = None) -> int:
    """
    –ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–∞—î –∫–µ—à –∞–±–æ –π–æ–≥–æ —á–∞—Å—Ç–∏–Ω—É –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º

    Args:
        pattern: –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è

    Returns:
        –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
    """
    global _cache
    deleted_count = 0

    if pattern:
        keys_to_delete = [key for key in list(_cache.keys()) if pattern in key]
        for key in keys_to_delete:
            _cache.pop(key, None)
        deleted_count = len(keys_to_delete)
        cache_stats.entries = len(_cache)
        cache_stats.invalidations += 1
        logger.info(f"–û—á–∏—â–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å—ñ–≤ —É –∫–µ—à—ñ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º '{pattern}'")
    else:
        deleted_count = len(_cache)
        _cache = {}
        cache_stats.entries = 0
        cache_stats.invalidations += 1
        logger.info(f"–ö–µ—à –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ ({deleted_count} –∑–∞–ø–∏—Å—ñ–≤)")

    return deleted_count

# ===== –¢–†–ê–ù–ó–ê–ö–¶–Ü–á –¢–ê RETRY –õ–û–ì–Ü–ö–ê =====

@contextmanager
def execute_transaction():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É Supabase

    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    with execute_transaction() as txn:
        txn.table("table1").insert(...).execute()
        txn.table("table2").update(...).execute()

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        –ï–∫–∑–µ–º–ø–ª—è—Ä –∫–ª—ñ—î–Ω—Ç–∞ Supabase –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó

    –ü—Ä–∏–º—ñ—Ç–∫–∞:
    –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π. –î–ª—è –ø–æ–≤–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    –≤ Supabase –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç–∏ BEGIN/COMMIT/ROLLBACK.
    """
    if not supabase:
        raise ValueError("–ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    try:
        # –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        logger.debug("–ü–æ—á–∞—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        yield supabase

        # –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        logger.debug("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        # –í—ñ–¥–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {str(e)}", exc_info=True)

        # –ü–µ—Ä–µ–≤–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞ —Ä—ñ–≤–Ω—ñ –≤–∏—â–µ
        raise

def retry_supabase(func: Callable[[], T], max_retries: int = MAX_RETRIES,
                   retry_delay: float = RETRY_DELAY,
                   exponential_backoff: bool = True) -> T:
    """
    –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ä–æ–±–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó Supabase –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö

    Args:
        func: –§—É–Ω–∫—Ü—ñ—è, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        retry_delay: –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏ (—Å–µ–∫—É–Ω–¥–∏)
        exponential_backoff: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏

    Raises:
        Exception: –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
    """
    retries = 0
    last_error = None
    current_delay = retry_delay

    while retries < max_retries:
        try:
            return func()
        except (RequestException, ConnectionError, Timeout, ConnectTimeout, ReadTimeout) as e:
            # –ú–µ—Ä–µ–∂–µ–≤—ñ –ø–æ–º–∏–ª–∫–∏ –∞–±–æ –ø–æ–º–∏–ª–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
            last_error = e
            retries += 1

            # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–ø—Ä–æ–±
            remaining = max_retries - retries
            logger.warning(f"–°–ø—Ä–æ–±–∞ {retries}/{max_retries} –Ω–µ –≤–¥–∞–ª–∞—Å—è (–º–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞): {str(e)}. "
                           f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {remaining}")

            # –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞, –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—å
            if retries >= max_retries:
                break

            # –Ü–Ω–∞–∫—à–µ —á–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
            time.sleep(current_delay)

            # –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ
            if exponential_backoff:
                current_delay *= 2
        except Exception as e:
            # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ (–ª–æ–≥—ñ–∫–∞, —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö —Ç–æ—â–æ)
            last_error = e
            retries += 1

            # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–ø—Ä–æ–±
            remaining = max_retries - retries
            logger.warning(f"–°–ø—Ä–æ–±–∞ {retries}/{max_retries} –Ω–µ –≤–¥–∞–ª–∞—Å—è (–ø–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–∫–∏): {str(e)}. "
                           f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {remaining}")

            # –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞, –¥–æ–∑–≤–æ–ª—è—î–º–æ —ó–π –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—å
            if retries >= max_retries:
                break

            # –Ü–Ω–∞–∫—à–µ —á–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
            time.sleep(current_delay)

            # –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ
            if exponential_backoff:
                current_delay *= 2

    # –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è, –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É
    logger.error(f"–£—Å—ñ {max_retries} —Å–ø—Ä–æ–± –Ω–µ –≤–¥–∞–ª–∏—Å—è. –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(last_error)}")
    raise last_error

# ===== –ö–†–ò–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í (–í–ò–ü–†–ê–í–õ–ï–ù–Ü) =====

@safe_supabase_call("get_user")
@cached()
def get_user(telegram_id: Union[str, int]) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Supabase –∑–∞ –π–æ–≥–æ Telegram ID

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∫—Ä—ñ–∑—å —É —Å–∏—Å—Ç–µ–º—ñ!

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫, —è–∫—â–æ —Ü–µ –Ω–µ —Ä—è–¥–æ–∫
        telegram_id = str(telegram_id)

        logger.info(f"get_user: –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {telegram_id}")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def fetch_user():
            if not supabase:  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                return None

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
            res = supabase.table("winix").select("*").eq("telegram_id", telegram_id).execute()  # type: ignore

            if not res.data:
                logger.warning(f"get_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return None

            logger.info(f"get_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {telegram_id} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ")
            return res.data[0] if res.data else None

        return retry_supabase(fetch_user)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("force_create_user")
def force_create_user(telegram_id: Union[str, int], username: str, referrer_id: Optional[Union[str, int]] = None) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ü—Ä–∏–º—É—Å–æ–≤–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó!

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        username: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω—ñ–∫–Ω–µ–π–º)
        referrer_id: ID —Ç–æ–≥–æ, —Ö—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)

    Returns:
        –î–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –≤ —Ä—è–¥–æ–∫
        telegram_id = str(telegram_id)
        referrer_id = str(referrer_id) if referrer_id else None

        # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        referral_code = str(uuid.uuid4())[:8].upper()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        now = datetime.now(timezone.utc)
        data = {
            "telegram_id": telegram_id,
            "username": username,
            "balance": 0,
            "coins": 3,
            "referrer_id": referrer_id,
            "referral_code": referral_code,
            "page1_completed": False,
            "newbie_bonus_claimed": False,
            "participations_count": 0,
            "badge_winner": False,
            "badge_beginner": False,
            "badge_rich": False,
            "badge_winner_reward_claimed": False,
            "badge_beginner_reward_claimed": False,
            "badge_rich_reward_claimed": False,
            "wins_count": 0,
            "level": 1,
            "experience": 0,
            "last_activity": now.isoformat(),
            "language_preference": "uk",
            "created_at": now.isoformat(),
            "updated_at": now.isoformat()
        }

        logger.info(f"force_create_user: –ü—Ä–∏–º—É—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id}")
        logger.debug(f"force_create_user: –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {json.dumps(data)}")

        # –°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ –Ω–∞–ø—Ä—è–º—É
        try:
            with execute_transaction() as txn:
                res = txn.table("winix").insert(data).execute()  # type: ignore

                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∂–µ—Ç–æ–Ω—ñ–≤
                if res.data:
                    transaction_data = {
                        "telegram_id": telegram_id,
                        "type": "reward",
                        "amount": 3,
                        "description": "–ü–æ—á–∞—Ç–∫–æ–≤—ñ –∂–µ—Ç–æ–Ω–∏ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
                        "status": "completed",
                        "created_at": now.isoformat(),
                        "updated_at": now.isoformat()
                    }
                    txn.table("transactions").insert(transaction_data).execute()  # type: ignore

            if res.data:
                logger.info(f"force_create_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                invalidate_cache_for_entity(telegram_id)
                return res.data[0]
            else:
                logger.warning(f"force_create_user: Supabase –ø–æ–≤–µ—Ä–Ω—É–≤ –ø—É—Å—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
        except Exception as e:
            logger.error(f"force_create_user: –ü–æ–º–∏–ª–∫–∞ Supabase: {str(e)}")
            return None

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("update_balance")
def update_balance(telegram_id: Union[str, int], amount: Union[float, int]) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É (–¥–æ–¥–∞—î –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ)

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—Å—ñ—Ö –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω—å WINIX!

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        amount: –°—É–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é –¥–ª—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è)

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø–∏
        telegram_id = str(telegram_id)
        amount = float(amount)

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

            # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            logger.info(f"update_balance: –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
            user = force_create_user(telegram_id, "WINIX User")

            if not user:
                logger.error(f"update_balance: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                return None

        current_balance = float(user.get("balance", 0))
        new_balance = current_balance + amount

        logger.info(
            f"update_balance: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {telegram_id}: {current_balance} -> {new_balance} (–∑–º—ñ–Ω–∞: {amount})")

        # –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        try:
            if not supabase:
                return None

            with execute_transaction() as txn:
                # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                transaction_data = {
                    "telegram_id": telegram_id,
                    "type": "update_balance",
                    "amount": amount,
                    "description": f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ({'+' if amount >= 0 else ''}{amount})",
                    "status": "completed",
                    "created_at": datetime.now(timezone.utc).isoformat(),
                    "updated_at": datetime.now(timezone.utc).isoformat(),
                    "previous_balance": current_balance
                }
                txn.table("transactions").insert(transaction_data).execute()  # type: ignore

                # –ü–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                result = txn.table("winix").update({
                    "balance": new_balance,
                    "updated_at": datetime.now(timezone.utc).isoformat()
                }).eq("telegram_id", telegram_id).execute()  # type: ignore

        except Exception as e:
            logger.error(f"update_balance: –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {str(e)}")
            raise e

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        invalidate_cache_for_entity(telegram_id)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è
        if new_balance >= 50000 and not user.get("badge_rich", False):
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")
            if supabase:
                supabase.table("winix").update({"badge_rich": True}).eq("telegram_id", telegram_id).execute()  # type: ignore

        return result.data[0] if result and result.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É {telegram_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("update_coins")
def update_coins(telegram_id: Union[str, int], amount: int) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –û–Ω–æ–≤–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–æ–¥–∞—î –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó)

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤!

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        amount: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é)

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –≤ —Ä—è–¥–æ–∫
        telegram_id = str(telegram_id)

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

            # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            logger.info(f"update_coins: –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
            user = force_create_user(telegram_id, "WINIX User")

            if not user:
                logger.error(f"update_coins: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                return None

        current_coins = int(user.get("coins", 0))
        new_coins = current_coins + amount
        if new_coins < 0:
            new_coins = 0  # –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤—ñ–¥'—î–º–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é

        logger.info(f"update_coins: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ {telegram_id}: {current_coins} -> {new_coins} (–∑–º—ñ–Ω–∞: {amount})")

        # –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        try:
            if not supabase:
                return None

            with execute_transaction() as txn:
                # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                transaction_data = {
                    "telegram_id": telegram_id,
                    "type": "update_coins",
                    "amount": amount,
                    "description": f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ ({'+' if amount >= 0 else ''}{amount})",
                    "status": "completed",
                    "created_at": datetime.now(timezone.utc).isoformat(),
                    "updated_at": datetime.now(timezone.utc).isoformat(),
                    "previous_coins": current_coins
                }
                txn.table("transactions").insert(transaction_data).execute()  # type: ignore

                # –ü–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∂–µ—Ç–æ–Ω—ñ–≤
                result = txn.table("winix").update({
                    "coins": new_coins,
                    "updated_at": datetime.now(timezone.utc).isoformat()
                }).eq("telegram_id", telegram_id).execute()  # type: ignore
        except Exception as e:
            logger.error(f"update_coins: –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {str(e)}")
            raise e

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        invalidate_cache_for_entity(telegram_id)

        return result.data[0] if result and result.data else None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤ {telegram_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("update_user")
def update_user(telegram_id: Union[str, int], data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º–∏ –ø–æ–ª—è–º–∏

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤!

    Args:
        telegram_id: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        data: –°–ª–æ–≤–Ω–∏–∫ –∑ –ø–æ–ª—è–º–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –≤ —Ä—è–¥–æ–∫
        telegram_id = str(telegram_id)

        user = get_user(telegram_id)
        if not user:
            logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

            # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            logger.info(f"update_user: –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
            user = force_create_user(telegram_id, "WINIX User")

            if not user:
                logger.error(f"update_user: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                return None

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–∞ –≤–∞–ª—ñ–¥—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        valid_data = {}
        for key, value in data.items():
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–ª–µ —ñ—Å–Ω—É—î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —á–∏ –∑–º—ñ–Ω–∏–ª–æ—Å—å
            if key in user and user[key] != value:
                valid_data[key] = value

        # –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ updated_at
        valid_data["updated_at"] = datetime.now(timezone.utc).isoformat()

        logger.info(f"update_user: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –∑ –ø–æ–ª—è–º–∏: {list(valid_data.keys())}")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def update_user_data():
            if not supabase:
                return None
            res = supabase.table("winix").update(valid_data).eq("telegram_id", telegram_id).execute()  # type: ignore
            return res.data[0] if res.data else None

        result = retry_supabase(update_user_data)

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        invalidate_cache_for_entity(telegram_id)

        return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}", exc_info=True)
        return None

# ===== –†–ï–§–ï–†–ê–õ–¨–ù–ê –°–ò–°–¢–ï–ú–ê (–í–ò–ü–†–ê–í–õ–ï–ù–ê) =====

@safe_supabase_call("create_referral_records_directly")
def create_referral_records_directly(referrer_id: Union[str, int], referee_id: Union[str, int], amount: int = 50) -> bool:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –°—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—è—Ö referrals —Ç–∞ direct_bonuses –Ω–∞–ø—Ä—è–º—É

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏!
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ID –≤ —Ä—è–¥–∫–∏
        referrer_id = str(referrer_id)
        referee_id = str(referee_id)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—ñ referrals
        if supabase:
            check_res = supabase.table("referrals").select("id").eq("referee_id", referee_id).execute()  # type: ignore
            if check_res and check_res.data and len(check_res.data) > 0:
                logger.info(f"create_referral_records_directly: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å –¥–ª—è {referee_id} –≤–∂–µ —ñ—Å–Ω—É—î")
                return False

        # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—ñ–≤
        current_time = datetime.now(timezone.utc).isoformat()

        # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 1-–≥–æ —Ä—ñ–≤–Ω—è
        referral_data = {
            "referrer_id": referrer_id,
            "referee_id": referee_id,
            "level": 1,
            "created_at": current_time
        }

        if supabase:
            ref_res = supabase.table("referrals").insert(referral_data).execute()  # type: ignore
            logger.info(f"create_referral_records_directly: –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å 1-–≥–æ —Ä—ñ–≤–Ω—è: {referrer_id} -> {referee_id}")

            # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 2-–≥–æ —Ä—ñ–≤–Ω—è
            try:
                higher_ref_res = supabase.table("referrals").select("referrer_id").eq("referee_id", referrer_id).eq("level", 1).execute()  # type: ignore

                if higher_ref_res and higher_ref_res.data and len(higher_ref_res.data) > 0:
                    higher_referrer_id = higher_ref_res.data[0]["referrer_id"]

                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2-–≥–æ —Ä—ñ–≤–Ω—è
                    second_level_data = {
                        "referrer_id": higher_referrer_id,
                        "referee_id": referee_id,
                        "level": 2,
                        "created_at": current_time
                    }

                    supabase.table("referrals").insert(second_level_data).execute()  # type: ignore
                    logger.info(f"create_referral_records_directly: –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å 2-–≥–æ —Ä—ñ–≤–Ω—è: {higher_referrer_id} -> {referee_id}")
            except Exception as e:
                logger.warning(f"create_referral_records_directly: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É 2-–≥–æ —Ä—ñ–≤–Ω—è: {str(e)}")

            # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –ø—Ä—è–º–∏–π –±–æ–Ω—É—Å
            try:
                bonus_data = {
                    "referrer_id": referrer_id,
                    "referee_id": referee_id,
                    "amount": amount,
                    "created_at": current_time
                }

                supabase.table("direct_bonuses").insert(bonus_data).execute()  # type: ignore
                logger.info(f"create_referral_records_directly: –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–ø–∏—Å –ø—Ä—è–º–æ–≥–æ –±–æ–Ω—É—Å—É –¥–ª—è {referrer_id}")

                # 4. –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                referrer_user = get_user(referrer_id)
                if referrer_user:
                    current_balance = float(referrer_user.get('balance', 0))
                    new_balance = current_balance + amount

                    update_data = {
                        "balance": new_balance,
                        "updated_at": current_time
                    }

                    supabase.table("winix").update(update_data).eq("telegram_id", referrer_id).execute()  # type: ignore
                    logger.info(f"create_referral_records_directly: –û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {current_balance} -> {new_balance}")

                    # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    invalidate_cache_for_entity(referrer_id)
            except Exception as e:
                logger.error(f"create_referral_records_directly: –ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—É: {str(e)}")

        return True
    except Exception as e:
        logger.error(f"create_referral_records_directly: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: {str(e)}")
        return False

@safe_supabase_call("create_user")
def create_user(telegram_id: Union[str, int], username: str, referrer_id: Optional[Union[str, int]] = None) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó!
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –≤ —Ä—è–¥–æ–∫
        telegram_id = str(telegram_id)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
        existing_user = get_user(telegram_id)
        if existing_user:
            logger.info(f"create_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ")
            return existing_user

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = force_create_user(telegram_id, username, referrer_id)

        if not user:
            logger.error(f"create_user: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
            return None

        # –Ø–∫—â–æ —î referrer_id, —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫
        if referrer_id:
            try:
                referrer_id = str(referrer_id)
                logger.info(f"create_user: –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫: {referrer_id} -> {telegram_id}")

                # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤
                try:
                    from referrals.controllers.referral_controller import ReferralController  # type: ignore
                    from referrals.controllers.bonus_controller import BonusController  # type: ignore
                    modules_imported = True
                    logger.info("create_user: –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏")
                except ImportError:
                    try:
                        from backend.referrals.controllers.referral_controller import ReferralController  # type: ignore
                        from backend.referrals.controllers.bonus_controller import BonusController  # type: ignore
                        modules_imported = True
                        logger.info("create_user: –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ (backend)")
                    except ImportError:
                        modules_imported = False
                        ReferralController = None  # type: ignore
                        BonusController = None  # type: ignore

                # –Ø–∫—â–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
                if modules_imported and ReferralController and BonusController:
                    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫
                    referral_result = ReferralController.register_referral(
                        referrer_id=referrer_id,
                        referee_id=telegram_id
                    )

                    if referral_result.get('success', False):
                        logger.info(f"create_user: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")

                        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π –±–æ–Ω—É—Å
                        bonus_result = BonusController.award_direct_bonus(
                            referrer_id=referrer_id,
                            referee_id=telegram_id,
                            amount=50
                        )

                        if bonus_result.get('success', False):
                            logger.info(f"create_user: –ü—Ä—è–º–∏–π –±–æ–Ω—É—Å —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ")

                            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                            referrer_user = get_user(referrer_id)
                            if referrer_user and supabase:
                                current_balance = float(referrer_user.get('balance', 0))
                                new_balance = current_balance + 50

                                supabase.table("winix").update({
                                    "balance": new_balance,
                                    "updated_at": datetime.now(timezone.utc).isoformat()
                                }).eq("telegram_id", referrer_id).execute()  # type: ignore

                                logger.info(
                                    f"create_user: –ë–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id} –æ–Ω–æ–≤–ª–µ–Ω–æ: {current_balance} -> {new_balance}")

                                # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                                invalidate_cache_for_entity(referrer_id)
                        else:
                            logger.warning(f"create_user: –ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—É: {bonus_result}")
                    else:
                        logger.warning(f"create_user: –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É: {referral_result}")
                else:
                    # –Ø–∫—â–æ —ñ–º–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Å
                    logger.warning("create_user: –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏")
                    logger.info("create_user: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
                    create_referral_records_directly(referrer_id, telegram_id)

            except Exception as e:
                logger.error(f"create_user: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É: {str(e)}", exc_info=True)
                # –°–ø—Ä–æ–±–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Å—É —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                try:
                    logger.info("create_user: –°–ø—Ä–æ–±–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏")
                    create_referral_records_directly(referrer_id, telegram_id)
                except Exception as direct_error:
                    logger.error(f"create_user: –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {str(direct_error)}")

        return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}", exc_info=True)
        return None

# ===== üî• STAKING FUNCTIONS (–ù–û–í–ò–ô –†–û–ó–î–Ü–õ) =====

logger.info("üéØ === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø STAKING FUNCTIONS ===")

@safe_supabase_call("get_staking_session")
@cached()
def get_staking_session(session_id: str) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –û—Ç—Ä–∏–º—É—î –æ–¥–Ω—É —Å–µ—Å—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑–∞ —ó—ó ID

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º!

    Args:
        session_id: ID —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Returns:
        –î–∞–Ω—ñ —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        logger.info(f"get_staking_session: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó {session_id}")

        def fetch_session():
            if not supabase:
                return None
            res = supabase.table("staking_sessions").select("*").eq("id", session_id).execute()  # type: ignore
            return res.data[0] if res.data else None

        return retry_supabase(fetch_session)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É {session_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("update_staking_session")
def update_staking_session(session_id: str, update_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Args:
        session_id: ID —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        update_data: –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    Returns:
        –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        logger.info(f"update_staking_session: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó {session_id}")

        # –î–æ–¥–∞—î–º–æ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update_data["updated_at"] = datetime.now(timezone.utc).isoformat()

        def update_session():
            if not supabase:
                return None
            res = supabase.table("staking_sessions").update(update_data).eq("id", session_id).execute()  # type: ignore
            return res.data[0] if res.data else None

        result = retry_supabase(update_session)

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
        invalidate_cache_for_entity(session_id)

        return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É {session_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("complete_staking_session")
def complete_staking_session(session_id: str, final_amount: float, cancelled_early: bool = False) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ó–∞–≤–µ—Ä—à—É—î —Å–µ—Å—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Args:
        session_id: ID —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        final_amount: –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏
        cancelled_early: –ß–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ

    Returns:
        –î–∞–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ—ó —Å–µ—Å—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        logger.info(f"complete_staking_session: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó {session_id}")

        current_time = datetime.now(timezone.utc).isoformat()
        update_data = {
            "is_active": False,
            "cancelled_early": cancelled_early,
            "final_amount_paid": final_amount,
            "completed_at": current_time,
            "updated_at": current_time
        }

        return update_staking_session(session_id, update_data)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É {session_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("delete_staking_session")
def delete_staking_session(session_id: str) -> bool:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –í–∏–¥–∞–ª—è—î —Å–µ—Å—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Args:
        session_id: ID —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ, False —ñ–Ω–∞–∫—à–µ
    """
    try:
        logger.info(f"delete_staking_session: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó {session_id}")

        def delete_session():
            if not supabase:
                return False
            res = supabase.table("staking_sessions").delete().eq("id", session_id).execute()  # type: ignore
            return bool(res.data)

        result = retry_supabase(delete_session)

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
        invalidate_cache_for_entity(session_id)

        return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É {session_id}: {str(e)}", exc_info=True)
        return False

@safe_supabase_call("create_staking_session")
def create_staking_session(user_id: str, amount_staked: float, staking_days: int, reward_percent: float) -> Optional[Dict[str, Any]]:
    """
    üî• –ö–†–ò–¢–ò–ß–ù–ê –§–£–ù–ö–¶–Ü–Ø: –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        amount_staked: –°—É–º–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        staking_days: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        reward_percent: –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏

    Returns:
        –î–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó —Å–µ—Å—ñ—ó –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    """
    try:
        logger.info(f"create_staking_session: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è {user_id}, —Å—É–º–∞: {amount_staked}")

        current_time = datetime.now(timezone.utc)
        end_time = current_time + timedelta(days=staking_days)

        session_data = {
            "id": str(uuid.uuid4()),
            "user_id": user_id,
            "telegram_id": user_id,  # –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            "amount_staked": amount_staked,
            "staking_days": staking_days,
            "reward_percent": reward_percent,
            "is_active": True,
            "cancelled_early": False,
            "started_at": current_time.isoformat(),
            "ends_at": end_time.isoformat(),
            "created_at": current_time.isoformat(),
            "updated_at": current_time.isoformat()
        }

        def create_session():
            if not supabase:
                return None
            res = supabase.table("staking_sessions").insert(session_data).execute()  # type: ignore
            return res.data[0] if res.data else None

        return retry_supabase(create_session)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É {user_id}: {str(e)}", exc_info=True)
        return None

@safe_supabase_call("verify_staking_consistency")
def verify_staking_consistency(telegram_id: str) -> bool:
    """
    üî• –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        True —è–∫—â–æ –¥–∞–Ω—ñ —Ü—ñ–ª—ñ—Å–Ω—ñ, False —ñ–Ω–∞–∫—à–µ
    """
    try:
        logger.info(f"verify_staking_consistency: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–ª—è {telegram_id}")
        # –ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ True
        # –ú–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ª–æ–≥—ñ–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ —Å—Ç–µ–π–∫—ñ–Ω–≥—É {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("get_all_active_staking_sessions")
@cached()
def get_all_active_staking_sessions() -> List[Dict[str, Any]]:
    """
    üî• –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø: –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Returns:
        –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É
    """
    try:
        logger.info("get_all_active_staking_sessions: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π")

        def fetch_active_sessions():
            if not supabase:
                return []
            res = supabase.table("staking_sessions").select("*").eq("is_active", True).execute()  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_active_sessions)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {str(e)}")
        return []

@safe_supabase_call("check_and_complete_expired_staking_sessions")
def check_and_complete_expired_staking_sessions() -> int:
    """
    üî• –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É

    Returns:
        –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Å–µ—Å—ñ–π
    """
    try:
        logger.info("check_and_complete_expired_staking_sessions: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Å–µ—Å—ñ–π")

        current_time = datetime.now(timezone.utc)
        active_sessions = get_all_active_staking_sessions()
        completed_count = 0

        for session in active_sessions:
            try:
                # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                ends_at_str = session.get("ends_at")
                if not ends_at_str:
                    continue

                ends_at = datetime.fromisoformat(ends_at_str.replace('Z', '+00:00')) if ends_at_str.endswith('Z') else datetime.fromisoformat(ends_at_str)

                # –Ø–∫—â–æ —Å–µ—Å—ñ—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞, –∑–∞–≤–µ—Ä—à—É—î–º–æ —ó—ó
                if current_time >= ends_at:
                    amount_staked = float(session.get("amount_staked", 0))
                    reward_percent = float(session.get("reward_percent", 0))
                    total_amount = amount_staked + (amount_staked * reward_percent / 100)

                    if complete_staking_session(session["id"], total_amount, False):
                        completed_count += 1
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—É —Å–µ—Å—ñ—é {session['id']}")

            except Exception as session_error:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–µ—Å—ñ—ó {session.get('id')}: {str(session_error)}")

        logger.info(f"check_and_complete_expired_staking_sessions: –ó–∞–≤–µ—Ä—à–µ–Ω–æ {completed_count} —Å–µ—Å—ñ–π")
        return completed_count
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Å–µ—Å—ñ–π: {str(e)}")
        return 0

# ===== LEGACY –§–£–ù–ö–¶–Ü–á (–í–ò–ü–†–ê–í–õ–ï–ù–Ü) =====

@safe_supabase_call("get_user_staking_sessions")
@cached()
def get_user_staking_sessions(telegram_id: Union[str, int], active_only: bool = True) -> Optional[List[Dict[str, Any]]]:
    """
    üî• LEGACY –§–£–ù–ö–¶–Ü–Ø: –û—Ç—Ä–∏–º—É—î —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Supabase

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–µ–π–∫—ñ–Ω–≥–æ–º!

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        active_only: –ß–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º True)

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∞–±–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫
    """
    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –≤ —Ä—è–¥–æ–∫
        telegram_id = str(telegram_id)

        logger.info(f"get_user_staking_sessions: –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è {telegram_id} (active_only={active_only})")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
        def fetch_sessions():
            if not supabase:
                return []

            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç
            query = supabase.table("staking_sessions").select("*")

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ telegram_id (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–∏–¥–≤–∞ –ø–æ–ª—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
            query = query.or_(f"telegram_id.eq.{telegram_id},user_id.eq.{telegram_id}")

            # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó
            if active_only:
                query = query.eq("is_active", True)

            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é –ø–æ—á–∞—Ç–∫—É (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
            query = query.order("started_at", desc=True)

            res = query.execute()  # type: ignore

            if not res.data:
                logger.info(f"get_user_staking_sessions: –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É (active_only={active_only})")
                return []

            logger.info(f"get_user_staking_sessions: –ó–Ω–∞–π–¥–µ–Ω–æ {len(res.data)} —Å–µ—Å—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è {telegram_id} (active_only={active_only})")
            return res.data if res.data else []

        return retry_supabase(fetch_sessions)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ–π —Å—Ç–µ–π–∫—ñ–Ω–≥—É –¥–ª—è {telegram_id}: {str(e)}", exc_info=True)
        return []

def check_and_update_badges(user_id: Union[str, int], context=None):
    """
    üî• LEGACY –§–£–ù–ö–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–µ–π–¥–∂–∞–º–∏!
    """
    try:
        try:
            from badges.badge_service import award_badges  # type: ignore
            return award_badges(user_id, context)
        except ImportError:
            try:
                from backend.badges.badge_service import award_badges  # type: ignore
                return award_badges(user_id, context)
            except ImportError:
                pass

        # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - –≤–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ID –≤ —Ä—è–¥–æ–∫
        user_id = str(user_id)

        user = get_user(user_id)
        if not user:
            logger.warning(f"check_and_update_badges: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None

        updates = {}

        # –ë–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è - –∑–∞ 5 —É—á–∞—Å—Ç–µ–π –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
        if not user.get("badge_beginner", False) and user.get("participations_count", 0) >= 5:
            updates["badge_beginner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è")

        # –ë–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è - –∑–∞ 50,000 WINIX
        if not user.get("badge_rich", False) and float(user.get("balance", 0)) >= 50000:
            updates["badge_rich"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –±–∞–≥–∞—Ç—ñ—è")

        # –ë–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è - —è–∫—â–æ —î –≤–∏–≥—Ä–∞—à—ñ
        if not user.get("badge_winner", False) and user.get("wins_count", 0) > 0:
            updates["badge_winner"] = True
            logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º—É—î –±–µ–π–¥–∂ –ø–µ—Ä–µ–º–æ–∂—Ü—è")

        # –Ø–∫—â–æ —î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö
        if updates:
            updates["updated_at"] = datetime.now(timezone.utc).isoformat()
            logger.info(f"check_and_update_badges: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {updates}")
            return update_user(user_id, updates)

        return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–π–¥–∂—ñ–≤ {user_id}: {str(e)}", exc_info=True)
        return None

def test_supabase_connection() -> Dict[str, Any]:
    """
    üî• LEGACY –§–£–ù–ö–¶–Ü–Ø: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase

    ‚ö†Ô∏è –ù–ï –ó–ú–Ü–ù–Æ–í–ê–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ main.py!
    """
    try:
        if not supabase:
            return {
                "status": "error",
                "message": "–ö–ª—ñ—î–Ω—Ç Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
            }

        # –°–ø—Ä–æ–±–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø–∏—Ç—É
        res = supabase.table("winix").select("telegram_id").limit(1).execute()  # type: ignore

        return {
            "status": "success",
            "message": "–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase –ø—Ä–∞—Ü—é—î",
            "data_available": len(res.data) > 0 if res.data else False
        }
    except Exception as e:
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}"
        }

# ===== üî• WINIX QUESTS INTEGRATION - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –§–£–ù–ö–¶–Ü–á =====

logger.info("üéØ === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø WINIX QUESTS –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á (FIXED) ===")

# üìä Analytics Functions
@safe_supabase_call("get_user_analytics")
@cached()
def get_user_analytics(telegram_id: Union[str, int]) -> Optional[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"get_user_analytics: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –¥–ª—è {telegram_id}")

        def fetch_analytics():
            if not supabase:
                return None
            res = supabase.table("user_analytics_stats").select("*").eq("user_id", telegram_id).execute()  # type: ignore
            return res.data[0] if res.data else None

        return retry_supabase(fetch_analytics)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ {telegram_id}: {str(e)}")
        return None

@safe_supabase_call("create_analytics_event")
def create_analytics_event(telegram_id: Union[str, int], event_type: str, event_data: Dict[str, Any]) -> bool:
    """
    üéØ WINIX: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    """
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π session_id —è–∫—â–æ –Ω–µ–º–∞—î
        session_id = event_data.get('session_id', str(uuid.uuid4()))

        event_record = {
            "user_id": str(telegram_id),
            "session_id": session_id,
            "event_type": event_type,
            "category": event_data.get('category', 'User'),
            "action": event_data.get('action', event_type),
            "label": event_data.get('label'),
            "value": event_data.get('value'),
            "properties": event_data,
            "severity": event_data.get('severity', 'normal'),
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "ip_address": event_data.get('ip', ''),
            "user_agent": event_data.get('user_agent', '')[:100] if event_data.get('user_agent') else ''
        }

        if supabase:
            res = supabase.table("analytics_events").insert(event_record).execute()  # type: ignore
            logger.info(f"create_analytics_event: –ü–æ–¥—ñ—è {event_type} —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è {telegram_id}")
            return bool(res.data)
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {str(e)}")
        return False

@safe_supabase_call("update_user_analytics_stats")
def update_user_analytics_stats(telegram_id: Union[str, int], stats_update: Dict[str, Any]) -> bool:
    """
    üéØ WINIX: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    try:
        telegram_id = str(telegram_id)
        current_time = datetime.now(timezone.utc).isoformat()

        # –î–æ–¥–∞—î–º–æ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        stats_update["last_active"] = current_time

        if not supabase:
            return False

        # –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
        res = supabase.table("user_analytics_stats").update(stats_update).eq("user_id", telegram_id).execute()  # type: ignore

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        if not res.data:
            stats_update.update({
                "user_id": telegram_id,
                "first_seen": current_time,
                "last_seen": current_time
            })
            res = supabase.table("user_analytics_stats").insert(stats_update).execute()  # type: ignore

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
        invalidate_cache_for_entity(telegram_id)

        logger.info(f"update_user_analytics_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {telegram_id}")
        return bool(res.data)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {telegram_id}: {str(e)}")
        return False

# üí∞ Daily Bonus Functions
@safe_supabase_call("get_user_daily_status")
@cached(timeout=60)  # –ö–µ—à—É—î–º–æ –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É
def get_user_daily_status(telegram_id: Union[str, int]) -> Optional[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"get_user_daily_status: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è {telegram_id}")

        def fetch_daily_status():
            if not supabase:
                return None
            res = supabase.table("daily_bonus_status").select("*").eq("user_id", telegram_id).execute()  # type: ignore
            return res.data[0] if res.data else None

        return retry_supabase(fetch_daily_status)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É {telegram_id}: {str(e)}")
        return None

@safe_supabase_call("update_daily_bonus_status")
def update_daily_bonus_status(telegram_id: Union[str, int], data: Dict[str, Any]) -> bool:
    """
    üéØ WINIX: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
    """
    try:
        telegram_id = str(telegram_id)
        current_time = datetime.now(timezone.utc).isoformat()
        data["updated_at"] = current_time

        if not supabase:
            return False

        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏
        res = supabase.table("daily_bonus_status").update(data).eq("user_id", telegram_id).execute()  # type: ignore

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        if not res.data:
            data["user_id"] = telegram_id
            data["created_at"] = current_time
            res = supabase.table("daily_bonus_status").insert(data).execute()  # type: ignore

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
        invalidate_cache_for_entity(telegram_id)

        logger.info(f"update_daily_bonus_status: –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
        return bool(res.data)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("create_daily_bonus_entry")
def create_daily_bonus_entry(telegram_id: Union[str, int], day_number: int, reward_winix: int, reward_tickets: int, streak: int) -> bool:
    """
    üéØ WINIX: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
    """
    try:
        current_time = datetime.now(timezone.utc)

        entry_data = {
            "user_id": str(telegram_id),
            "day_number": day_number,
            "claim_date": current_time.date().isoformat(),
            "reward_winix": reward_winix,
            "reward_tickets": reward_tickets,
            "streak_at_claim": streak,
            "is_special_day": day_number % 7 == 0,  # –ö–∞–∂–¥—ã–π 7-–π –¥–µ–Ω—å –æ—Å–æ–±—ã–π
            "multiplier_applied": 2.0 if day_number % 7 == 0 else 1.0
        }

        if supabase:
            res = supabase.table("daily_bonus_entries").insert(entry_data).execute()  # type: ignore
            logger.info(f"create_daily_bonus_entry: –ó–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {telegram_id}, –¥–µ–Ω—å {day_number}")
            return bool(res.data)
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("get_user_daily_entries")
def get_user_daily_entries(telegram_id: Union[str, int], limit: int = 30) -> List[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
    """
    try:
        telegram_id = str(telegram_id)

        def fetch_entries():
            if not supabase:
                return []
            res = (supabase.table("daily_bonus_entries")
                   .select("*")
                   .eq("user_id", telegram_id)
                   .order("claim_date", desc=True)
                   .limit(limit)
                   .execute())  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_entries)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤ {telegram_id}: {str(e)}")
        return []

# üíé FLEX Functions
@safe_supabase_call("get_user_flex_balance")
@cached()
def get_user_flex_balance(telegram_id: Union[str, int]) -> Optional[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"get_user_flex_balance: –û—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É –¥–ª—è {telegram_id}")

        def fetch_flex_balance():
            if not supabase:
                return None
            res = supabase.table("flex_balances").select("*").eq("telegram_id", telegram_id).execute()  # type: ignore
            return res.data[0] if res.data else None

        return retry_supabase(fetch_flex_balance)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É {telegram_id}: {str(e)}")
        return None

@safe_supabase_call("update_flex_balance")
def update_flex_balance(telegram_id: Union[str, int], flex_balance: int, wallet_address: Optional[str] = None) -> bool:
    """
    üéØ WINIX: –û–Ω–æ–≤–ª–µ–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É
    """
    try:
        telegram_id = str(telegram_id)
        current_time = datetime.now(timezone.utc).isoformat()

        balance_data = {
            "flex_balance": flex_balance,
            "last_updated": current_time
        }

        if wallet_address:
            balance_data["wallet_address"] = wallet_address

        if not supabase:
            return False

        # –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
        res = supabase.table("flex_balances").update(balance_data).eq("telegram_id", telegram_id).execute()  # type: ignore

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        if not res.data:
            balance_data.update({
                "telegram_id": telegram_id,
                "created_at": current_time
            })
            res = supabase.table("flex_balances").insert(balance_data).execute()  # type: ignore

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
        invalidate_cache_for_entity(telegram_id)

        logger.info(f"update_flex_balance: FLEX –±–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}: {flex_balance}")
        return bool(res.data)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("create_flex_claim")
def create_flex_claim(telegram_id: Union[str, int], level: str, flex_balance: int, winix_awarded: int, tickets_awarded: int) -> bool:
    """
    üéØ WINIX: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
    """
    try:
        claim_data = {
            "telegram_id": str(telegram_id),
            "level": level,
            "flex_balance_at_claim": flex_balance,
            "winix_awarded": winix_awarded,
            "tickets_awarded": tickets_awarded,
            "claimed_at": datetime.now(timezone.utc).isoformat()
        }

        if supabase:
            res = supabase.table("flex_claims").insert(claim_data).execute()  # type: ignore
            logger.info(f"create_flex_claim: FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ {level} —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è {telegram_id}")
            return bool(res.data)
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("get_user_flex_claims")
def get_user_flex_claims(telegram_id: Union[str, int]) -> List[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
    """
    try:
        telegram_id = str(telegram_id)

        def fetch_flex_claims():
            if not supabase:
                return []
            res = (supabase.table("flex_claims")
                   .select("*")
                   .eq("telegram_id", telegram_id)
                   .order("claimed_at", desc=True)
                   .execute())  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_flex_claims)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX —ñ—Å—Ç–æ—Ä—ñ—ó {telegram_id}: {str(e)}")
        return []

@safe_supabase_call("get_flex_levels")
@cached()
def get_flex_levels() -> List[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤ FLEX
    """
    try:
        def fetch_levels():
            if not supabase:
                return []
            res = supabase.table("flex_levels").select("*").order("required_flex").execute()  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_levels)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX —Ä—ñ–≤–Ω—ñ–≤: {str(e)}")
        return []

# üéÆ Tasks Functions
@safe_supabase_call("get_user_tasks_progress")
@cached()
def get_user_tasks_progress(telegram_id: Union[str, int]) -> List[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"get_user_tasks_progress: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {telegram_id}")

        def fetch_tasks_progress():
            if not supabase:
                return []
            res = supabase.table("task_progress").select("*").eq("user_id", telegram_id).execute()  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_tasks_progress)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω—å {telegram_id}: {str(e)}")
        return []

@safe_supabase_call("update_task_progress")
def update_task_progress(telegram_id: Union[str, int], task_id: str, status: str, task_data: Optional[Dict] = None, result: Optional[Dict] = None) -> bool:
    """
    üéØ WINIX: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
    """
    try:
        telegram_id = str(telegram_id)
        current_time = datetime.now(timezone.utc).isoformat()

        progress_data = {
            "status": status,
            "updated_at": current_time
        }

        if task_data:
            progress_data["task_data"] = task_data

        if result:
            progress_data["result"] = result

        if status == "completed":
            progress_data["completed_at"] = current_time

        if not supabase:
            return False
               # –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
        res = supabase.table("task_progress").update(progress_data).eq("user_id", telegram_id).eq("task_id", task_id).execute()  # type: ignore

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        if not res.data:
            progress_data.update({
                "user_id": telegram_id,
                "task_id": task_id,
                "task_type": task_data.get("type", "unknown") if task_data else "unknown",
                "created_at": current_time
            })
            res = supabase.table("task_progress").insert(progress_data).execute()  # type: ignore

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
        invalidate_cache_for_entity(telegram_id)

        logger.info(f"update_task_progress: –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
        return bool(res.data)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("create_completed_task")
def create_completed_task(telegram_id: Union[str, int], task_id: str, task_type: str, reward: Dict[str, Any]) -> bool:
    """
    üéØ WINIX: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    """
    try:
        completion_data = {
            "user_id": str(telegram_id),
            "task_id": task_id,
            "task_type": task_type,
            "reward": reward,
            "completed_at": datetime.now(timezone.utc).isoformat()
        }

        if supabase:
            res = supabase.table("completed_tasks").insert(completion_data).execute()  # type: ignore
            logger.info(f"create_completed_task: –ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ –¥–ª—è {telegram_id}")
            return bool(res.data)
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("get_completed_tasks")
def get_completed_tasks(telegram_id: Union[str, int]) -> List[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    """
    try:
        telegram_id = str(telegram_id)

        def fetch_completed():
            if not supabase:
                return []
            res = (supabase.table("completed_tasks")
                   .select("*")
                   .eq("user_id", telegram_id)
                   .order("completed_at", desc=True)
                   .execute())  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_completed)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å {telegram_id}: {str(e)}")
        return []

# üí≥ Enhanced Transaction Functions
@safe_supabase_call("create_winix_transaction")
def create_winix_transaction(telegram_id: Union[str, int], transaction_type: str, amount_winix: float = 0,
                           amount_tickets: int = 0, amount_flex: int = 0, description: str = "",
                           metadata: Optional[Dict] = None, reference_id: Optional[str] = None,
                           reference_type: Optional[str] = None) -> bool:
    """
    üéØ WINIX: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó WINIX —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    """
    try:
        telegram_id = str(telegram_id)
        current_time = datetime.now(timezone.utc).isoformat()

        transaction_data = {
            "id": str(uuid.uuid4()),
            "telegram_id": telegram_id,
            "type": transaction_type,
            "amount_winix": amount_winix,
            "amount_tickets": amount_tickets,
            "amount_flex": amount_flex,
            "description": description,
            "metadata": metadata or {},
            "reference_id": reference_id,
            "reference_type": reference_type,
            "status": "completed",
            "created_at": current_time,
            "updated_at": current_time
        }

        if supabase:
            res = supabase.table("transactions").insert(transaction_data).execute()  # type: ignore
            logger.info(f"create_winix_transaction: –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {transaction_type} —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è {telegram_id}")
            return bool(res.data)
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WINIX —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("get_user_transaction_history")
@cached()
def get_user_transaction_history(telegram_id: Union[str, int], limit: int = 50) -> List[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó WINIX —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"get_user_transaction_history: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è {telegram_id}")

        def fetch_transactions():
            if not supabase:
                return []
            res = (supabase.table("transactions")
                   .select("*")
                   .eq("telegram_id", telegram_id)
                   .order("created_at", desc=True)
                   .limit(limit)
                   .execute())  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_transactions)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π {telegram_id}: {str(e)}")
        return []

# üëõ Wallet Functions
@safe_supabase_call("get_user_wallet_info")
@cached()
def get_user_wallet_info(telegram_id: Union[str, int]) -> Optional[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–∞–º–∞–Ω–µ—Ü—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"get_user_wallet_info: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è {telegram_id}")

        def fetch_wallet_info():
            if not supabase:
                return None
            res = supabase.table("wallets").select("*").eq("telegram_id", telegram_id).execute()  # type: ignore
            return res.data[0] if res.data else None

        return retry_supabase(fetch_wallet_info)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–∞–º–∞–Ω–µ—Ü—å {telegram_id}: {str(e)}")
        return None

@safe_supabase_call("update_wallet_connection")
def update_wallet_connection(telegram_id: Union[str, int], address: str, provider: str = "tonconnect",
                           chain_id: str = "-239", public_key: Optional[str] = None,
                           verification_data: Optional[Dict] = None) -> bool:
    """
    üéØ WINIX: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –≥–∞–º–∞–Ω—Ü–µ–º
    """
    try:
        telegram_id = str(telegram_id)
        current_time = datetime.now(timezone.utc).isoformat()

        wallet_data = {
            "address": address,
            "provider": provider,
            "chain_id": chain_id,
            "status": "connected",
            "connected_at": current_time,
            "updated_at": current_time
        }

        if public_key:
            wallet_data["public_key"] = public_key

        if verification_data:
            wallet_data["verification_data"] = verification_data

        if not supabase:
            return False

        # –°–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
        res = supabase.table("wallets").update(wallet_data).eq("telegram_id", telegram_id).execute()  # type: ignore

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        if not res.data:
            wallet_data.update({
                "telegram_id": telegram_id,
                "created_at": current_time
            })
            res = supabase.table("wallets").insert(wallet_data).execute()  # type: ignore

        # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
        invalidate_cache_for_entity(telegram_id)

        logger.info(f"update_wallet_connection: –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è {telegram_id}")
        return bool(res.data)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("create_wallet_event")
def create_wallet_event(telegram_id: Union[str, int], event_type: str, event_data: Dict[str, Any]) -> bool:
    """
    üéØ WINIX: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó –≥–∞–º–∞–Ω—Ü—è
    """
    try:
        event_record = {
            "telegram_id": str(telegram_id),
            "event_type": event_type,
            "event_data": event_data,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }

        if supabase:
            res = supabase.table("wallet_events").insert(event_record).execute()  # type: ignore
            logger.info(f"create_wallet_event: –ü–æ–¥—ñ—è –≥–∞–º–∞–Ω—Ü—è {event_type} —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è {telegram_id}")
            return bool(res.data)
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó –≥–∞–º–∞–Ω—Ü—è {telegram_id}: {str(e)}")
        return False

@safe_supabase_call("get_wallet_events")
def get_wallet_events(telegram_id: Union[str, int]) -> List[Dict[str, Any]]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π –≥–∞–º–∞–Ω—Ü—è
    """
    try:
        telegram_id = str(telegram_id)

        def fetch_events():
            if not supabase:
                return []
            res = (supabase.table("wallet_events")
                   .select("*")
                   .eq("telegram_id", telegram_id)
                   .order("timestamp", desc=True)
                   .limit(50)
                   .execute())  # type: ignore
            return res.data if res.data else []

        return retry_supabase(fetch_events)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π –≥–∞–º–∞–Ω—Ü—è {telegram_id}: {str(e)}")
        return []

@safe_supabase_call("create_wallet_connection_bonus")
def create_wallet_connection_bonus(telegram_id: Union[str, int], winix_amount: int, tickets_amount: int, description: str = "") -> bool:
    """
    üéØ WINIX: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ–Ω—É—Å—É –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
    """
    try:
        bonus_data = {
            "telegram_id": str(telegram_id),
            "winix_amount": winix_amount,
            "tickets_amount": tickets_amount,
            "description": description or "–ë–æ–Ω—É—Å –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è",
            "awarded_at": datetime.now(timezone.utc).isoformat()
        }

        if supabase:
            res = supabase.table("wallet_connection_bonuses").insert(bonus_data).execute()  # type: ignore
            logger.info(f"create_wallet_connection_bonus: –ë–æ–Ω—É—Å –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {telegram_id}")
            return bool(res.data)
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ–Ω—É—Å—É –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è {telegram_id}: {str(e)}")
        return False

# ===== WINIX INTEGRATION HELPERS =====

def ensure_winix_user_exists(telegram_id: Union[str, int], user_data: Optional[Dict] = None) -> bool:
    """
    üéØ WINIX: –ü–µ—Ä–µ–∫–æ–Ω—É—î—Ç—å—Å—è —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î –≤ —É—Å—ñ—Ö WINIX —Ç–∞–±–ª–∏—Ü—è—Ö
    """
    try:
        telegram_id = str(telegram_id)

        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        user = get_user(telegram_id)
        if not user:
            username = user_data.get("username", "WINIX User") if user_data else "WINIX User"
            user = create_user(telegram_id, username)
            if not user:
                return False

        current_time = datetime.now(timezone.utc).isoformat()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å–∏ –≤ WINIX —Ç–∞–±–ª–∏—Ü—è—Ö —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        tables_to_check = [
            ("user_analytics_stats", {
                "user_id": telegram_id,
                "total_events": 0,
                "first_seen": current_time,
                "last_seen": current_time
            }),
            ("daily_bonus_status", {
                "user_id": telegram_id,
                "current_day_number": 1,
                "current_streak": 0,
                "longest_streak": 0,
                "total_days_claimed": 0
            }),
            ("flex_balances", {
                "telegram_id": telegram_id,
                "flex_balance": 0,
                "last_updated": current_time
            }),
        ]

        for table_name, default_data in tables_to_check:
            try:
                if not supabase:
                    continue

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å
                id_field = "user_id" if table_name in ["user_analytics_stats", "daily_bonus_status"] else "telegram_id"
                existing = supabase.table(table_name).select(id_field).eq(id_field, telegram_id).execute()  # type: ignore

                if not existing.data:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å
                    default_data.update({
                        "created_at": current_time,
                        "updated_at": current_time
                    })
                    supabase.table(table_name).insert(default_data).execute()  # type: ignore
                    logger.info(f"ensure_winix_user_exists: –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–ø–∏—Å –≤ {table_name} –¥–ª—è {telegram_id}")
            except Exception as e:
                logger.warning(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ {table_name}: {str(e)}")

        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ensure_winix_user_exists {telegram_id}: {str(e)}")
        return False

def get_winix_user_summary(telegram_id: Union[str, int]) -> Dict[str, Any]:
    """
    üéØ WINIX: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –∑–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ WINIX
    """
    try:
        telegram_id = str(telegram_id)

        # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        user = get_user(telegram_id)
        analytics = get_user_analytics(telegram_id)
        daily_status = get_user_daily_status(telegram_id)
        flex_balance = get_user_flex_balance(telegram_id)
        flex_claims = get_user_flex_claims(telegram_id)
        wallet_info = get_user_wallet_info(telegram_id)
        recent_transactions = get_user_transaction_history(telegram_id, limit=10)
        tasks_progress = get_user_tasks_progress(telegram_id)
        completed_tasks_list = get_completed_tasks(telegram_id)

        return {
            "user": user,
            "analytics": analytics,
            "daily_bonus": {
                "status": daily_status,
                "recent_entries": get_user_daily_entries(telegram_id, 7)
            },
            "flex": {
                "balance": flex_balance,
                "claims": flex_claims,
                "levels": get_flex_levels()
            },
            "wallet": {
                "info": wallet_info,
                "events": get_wallet_events(telegram_id)
            },
            "tasks": {
                "progress": tasks_progress,
                "completed": completed_tasks_list
            },
            "recent_transactions": recent_transactions,
            "summary_generated_at": datetime.now(timezone.utc).isoformat()
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ get_winix_user_summary {telegram_id}: {str(e)}")
        return {}

# ===== WINIX CACHE MANAGEMENT =====

def clear_winix_cache(telegram_id: Optional[Union[str, int]] = None):
    """
    üéØ WINIX: –û—á–∏—â–µ–Ω–Ω—è WINIX –∫–µ—à—É
    """
    try:
        if telegram_id:
            telegram_id = str(telegram_id)
            # –û—á–∏—â—É—î–º–æ –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            patterns = [
                f"get_user_analytics:{telegram_id}",
                f"get_user_daily_status:{telegram_id}",
                f"get_user_flex_balance:{telegram_id}",
                f"get_user_wallet_info:{telegram_id}",
                f"get_user_transaction_history:{telegram_id}",
                f"get_user_tasks_progress:{telegram_id}"
            ]

            total_cleared = 0
            for pattern in patterns:
                total_cleared += clear_cache(pattern)

            logger.info(f"clear_winix_cache: –û—á–∏—â–µ–Ω–æ {total_cleared} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {telegram_id}")
            return total_cleared
        else:
            # –û—á–∏—â—É—î–º–æ –≤–µ—Å—å WINIX –∫–µ—à
            winix_patterns = [
                "get_user_analytics",
                "get_user_daily_status",
                "get_user_flex_balance",
                "get_user_wallet_info",
                "get_user_transaction_history",
                "get_user_tasks_progress",
                "get_flex_levels"
            ]

            total_cleared = 0
            for pattern in winix_patterns:
                total_cleared += clear_cache(pattern)

            logger.info(f"clear_winix_cache: –û—á–∏—â–µ–Ω–æ {total_cleared} WINIX –∑–∞–ø–∏—Å—ñ–≤")
            return total_cleared
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ clear_winix_cache: {str(e)}")
        return 0

# ===== WINIX TESTING AND MONITORING =====

def test_winix_integration() -> Dict[str, Any]:
    """
    üéØ WINIX: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WINIX —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Supabase
    """
    try:
        if not supabase:
            return {"status": "error", "message": "Supabase –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"}

        test_results = {}

        # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å
        tables_to_test = [
            "winix", "user_analytics_stats", "daily_bonus_status", "daily_bonus_entries",
            "flex_balances", "flex_claims", "flex_levels", "transactions",
            "wallets", "wallet_events", "wallet_connection_bonuses",
            "task_progress", "completed_tasks", "analytics_events", "analytics_sessions",
            "staking_sessions"  # ‚úÖ –î–û–î–ê–ù–û –¢–ê–ë–õ–ò–¶–Ø –°–¢–ï–ô–ö–Ü–ù–ì–£
        ]

        for table in tables_to_test:
            try:
                res = supabase.table(table).select("*").limit(1).execute()  # type: ignore
                test_results[f"table_{table}"] = {
                    "status": "ok",
                    "accessible": True
                }
            except Exception as e:
                test_results[f"table_{table}"] = {
                    "status": "error",
                    "accessible": False,
                    "error": str(e)
                }

        # –¢–µ—Å—Ç—É—î–º–æ –∫–µ—à
        test_results["cache"] = {
            "enabled": CACHE_ENABLED,
            "entries": len(_cache),
            "stats": cache_stats.get_stats()
        }

        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
        accessible_tables = sum(1 for result in test_results.values()
                              if isinstance(result, dict) and result.get("accessible", False))
        total_tables = len(tables_to_test)

        return {
            "status": "success",
            "message": "WINIX —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞",
            "summary": f"–î–æ—Å—Ç—É–ø–Ω–æ {accessible_tables}/{total_tables} —Ç–∞–±–ª–∏—Ü—å",
            "results": test_results,
            "tested_at": datetime.now(timezone.utc).isoformat()
        }

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ test_winix_integration: {str(e)}")
        return {
            "status": "error",
            "message": str(e)
        }

# ===== –§–Ü–ù–ê–õ–¨–ù–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø =====

# –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –≤—ñ–¥ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
cleanup_cache()

logger.info("üéØ WINIX Quests + Staking —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤ Supabase –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
logger.info(f"üìä –ö–µ—à: {cache_stats.entries} –∑–∞–ø–∏—Å—ñ–≤, —Å—Ç–∞—Ç—É—Å: {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if CACHE_ENABLED else '–≤–∏–º–∫–Ω–µ–Ω–æ'}")
logger.info(f"üîó Supabase: {'–ø—ñ–¥–∫–ª—é—á–µ–Ω–æ' if supabase else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}")
logger.info("üöÄ Supabase Client –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ WINIX Quests + Staking System!")
logger.info("‚úÖ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–ª—è –ø–æ–≤–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –Ω–æ–≤–æ—é —Å—Ö–µ–º–æ—é –ë–î")
logger.info("üíé STAKING FUNCTIONS: –î–æ–¥–∞–Ω–æ –ø–æ–≤–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É!")
logger.info("üîß –í—Å—ñ IDE –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ!")

# Type ignore –¥–ª—è PyCharm IDE –ø–æ–º–∏–ª–æ–∫
# noinspection PyUnresolvedReferences
def _supabase_type_hints_helper():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ PyCharm –∑ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—î—é Supabase"""
    if supabase:
        # –¶–µ –¥–æ–ø–æ–º–æ–∂–µ IDE —Ä–æ–∑—É–º—ñ—Ç–∏ –º–µ—Ç–æ–¥–∏
        supabase.table("test").select("*").execute()  # type: ignore
        supabase.table("test").insert({}).execute()  # type: ignore
        supabase.table("test").update({}).execute()  # type: ignore
        supabase.table("test").delete().execute()  # type: ignore