#!/usr/bin/env python3
"""
üîç Production Redis Debug Script
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–Ω–∏—Ü—å –º—ñ–∂ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ç–∞ production –∫–æ–¥–æ–º
"""

import os


def check_cache_file():
    """–î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É cache.py"""
    print("üîç === –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê CACHE.PY ===")

    cache_file = "quests/utils/cache.py"

    if not os.path.exists(cache_file):
        print("‚ùå –§–∞–π–ª cache.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    with open(cache_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    print(f"üìÅ –§–∞–π–ª: {cache_file}")
    print(f"üìè –í—Å—å–æ–≥–æ –ª—ñ–Ω—ñ–π: {len(lines)}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–Ω—ñ—ó 525-535 (–Ω–∞–≤–∫–æ–ª–æ 529)
    print("\nüîç –õ–Ü–ù–Ü–á 525-535 (–Ω–∞–≤–∫–æ–ª–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ—ó –ª—ñ–Ω—ñ—ó 529):")
    for i in range(524, min(535, len(lines))):
        line_num = i + 1
        line_content = lines[i].rstrip()

        # –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ Redis –∫–æ–¥
        if any(keyword in line_content.lower() for keyword in ['redis', 'host', 'port']):
            print(f"üîç {line_num:3d}: {line_content}")
        else:
            print(f"   {line_num:3d}: {line_content}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–Ω—ñ—ó 700-710 (–Ω–∞–≤–∫–æ–ª–æ 703)
    print("\nüîç –õ–Ü–ù–Ü–á 700-710 (–Ω–∞–≤–∫–æ–ª–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ—ó –ª—ñ–Ω—ñ—ó 703):")
    for i in range(699, min(710, len(lines))):
        if i < len(lines):
            line_num = i + 1
            line_content = lines[i].rstrip()

            if any(keyword in line_content.lower() for keyword in ['cache_manager', 'cachemanager']):
                print(f"üîç {line_num:3d}: {line_content}")
            else:
                print(f"   {line_num:3d}: {line_content}")


def search_problematic_patterns():
    """–ü–æ—à—É–∫ –≤—Å—ñ—Ö –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤"""
    print("\nüîç === –ü–û–®–£–ö –ü–†–û–ë–õ–ï–ú–ù–ò–• –ü–ê–¢–ï–†–ù–Ü–í ===")

    cache_file = "quests/utils/cache.py"

    with open(cache_file, 'r', encoding='utf-8') as f:
        content = f.read()
        lines = content.split('\n')

    # –ü–∞—Ç–µ—Ä–Ω–∏ —â–æ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º–∏ –Ω–∞ production
    patterns_to_check = [
        "int(os.getenv('REDIS_HOST'",
        "int(redis_host",
        "_load_config",
        "CacheManager()",
        "redis_port=int",
        "redis_host=os.getenv",
    ]

    for pattern in patterns_to_check:
        for i, line in enumerate(lines):
            if pattern in line:
                print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ '{pattern}' –Ω–∞ –ª—ñ–Ω—ñ—ó {i + 1}:")
                print(f"    {line.strip()}")


def check_environment_loading():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è"""
    print("\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ENV ===")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î .env —Ñ–∞–π–ª
    env_files = ['.env', '../.env', '.env.local', '.env.production']

    for env_file in env_files:
        if os.path.exists(env_file):
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {env_file}")
            try:
                with open(env_file, 'r') as f:
                    content = f.read()
                    if 'REDIS' in content:
                        print(f"üîç Redis –∑–º—ñ–Ω–Ω—ñ –≤ {env_file}:")
                        for line in content.split('\n'):
                            if 'REDIS' in line and not line.startswith('#'):
                                print(f"    {line}")
            except:
                pass
        else:
            print(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {env_file}")


def check_deployment_differences():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–∏—Ö –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç–µ–π —É deployment"""
    print("\nüîç === –ü–ï–†–ï–í–Ü–†–ö–ê DEPLOYMENT –í–Ü–î–ú–Ü–ù–ù–û–°–¢–ï–ô ===")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Dockerfile
    if os.path.exists('../Dockerfile'):
        print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ Dockerfile")
        with open('../Dockerfile', 'r') as f:
            content = f.read()
            if 'REDIS' in content:
                print("üîç Redis –∑–≥–∞–¥–∫–∏ –≤ Dockerfile:")
                for line in content.split('\n'):
                    if 'REDIS' in line:
                        print(f"    {line}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ requirements.txt
    if os.path.exists('requirements.txt'):
        print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ requirements.txt")
        with open('requirements.txt', 'r') as f:
            content = f.read()
            redis_deps = [line for line in content.split('\n') if 'redis' in line.lower()]
            if redis_deps:
                print("üîç Redis –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
                for dep in redis_deps:
                    print(f"    {dep}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ railway.json –∞–±–æ –ø–æ–¥—ñ–±–Ω—ñ
    config_files = ['railway.json', 'railway.toml', 'Procfile']
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {config_file}")


def main():
    print("üöÄ === PRODUCTION REDIS DEBUG ===")
    print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–Ω–∏—Ü—å –º—ñ–∂ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ç–∞ production –∫–æ–¥–æ–º\n")

    check_cache_file()
    search_problematic_patterns()
    check_environment_loading()
    check_deployment_differences()

    print("\n" + "=" * 60)
    print("üìä –í–ò–°–ù–û–í–ö–ò:")
    print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –≤–∏–≥–ª—è–¥–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚ùì –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤:")
    print("   1. –°—Ç–∞—Ä—ñ–π –≤–µ—Ä—Å—ñ—ó –∫–æ–¥—É –Ω–∞ Railway")
    print("   2. –†—ñ–∑–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–∞ production")
    print("   3. –Ü–Ω—à—ñ–π –≤–µ—Ä—Å—ñ—ó requirements.txt")
    print("   4. –ö–µ—à–æ–≤–∞–Ω–æ–º—É –∫–æ–¥—ñ –Ω–∞ Railway")

    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("   1. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Railway deployment")
    print("   2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–∞ Railway")
    print("   3. –û—á–∏—Å—Ç—ñ—Ç—å build cache –Ω–∞ Railway")
    print("   4. –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –∫–æ–¥ –ª–æ–∫–∞–ª—å–Ω–æ vs Railway")


if __name__ == "__main__":
    main()