#!/usr/bin/env python3
"""
üîç WINIX Redis Diagnostic Tool
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—à—É–∫—É –ø—Ä–æ–±–ª–µ–º –∑ Redis –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é

–†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Ü–µ–π —Ñ–∞–π–ª —É –ø–∞–ø—Ü—ñ backend/ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å:
python redis_debug.py
"""

import os
import re
import sys
from pathlib import Path


class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'


def print_header(text):
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'=' * 60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{text}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'=' * 60}{Colors.END}")


def print_step(step_num, description):
    print(f"\n{Colors.BOLD}{Colors.CYAN}–ö–†–û–ö {step_num}: {description}{Colors.END}")


def print_critical(text):
    print(f"{Colors.BOLD}{Colors.RED}üö® –ö–†–ò–¢–ò–ß–ù–û: {text}{Colors.END}")


def print_warning(text):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  –£–í–ê–ì–ê: {text}{Colors.END}")


def print_success(text):
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")


def print_info(text):
    print(f"{Colors.CYAN}‚ÑπÔ∏è  {text}{Colors.END}")


def check_environment():
    """–ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è"""
    print_step(1, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Redis")

    redis_vars = {
        'REDIS_HOST': os.getenv('REDIS_HOST'),
        'REDIS_PORT': os.getenv('REDIS_PORT'),
        'REDIS_PASSWORD': os.getenv('REDIS_PASSWORD'),
        'REDIS_URL': os.getenv('REDIS_URL'),
        'REDIS_DB': os.getenv('REDIS_DB'),
    }

    print("\nüìã –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:")
    for var, value in redis_vars.items():
        if value:
            print(f"  {var} = '{value}'")
        else:
            print_warning(f"  {var} = –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û")

    # –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω–Ω–∏—Ö
    problems = []

    redis_host = redis_vars['REDIS_HOST']
    redis_port = redis_vars['REDIS_PORT']

    if redis_host:
        if redis_host.isdigit():
            problems.append(f"REDIS_HOST —î —á–∏—Å–ª–æ–º: '{redis_host}' (–º–∞—î –±—É—Ç–∏ —Å—Ç—Ä–æ–∫–æ—é)")
            print_critical(f"REDIS_HOST —î —á–∏—Å–ª–æ–º: '{redis_host}'")

    if redis_port:
        if not redis_port.isdigit():
            problems.append(f"REDIS_PORT –Ω–µ —î —á–∏—Å–ª–æ–º: '{redis_port}'")
            print_critical(f"REDIS_PORT –Ω–µ —î —á–∏—Å–ª–æ–º: '{redis_port}'")
            if '.' in redis_port or 'redis' in redis_port.lower():
                print_critical("–°—Ö–æ–∂–µ —â–æ HOST —ñ PORT –ø–µ—Ä–µ–ø–ª—É—Ç–∞–Ω—ñ!")

    if not problems:
        print_success("–ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

    return problems


def find_python_files():
    """–ö—Ä–æ–∫ 2: –ü–æ—à—É–∫ –≤—Å—ñ—Ö Python —Ñ–∞–π–ª—ñ–≤"""
    print_step(2, "–ü–æ—à—É–∫ Python —Ñ–∞–π–ª—ñ–≤ –∑ Redis –∫–æ–¥–æ–º")

    python_files = []
    redis_files = []

    for root, dirs, files in os.walk('.'):
        # –Ü–≥–Ω–æ—Ä—É—î–º–æ __pycache__ —Ç–∞ .git
        dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']

        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                python_files.append(filepath)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º—ñ—Å—Ç–∏—Ç—å Redis –∫–æ–¥
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read().lower()
                        if any(keyword in content for keyword in
                               ['redis', 'celery_broker', 'broker_url']):
                            redis_files.append(filepath)
                except:
                    pass

    print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª—ñ–≤")
    print(f"üîç {len(redis_files)} —Ñ–∞–π–ª—ñ–≤ –º—ñ—Å—Ç—è—Ç—å Redis –∫–æ–¥")

    if redis_files:
        print("\nüìã –§–∞–π–ª–∏ –∑ Redis –∫–æ–¥–æ–º:")
        for file in redis_files[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
            print(f"  ‚Ä¢ {file}")
        if len(redis_files) > 10:
            print(f"  ... —Ç–∞ —â–µ {len(redis_files) - 10} —Ñ–∞–π–ª—ñ–≤")

    return redis_files


def scan_for_critical_issues(redis_files):
    """–ö—Ä–æ–∫ 3: –ü–æ—à—É–∫ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
    print_step(3, "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º HOST/PORT")

    critical_patterns = [
        (r'int\s*\(\s*os\.getenv\s*\(\s*["\']REDIS_HOST["\']',
         "int() –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –¥–ª—è REDIS_HOST"),

        (r'redis_port\s*=\s*.*REDIS_HOST',
         "REDIS_HOST –ø—Ä–∏—Å–≤–æ—é—î—Ç—å—Å—è –∑–º—ñ–Ω–Ω—ñ–π port"),

        (r'redis_host\s*=\s*.*REDIS_PORT',
         "REDIS_PORT –ø—Ä–∏—Å–≤–æ—é—î—Ç—å—Å—è –∑–º—ñ–Ω–Ω—ñ–π host"),

        (r'int\s*\(\s*[^)]*redis\.railway\.internal',
         "redis.railway.internal –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ int()"),

        (r'Redis\s*\([^)]*host\s*=\s*[^,)]*6379',
         "–ü–æ—Ä—Ç 6379 –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ host"),

        (r'Redis\s*\([^)]*port\s*=\s*[^,)]*railway',
         "railway.internal –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ port"),
    ]

    critical_issues = []

    for filepath in redis_files:
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')

                for line_num, line in enumerate(lines, 1):
                    for pattern, description in critical_patterns:
                        if re.search(pattern, line, re.IGNORECASE):
                            issue = {
                                'file': filepath,
                                'line': line_num,
                                'code': line.strip(),
                                'problem': description
                            }
                            critical_issues.append(issue)
                            print_critical(f"{filepath}:{line_num}")
                            print(f"    –ü—Ä–æ–±–ª–µ–º–∞: {description}")
                            print(f"    –ö–æ–¥: {line.strip()}")

        except Exception as e:
            print_warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ {filepath}: {e}")

    if not critical_issues:
        print_success("–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    else:
        print(f"\n{Colors.RED}–ó–Ω–∞–π–¥–µ–Ω–æ {len(critical_issues)} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º!{Colors.END}")

    return critical_issues


def scan_suspicious_code(redis_files):
    """–ö—Ä–æ–∫ 4: –ü–æ—à—É–∫ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –∫–æ–¥—É"""
    print_step(4, "–ü–æ—à—É–∫ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π")

    suspicious_patterns = [
        (r'int\s*\(\s*os\.getenv\s*\([^)]*HOST[^)]*\)',
         "int() –∑ HOST –∑–º—ñ–Ω–Ω–æ—é"),

        (r'redis\.Redis\s*\([^)]*\)',
         "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Redis –∑'—î–¥–Ω–∞–Ω–Ω—è"),

        (r'port\s*=\s*int\s*\([^)]*\)',
         "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è port –≤ int"),

        (r'host\s*=\s*os\.getenv',
         "–û—Ç—Ä–∏–º–∞–Ω–Ω—è host –∑ env"),
    ]

    suspicious_issues = []

    for filepath in redis_files:
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')

                for line_num, line in enumerate(lines, 1):
                    for pattern, description in suspicious_patterns:
                        if re.search(pattern, line, re.IGNORECASE):
                            issue = {
                                'file': filepath,
                                'line': line_num,
                                'code': line.strip(),
                                'description': description
                            }
                            suspicious_issues.append(issue)

        except Exception as e:
            continue

    if suspicious_issues:
        print(f"\n‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ {len(suspicious_issues)} –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –º—ñ—Å—Ü—å:")
        for issue in suspicious_issues[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
            print(f"  üìÅ {issue['file']}:{issue['line']}")
            print(f"     {issue['description']}: {issue['code']}")

        if len(suspicious_issues) > 10:
            print(f"  ... —Ç–∞ —â–µ {len(suspicious_issues) - 10} –º—ñ—Å—Ü—å")
    else:
        print_success("–ü—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    return suspicious_issues


def check_specific_files():
    """–ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print_step(5, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤")

    key_files = [
        'quests/utils/cache.py',
        'settings/config.py',
        'main.py',
        'celery.py',
        'settings/__init__.py'
    ]

    for filepath in key_files:
        if os.path.exists(filepath):
            print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É: {filepath}")
            analyze_file_detailed(filepath)
        else:
            print_warning(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {filepath}")


def analyze_file_detailed(filepath):
    """–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        redis_lines = []
        problem_lines = []

        for i, line in enumerate(lines, 1):
            line_clean = line.strip()
            line_lower = line.lower()

            # –®—É–∫–∞—î–º–æ Redis –∫–æ–¥
            if any(keyword in line_lower for keyword in ['redis', 'broker_url']):
                redis_lines.append((i, line_clean))

            # –®—É–∫–∞—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏
            if ('int(' in line and 'host' in line_lower) or \
                    ('redis.railway.internal' in line and 'int(' in line):
                problem_lines.append((i, line_clean))

        if redis_lines:
            print(f"  üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(redis_lines)} –ª—ñ–Ω—ñ–π –∑ Redis:")
            for line_num, line_content in redis_lines[:5]:
                print(f"    {line_num}: {line_content}")

        if problem_lines:
            print_critical(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(problem_lines)} –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –ª—ñ–Ω—ñ–π:")
            for line_num, line_content in problem_lines:
                print(f"    {line_num}: {line_content}")

        if not redis_lines and not problem_lines:
            print_info("Redis –∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        print_warning(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")


def generate_fixes(critical_issues):
    """–ö—Ä–æ–∫ 6: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å"""
    print_step(6, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")

    if not critical_issues:
        print_success("–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ!")
        return

    print("\nüõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")

    # –ì—Ä—É–ø—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–∞ —Ñ–∞–π–ª–∞–º–∏
    files_with_issues = {}
    for issue in critical_issues:
        filepath = issue['file']
        if filepath not in files_with_issues:
            files_with_issues[filepath] = []
        files_with_issues[filepath].append(issue)

    for filepath, issues in files_with_issues.items():
        print(f"\nüìÅ {filepath}:")
        for issue in issues:
            print(f"  üîß –õ—ñ–Ω—ñ—è {issue['line']}: {issue['problem']}")
            print(f"     –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–¥: {issue['code']}")

            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            suggested_fix = suggest_fix(issue['code'], issue['problem'])
            if suggested_fix:
                print(f"     {Colors.GREEN}–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {suggested_fix}{Colors.END}")


def suggest_fix(code, problem):
    """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø—Ä–æ–±–ª–µ–º–∏"""

    if "int() –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –¥–ª—è REDIS_HOST" in problem:
        return "redis_host = os.getenv('REDIS_HOST', 'localhost')"

    elif "REDIS_HOST –ø—Ä–∏—Å–≤–æ—é—î—Ç—å—Å—è –∑–º—ñ–Ω–Ω—ñ–π port" in problem:
        return "redis_port = int(os.getenv('REDIS_PORT', '6379'))"

    elif "redis.railway.internal –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ int()" in problem:
        return "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ REDIS_PORT –∑–∞–º—ñ—Å—Ç—å REDIS_HOST"

    elif "6379 –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ host" in problem:
        return "Redis(host='redis.railway.internal', port=6379)"

    return "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é Redis"


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_header("üîç WINIX REDIS DIAGNOSTIC TOOL")
    print_info("–ê–Ω–∞–ª—ñ–∑ Redis –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É WINIX")
    print_info(f"–†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if not os.path.exists('quests') and not os.path.exists('main.py'):
        print_critical("–°—Ö–æ–∂–µ —â–æ –≤–∏ –Ω–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó backend/")
        print_info("–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é backend/ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É")
        sys.exit(1)

    problems = []

    # –ö—Ä–æ–∫ 1: –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
    env_problems = check_environment()
    problems.extend(env_problems)

    # –ö—Ä–æ–∫ 2: –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤
    redis_files = find_python_files()

    # –ö—Ä–æ–∫ 3: –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
    critical_issues = scan_for_critical_issues(redis_files)
    problems.extend(critical_issues)

    # –ö—Ä–æ–∫ 4: –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –∫–æ–¥
    suspicious_issues = scan_suspicious_code(redis_files)

    # –ö—Ä–æ–∫ 5: –ö–ª—é—á–æ–≤—ñ —Ñ–∞–π–ª–∏
    check_specific_files()

    # –ö—Ä–æ–∫ 6: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    generate_fixes(critical_issues)

    # –ü—ñ–¥—Å—É–º–æ–∫
    print_header("üìä –ü–Ü–î–°–£–ú–û–ö –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò")

    if critical_issues:
        print_critical(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(critical_issues)} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        print("üö® –¶–ï –ü–û–Ø–°–ù–Æ–Ñ –ß–û–ú–£ WINIX QUESTS –ù–ï–î–û–°–¢–£–ü–ù–ò–ô!")
    else:
        print_success("–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    if suspicious_issues:
        print_warning(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(suspicious_issues)} –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –º—ñ—Å—Ü—å")

    print(f"\nüìã –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {len(redis_files)} —Ñ–∞–π–ª—ñ–≤ –∑ Redis –∫–æ–¥–æ–º")

    if critical_issues:
        print(f"\n{Colors.BOLD}{Colors.RED}–ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:{Colors.END}")
        print("1. –í–∏–ø—Ä–∞–≤—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ —É –≤–∫–∞–∑–∞–Ω–∏—Ö —Ñ–∞–π–ª–∞—Ö")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫")
        print("3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ WINIX Quests —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π")
    else:
        print(f"\n{Colors.BOLD}{Colors.GREEN}–í–°–ï –ì–ê–†–ê–ó–î –ó REDIS –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ñ–Æ!{Colors.END}")
        print("–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤ —ñ–Ω—à–æ–º—É –º—ñ—Å—Ü—ñ.")


if __name__ == "__main__":
    main()