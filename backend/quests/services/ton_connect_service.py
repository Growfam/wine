"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ TON Connect —Ç–∞ TON –±–ª–æ–∫—á–µ–π–Ω–æ–º
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ TON API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—ñ–≤ —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
"""

import os
import time
import json
import logging
import asyncio
import aiohttp
import requests
from typing import Dict, Any, List, Optional, Union
from datetime import datetime, timezone, timedelta
from dataclasses import dataclass
from enum import Enum

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è TON
TON_API_BASE_URL = os.getenv('TON_API_BASE_URL', 'https://toncenter.com/api/v2')
TON_API_KEY = os.getenv('TON_API_KEY', '')
TON_TESTNET_API_URL = os.getenv('TON_TESTNET_API_URL', 'https://testnet.toncenter.com/api/v2')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è FLEX —Ç–æ–∫–µ–Ω—ñ–≤
FLEX_CONTRACT_ADDRESS = os.getenv('FLEX_CONTRACT_ADDRESS', 'EQD-cvR0Nz6XAyRBpDeWFVyaIrVrQlm7Q_1nglcuSvJhYk4h')
FLEX_DECIMALS = int(os.getenv('FLEX_DECIMALS', '9'))

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–µ—à—É–≤–∞–Ω–Ω—è
CACHE_BALANCE_TIMEOUT = int(os.getenv('CACHE_BALANCE_TIMEOUT', '300'))  # 5 —Ö–≤–∏–ª–∏–Ω
CACHE_TRANSACTION_TIMEOUT = int(os.getenv('CACHE_TRANSACTION_TIMEOUT', '60'))  # 1 —Ö–≤–∏–ª–∏–Ω–∞

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è HTTP
HTTP_TIMEOUT = int(os.getenv('HTTP_TIMEOUT', '30'))
MAX_RETRIES = int(os.getenv('MAX_RETRIES', '3'))


class TONNetwork(Enum):
    """TON –º–µ—Ä–µ–∂—ñ"""
    MAINNET = "mainnet"
    TESTNET = "testnet"


class TransactionType(Enum):
    """–¢–∏–ø–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    INCOMING = "incoming"
    OUTGOING = "outgoing"
    INTERNAL = "internal"


@dataclass
class TONBalance:
    """–ë–∞–ª–∞–Ω—Å TON –≥–∞–º–∞–Ω—Ü—è"""
    ton_balance: float
    flex_balance: int
    last_updated: datetime
    address: str


@dataclass
class FlexTokenInfo:
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ FLEX —Ç–æ–∫–µ–Ω"""
    contract_address: str
    decimals: int
    symbol: str = "FLEX"
    name: str = "FLEX Token"


class TONConnectService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ TON Connect —Ç–∞ –±–ª–æ–∫—á–µ–π–Ω–æ–º"""

    def __init__(self, network: TONNetwork = TONNetwork.MAINNET):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É

        Args:
            network: –ú–µ—Ä–µ–∂–∞ TON (mainnet/testnet)
        """
        self.network = network
        self.base_url = TON_API_BASE_URL if network == TONNetwork.MAINNET else TON_TESTNET_API_URL
        self.api_key = TON_API_KEY

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ FLEX —Ç–æ–∫–µ–Ω
        self.flex_token = FlexTokenInfo(
            contract_address=FLEX_CONTRACT_ADDRESS,
            decimals=FLEX_DECIMALS
        )

        # –ö–µ—à –¥–ª—è –±–∞–ª–∞–Ω—Å—ñ–≤
        self._balance_cache: Dict[str, Dict[str, Any]] = {}

        logger.info(f"‚úÖ TONConnectService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –º–µ—Ä–µ–∂—ñ {network.value}")
        logger.info(f"üì° API URL: {self.base_url}")
        logger.info(f"üíé FLEX Contract: {self.flex_token.contract_address}")

    async def get_wallet_balance(self, address: str, force_refresh: bool = False) -> Optional[TONBalance]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è (TON + FLEX)

        Args:
            address: –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è
            force_refresh: –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø—Ä–æ–ø—É—Å–∫ –∫–µ—à—É)

        Returns:
            –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        """
        try:
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –¥–ª—è –∞–¥—Ä–µ—Å–∏ {address}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            cache_key = f"balance_{address}"
            if not force_refresh and cache_key in self._balance_cache:
                cached_data = self._balance_cache[cache_key]
                cache_age = time.time() - cached_data['timestamp']

                if cache_age < CACHE_BALANCE_TIMEOUT:
                    logger.debug(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è {address}")
                    return cached_data['balance']

            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å TON —Ç–∞ FLEX –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            ton_balance_task = self._get_ton_balance(address)
            flex_balance_task = self._get_flex_balance(address)

            ton_balance, flex_balance = await asyncio.gather(
                ton_balance_task,
                flex_balance_task,
                return_exceptions=True
            )

            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            if isinstance(ton_balance, Exception):
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è TON –±–∞–ª–∞–Ω—Å—É: {ton_balance}")
                ton_balance = 0.0

            if isinstance(flex_balance, Exception):
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É: {flex_balance}")
                flex_balance = 0

            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –±–∞–ª–∞–Ω—Å—É
            now = datetime.now(timezone.utc)
            balance = TONBalance(
                ton_balance=float(ton_balance),
                flex_balance=int(flex_balance),
                last_updated=now,
                address=address
            )

            # –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._balance_cache[cache_key] = {
                'balance': balance,
                'timestamp': time.time()
            }

            logger.info(f"–ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ: TON={balance.ton_balance:.4f}, FLEX={balance.flex_balance:,}")
            return balance

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –¥–ª—è {address}: {str(e)}")
            return None

    async def _get_ton_balance(self, address: str) -> float:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É TON"""
        try:
            url = f"{self.base_url}/getAddressBalance"
            params = {
                'address': address,
                'api_key': self.api_key
            }

            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=HTTP_TIMEOUT)) as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()

                        if data.get('ok'):
                            # –ë–∞–ª–∞–Ω—Å –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –≤ –Ω–∞–Ω–æ–≥rams, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ TON
                            balance_nanograms = int(data.get('result', '0'))
                            balance_ton = balance_nanograms / 1_000_000_000  # 1 TON = 10^9 nanograms

                            logger.debug(f"TON –±–∞–ª–∞–Ω—Å –¥–ª—è {address}: {balance_ton:.4f}")
                            return balance_ton
                        else:
                            raise Exception(f"API –ø–æ–º–∏–ª–∫–∞: {data.get('error', 'Unknown error')}")
                    else:
                        raise Exception(f"HTTP {response.status}: {await response.text()}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è TON –±–∞–ª–∞–Ω—Å—É: {str(e)}")
            raise

    async def _get_flex_balance(self, address: str) -> int:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX —Ç–æ–∫–µ–Ω—ñ–≤"""
        try:
            # –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –ø–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–∏–π –±–∞–ª–∞–Ω—Å
            # –í —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ –∑–∞–ø–∏—Ç –¥–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É FLEX

            # –°–∏–º—É–ª—é—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
            await asyncio.sleep(0.1)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É

            # –¢–∏–º—á–∞—Å–æ–≤–∞ –ª–æ–≥—ñ–∫–∞: –≥–µ–Ω–µ—Ä—É—î–º–æ –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–¥—Ä–µ—Å–∏
            import hashlib
            address_hash = hashlib.md5(address.encode()).hexdigest()
            balance = int(address_hash[:8], 16) % 1_000_000  # 0-1M FLEX

            logger.debug(f"FLEX –±–∞–ª–∞–Ω—Å –¥–ª—è {address}: {balance:,}")
            return balance

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX –±–∞–ª–∞–Ω—Å—É: {str(e)}")
            raise

    def get_wallet_balance_sync(self, address: str, force_refresh: bool = False) -> Optional[TONBalance]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É

        Args:
            address: –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è
            force_refresh: –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

        Returns:
            –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è –∞–±–æ None
        """
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                return loop.run_until_complete(self.get_wallet_balance(address, force_refresh))
            finally:
                loop.close()

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {str(e)}")
            return None

    async def verify_wallet_ownership(self, address: str, signature: str, message: str) -> bool:
        """
        –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü–µ–º —á–µ—Ä–µ–∑ –ø—ñ–¥–ø–∏—Å

        Args:
            address: –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è
            signature: –ü—ñ–¥–ø–∏—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ –±—É–ª–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ

        Returns:
            True —è–∫—â–æ –ø—ñ–¥–ø–∏—Å –≤–∞–ª—ñ–¥–Ω–∏–π
        """
        try:
            logger.info(f"–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü–µ–º {address}")

            # –¢—É—Ç –±—É–ª–∞ –± —Ä–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É
            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ True –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

            # –í —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó:
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –ø—ñ–¥–ø–∏—Å—É
            # 2. –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –∑ –ø—ñ–¥–ø–∏—Å—É
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∞–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—É–±–ª—ñ—á–Ω–æ–º—É –∫–ª—é—á—É

            logger.info(f"–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ –¥–ª—è {address}")
            return True

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≥–∞–º–∞–Ω—Ü—è {address}: {str(e)}")
            return False

    async def get_wallet_transactions(self, address: str, limit: int = 50,
                                      before_lt: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≥–∞–º–∞–Ω—Ü—è

        Args:
            address: –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            before_lt: –õ–æ–≥—ñ—á–Ω–∏–π —á–∞—Å (–¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        """
        try:
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è {address} (limit={limit})")

            url = f"{self.base_url}/getTransactions"
            params = {
                'address': address,
                'limit': min(limit, 100),  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞ –∑–∞–ø–∏—Ç
                'api_key': self.api_key
            }

            if before_lt:
                params['lt'] = before_lt
                params['hash'] = ''  # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è API

            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=HTTP_TIMEOUT)) as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()

                        if data.get('ok'):
                            transactions = data.get('result', [])
                            processed_transactions = self._process_transactions(transactions, address)

                            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(processed_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è {address}")
                            return processed_transactions
                        else:
                            raise Exception(f"API –ø–æ–º–∏–ª–∫–∞: {data.get('error', 'Unknown error')}")
                    else:
                        raise Exception(f"HTTP {response.status}: {await response.text()}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è {address}: {str(e)}")
            return []

    def _process_transactions(self, raw_transactions: List[Dict], address: str) -> List[Dict[str, Any]]:
        """–û–±—Ä–æ–±–∫–∞ —Å–∏—Ä–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤—ñ–¥ API"""
        processed = []

        try:
            for tx in raw_transactions:
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                in_msg = tx.get('in_msg', {})
                out_msgs = tx.get('out_msgs', [])

                transaction_type = TransactionType.INTERNAL
                amount = 0
                source = ""
                destination = ""

                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if in_msg and in_msg.get('source'):
                    if in_msg['source'] != address:
                        transaction_type = TransactionType.INCOMING
                        amount = int(in_msg.get('value', '0'))
                        source = in_msg['source']
                        destination = address

                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–∏—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                for out_msg in out_msgs:
                    if out_msg.get('destination') and out_msg['destination'] != address:
                        transaction_type = TransactionType.OUTGOING
                        amount = int(out_msg.get('value', '0'))
                        source = address
                        destination = out_msg['destination']
                        break

                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                processed_tx = {
                    'hash': tx.get('transaction_id', {}).get('hash', ''),
                    'lt': tx.get('transaction_id', {}).get('lt', 0),
                    'timestamp': tx.get('utime', 0),
                    'type': transaction_type.value,
                    'amount_nanograms': amount,
                    'amount_ton': amount / 1_000_000_000,
                    'source': source,
                    'destination': destination,
                    'fee': int(tx.get('fee', '0')),
                    'success': True,  # –ü–æ–∫–∏ —â–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–º–∏
                    'raw': tx  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
                }

                processed.append(processed_tx)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {str(e)}")

        return processed

    async def send_transaction(self, from_address: str, to_address: str,
                               amount: float, private_key: str, memo: str = "") -> Dict[str, Any]:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó (–∑–∞–≥–ª—É—à–∫–∞)

        Args:
            from_address: –ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
            to_address: –ê–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
            amount: –°—É–º–∞ –≤ TON
            private_key: –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á
            memo: –ö–æ–º–µ–Ω—Ç–∞—Ä

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        """
        logger.warning("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        return {
            'success': False,
            'message': '–§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞',
            'error_code': 'NOT_IMPLEMENTED'
        }

    def validate_address(self, address: str) -> bool:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è TON –∞–¥—Ä–µ—Å–∏

        Args:
            address: –ê–¥—Ä–µ—Å–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó

        Returns:
            True —è–∫—â–æ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª—ñ–¥–Ω–∞
        """
        try:
            if not address or not isinstance(address, str):
                return False

            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ç–∞ —Å–∏–º–≤–æ–ª—ñ–≤
            if len(address) != 48:
                return False

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–º–≤–æ–ª–∏ (base64url)
            import re
            if not re.match(r'^[A-Za-z0-9_-]+$', address):
                return False

            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
            # –≤–∫–ª—é—á–∞—é—á–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ—ó —Å—É–º–∏

            return True

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∞–¥—Ä–µ—Å–∏ {address}: {str(e)}")
            return False

    def clear_cache(self, address: Optional[str] = None) -> None:
        """
        –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É

        Args:
            address: –ê–¥—Ä–µ—Å–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è (—è–∫—â–æ None - –æ—á–∏—â—É—î –≤–µ—Å—å –∫–µ—à)
        """
        try:
            if address:
                cache_key = f"balance_{address}"
                if cache_key in self._balance_cache:
                    del self._balance_cache[cache_key]
                    logger.info(f"–ö–µ—à –æ—á–∏—â–µ–Ω–æ –¥–ª—è –∞–¥—Ä–µ—Å–∏ {address}")
            else:
                self._balance_cache.clear()
                logger.info("–ö–µ—à –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {str(e)}")

    def get_cache_stats(self) -> Dict[str, Any]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É

        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à—É
        """
        try:
            now = time.time()
            total_entries = len(self._balance_cache)
            expired_entries = 0

            for cache_data in self._balance_cache.values():
                cache_age = now - cache_data['timestamp']
                if cache_age > CACHE_BALANCE_TIMEOUT:
                    expired_entries += 1

            return {
                'total_entries': total_entries,
                'expired_entries': expired_entries,
                'active_entries': total_entries - expired_entries,
                'cache_timeout': CACHE_BALANCE_TIMEOUT
            }

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É: {str(e)}")
            return {
                'total_entries': 0,
                'expired_entries': 0,
                'active_entries': 0,
                'cache_timeout': CACHE_BALANCE_TIMEOUT,
                'error': str(e)
            }

    def get_network_info(self) -> Dict[str, Any]:
        """
        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ—Ä–µ–∂—É —Ç–∞ —Å–µ—Ä–≤—ñ—Å

        Returns:
            –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        """
        return {
            'network': self.network.value,
            'api_url': self.base_url,
            'api_key_configured': bool(self.api_key),
            'flex_contract': self.flex_token.contract_address,
            'flex_decimals': self.flex_token.decimals,
            'cache_timeout': CACHE_BALANCE_TIMEOUT,
            'http_timeout': HTTP_TIMEOUT,
            'max_retries': MAX_RETRIES
        }


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
ton_connect_service = TONConnectService()

# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'TONConnectService',
    'TONNetwork',
    'TransactionType',
    'TONBalance',
    'FlexTokenInfo',
    'ton_connect_service'
]