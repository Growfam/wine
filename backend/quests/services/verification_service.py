"""
–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å WINIX
–û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–≤–¥–∞–Ω—å —Ç–∞ —Ç–∞–π–º–µ—Ä—ñ–≤
"""

import logging
import time
import json
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, Optional, List
from enum import Enum
import threading
from queue import Queue, Empty

try:
    from supabase_client import supabase, get_user, update_user
except ImportError:
    from backend.supabase_client import supabase, get_user, update_user

try:
    from .telegram_service import telegram_service
except ImportError:
    try:
        from telegram_service import telegram_service
    except ImportError:
        telegram_service = None

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


class TaskType(Enum):
    """–¢–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å"""
    TELEGRAM_SUBSCRIBE = "telegram_subscribe"
    TELEGRAM_BOT_START = "telegram_bot_start"
    YOUTUBE_SUBSCRIBE = "youtube_subscribe"
    TWITTER_FOLLOW = "twitter_follow"
    DISCORD_JOIN = "discord_join"
    SOCIAL_SHARE = "social_share"
    LIMITED_TIME = "limited_time"
    PARTNER = "partner"


class VerificationStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    WAITING = "waiting"
    COMPLETED = "completed"
    FAILED = "failed"
    EXPIRED = "expired"


class VerificationService:
    """–û—Å–Ω–æ–≤–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å"""

    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É"""
        self.verification_queue = Queue()
        self.active_verifications = {}
        self.task_timers = {}
        self.is_processing = False

        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞–π–º–µ—Ä—ñ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.timer_config = {
            TaskType.YOUTUBE_SUBSCRIBE: 15,  # 15 —Å–µ–∫—É–Ω–¥
            TaskType.TWITTER_FOLLOW: 15,  # 15 —Å–µ–∫—É–Ω–¥
            TaskType.DISCORD_JOIN: 20,  # 20 —Å–µ–∫—É–Ω–¥
            TaskType.SOCIAL_SHARE: 10,  # 10 —Å–µ–∫—É–Ω–¥
            TaskType.PARTNER: 30,  # 30 —Å–µ–∫—É–Ω–¥
            TaskType.LIMITED_TIME: 5  # 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö
        }

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        self.max_retries = 3

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —á–µ—Ä–≥–∏
        self._start_queue_processor()

        logger.info("‚úÖ VerificationService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    def _start_queue_processor(self):
        """–ó–∞–ø—É—Å–∫–∞—î –æ–±—Ä–æ–±–Ω–∏–∫ —á–µ—Ä–≥–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π"""

        def process_queue():
            while True:
                try:
                    if not self.verification_queue.empty():
                        self._process_next_verification()
                    time.sleep(1)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É —á–µ—Ä–≥–∏: {str(e)}")
                    time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

        thread = threading.Thread(target=process_queue, daemon=True)
        thread.start()
        logger.info("üîÑ –û–±—Ä–æ–±–Ω–∏–∫ —á–µ—Ä–≥–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π –∑–∞–ø—É—â–µ–Ω–æ")

    def start_task_verification(self, user_id: str, task_id: str, task_type: str,
                                task_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ—á–∏–Ω–∞—î –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑–∞–≤–¥–∞–Ω–Ω—è

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            task_id: ID –∑–∞–≤–¥–∞–Ω–Ω—è
            task_type: –¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è
            task_data: –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è

        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ—á–∞—Ç–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        """
        try:
            logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            verification_id = f"{user_id}_{task_id}_{int(time.time())}"

            verification = {
                'id': verification_id,
                'user_id': user_id,
                'task_id': task_id,
                'task_type': task_type,
                'task_data': task_data,
                'status': VerificationStatus.IN_PROGRESS.value,
                'started_at': datetime.now(timezone.utc).isoformat(),
                'attempts': 0,
                'timer_required': self._requires_timer(task_type)
            }

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è—Ö
            self.active_verifications[verification_id] = verification

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ë–î
            self._save_task_start(user_id, task_id, task_type, task_data)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–±—Ä–æ–±–∫–∏
            if verification['timer_required']:
                return self._start_timer_verification(verification)
            else:
                return self._start_instant_verification(verification)

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'message': '–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'
            }

    def _requires_timer(self, task_type: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è"""
        try:
            task_enum = TaskType(task_type)
            return task_enum in self.timer_config
        except ValueError:
            return False

    def _start_timer_verification(self, verification: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞—î –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑ —Ç–∞–π–º–µ—Ä–æ–º"""
        task_type_enum = TaskType(verification['task_type'])
        timer_duration = self.timer_config.get(task_type_enum, 15)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä
        verification['timer_end'] = (
                datetime.now(timezone.utc) + timedelta(seconds=timer_duration)
        ).isoformat()
        verification['status'] = VerificationStatus.WAITING.value

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–π–º–µ—Ä
        self.task_timers[verification['id']] = {
            'end_time': verification['timer_end'],
            'duration': timer_duration,
            'verification_id': verification['id']
        }

        logger.info(f"‚è±Ô∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞–π–º–µ—Ä {timer_duration}—Å –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è {verification['task_id']}")

        return {
            'success': True,
            'verification_id': verification['id'],
            'status': 'waiting',
            'timer_duration': timer_duration,
            'timer_end': verification['timer_end'],
            'message': f'–ó–∞—á–µ–∫–∞–π—Ç–µ {timer_duration} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é'
        }

    def _start_instant_verification(self, verification: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞—î –º–∏—Ç—Ç—î–≤—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é (Telegram)"""
        # –î–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        self.verification_queue.put(verification)

        logger.info(f"üì• –ó–∞–≤–¥–∞–Ω–Ω—è {verification['task_id']} –¥–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")

        return {
            'success': True,
            'verification_id': verification['id'],
            'status': 'in_progress',
            'message': '–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ...'
        }

    def check_verification_status(self, user_id: str, task_id: str) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            task_id: ID –∑–∞–≤–¥–∞–Ω–Ω—è

        Returns:
            Dict –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        """
        try:
            # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
            verification = None
            for ver_id, ver_data in self.active_verifications.items():
                if ver_data['user_id'] == user_id and ver_data['task_id'] == task_id:
                    verification = ver_data
                    break

            if not verification:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –ë–î —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
                if self._is_task_completed(user_id, task_id):
                    return {
                        'success': True,
                        'status': 'completed',
                        'message': '–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'
                    }
                else:
                    return {
                        'success': False,
                        'status': 'not_found',
                        'message': '–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'
                    }

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–π–º–µ—Ä —è–∫—â–æ —î
            if verification['status'] == VerificationStatus.WAITING.value:
                if self._check_timer_completion(verification['id']):
                    # –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏
                    verification['status'] = VerificationStatus.PENDING.value
                    self.verification_queue.put(verification)

                    return {
                        'success': True,
                        'status': 'ready_for_check',
                        'message': '–ì–æ—Ç–æ–≤–æ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏'
                    }
                else:
                    # –¢–∞–π–º–µ—Ä —â–µ –π–¥–µ
                    timer_info = self.task_timers.get(verification['id'], {})
                    end_time = datetime.fromisoformat(timer_info.get('end_time', ''))
                    remaining = (end_time - datetime.now(timezone.utc)).total_seconds()

                    return {
                        'success': True,
                        'status': 'waiting',
                        'remaining_time': max(0, int(remaining)),
                        'message': f'–ó–∞–ª–∏—à–∏–ª–æ—Å—å {max(0, int(remaining))} —Å–µ–∫—É–Ω–¥'
                    }

            return {
                'success': True,
                'status': verification['status'],
                'message': self._get_status_message(verification['status'])
            }

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'message': '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É'
            }

    def complete_verification(self, user_id: str, task_id: str) -> Dict[str, Any]:
        """
        –ó–∞–≤–µ—Ä—à—É—î –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑–∞–≤–¥–∞–Ω–Ω—è

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            task_id: ID –∑–∞–≤–¥–∞–Ω–Ω—è

        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        """
        try:
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
            verification = None
            verification_id = None

            for ver_id, ver_data in self.active_verifications.items():
                if ver_data['user_id'] == user_id and ver_data['task_id'] == task_id:
                    verification = ver_data
                    verification_id = ver_id
                    break

            if not verification:
                return {
                    'success': False,
                    'error': '–ê–∫—Ç–∏–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞',
                    'message': '–°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è'
                }

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏
            if verification['status'] == VerificationStatus.WAITING.value:
                if not self._check_timer_completion(verification_id):
                    timer_info = self.task_timers.get(verification_id, {})
                    end_time = datetime.fromisoformat(timer_info.get('end_time', ''))
                    remaining = (end_time - datetime.now(timezone.utc)).total_seconds()

                    return {
                        'success': False,
                        'error': '–¢–∞–π–º–µ—Ä —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è',
                        'remaining_time': max(0, int(remaining)),
                        'message': f'–ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {max(0, int(remaining))} —Å–µ–∫—É–Ω–¥'
                    }

            # –í–∏–∫–æ–Ω—É—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
            result = self._perform_verification(verification)

            if result['success']:
                # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                self._complete_verification_success(verification, result)

                return {
                    'success': True,
                    'verified': True,
                    'reward': result.get('reward', {}),
                    'message': '–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!'
                }
            else:
                # –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
                verification['attempts'] += 1

                if verification['attempts'] >= self.max_retries:
                    self._complete_verification_failure(verification, result.get('error', '–ú–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± –¥–æ—Å—è–≥–Ω—É—Ç–æ'))
                    return {
                        'success': False,
                        'error': '–ú–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± –¥–æ—Å—è–≥–Ω—É—Ç–æ',
                        'message': '–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ'
                    }
                else:
                    return {
                        'success': False,
                        'error': result.get('error', '–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞'),
                        'attempts_left': self.max_retries - verification['attempts'],
                        'message': result.get('message', '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
                    }

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'message': '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'
            }

    def _perform_verification(self, verification: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É"""
        task_type = verification['task_type']
        task_data = verification['task_data']
        user_id = verification['user_id']

        logger.info(f"üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∏–ø—É {task_type}")

        try:
            if task_type == TaskType.TELEGRAM_SUBSCRIBE.value:
                return self._verify_telegram_subscription(user_id, task_data)
            elif task_type == TaskType.TELEGRAM_BOT_START.value:
                return self._verify_bot_start(user_id)
            elif task_type in [TaskType.YOUTUBE_SUBSCRIBE.value, TaskType.TWITTER_FOLLOW.value,
                               TaskType.DISCORD_JOIN.value, TaskType.SOCIAL_SHARE.value]:
                return self._verify_social_task(user_id, task_type, task_data)
            else:
                return {
                    'success': False,
                    'error': f'–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è: {task_type}'
                }

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }

    def _verify_telegram_subscription(self, user_id: str, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª"""
        if not telegram_service:
            return {
                'success': False,
                'error': 'Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'
            }

        channel_username = task_data.get('channel_username', '')
        if not channel_username:
            return {
                'success': False,
                'error': '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏'
            }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
        result = telegram_service.check_channel_subscription_sync(user_id, channel_username)

        if result.get('subscribed', False):
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            reward = self._calculate_reward(TaskType.TELEGRAM_SUBSCRIBE.value, task_data)

            return {
                'success': True,
                'verified': True,
                'reward': reward,
                'channel': channel_username
            }
        else:
            return {
                'success': False,
                'error': result.get('error', '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞'),
                'message': f'–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ {channel_username} —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É'
            }

    def _verify_bot_start(self, user_id: str) -> Dict[str, Any]:
        """–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        if not telegram_service:
            return {
                'success': False,
                'error': 'Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'
            }

        if telegram_service.check_bot_started_sync(user_id):
            reward = self._calculate_reward(TaskType.TELEGRAM_BOT_START.value, {})

            return {
                'success': True,
                'verified': True,
                'reward': reward
            }
        else:
            return {
                'success': False,
                'error': '–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ',
                'message': '–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞'
            }

    def _verify_social_task(self, user_id: str, task_type: str, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å (–∑–∞ —Ç–∞–π–º–µ—Ä–æ–º)"""
        # –î–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –º–∏ –¥–æ–≤—ñ—Ä—è—î–º–æ —Ç–∞–π–º–µ—Ä—É
        # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–æ–≥–ª–∞ –± –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ API —Å–æ—Ü–º–µ—Ä–µ–∂

        reward = self._calculate_reward(task_type, task_data)

        return {
            'success': True,
            'verified': True,
            'reward': reward,
            'verification_method': 'timer_based'
        }

    def _calculate_reward(self, task_type: str, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –ë–∞–∑–æ–≤—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        base_rewards = {
            TaskType.TELEGRAM_SUBSCRIBE.value: {'winix': 100, 'tickets': 1},
            TaskType.TELEGRAM_BOT_START.value: {'winix': 50, 'tickets': 0},
            TaskType.YOUTUBE_SUBSCRIBE.value: {'winix': 150, 'tickets': 1},
            TaskType.TWITTER_FOLLOW.value: {'winix': 100, 'tickets': 1},
            TaskType.DISCORD_JOIN.value: {'winix': 200, 'tickets': 2},
            TaskType.SOCIAL_SHARE.value: {'winix': 75, 'tickets': 0},
            TaskType.PARTNER.value: {'winix': 300, 'tickets': 3},
            TaskType.LIMITED_TIME.value: {'winix': 500, 'tickets': 5}
        }

        base_reward = base_rewards.get(task_type, {'winix': 50, 'tickets': 0})

        # –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –∑ task_data
        multiplier = task_data.get('reward_multiplier', 1.0)
        bonus_winix = task_data.get('bonus_winix', 0)
        bonus_tickets = task_data.get('bonus_tickets', 0)

        final_reward = {
            'winix': int(base_reward['winix'] * multiplier) + bonus_winix,
            'tickets': int(base_reward['tickets'] * multiplier) + bonus_tickets
        }

        return final_reward

    def _complete_verification_success(self, verification: Dict[str, Any], result: Dict[str, Any]):
        """–ó–∞–≤–µ—Ä—à—É—î —É—Å–ø—ñ—à–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é"""
        verification['status'] = VerificationStatus.COMPLETED.value
        verification['completed_at'] = datetime.now(timezone.utc).isoformat()
        verification['result'] = result

        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
        reward = result.get('reward', {})
        if reward:
            self._award_reward(verification['user_id'], verification['task_id'], reward)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
        self._save_task_completion(verification)

        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        self._cleanup_verification(verification['id'])

        logger.info(f"‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è {verification['task_id']} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _complete_verification_failure(self, verification: Dict[str, Any], error: str):
        """–ó–∞–≤–µ—Ä—à—É—î –Ω–µ–≤–¥–∞–ª—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é"""
        verification['status'] = VerificationStatus.FAILED.value
        verification['failed_at'] = datetime.now(timezone.utc).isoformat()
        verification['error'] = error

        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        self._cleanup_verification(verification['id'])

        logger.warning(f"‚ùå –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è {verification['task_id']} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ–≤–¥–∞—á–µ—é: {error}")

    def _award_reward(self, user_id: str, task_id: str, reward: Dict[str, Any]):
        """–ù–∞—Ä–∞—Ö–æ–≤—É—î –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            from users.controllers import update_user_balance

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ WINIX
            if reward.get('winix', 0) > 0:
                update_user_balance(user_id, {'balance': reward['winix']})
                logger.info(f"üí∞ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {reward['winix']} WINIX –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–≤–∏—Ç–∫–∏ (—è–∫—â–æ —î —Å–∏—Å—Ç–µ–º–∞ –∫–≤–∏—Ç–∫—ñ–≤)
            if reward.get('tickets', 0) > 0:
                # –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤
                logger.info(f"üé´ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {reward['tickets']} –∫–≤–∏—Ç–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏: {str(e)}")

    def _check_timer_completion(self, verification_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —Ç–∞–π–º–µ—Ä"""
        timer = self.task_timers.get(verification_id)
        if not timer:
            return True

        end_time = datetime.fromisoformat(timer['end_time'])
        return datetime.now(timezone.utc) >= end_time

    def _cleanup_verification(self, verification_id: str):
        """–û—á–∏—â—É—î —Ä–µ—Å—É—Ä—Å–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        self.active_verifications.pop(verification_id, None)
        self.task_timers.pop(verification_id, None)

    def _save_task_start(self, user_id: str, task_id: str, task_type: str, task_data: Dict[str, Any]):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ë–î"""
        try:
            if not supabase:
                return

            data = {
                'user_id': user_id,
                'task_id': task_id,
                'task_type': task_type,
                'task_data': json.dumps(task_data),
                'status': 'started',
                'started_at': datetime.now(timezone.utc).isoformat()
            }

            supabase.table('task_progress').insert(data).execute()

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}")

    def _save_task_completion(self, verification: Dict[str, Any]):
        """–ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ë–î"""
        try:
            if not supabase:
                return

            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å –≤ task_progress
            supabase.table('task_progress').update({
                'status': 'completed',
                'completed_at': verification.get('completed_at'),
                'result': json.dumps(verification.get('result', {}))
            }).eq('user_id', verification['user_id']).eq('task_id', verification['task_id']).execute()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ completed_tasks
            completion_data = {
                'user_id': verification['user_id'],
                'task_id': verification['task_id'],
                'task_type': verification['task_type'],
                'completed_at': verification.get('completed_at'),
                'reward': json.dumps(verification.get('result', {}).get('reward', {}))
            }

            supabase.table('completed_tasks').insert(completion_data).execute()

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}")

    def _is_task_completed(self, user_id: str, task_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"""
        try:
            if not supabase:
                return False

            result = supabase.table('completed_tasks').select('id').eq('user_id', user_id).eq('task_id',
                                                                                              task_id).execute()
            return len(result.data) > 0

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}")
            return False

    def _process_next_verification(self):
        """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Å—Ç—É–ø–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑ —á–µ—Ä–≥–∏"""
        try:
            verification = self.verification_queue.get(timeout=1)

            logger.info(f"üîÑ –û–±—Ä–æ–±–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ —á–µ—Ä–≥–∏: {verification['task_id']}")

            result = self._perform_verification(verification)

            if result['success']:
                self._complete_verification_success(verification, result)
            else:
                verification['attempts'] += 1
                if verification['attempts'] >= self.max_retries:
                    self._complete_verification_failure(verification, result.get('error', '–ú–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–±'))
                else:
                    # –î–æ–¥–∞—î–º–æ –Ω–∞–∑–∞–¥ –≤ —á–µ—Ä–≥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
                    time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    self.verification_queue.put(verification)

        except Empty:
            pass  # –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏: {str(e)}")

    def _get_status_message(self, status: str) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç—É—Å—É"""
        messages = {
            VerificationStatus.PENDING.value: '–û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏',
            VerificationStatus.IN_PROGRESS.value: '–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ',
            VerificationStatus.WAITING.value: '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä—É',
            VerificationStatus.COMPLETED.value: '–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ',
            VerificationStatus.FAILED.value: '–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
            VerificationStatus.EXPIRED.value: '–¢–µ—Ä–º—ñ–Ω –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–∏–π—à–æ–≤'
        }

        return messages.get(status, '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å')

    def get_verification_statistics(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π"""
        return {
            'active_verifications': len(self.active_verifications),
            'queue_length': self.verification_queue.qsize(),
            'active_timers': len(self.task_timers),
            'timer_config': {task_type.value: duration for task_type, duration in self.timer_config.items()}
        }

    def cleanup_expired_verifications(self):
        """–û—á–∏—â–∞—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        current_time = datetime.now(timezone.utc)
        expired_ids = []

        for ver_id, verification in self.active_verifications.items():
            started_at = datetime.fromisoformat(verification['started_at'])
            if (current_time - started_at).total_seconds() > 3600:  # 1 –≥–æ–¥–∏–Ω–∞
                expired_ids.append(ver_id)

        for ver_id in expired_ids:
            verification = self.active_verifications[ver_id]
            verification['status'] = VerificationStatus.EXPIRED.value
            self._cleanup_verification(ver_id)
            logger.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é: {ver_id}")


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
verification_service = VerificationService()