"""
–°–µ—Ä–≤—ñ—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
–õ–æ–≥—ñ–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤, –º–Ω–æ–∂–Ω–∏–∫—ñ–≤ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
"""

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timezone

from ..models.transaction import TransactionAmount as Reward
from ..models.daily_bonus import get_daily_bonus_constants

logger = logging.getLogger(__name__)


class RewardCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∏–Ω–∞–≥–æ—Ä–æ–¥"""

    def __init__(self):
        self.constants = get_daily_bonus_constants()

        # –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.base_winix = self.constants["BASE_WINIX_REWARD"]
        self.special_days = self.constants["SPECIAL_DAYS"]
        self.tickets_days = self.constants["TICKETS_DAYS"]
        self.max_days = self.constants["MAX_DAYS"]

        # –ü—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω—ñ –º–Ω–æ–∂–Ω–∏–∫–∏
        self.progressive_multipliers = {
            1: 1.0,  # –î–µ–Ω—å 1: 20 WINIX
            2: 1.1,  # –î–µ–Ω—å 2: 22 WINIX
            3: 1.2,  # –î–µ–Ω—å 3: 24 WINIX
            4: 1.3,  # –î–µ–Ω—å 4: 26 WINIX
            5: 1.4,  # –î–µ–Ω—å 5: 28 WINIX
            6: 1.5,  # –î–µ–Ω—å 6: 30 WINIX
            7: 2.0,  # –î–µ–Ω—å 7: 40 WINIX + 1 ticket (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π)
            8: 1.6,  # –î–µ–Ω—å 8: 32 WINIX
            9: 1.7,  # –î–µ–Ω—å 9: 34 WINIX
            10: 1.8,  # –î–µ–Ω—å 10: 36 WINIX
            11: 1.9,  # –î–µ–Ω—å 11: 38 WINIX
            12: 2.0,  # –î–µ–Ω—å 12: 40 WINIX
            13: 2.1,  # –î–µ–Ω—å 13: 42 WINIX
            14: 2.5,  # –î–µ–Ω—å 14: 50 WINIX + 2 tickets (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π)
            15: 2.2,  # –î–µ–Ω—å 15: 44 WINIX
            16: 2.3,  # –î–µ–Ω—å 16: 46 WINIX
            17: 2.4,  # –î–µ–Ω—å 17: 48 WINIX
            18: 2.5,  # –î–µ–Ω—å 18: 50 WINIX
            19: 2.6,  # –î–µ–Ω—å 19: 52 WINIX
            20: 2.7,  # –î–µ–Ω—å 20: 54 WINIX
            21: 3.0,  # –î–µ–Ω—å 21: 60 WINIX + 3 tickets (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π)
            22: 2.8,  # –î–µ–Ω—å 22: 56 WINIX
            23: 2.9,  # –î–µ–Ω—å 23: 58 WINIX
            24: 3.0,  # –î–µ–Ω—å 24: 60 WINIX
            25: 3.1,  # –î–µ–Ω—å 25: 62 WINIX
            26: 3.2,  # –î–µ–Ω—å 26: 64 WINIX
            27: 3.3,  # –î–µ–Ω—å 27: 66 WINIX
            28: 4.0,  # –î–µ–Ω—å 28: 80 WINIX + 5 tickets (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π)
            29: 3.5,  # –î–µ–Ω—å 29: 70 WINIX
            30: 5.0  # –î–µ–Ω—å 30: 100 WINIX + 10 tickets (—Ñ—ñ–Ω–∞–ª—å–Ω–∏–π)
        }

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –¥–ª—è tickets
        self.tickets_rewards = {
            7: 1,  # 1 ticket –Ω–∞ 7 –¥–µ–Ω—å
            14: 2,  # 2 tickets –Ω–∞ 14 –¥–µ–Ω—å
            21: 3,  # 3 tickets –Ω–∞ 21 –¥–µ–Ω—å
            28: 5,  # 5 tickets –Ω–∞ 28 –¥–µ–Ω—å
            30: 10  # 10 tickets –Ω–∞ 30 –¥–µ–Ω—å (–±–æ–Ω—É—Å)
        }

        logger.info("RewardCalculator —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        logger.info(f"–ë–∞–∑–æ–≤–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: {self.base_winix} WINIX")
        logger.info(f"–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥–Ω—ñ: {self.special_days}")
        logger.info(f"–î–Ω—ñ –∑ tickets: {list(self.tickets_rewards.keys())}")

    def calculate_daily_bonus(self, day_number: int, current_streak: int = 0,
                              user_level: int = 1, bonus_multiplier: float = 1.0) -> Reward:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É

        Args:
            day_number: –ù–æ–º–µ—Ä –¥–Ω—è (1-30)
            current_streak: –ü–æ—Ç–æ—á–Ω–∞ —Å–µ—Ä—ñ—è
            user_level: –†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            bonus_multiplier: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–Ω–æ–∂–Ω–∏–∫

        Returns:
            Reward –æ–±'—î–∫—Ç –∑ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–æ—é
        """
        try:
            logger.info(f"=== –†–û–ó–†–ê–•–£–ù–û–ö –©–û–î–ï–ù–ù–û–ì–û –ë–û–ù–£–°–£ ===")
            logger.info(f"–î–µ–Ω—å: {day_number}, —Å–µ—Ä—ñ—è: {current_streak}, —Ä—ñ–≤–µ–Ω—å: {user_level}")

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            day_number = max(1, min(day_number, self.max_days))
            current_streak = max(0, current_streak)
            user_level = max(1, user_level)
            bonus_multiplier = max(0.1, bonus_multiplier)

            # –ë–∞–∑–æ–≤–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ WINIX
            base_multiplier = self.progressive_multipliers.get(day_number, 1.0)
            winix_amount = int(self.base_winix * base_multiplier)

            # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä—ñ—é (–¥–æ 50% –¥–æ–¥–∞—Ç–∫–æ–≤–æ –∑–∞ –¥–æ–≤–≥—É —Å–µ—Ä—ñ—é)
            streak_bonus = min(0.5, current_streak * 0.02)  # 2% –∑–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å —Å–µ—Ä—ñ—ó
            winix_amount = int(winix_amount * (1 + streak_bonus))

            # –ë–æ–Ω—É—Å –∑–∞ —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (1% –∑–∞ —Ä—ñ–≤–µ–Ω—å –ø–æ–Ω–∞–¥ 1)
            level_bonus = (user_level - 1) * 0.01
            winix_amount = int(winix_amount * (1 + level_bonus))

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–Ω–æ–∂–Ω–∏–∫
            winix_amount = int(winix_amount * bonus_multiplier)

            # Tickets –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –¥–Ω—ñ–≤
            tickets_amount = self.tickets_rewards.get(day_number, 0)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            reward = Reward(
                winix=winix_amount,
                tickets=tickets_amount,
                flex=0
            )

            logger.info(f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: {reward.to_dict()}")
            logger.info(
                f"–ú–Ω–æ–∂–Ω–∏–∫–∏: base={base_multiplier}, streak={streak_bonus:.2f}, level={level_bonus:.2f}, bonus={bonus_multiplier}")

            return reward

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É: {e}", exc_info=True)
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
            return Reward(winix=self.base_winix, tickets=0, flex=0)

    def get_reward_preview(self, start_day: int = 1, end_day: int = 30,
                           user_level: int = 1) -> List[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥

        Args:
            start_day: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–Ω—å
            end_day: –ö—ñ–Ω—Ü–µ–≤–∏–π –¥–µ–Ω—å
            user_level: –†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥ –ø–æ –¥–Ω—è—Ö
        """
        try:
            preview = []

            for day in range(start_day, min(end_day + 1, self.max_days + 1)):
                reward = self.calculate_daily_bonus(
                    day_number=day,
                    current_streak=day,  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω—É —Å–µ—Ä—ñ—é
                    user_level=user_level
                )

                is_special = day in self.special_days
                is_final = day == self.max_days

                day_info = {
                    "day": day,
                    "reward": reward.to_dict(),
                    "is_special": is_special,
                    "is_final": is_final,
                    "multiplier": self.progressive_multipliers.get(day, 1.0),
                    "description": self._get_day_description(day, reward, is_special, is_final)
                }

                preview.append(day_info)

            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–ª—è –¥–Ω—ñ–≤ {start_day}-{end_day}")
            return preview

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
            return []

    def _get_day_description(self, day: int, reward: Reward,
                             is_special: bool, is_final: bool) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É –¥–Ω—è"""
        if is_final:
            return f"üéâ –§—ñ–Ω–∞–ª—å–Ω–∏–π –¥–µ–Ω—å! {reward.winix} WINIX + {reward.tickets} tickets"
        elif is_special:
            return f"‚≠ê –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –¥–µ–Ω—å! {reward.winix} WINIX + {reward.tickets} tickets"
        else:
            return f"üìÖ –î–µ–Ω—å {day}: {reward.winix} WINIX"

    def calculate_streak_bonus(self, streak_length: int) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–æ–Ω—É—Å—É –∑–∞ —Å–µ—Ä—ñ—é

        Args:
            streak_length: –î–æ–≤–∂–∏–Ω–∞ —Å–µ—Ä—ñ—ó

        Returns:
            –ú–Ω–æ–∂–Ω–∏–∫ –±–æ–Ω—É—Å—É (0.0 - 0.5)
        """
        return min(0.5, streak_length * 0.02)

    def calculate_level_bonus(self, user_level: int) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–æ–Ω—É—Å—É –∑–∞ —Ä—ñ–≤–µ–Ω—å

        Args:
            user_level: –†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –ú–Ω–æ–∂–Ω–∏–∫ –±–æ–Ω—É—Å—É
        """
        return (user_level - 1) * 0.01

    def get_total_month_reward(self, user_level: int = 1) -> Dict[str, Any]:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –º—ñ—Å—è—Ü—å

        Args:
            user_level: –†—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
        """
        try:
            total_winix = 0
            total_tickets = 0

            for day in range(1, self.max_days + 1):
                reward = self.calculate_daily_bonus(
                    day_number=day,
                    current_streak=day,
                    user_level=user_level
                )
                total_winix += reward.winix
                total_tickets += reward.tickets

            return {
                "total_winix": total_winix,
                "total_tickets": total_tickets,
                "total_value_winix_equivalent": total_winix + (total_tickets * 100),
                "average_daily_winix": total_winix // self.max_days,
                "special_days_count": len(self.special_days),
                "perfect_streak_required": True
            }

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º—ñ—Å—è—á–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏: {e}")
            return {
                "total_winix": 0,
                "total_tickets": 0,
                "error": str(e)
            }

    def validate_claim_eligibility(self, last_claim_timestamp: Optional[int],
                                   current_timestamp: Optional[int] = None) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É

        Args:
            last_claim_timestamp: Timestamp –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
            current_timestamp: –ü–æ—Ç–æ—á–Ω–∏–π timestamp

        Returns:
            –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        """
        try:
            if current_timestamp is None:
                current_timestamp = int(datetime.now(timezone.utc).timestamp())

            if last_claim_timestamp is None:
                return {
                    "can_claim": True,
                    "reason": "first_claim",
                    "hours_remaining": 0,
                    "next_available": current_timestamp
                }

            # –ú—ñ–Ω—ñ–º—É–º 20 –≥–æ–¥–∏–Ω –º—ñ–∂ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º–∏
            min_hours = self.constants["MIN_HOURS_BETWEEN_CLAIMS"]
            min_seconds = min_hours * 3600

            time_since_last = current_timestamp - last_claim_timestamp

            if time_since_last >= min_seconds:
                return {
                    "can_claim": True,
                    "reason": "time_passed",
                    "hours_since_last": time_since_last / 3600,
                    "next_available": current_timestamp
                }
            else:
                remaining_seconds = min_seconds - time_since_last
                hours_remaining = remaining_seconds / 3600
                next_available = last_claim_timestamp + min_seconds

                return {
                    "can_claim": False,
                    "reason": "too_early",
                    "hours_remaining": hours_remaining,
                    "next_available": next_available
                }

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {e}")
            return {
                "can_claim": False,
                "reason": "error",
                "error": str(e)
            }

    def calculate_optimal_claim_times(self, timezone_offset: int = 0) -> List[Dict[str, Any]]:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö —á–∞—Å—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤

        Args:
            timezone_offset: –ó–º—ñ—â–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –≤ –≥–æ–¥–∏–Ω–∞—Ö

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö —á–∞—Å—ñ–≤
        """
        try:
            optimal_times = []

            # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —á–∞—Å–∏ (UTC)
            recommended_hours = [6, 12, 18, 22]  # 6:00, 12:00, 18:00, 22:00

            for hour in recommended_hours:
                local_hour = (hour + timezone_offset) % 24
                optimal_times.append({
                    "utc_hour": hour,
                    "local_hour": local_hour,
                    "description": self._get_time_description(local_hour)
                })

            return optimal_times

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö —á–∞—Å—ñ–≤: {e}")
            return []

    def _get_time_description(self, hour: int) -> str:
        """–û–ø–∏—Å —á–∞—Å—É"""
        if 5 <= hour <= 11:
            return "üåÖ –†–∞–Ω–æ–∫ - —Ö–æ—Ä–æ—à–∏–π –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è!"
        elif 12 <= hour <= 17:
            return "‚òÄÔ∏è –î–µ–Ω—å - –æ–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞!"
        elif 18 <= hour <= 22:
            return "üåÜ –í–µ—á—ñ—Ä - —á–∞—Å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É!"
        else:
            return "üåô –ù—ñ—á - –¥–ª—è –Ω—ñ—á–Ω–∏—Ö —Å–æ–≤!"

    def get_calculator_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        return {
            "base_winix_reward": self.base_winix,
            "max_days": self.max_days,
            "special_days_count": len(self.special_days),
            "tickets_days_count": len(self.tickets_rewards),
            "min_hours_between_claims": self.constants["MIN_HOURS_BETWEEN_CLAIMS"],
            "max_streak_bonus": "50%",
            "level_bonus_per_level": "1%",
            "total_possible_winix": sum(
                self.calculate_daily_bonus(day, day, 1).winix
                for day in range(1, self.max_days + 1)
            ),
            "total_possible_tickets": sum(self.tickets_rewards.values())
        }


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
reward_calculator = RewardCalculator()


def calculate_daily_reward(day_number: int, current_streak: int = 0,
                           user_level: int = 1, bonus_multiplier: float = 1.0) -> Reward:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏"""
    return reward_calculator.calculate_daily_bonus(
        day_number, current_streak, user_level, bonus_multiplier
    )


def get_reward_preview_for_user(user_level: int = 1) -> List[Dict[str, Any]]:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É"""
    return reward_calculator.get_reward_preview(user_level=user_level)


def validate_daily_claim(last_claim_timestamp: Optional[int]) -> Dict[str, Any]:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è"""
    return reward_calculator.validate_claim_eligibility(last_claim_timestamp)


# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'RewardCalculator',
    'reward_calculator',
    'calculate_daily_reward',
    'get_reward_preview_for_user',
    'validate_daily_claim'
]