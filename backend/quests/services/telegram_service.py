"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Telegram –±–æ—Ç–æ–º - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
–ë–µ–∑–ø–µ—á–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å–æ–∫ —Ç–∞ —ñ–Ω—à–∏—Ö –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""

import os
import logging
import asyncio
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# === –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ TELEGRAM ===
HAS_TELEGRAM = False
Bot = None
BadRequest = Forbidden = None

try:
    from telegram import Bot
    from telegram.error import BadRequest, Forbidden
    HAS_TELEGRAM = True
    logger.info("‚úÖ Telegram –ø–∞–∫–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Telegram –ø–∞–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    logger.info("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-telegram-bot")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–ª–∞—Å—ñ–≤
    class Bot:
        def __init__(self, token): pass
        async def get_chat(self, user_id): return None
        async def get_chat_member(self, chat_id, user_id): return None
        async def send_message(self, chat_id, text, **kwargs): return None
        async def get_me(self): return None

    class BadRequest(Exception): pass
    class Forbidden(Exception): pass


class TelegramService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API"""

    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É"""
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.bot_username = os.getenv('TELEGRAM_BOT_USERNAME', '@WINIX_Official_bot')
        self.bot = None
        self.is_available = HAS_TELEGRAM and bool(self.bot_token)

        if not HAS_TELEGRAM:
            logger.warning("‚ö†Ô∏è Telegram –ø–∞–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - —Å–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ –∑–∞–≥–ª—É—à–∫–∏")
            return

        if self.bot_token:
            try:
                self.bot = Bot(token=self.bot_token)
                logger.info("‚úÖ Telegram –±–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram –±–æ—Ç–∞: {str(e)}")
                self.is_available = False
        else:
            logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.is_available = False

    async def check_bot_started(self, user_id: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞

        Args:
            user_id: Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            bool: True —è–∫—â–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ
        """
        if not self.is_available or not self.bot:
            logger.warning("ü§ñ Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return False

        try:
            user_id = int(user_id)

            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
            chat = await self.bot.get_chat(user_id)

            if chat:
                logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –º–∞—î –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç –∑ –±–æ—Ç–æ–º")
                return True
            else:
                logger.info(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∑ –±–æ—Ç–æ–º")
                return False

        except (BadRequest, Forbidden) as e:
            logger.warning(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ç–∞ –¥–ª—è {user_id}: {str(e)}")
            return False

    async def check_channel_subscription(self, user_id: str, channel_username: str) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–∞–Ω–∞–ª

        Args:
            user_id: Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            channel_username: Username –∫–∞–Ω–∞–ª—É (–∑ @ –∞–±–æ –±–µ–∑)

        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        """
        if not self.is_available or not self.bot:
            return {
                'subscribed': False,
                'error': 'Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'
            }

        try:
            user_id = int(user_id)

            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ username –∫–∞–Ω–∞–ª—É
            if not channel_username.startswith('@'):
                channel_username = f'@{channel_username}'

            logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ {user_id} –Ω–∞ {channel_username}")

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —É—á–∞—Å–Ω–∏–∫–∞ –∫–∞–Ω–∞–ª—É
            member = await self.bot.get_chat_member(
                chat_id=channel_username,
                user_id=user_id
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
            if member.status in ['member', 'administrator', 'creator']:
                logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ {channel_username}")
                return {
                    'subscribed': True,
                    'status': member.status,
                    'channel': channel_username
                }
            else:
                logger.info(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ {channel_username}")
                return {
                    'subscribed': False,
                    'status': member.status,
                    'channel': channel_username
                }

        except BadRequest as e:
            error_msg = str(e)
            if "chat not found" in error_msg.lower():
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return {
                    'subscribed': False,
                    'error': f'–ö–∞–Ω–∞–ª {channel_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
                }
            elif "user not found" in error_msg.lower():
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return {
                    'subscribed': False,
                    'error': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
                }
            else:
                logger.error(f"‚ùå BadRequest –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏: {error_msg}")
                return {
                    'subscribed': False,
                    'error': f'–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {error_msg}'
                }
        except Forbidden as e:
            logger.error(f"‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É {channel_username}: {str(e)}")
            return {
                'subscribed': False,
                'error': f'–ë–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É {channel_username}'
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {str(e)}")
            return {
                'subscribed': False,
                'error': f'–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {str(e)}'
            }

    async def send_verification_message(self, user_id: str, message: str) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

        Args:
            user_id: Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        Returns:
            bool: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if not self.is_available or not self.bot:
            logger.warning("ü§ñ Telegram –±–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return False

        try:
            user_id = int(user_id)

            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )

            logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {str(e)}")
            return False

    async def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞

        Returns:
            Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±–æ—Ç–∞ –∞–±–æ None
        """
        if not self.is_available or not self.bot:
            return None

        try:
            me = await self.bot.get_me()
            return {
                'id': me.id,
                'username': me.username,
                'first_name': me.first_name,
                'is_bot': me.is_bot
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞: {str(e)}")
            return None

    def run_async_task(self, coro):
        """
        –ë–ï–ó–ü–ï–ß–ù–ò–ô –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –∑–∞–¥–∞—á—ñ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ

        Args:
            coro: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ—Ä—É—Ç–∏–Ω–∏
        """
        if not self.is_available:
            logger.warning("‚ö†Ô∏è Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return None

        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π event loop
            try:
                loop = asyncio.get_running_loop()
                # –Ø–∫—â–æ loop –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.run –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                import concurrent.futures
                import threading

                def run_in_thread():
                    return asyncio.run(coro)

                with concurrent.futures.ThreadPoolExecutor() as executor:
                    future = executor.submit(run_in_thread)
                    return future.result(timeout=30)  # 30 —Å–µ–∫—É–Ω–¥ timeout

            except RuntimeError:
                # –ù–µ–º–∞—î –∑–∞–ø—É—â–µ–Ω–æ–≥–æ loop, –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ asyncio.run
                return asyncio.run(coro)

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è async –∑–∞–¥–∞—á—ñ: {str(e)}")
            return None

    # === –°–ò–ù–•–†–û–ù–ù–Ü –û–ë–ì–û–†–¢–ö–ò ===
    def check_bot_started_sync(self, user_id: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è check_bot_started"""
        if not self.is_available:
            return False
        result = self.run_async_task(self.check_bot_started(user_id))
        return result if result is not None else False

    def check_channel_subscription_sync(self, user_id: str, channel_username: str) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è check_channel_subscription"""
        if not self.is_available:
            return {'subscribed': False, 'error': '–°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}
        result = self.run_async_task(self.check_channel_subscription(user_id, channel_username))
        return result if result is not None else {'subscribed': False, 'error': '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'}

    def send_verification_message_sync(self, user_id: str, message: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è send_verification_message"""
        if not self.is_available:
            return False
        result = self.run_async_task(self.send_verification_message(user_id, message))
        return result if result is not None else False

    def get_bot_info_sync(self) -> Optional[Dict[str, Any]]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è get_bot_info"""
        if not self.is_available:
            return None
        return self.run_async_task(self.get_bot_info())

    def get_service_status(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—É"""
        return {
            'available': self.is_available,
            'has_telegram_package': HAS_TELEGRAM,
            'has_bot_token': bool(self.bot_token),
            'bot_username': self.bot_username,
            'bot_initialized': self.bot is not None
        }


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É –∑ –±–µ–∑–ø–µ—á–Ω–æ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
try:
    telegram_service = TelegramService()
    logger.info("‚úÖ TelegramService —Å—Ç–≤–æ—Ä–µ–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è TelegramService: {e}")
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É
    class TelegramServiceStub:
        def __init__(self):
            self.is_available = False
        def check_bot_started_sync(self, user_id): return False
        def check_channel_subscription_sync(self, user_id, channel): return {'subscribed': False}
        def send_verification_message_sync(self, user_id, message): return False
        def get_bot_info_sync(self): return None
        def get_service_status(self): return {'available': False, 'error': 'Service creation failed'}

    telegram_service = TelegramServiceStub()


# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ó–†–£–ß–ù–û–ì–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø ===
def check_bot_started(user_id: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞"""
    return telegram_service.check_bot_started_sync(user_id)

def check_channel_subscription(user_id: str, channel_username: str) -> Dict[str, Any]:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    return telegram_service.check_channel_subscription_sync(user_id, channel_username)

def send_verification_message(user_id: str, message: str) -> bool:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    return telegram_service.send_verification_message_sync(user_id, message)

def get_bot_info() -> Optional[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞"""
    return telegram_service.get_bot_info_sync()

# === –ï–ö–°–ü–û–†–¢ ===
__all__ = [
    'TelegramService',
    'telegram_service',
    'check_bot_started',
    'check_channel_subscription',
    'send_verification_message',
    'get_bot_info',
    'HAS_TELEGRAM'
]