"""
üöÄ WINIX Services Package - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
–ë–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å
"""

import logging

logger = logging.getLogger(__name__)

# === –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –û–°–ù–û–í–ù–ò–• –°–ï–†–í–Ü–°–Ü–í ===

# üí∞ RewardCalculator - –ü–†–ê–¶–Æ–Ñ
reward_calculator = None
try:
    from .reward_calculator import (
        RewardCalculator,
        reward_calculator as _reward_calculator,
        calculate_daily_reward,
        get_reward_preview_for_user,
        validate_daily_claim
    )
    reward_calculator = _reward_calculator
    logger.info("‚úÖ RewardCalculator —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É RewardCalculator: {e}")
except Exception as e:
    logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ RewardCalculator: {e}")

# üì± TelegramService - –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢
telegram_service = None
TelegramService = None
check_bot_started = check_channel_subscription = None
send_verification_message = get_bot_info = None

try:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å telegram –ø–∞–∫–µ—Ç—É
    import importlib.util
    telegram_spec = importlib.util.find_spec("telegram")

    if telegram_spec is None:
        logger.warning("‚ö†Ô∏è –ü–∞–∫–µ—Ç 'python-telegram-bot' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        raise ImportError("telegram package not found")

    from .telegram_service import (
        TelegramService as _TelegramService,
        telegram_service as _telegram_service,
        check_bot_started as _check_bot_started,
        check_channel_subscription as _check_channel_subscription,
        send_verification_message as _send_verification_message,
        get_bot_info as _get_bot_info
    )

    TelegramService = _TelegramService
    telegram_service = _telegram_service
    check_bot_started = _check_bot_started
    check_channel_subscription = _check_channel_subscription
    send_verification_message = _send_verification_message
    get_bot_info = _get_bot_info

    logger.info("‚úÖ TelegramService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è TelegramService –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏
    class TelegramService:
        def __init__(self): pass
        def check_bot_started_sync(self, user_id): return False
        def check_channel_subscription_sync(self, user_id, channel): return {'subscribed': False}

    def check_bot_started(user_id): return False
    def check_channel_subscription(user_id, channel): return {'subscribed': False}
    def send_verification_message(user_id, message): return False
    def get_bot_info(): return None

except Exception as e:
    logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ TelegramService: {e}")

# üíé TONConnectService - –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢
ton_connect_service = None
TONConnectService = None
TONNetwork = TONBalance = FlexTokenInfo = None
TransactionType = None

try:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ aiohttp
    import importlib.util
    aiohttp_spec = importlib.util.find_spec("aiohttp")

    if aiohttp_spec is None:
        logger.warning("‚ö†Ô∏è –ü–∞–∫–µ—Ç 'aiohttp' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        raise ImportError("aiohttp package not found")

    from .ton_connect_service import (
        TONConnectService as _TONConnectService,
        ton_connect_service as _ton_connect_service,
        TONNetwork as _TONNetwork,
        TransactionType as _TransactionType,
        TONBalance as _TONBalance,
        FlexTokenInfo as _FlexTokenInfo
    )

    TONConnectService = _TONConnectService
    ton_connect_service = _ton_connect_service
    TONNetwork = _TONNetwork
    TransactionType = _TransactionType
    TONBalance = _TONBalance
    FlexTokenInfo = _FlexTokenInfo

    logger.info("‚úÖ TONConnectService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è TONConnectService –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏
    class TONConnectService:
        def __init__(self): pass
        def get_wallet_balance_sync(self, address): return None

    from enum import Enum
    class TONNetwork(Enum):
        MAINNET = "mainnet"
        TESTNET = "testnet"

except Exception as e:
    logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ TONConnectService: {e}")

# üí≥ TransactionService - –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢
transaction_service = None
TransactionService = None
TransactionError = InsufficientFundsError = None
TransactionValidationError = TransactionProcessingError = None

try:
    from .transaction_service import (
        TransactionService as _TransactionService,
        transaction_service as _transaction_service,
        TransactionError as _TransactionError,
        InsufficientFundsError as _InsufficientFundsError,
        TransactionValidationError as _TransactionValidationError,
        TransactionProcessingError as _TransactionProcessingError
    )

    TransactionService = _TransactionService
    transaction_service = _transaction_service
    TransactionError = _TransactionError
    InsufficientFundsError = _InsufficientFundsError
    TransactionValidationError = _TransactionValidationError
    TransactionProcessingError = _TransactionProcessingError

    logger.info("‚úÖ TransactionService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è TransactionService –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏
    class TransactionService:
        def __init__(self): pass
        def process_reward(self, *args, **kwargs): return {'success': False, 'error': 'Service unavailable'}

    class TransactionError(Exception): pass
    class InsufficientFundsError(TransactionError): pass

except Exception as e:
    logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ TransactionService: {e}")

# ‚úÖ VerificationService - –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –ë–ï–ó –ê–í–¢–û–°–¢–ê–†–¢–£
verification_service = None
VerificationService = None
TaskType = VerificationStatus = None

try:
    from .verification_service import (
        VerificationService as _VerificationService,
        verification_service as _verification_service,
        TaskType as _TaskType,
        VerificationStatus as _VerificationStatus
    )

    VerificationService = _VerificationService
    verification_service = _verification_service
    TaskType = _TaskType
    VerificationStatus = _VerificationStatus

    logger.info("‚úÖ VerificationService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è VerificationService –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏
    class VerificationService:
        def __init__(self): pass
        def start_task_verification(self, *args): return {'success': False}

    from enum import Enum
    class TaskType(Enum):
        TELEGRAM_SUBSCRIBE = "telegram_subscribe"

except Exception as e:
    logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ VerificationService: {e}")

# === –ì–õ–û–ë–ê–õ–¨–ù–Ü –Ü–ù–°–¢–ê–ù–¶–Ü–á –°–ï–†–í–Ü–°–Ü–í ===
SERVICES = {
    'reward_calculator': reward_calculator,
    'telegram_service': telegram_service,
    'ton_connect_service': ton_connect_service,
    'transaction_service': transaction_service,
    'verification_service': verification_service
}

# === –§–£–ù–ö–¶–Ü–á-–•–ï–õ–ü–ï–†–ò ===

def get_service(service_name: str):
    """–ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É –∑–∞ –Ω–∞–∑–≤–æ—é"""
    service = SERVICES.get(service_name)
    if service is None:
        logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å '{service_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    return service

def check_services_health():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    health_status = {}

    for name, service in SERVICES.items():
        try:
            if service is not None:
                if hasattr(service, 'get_stats'):
                    stats = service.get_stats()
                    health_status[name] = {'status': 'healthy', 'stats': stats}
                elif hasattr(service, '__class__'):
                    health_status[name] = {'status': 'healthy', 'class': service.__class__.__name__}
                else:
                    health_status[name] = {'status': 'unknown'}
            else:
                health_status[name] = {'status': 'unavailable'}
        except Exception as e:
            health_status[name] = {'status': 'error', 'error': str(e)}

    return health_status

def init_all_services():
    """–ë–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    logger.info("üöÄ –ë–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ WINIX...")

    available_services = []
    failed_services = []

    for name, service in SERVICES.items():
        if service is not None:
            try:
                # –¢–µ—Å—Ç–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—É
                if hasattr(service, '__class__'):
                    available_services.append(name)
                    logger.info(f"‚úÖ {name} –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
                else:
                    failed_services.append(name)
                    logger.warning(f"‚ö†Ô∏è {name} —á–∞—Å—Ç–∫–æ–≤–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            except Exception as e:
                failed_services.append(name)
                logger.error(f"‚ùå {name} –º–∞—î –ø–æ–º–∏–ª–∫–∏: {e}")
        else:
            failed_services.append(name)
            logger.error(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

    logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤: {len(available_services)}/{len(SERVICES)} –ø–æ–≤–Ω—ñ—Å—Ç—é –¥–æ—Å—Ç—É–ø–Ω—ñ")

    if failed_services:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏: {', '.join(failed_services)}")

    return {
        'available': available_services,
        'failed': failed_services,
        'total': len(SERVICES),
        'success_rate': (len(available_services) / len(SERVICES)) * 100 if SERVICES else 0
    }

# === –ï–ö–°–ü–û–†–¢ ===
__all__ = [
    # –ö–ª–∞—Å–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    'RewardCalculator', 'TelegramService', 'TONConnectService',
    'TransactionService', 'VerificationService',

    # –ì–ª–æ–±–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—ó
    'reward_calculator', 'telegram_service', 'ton_connect_service',
    'transaction_service', 'verification_service',

    # –§—É–Ω–∫—Ü—ñ—ó-—Ö–µ–ª–ø–µ—Ä–∏
    'calculate_daily_reward', 'get_reward_preview_for_user', 'validate_daily_claim',
    'check_bot_started', 'check_channel_subscription', 'send_verification_message', 'get_bot_info',

    # –í–∏–Ω—è—Ç–∫–∏
    'TransactionError', 'InsufficientFundsError',
    'TransactionValidationError', 'TransactionProcessingError',

    # –ï–Ω—É–º–∏
    'TONNetwork', 'TransactionType', 'TaskType', 'VerificationStatus',

    # –î–∞—Ç–∞–∫–ª–∞—Å–∏
    'TONBalance', 'FlexTokenInfo',

    # –£—Ç–∏–ª—ñ—Ç–∏ –ø–∞–∫–µ—Ç—É
    'get_service', 'check_services_health', 'init_all_services', 'SERVICES'
]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –±–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
logger.info("üéØ Services package —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ fallback'–∞–º–∏")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
available_count = len([s for s in SERVICES.values() if s is not None])
total_count = len(SERVICES)

if available_count == total_count:
    logger.info("üéâ –í–°–Ü –°–ï–†–í–Ü–°–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û –£–°–ü–Ü–®–ù–û!")
elif available_count > 0:
    logger.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {available_count}/{total_count} —Å–µ—Ä–≤—ñ—Å—ñ–≤")
else:
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ñ–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")

logger.info("‚úÖ Services package –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ fallback –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")