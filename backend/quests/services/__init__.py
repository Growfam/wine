"""
üöÄ WINIX Services Package
–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å

–¶–µ–π —Ñ–∞–π–ª –æ—Ä–≥–∞–Ω—ñ–∑—É—î –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É WINIX.
–Ü–º–ø–æ—Ä—Ç—É–π —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–æ—Å—Ç–æ: from backend.quests.services import reward_calculator
"""

import logging

logger = logging.getLogger(__name__)

# === –Ü–ú–ü–û–†–¢ –û–°–ù–û–í–ù–ò–• –°–ï–†–í–Ü–°–Ü–í ===

try:
    # üí∞ –°–µ—Ä–≤—ñ—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
    from .reward_calculator import (
        RewardCalculator,
        reward_calculator,
        calculate_daily_reward,
        get_reward_preview_for_user,
        validate_daily_claim
    )

    logger.info("‚úÖ RewardCalculator —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É RewardCalculator: {e}")
    reward_calculator = None

try:
    # üì± Telegram —Å–µ—Ä–≤—ñ—Å
    from .telegram_service import (
        TelegramService,
        telegram_service,
        check_bot_started,
        check_channel_subscription,
        send_verification_message,
        get_bot_info
    )

    logger.info("‚úÖ TelegramService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É TelegramService: {e}")
    telegram_service = None

try:
    # üíé TON Connect —Å–µ—Ä–≤—ñ—Å
    from .ton_connect_service import (
        TONConnectService,
        ton_connect_service,
        TONNetwork,
        TransactionType,
        TONBalance,
        FlexTokenInfo
    )

    logger.info("‚úÖ TONConnectService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É TONConnectService: {e}")
    ton_connect_service = None

try:
    # üí≥ –°–µ—Ä–≤—ñ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    from .transaction_service import (
        TransactionService,
        transaction_service,
        TransactionError,
        InsufficientFundsError,
        TransactionValidationError,
        TransactionProcessingError
    )

    logger.info("‚úÖ TransactionService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É TransactionService: {e}")
    transaction_service = None

try:
    # ‚úÖ –°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å
    from .verification_service import (
        VerificationService,
        verification_service,
        TaskType,
        VerificationStatus
    )

    logger.info("‚úÖ VerificationService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É VerificationService: {e}")
    verification_service = None

# === –ì–õ–û–ë–ê–õ–¨–ù–Ü –Ü–ù–°–¢–ê–ù–¶–Ü–á –°–ï–†–í–Ü–°–Ü–í ===

# –û—Å–Ω–æ–≤–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏, –≥–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è üî•
SERVICES = {
    'reward_calculator': reward_calculator,
    'telegram_service': telegram_service,
    'ton_connect_service': ton_connect_service,
    'transaction_service': transaction_service,
    'verification_service': verification_service
}


# === –§–£–ù–ö–¶–Ü–á-–•–ï–õ–ü–ï–†–ò ===

def get_service(service_name: str):
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å –∑–∞ –Ω–∞–∑–≤–æ—é

    Args:
        service_name: –ù–∞–∑–≤–∞ —Å–µ—Ä–≤—ñ—Å—É

    Returns:
        –Ü–Ω—Å—Ç–∞–Ω—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∞–±–æ None

    Example:
        >>> reward_calc = get_service('reward_calculator')
        >>> if reward_calc:
        >>>     reward = reward_calc.calculate_daily_bonus(1, 1)
    """
    service = SERVICES.get(service_name)
    if service is None:
        logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å '{service_name}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    return service


def check_services_health():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤

    Returns:
        Dict –∑ —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
    """
    health_status = {}

    for name, service in SERVICES.items():
        try:
            if service is not None:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Ä–≤—ñ—Å –º–∞—î –º–µ—Ç–æ–¥ get_stats –∞–±–æ similar
                if hasattr(service, 'get_stats'):
                    stats = service.get_stats()
                    health_status[name] = {
                        'status': 'healthy',
                        'stats': stats
                    }
                elif hasattr(service, '__class__'):
                    health_status[name] = {
                        'status': 'healthy',
                        'class': service.__class__.__name__
                    }
                else:
                    health_status[name] = {'status': 'unknown'}
            else:
                health_status[name] = {'status': 'unavailable'}
        except Exception as e:
            health_status[name] = {
                'status': 'error',
                'error': str(e)
            }

    return health_status


def init_all_services():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    –ö–æ—Ä–∏—Å–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫—É
    """
    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ WINIX...")

    available_services = []
    failed_services = []

    for name, service in SERVICES.items():
        if service is not None:
            available_services.append(name)
            logger.info(f"‚úÖ {name} –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        else:
            failed_services.append(name)
            logger.error(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

    logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤: {len(available_services)}/{len(SERVICES)} –¥–æ—Å—Ç—É–ø–Ω—ñ")

    if failed_services:
        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏: {', '.join(failed_services)}")

    return {
        'available': available_services,
        'failed': failed_services,
        'total': len(SERVICES)
    }


# === –ï–ö–°–ü–û–†–¢ ===

__all__ = [
    # –ö–ª–∞—Å–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    'RewardCalculator',
    'TelegramService',
    'TONConnectService',
    'TransactionService',
    'VerificationService',

    # –ì–ª–æ–±–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—ó
    'reward_calculator',
    'telegram_service',
    'ton_connect_service',
    'transaction_service',
    'verification_service',

    # –§—É–Ω–∫—Ü—ñ—ó-—Ö–µ–ª–ø–µ—Ä–∏
    'calculate_daily_reward',
    'get_reward_preview_for_user',
    'validate_daily_claim',
    'check_bot_started',
    'check_channel_subscription',
    'send_verification_message',
    'get_bot_info',

    # –í–∏–Ω—è—Ç–∫–∏
    'TransactionError',
    'InsufficientFundsError',
    'TransactionValidationError',
    'TransactionProcessingError',

    # –ï–Ω—É–º–∏
    'TONNetwork',
    'TransactionType',
    'TaskType',
    'VerificationStatus',

    # –î–∞—Ç–∞–∫–ª–∞—Å–∏
    'TONBalance',
    'FlexTokenInfo',

    # –£—Ç–∏–ª—ñ—Ç–∏ –ø–∞–∫–µ—Ç—É
    'get_service',
    'check_services_health',
    'init_all_services',
    'SERVICES'
]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
logger.info("üéØ Services package —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
critical_services = ['reward_calculator', 'transaction_service']
missing_critical = [name for name in critical_services if SERVICES.get(name) is None]

if missing_critical:
    logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ù–Ü –°–ï–†–í–Ü–°–ò –ù–ï–î–û–°–¢–£–ü–ù–Ü: {missing_critical}")
else:
    logger.info("‚úÖ –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ")