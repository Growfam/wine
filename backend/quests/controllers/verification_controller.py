"""
–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –¥–ª—è API –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å
Flask endpoints –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó WINIX
"""

import logging
import json
from datetime import datetime, timezone
from flask import request, jsonify
from functools import wraps
from typing import Dict, Any, Optional

try:
    from .verification_service import verification_service
    from .telegram_service import telegram_service
except ImportError:
    try:
        from verification_service import verification_service
        from telegram_service import telegram_service
    except ImportError:
        verification_service = None
        telegram_service = None

try:
    from supabase_client import get_user, update_user
except ImportError:
    try:
        from backend.supabase_client import get_user, update_user
    except ImportError:
        get_user = None
        update_user = None

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


def validate_user_id(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó user_id"""

    @wraps(f)
    def decorated_function(*args, **kwargs):
        user_id = kwargs.get('user_id') or request.view_args.get('user_id')

        if not user_id:
            return jsonify({
                'success': False,
                'error': 'user_id –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
                'code': 'MISSING_USER_ID'
            }), 400

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        if get_user:
            user = get_user(str(user_id))
            if not user:
                return jsonify({
                    'success': False,
                    'error': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π',
                    'code': 'USER_NOT_FOUND'
                }), 404

        return f(*args, **kwargs)

    return decorated_function


def handle_verification_errors(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""

    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {f.__name__}: {str(e)}")
            return jsonify({
                'success': False,
                'error': str(e),
                'code': 'VERIFICATION_ERROR'
            }), 500

    return decorated_function


@validate_user_id
@handle_verification_errors
def verify_telegram_subscription(user_id: str):
    """
    POST /api/verify/telegram/:user_id
    –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Telegram –ø—ñ–¥–ø–∏—Å–∫–∏
    """
    logger.info(f"üì± –ó–∞–ø–∏—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Telegram –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    if not telegram_service:
        return jsonify({
            'success': False,
            'error': 'Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'TELEGRAM_SERVICE_UNAVAILABLE'
        }), 503

    try:
        data = request.get_json() or {}
        channel_username = data.get('channel_username', '')

        if not channel_username:
            return jsonify({
                'success': False,
                'error': 'channel_username –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
                'code': 'MISSING_CHANNEL'
            }), 400

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
        result = telegram_service.check_channel_subscription_sync(user_id, channel_username)

        if result.get('subscribed', False):
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ {channel_username}")

            # –ú–æ–∂–Ω–∞ —Ç—É—Ç –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return jsonify({
                'success': True,
                'verified': True,
                'channel': channel_username,
                'status': result.get('status'),
                'message': f'–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel_username} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞'
            })
        else:
            logger.info(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ {channel_username}")

            return jsonify({
                'success': False,
                'verified': False,
                'channel': channel_username,
                'error': result.get('error', '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞'),
                'message': f'–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ {channel_username} —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É'
            })

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Telegram –ø—ñ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'TELEGRAM_VERIFICATION_ERROR'
        }), 500


@validate_user_id
@handle_verification_errors
def check_bot_started(user_id: str):
    """
    GET /api/verify/check-bot/:user_id
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    """
    logger.info(f"ü§ñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    if not telegram_service:
        return jsonify({
            'success': False,
            'error': 'Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'TELEGRAM_SERVICE_UNAVAILABLE'
        }), 503

    try:
        bot_started = telegram_service.check_bot_started_sync(user_id)

        if bot_started:
            logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id}")
            return jsonify({
                'success': True,
                'bot_started': True,
                'message': '–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ'
            })
        else:
            logger.info(f"‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id}")
            return jsonify({
                'success': False,
                'bot_started': False,
                'message': '–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞'
            })

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ç–∞: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'BOT_CHECK_ERROR'
        }), 500


@validate_user_id
@handle_verification_errors
def verify_social_task(user_id: str, platform: str):
    """
    POST /api/verify/social/:user_id/:platform
    –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    """
    logger.info(f"üåê –ó–∞–ø–∏—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–æ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è {platform} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    if not verification_service:
        return jsonify({
            'success': False,
            'error': '–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'VERIFICATION_SERVICE_UNAVAILABLE'
        }), 503

    try:
        data = request.get_json() or {}
        task_id = data.get('task_id', '')
        task_data = data.get('task_data', {})

        if not task_id:
            return jsonify({
                'success': False,
                'error': 'task_id –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
                'code': 'MISSING_TASK_ID'
            }), 400

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
        platform_task_types = {
            'youtube': 'youtube_subscribe',
            'twitter': 'twitter_follow',
            'discord': 'discord_join',
            'telegram': 'telegram_subscribe'
        }

        task_type = platform_task_types.get(platform.lower())
        if not task_type:
            return jsonify({
                'success': False,
                'error': f'–ù–µ–≤—ñ–¥–æ–º–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}',
                'code': 'UNKNOWN_PLATFORM'
            }), 400

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
        result = verification_service.start_task_verification(
            user_id=user_id,
            task_id=task_id,
            task_type=task_type,
            task_data=task_data
        )

        if result['success']:
            return jsonify(result)
        else:
            return jsonify(result), 400

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–æ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'SOCIAL_VERIFICATION_ERROR'
        }), 500


@validate_user_id
@handle_verification_errors
def start_task_verification(user_id: str, task_id: str):
    """
    POST /api/verify/start/:user_id/:task_id
    –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è
    """
    logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    if not verification_service:
        return jsonify({
            'success': False,
            'error': '–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'VERIFICATION_SERVICE_UNAVAILABLE'
        }), 503

    try:
        data = request.get_json() or {}
        task_type = data.get('task_type', '')
        task_data = data.get('task_data', {})

        if not task_type:
            return jsonify({
                'success': False,
                'error': 'task_type –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
                'code': 'MISSING_TASK_TYPE'
            }), 400

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
        result = verification_service.start_task_verification(
            user_id=user_id,
            task_id=task_id,
            task_type=task_type,
            task_data=task_data
        )

        return jsonify(result)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'START_VERIFICATION_ERROR'
        }), 500


@validate_user_id
@handle_verification_errors
def check_verification_status(user_id: str, task_id: str):
    """
    GET /api/verify/status/:user_id/:task_id
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    """
    logger.info(f"üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    if not verification_service:
        return jsonify({
            'success': False,
            'error': '–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'VERIFICATION_SERVICE_UNAVAILABLE'
        }), 503

    try:
        result = verification_service.check_verification_status(user_id, task_id)
        return jsonify(result)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'STATUS_CHECK_ERROR'
        }), 500


@validate_user_id
@handle_verification_errors
def complete_verification(user_id: str, task_id: str):
    """
    POST /api/verify/complete/:user_id/:task_id
    –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è
    """
    logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    if not verification_service:
        return jsonify({
            'success': False,
            'error': '–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'VERIFICATION_SERVICE_UNAVAILABLE'
        }), 503

    try:
        result = verification_service.complete_verification(user_id, task_id)

        if result['success']:
            return jsonify(result)
        else:
            status_code = 400
            if 'remaining_time' in result:
                status_code = 425  # Too Early
            elif 'attempts_left' in result:
                status_code = 409  # Conflict

            return jsonify(result), status_code

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'COMPLETE_VERIFICATION_ERROR'
        }), 500


@handle_verification_errors
def get_verification_statistics():
    """
    GET /api/verify/statistics
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    """
    logger.info("üìà –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")

    if not verification_service:
        return jsonify({
            'success': False,
            'error': '–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'VERIFICATION_SERVICE_UNAVAILABLE'
        }), 503

    try:
        stats = verification_service.get_verification_statistics()

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Telegram –±–æ—Ç–∞
        bot_info = None
        if telegram_service:
            bot_info = telegram_service.get_bot_info_sync()

        return jsonify({
            'success': True,
            'statistics': stats,
            'bot_info': bot_info,
            'timestamp': datetime.now(timezone.utc).isoformat()
        })

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'STATISTICS_ERROR'
        }), 500


@handle_verification_errors
def cleanup_expired_verifications():
    """
    POST /api/verify/cleanup
    –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π
    """
    logger.info("üßπ –ó–∞–ø–∏—Ç –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π")

    if not verification_service:
        return jsonify({
            'success': False,
            'error': '–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'VERIFICATION_SERVICE_UNAVAILABLE'
        }), 503

    try:
        verification_service.cleanup_expired_verifications()

        return jsonify({
            'success': True,
            'message': '–ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –æ—á–∏—â–µ–Ω–æ',
            'timestamp': datetime.now(timezone.utc).isoformat()
        })

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'CLEANUP_ERROR'
        }), 500


def get_telegram_bot_info():
    """
    GET /api/verify/bot-info
    –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ Telegram –±–æ—Ç–∞
    """
    logger.info("‚ÑπÔ∏è –ó–∞–ø–∏—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞")

    if not telegram_service:
        return jsonify({
            'success': False,
            'error': 'Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
            'code': 'TELEGRAM_SERVICE_UNAVAILABLE'
        }), 503

    try:
        bot_info = telegram_service.get_bot_info_sync()

        if bot_info:
            return jsonify({
                'success': True,
                'bot_info': bot_info,
                'bot_username': telegram_service.bot_username,
                'available': True
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞',
                'available': False
            })

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'BOT_INFO_ERROR'
        }), 500


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
@validate_user_id
@handle_verification_errors
def get_user_completed_tasks(user_id: str):
    """
    GET /api/verify/completed/:user_id
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    logger.info(f"üìã –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ supabase –¥–ª—è –∑–∞–ø–∏—Ç—É
        try:
            from supabase_client import supabase
        except ImportError:
            from backend.supabase_client import supabase

        if not supabase:
            return jsonify({
                'success': False,
                'error': '–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'code': 'DATABASE_UNAVAILABLE'
            }), 503

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        result = supabase.table('completed_tasks').select('*').eq('user_id', user_id).execute()

        completed_tasks = []
        for task in result.data:
            completed_tasks.append({
                'task_id': task['task_id'],
                'task_type': task['task_type'],
                'completed_at': task['completed_at'],
                'reward': json.loads(task.get('reward', '{}'))
            })

        return jsonify({
            'success': True,
            'completed_tasks': completed_tasks,
            'total_count': len(completed_tasks)
        })

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'COMPLETED_TASKS_ERROR'
        }), 500


@validate_user_id
@handle_verification_errors
def check_task_completion(user_id: str, task_id: str):
    """
    GET /api/verify/check/:user_id/:task_id
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ
    """
    logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ supabase –¥–ª—è –∑–∞–ø–∏—Ç—É
        try:
            from supabase_client import supabase
        except ImportError:
            from backend.supabase_client import supabase

        if not supabase:
            return jsonify({
                'success': False,
                'error': '–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'code': 'DATABASE_UNAVAILABLE'
            }), 503

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ
        result = supabase.table('completed_tasks').select('*').eq('user_id', user_id).eq('task_id', task_id).execute()

        is_completed = len(result.data) > 0

        response_data = {
            'success': True,
            'task_id': task_id,
            'user_id': user_id,
            'is_completed': is_completed
        }

        if is_completed:
            task_data = result.data[0]
            response_data.update({
                'completed_at': task_data['completed_at'],
                'reward': json.loads(task_data.get('reward', '{}'))
            })

        return jsonify(response_data)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'code': 'TASK_CHECK_ERROR'
        }), 500


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
__all__ = [
    'verify_telegram_subscription',
    'check_bot_started',
    'verify_social_task',
    'start_task_verification',
    'check_verification_status',
    'complete_verification',
    'get_verification_statistics',
    'cleanup_expired_verifications',
    'get_telegram_bot_info',
    'get_user_completed_tasks',
    'check_task_completion'
]