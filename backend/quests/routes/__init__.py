"""
–ú–∞—Ä—à—Ä—É—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
"""

import logging
from flask import Flask

logger = logging.getLogger(__name__)


def register_quests_routes(app: Flask) -> bool:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å

    Args:
        app: Flask –¥–æ–¥–∞—Ç–æ–∫

    Returns:
        bool: True —è–∫—â–æ –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
    """
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ú–ê–†–®–†–£–¢–Ü–í –°–ò–°–¢–ï–ú–ò –ó–ê–í–î–ê–ù–¨ ===")

    success_count = 0
    total_routes = 0
    registration_errors = []

    # === 1. –ú–ê–†–®–†–£–¢–ò –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á ===
    try:
        logger.info("üîê –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è auth –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .auth_routes import register_auth_routes

        if register_auth_routes(app):
            success_count += 1
            logger.info("‚úÖ Auth –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó auth –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("Auth: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó auth –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")

        # –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–∫–∏ Blueprint
        error_msg = str(e).lower()
        if "already registered" in error_msg and "auth" in error_msg:
            logger.error("üî¥ –ö–û–ù–§–õ–Ü–ö–¢ BLUEPRINT 'auth' - Blueprint –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!")
            logger.error("üí° –†—ñ—à–µ–Ω–Ω—è: –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞–∑–≤—É Blueprint –≤ auth_routes.py –Ω–∞ 'quests_auth'")
            registration_errors.append("Auth: Blueprint name conflict - 'auth' already exists")
        else:
            registration_errors.append(f"Auth: {str(e)}")
        total_routes += 1

    # === 2. –ú–ê–†–®–†–£–¢–ò –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
    try:
        logger.info("üë§ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è user –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .user_routes import register_user_routes

        if register_user_routes(app):
            success_count += 1
            logger.info("‚úÖ User –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó user –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("User: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó user –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        registration_errors.append(f"User: {str(e)}")
        total_routes += 1

    # === 3. –ú–ê–†–®–†–£–¢–ò –©–û–î–ï–ù–ù–ò–• –ë–û–ù–£–°–Ü–í ===
    try:
        logger.info("üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è daily –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .daily_routes import register_daily_routes

        if register_daily_routes(app):
            success_count += 1
            logger.info("‚úÖ Daily –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó daily –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("Daily: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó daily –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        registration_errors.append(f"Daily: {str(e)}")
        total_routes += 1

    # === 4. –ú–ê–†–®–†–£–¢–ò –ê–ù–ê–õ–Ü–¢–ò–ö–ò ===
    try:
        logger.info("üìä –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è analytics –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .analytics_routes import register_analytics_routes

        if register_analytics_routes(app):
            success_count += 1
            logger.info("‚úÖ Analytics –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó analytics –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("Analytics: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó analytics –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        registration_errors.append(f"Analytics: {str(e)}")
        total_routes += 1

    # === 5. –ú–ê–†–®–†–£–¢–ò FLEX ===
    try:
        logger.info("üíé –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è FLEX –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .flex_routes import register_flex_routes

        if register_flex_routes(app):
            success_count += 1
            logger.info("‚úÖ FLEX –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó FLEX –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("FLEX: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó FLEX –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        registration_errors.append(f"FLEX: {str(e)}")
        total_routes += 1

    # === 6. –ú–ê–†–®–†–£–¢–ò –ó–ê–í–î–ê–ù–¨ ===
    try:
        logger.info("üìã –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è tasks –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .tasks_routes import register_tasks_routes

        if register_tasks_routes(app):
            success_count += 1
            logger.info("‚úÖ Tasks –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó tasks –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("Tasks: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó tasks –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        registration_errors.append(f"Tasks: {str(e)}")
        total_routes += 1

    # === 7. –ú–ê–†–®–†–£–¢–ò –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ===
    try:
        logger.info("üí≥ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è transaction –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .transaction_routes import register_transaction_routes

        if register_transaction_routes(app):
            success_count += 1
            logger.info("‚úÖ Transaction –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó transaction –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("Transaction: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó transaction –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        error_msg = str(e).lower()
        if "blueprint" in error_msg and "already registered" in error_msg:
            logger.error("üî¥ –ö–û–ù–§–õ–Ü–ö–¢ BLUEPRINT 'transaction' - –º–æ–∂–ª–∏–≤–æ Blueprint –≤–∂–µ —ñ—Å–Ω—É—î!")
            registration_errors.append("Transaction: Blueprint name conflict")
        else:
            registration_errors.append(f"Transaction: {str(e)}")
        total_routes += 1

    # === 8. –ú–ê–†–®–†–£–¢–ò –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–á ===
    try:
        logger.info("üîç –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è verification –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .verification_routes import register_verification_routes

        if register_verification_routes(app):
            success_count += 1
            logger.info("‚úÖ Verification –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó verification –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("Verification: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó verification –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        registration_errors.append(f"Verification: {str(e)}")
        total_routes += 1

    # === 9. –ú–ê–†–®–†–£–¢–ò –ì–ê–ú–ê–ù–¶–Ü–í ===
    try:
        logger.info("üí∞ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è wallet –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
        from .wallet_routes import register_wallet_routes

        if register_wallet_routes(app):
            success_count += 1
            logger.info("‚úÖ Wallet –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó wallet –º–∞—Ä—à—Ä—É—Ç—ñ–≤: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ False")
            registration_errors.append("Wallet: registration function returned False")
        total_routes += 1

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó wallet –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        registration_errors.append(f"Wallet: {str(e)}")
        total_routes += 1

    # === –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á ===
    logger.info("üìä === –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –ú–ê–†–®–†–£–¢–Ü–í ===")

    success_rate = (success_count / total_routes * 100) if total_routes > 0 else 0

    if success_count == total_routes:
        logger.info(f"üéâ –í—Å—ñ {total_routes} –≥—Ä—É–ø –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        logger.warning(f"‚ö†Ô∏è –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {success_count}/{total_routes} –≥—Ä—É–ø –º–∞—Ä—à—Ä—É—Ç—ñ–≤ ({success_rate:.1f}%)")

    # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    if registration_errors:
        logger.error("üî¥ –ü–æ–º–∏–ª–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        for i, error in enumerate(registration_errors, 1):
            logger.error(f"   {i}. {error}")

    # –ê–Ω–∞–ª—ñ–∑ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    try:
        quests_routes_count = 0
        quests_routes = []

        for rule in app.url_map.iter_rules():
            rule_str = str(rule.rule)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –º–∞—Ä—à—Ä—É—Ç —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å
            if '/api/' in rule_str and any(prefix in rule_str for prefix in [
                '/auth/', '/user/', '/daily/', '/analytics/', '/flex/',
                '/tasks/', '/transactions/', '/verify/', '/wallet/'
            ]):
                quests_routes_count += 1
                quests_routes.append({
                    'path': rule_str,
                    'methods': list(rule.methods - {'HEAD', 'OPTIONS'}),
                    'endpoint': rule.endpoint
                })

        logger.info(f"üìã –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å: {quests_routes_count}")

        # –ì—Ä—É–ø—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –ø–æ —Ç–∏–ø–∞—Ö
        routes_by_type = {}
        for route in quests_routes:
            for route_type in ['auth', 'user', 'daily', 'analytics', 'flex', 'tasks', 'transactions', 'verify', 'wallet']:
                if f'/{route_type}/' in route['path']:
                    if route_type not in routes_by_type:
                        routes_by_type[route_type] = 0
                    routes_by_type[route_type] += 1
                    break

        logger.info("üìà –ú–∞—Ä—à—Ä—É—Ç–∏ –ø–æ —Ç–∏–ø–∞—Ö:")
        for route_type, count in routes_by_type.items():
            logger.info(f"   {route_type}: {count} –º–∞—Ä—à—Ä—É—Ç—ñ–≤")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")

    # === –ö–†–ò–¢–ò–ß–ù–Ü –ü–ï–†–ï–í–Ü–†–ö–ò ===

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 1: –ß–∏ —î –≤–∑–∞–≥–∞–ª—ñ –º–∞—Ä—à—Ä—É—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å
    if quests_routes_count == 0:
        logger.error("üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–Ü –û–î–ù–û–ì–û –ú–ê–†–®–†–£–¢–£ –°–ò–°–¢–ï–ú–ò –ó–ê–í–î–ê–ù–¨ –ù–ï –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û!")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 2: –ß–∏ —Ö–æ—á–∞ –± –ø–æ–ª–æ–≤–∏–Ω–∞ –≥—Ä—É–ø –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞
    if success_count < (total_routes / 2):
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ –≥—Ä—É–ø –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ({success_count}/{total_routes})")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 3: –ß–∏ —î –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–∏—Å—Ç–µ–º–∏
    critical_systems = ['auth', 'user', 'daily']
    missing_critical = []

    for system in critical_systems:
        if system not in routes_by_type or routes_by_type[system] == 0:
            missing_critical.append(system)

    if missing_critical:
        logger.error(f"‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–∏—Å—Ç–µ–º–∏: {', '.join(missing_critical)}")

    # === –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===

    if success_count >= (total_routes * 0.7):  # 70% —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
        logger.info("üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –£–°–ü–Ü–®–ù–û!")
        return True
    elif success_count >= (total_routes * 0.5):  # 50% —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
        logger.warning("‚ö†Ô∏è –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏")
        return True
    else:
        logger.error("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ö–†–ò–¢–ò–ß–ù–ò–ú–ò –ø–æ–º–∏–ª–∫–∞–º–∏")
        return False


def diagnose_quests_routes(app: Flask) -> dict:
    """
    –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω—É –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å

    Args:
        app: Flask –¥–æ–¥–∞—Ç–æ–∫

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    logger.info("üîç === –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ê–†–®–†–£–¢–Ü–í –°–ò–°–¢–ï–ú–ò –ó–ê–í–î–ê–ù–¨ ===")

    diagnosis = {
        'total_routes': 0,
        'quests_routes': 0,
        'routes_by_type': {},
        'blueprint_conflicts': [],
        'missing_endpoints': [],
        'duplicate_endpoints': [],
        'recommendations': []
    }

    try:
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        all_routes = list(app.url_map.iter_rules())
        diagnosis['total_routes'] = len(all_routes)

        # –ì—Ä—É–ø—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å
        quests_routes = []
        endpoint_counts = {}

        for rule in all_routes:
            rule_str = str(rule.rule)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ endpoint'–∏ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            if rule.endpoint:
                endpoint_counts[rule.endpoint] = endpoint_counts.get(rule.endpoint, 0) + 1

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å
            if '/api/' in rule_str and any(prefix in rule_str for prefix in [
                '/auth/', '/user/', '/daily/', '/analytics/', '/flex/',
                '/tasks/', '/transactions/', '/verify/', '/wallet/'
            ]):
                quests_routes.append(rule)
                diagnosis['quests_routes'] += 1

                # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö
                for route_type in ['auth', 'user', 'daily', 'analytics', 'flex', 'tasks', 'transactions', 'verify', 'wallet']:
                    if f'/{route_type}/' in rule_str:
                        if route_type not in diagnosis['routes_by_type']:
                            diagnosis['routes_by_type'][route_type] = []
                        diagnosis['routes_by_type'][route_type].append({
                            'path': rule_str,
                            'methods': list(rule.methods - {'HEAD', 'OPTIONS'}),
                            'endpoint': rule.endpoint
                        })
                        break

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ endpoint'—ñ–≤
        for endpoint, count in endpoint_counts.items():
            if count > 1 and endpoint:
                diagnosis['duplicate_endpoints'].append({
                    'endpoint': endpoint,
                    'count': count
                })

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Blueprint –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏
        blueprints = set()
        for blueprint_name, blueprint in app.blueprints.items():
            if blueprint_name in blueprints:
                diagnosis['blueprint_conflicts'].append(blueprint_name)
            blueprints.add(blueprint_name)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ endpoint'–∏
        required_endpoints = [
            '/api/auth/telegram'
            '/api/user/profile/<telegram_id>',
            '/api/daily/status/<telegram_id>',
        ]

        existing_paths = [str(rule.rule) for rule in all_routes]
        for required in required_endpoints:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Å—Ö–æ–∂–∏–π –º–∞—Ä—à—Ä—É—Ç (–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤)
            base_path = required.replace('<telegram_id>', '').replace('<user_id>', '')
            if not any(base_path.replace('<', '').replace('>', '') in path for path in existing_paths):
                diagnosis['missing_endpoints'].append(required)

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if diagnosis['duplicate_endpoints']:
            diagnosis['recommendations'].append("üî¥ –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ endpoint'—ñ–≤")

        if diagnosis['blueprint_conflicts']:
            diagnosis['recommendations'].append("üî¥ –í–∏—Ä—ñ—à–∏—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ Blueprint'—ñ–≤")

        if diagnosis['missing_endpoints']:
            diagnosis['recommendations'].append("‚ö†Ô∏è –î–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ endpoint'–∏")

        if diagnosis['quests_routes'] == 0:
            diagnosis['recommendations'].append("üí• –ö–†–ò–¢–ò–ß–ù–û: –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å")
        elif diagnosis['quests_routes'] < 20:
            diagnosis['recommendations'].append("‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–æ–º—É –º–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

        # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {diagnosis['quests_routes']} –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å –∑ {diagnosis['total_routes']} –∑–∞–≥–∞–ª—å–Ω–∏—Ö")
        logger.info(f"üìà –ú–∞—Ä—à—Ä—É—Ç–∏ –ø–æ —Ç–∏–ø–∞—Ö: {len(diagnosis['routes_by_type'])} —Ç–∏–ø—ñ–≤")

        if diagnosis['duplicate_endpoints']:
            logger.warning(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(diagnosis['duplicate_endpoints'])} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ endpoint'—ñ–≤")

        if diagnosis['blueprint_conflicts']:
            logger.error(f"üî¥ –ó–Ω–∞–π–¥–µ–Ω–æ {len(diagnosis['blueprint_conflicts'])} –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ Blueprint'—ñ–≤")

        if diagnosis['missing_endpoints']:
            logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ {len(diagnosis['missing_endpoints'])} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö endpoint'—ñ–≤")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        diagnosis['error'] = str(e)

    return diagnosis


# –ï–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
__all__ = ['register_quests_routes', 'diagnose_quests_routes']