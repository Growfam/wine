"""
–ú–∞—Ä—à—Ä—É—Ç–∏ API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å WINIX
–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö endpoints –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
"""

import logging
from flask import Blueprint, request

try:
    from .verification_controller import (
        verify_telegram_subscription,
        check_bot_started,
        verify_social_task,
        start_task_verification,
        check_verification_status,
        complete_verification,
        get_verification_statistics,
        cleanup_expired_verifications,
        get_telegram_bot_info,
        get_user_completed_tasks,
        check_task_completion
    )
except ImportError:
    try:
        from verification_controller import (
            verify_telegram_subscription,
            check_bot_started,
            verify_social_task,
            start_task_verification,
            check_verification_status,
            complete_verification,
            get_verification_statistics,
            cleanup_expired_verifications,
            get_telegram_bot_info,
            get_user_completed_tasks,
            check_task_completion
        )
    except ImportError as e:
        logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")


        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤–∏–ø–∞–¥–∫—É –∫–æ–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
        def verify_telegram_subscription(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def check_bot_started(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def verify_social_task(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def start_task_verification(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def check_verification_status(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def complete_verification(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def get_verification_statistics(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def cleanup_expired_verifications(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def get_telegram_bot_info(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def get_user_completed_tasks(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503


        def check_task_completion(*args, **kwargs):
            return {'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}, 503

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Blueprint –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
verification_bp = Blueprint('verification', __name__)


def register_verification_routes(app):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Flask –¥–æ–¥–∞—Ç–∫—É

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É
    """
    logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    try:
        # === –û–°–ù–û–í–ù–Ü –ú–ê–†–®–†–£–¢–ò –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–á ===

        # Telegram –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        app.add_url_rule(
            '/api/verify/telegram/<string:user_id>',
            endpoint='verify_telegram_subscription',
            view_func=verify_telegram_subscription,
            methods=['POST']
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
        app.add_url_rule(
            '/api/verify/check-bot/<string:user_id>',
            endpoint='check_bot_started',
            view_func=check_bot_started,
            methods=['GET']
        )

        # –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        app.add_url_rule(
            '/api/verify/social/<string:user_id>/<string:platform>',
            endpoint='verify_social_task',
            view_func=verify_social_task,
            methods=['POST']
        )

        # === –ú–ê–†–®–†–£–¢–ò –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ñ–Æ ===

        # –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è
        app.add_url_rule(
            '/api/verify/start/<string:user_id>/<string:task_id>',
            endpoint='start_task_verification',
            view_func=start_task_verification,
            methods=['POST']
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        app.add_url_rule(
            '/api/verify/status/<string:user_id>/<string:task_id>',
            endpoint='check_verification_status',
            view_func=check_verification_status,
            methods=['GET']
        )

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        app.add_url_rule(
            '/api/verify/complete/<string:user_id>/<string:task_id>',
            endpoint='complete_verification',
            view_func=complete_verification,
            methods=['POST']
        )

        # === –ú–ê–†–®–†–£–¢–ò –Ü–ù–§–û–†–ú–ê–¶–Ü–á –¢–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        app.add_url_rule(
            '/api/verify/statistics',
            endpoint='get_verification_statistics',
            view_func=get_verification_statistics,
            methods=['GET']
        )

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ Telegram –±–æ—Ç–∞
        app.add_url_rule(
            '/api/verify/bot-info',
            endpoint='get_telegram_bot_info',
            view_func=get_telegram_bot_info,
            methods=['GET']
        )

        # === –ú–ê–†–®–†–£–¢–ò –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø–ú–ò ===

        # –°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        app.add_url_rule(
            '/api/verify/completed/<string:user_id>',
            endpoint='get_user_completed_tasks',
            view_func=get_user_completed_tasks,
            methods=['GET']
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        app.add_url_rule(
            '/api/verify/check/<string:user_id>/<string:task_id>',
            endpoint='check_task_completion',
            view_func=check_task_completion,
            methods=['GET']
        )

        # === –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–Ü –ú–ê–†–®–†–£–¢–ò ===

        # –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π
        app.add_url_rule(
            '/api/verify/cleanup',
            endpoint='cleanup_expired_verifications',
            view_func=cleanup_expired_verifications,
            methods=['POST']
        )

        # === –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–Ü –ú–ê–†–®–†–£–¢–ò (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ) ===

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        app.add_url_rule(
            '/api/verify/telegram',
            endpoint='verify_telegram_subscription_alt',
            view_func=lambda: verify_telegram_subscription(
                request.json.get('user_id') if hasattr(request, 'json') and request.json else None
            ),
            methods=['POST']
        )

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂
        app.add_url_rule(
            '/api/verify/social',
            endpoint='verify_social_task_alt',
            view_func=lambda: verify_social_task(
                request.json.get('user_id') if hasattr(request, 'json') and request.json else None,
                request.json.get('platform') if hasattr(request, 'json') and request.json else None
            ),
            methods=['POST']
        )

        logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        registered_routes = [
            'POST /api/verify/telegram/<user_id>',
            'GET  /api/verify/check-bot/<user_id>',
            'POST /api/verify/social/<user_id>/<platform>',
            'POST /api/verify/start/<user_id>/<task_id>',
            'GET  /api/verify/status/<user_id>/<task_id>',
            'POST /api/verify/complete/<user_id>/<task_id>',
            'GET  /api/verify/statistics',
            'GET  /api/verify/bot-info',
            'GET  /api/verify/completed/<user_id>',
            'GET  /api/verify/check/<user_id>/<task_id>',
            'POST /api/verify/cleanup',
        ]

        logger.info("üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:")
        for route in registered_routes:
            logger.info(f"   ‚úì {route}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        return False


def register_verification_blueprint(app):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Blueprint

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É
    """
    logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Blueprint –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    try:
        # –î–æ–¥–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–æ Blueprint
        verification_bp.add_url_rule(
            '/telegram/<string:user_id>',
            endpoint='verify_telegram',
            view_func=verify_telegram_subscription,
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/check-bot/<string:user_id>',
            endpoint='check_bot',
            view_func=check_bot_started,
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/social/<string:user_id>/<string:platform>',
            endpoint='verify_social',
            view_func=verify_social_task,
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/start/<string:user_id>/<string:task_id>',
            endpoint='start_verification',
            view_func=start_task_verification,
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/status/<string:user_id>/<string:task_id>',
            endpoint='check_status',
            view_func=check_verification_status,
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/complete/<string:user_id>/<string:task_id>',
            endpoint='complete',
            view_func=complete_verification,
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/statistics',
            endpoint='statistics',
            view_func=get_verification_statistics,
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/bot-info',
            endpoint='bot_info',
            view_func=get_telegram_bot_info,
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/completed/<string:user_id>',
            endpoint='completed_tasks',
            view_func=get_user_completed_tasks,
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/check/<string:user_id>/<string:task_id>',
            endpoint='check_completion',
            view_func=check_task_completion,
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/cleanup',
            endpoint='cleanup',
            view_func=cleanup_expired_verifications,
            methods=['POST']
        )

        # –†–µ—î—Å—Ç—Ä—É—î–º–æ Blueprint –≤ –¥–æ–¥–∞—Ç–∫—É
        app.register_blueprint(verification_bp, url_prefix='/api/verify')

        logger.info("‚úÖ Blueprint –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Blueprint –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        return False


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
def test_verification_routes(app):
    """
    –¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    """
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    test_results = {
        'total_routes': 0,
        'working_routes': 0,
        'failed_routes': [],
        'success_rate': 0
    }

    # –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_routes = [
        ('/api/verify/bot-info', 'GET'),
        ('/api/verify/statistics', 'GET'),
    ]

    with app.test_client() as client:
        for route, method in test_routes:
            test_results['total_routes'] += 1

            try:
                if method == 'GET':
                    response = client.get(route)
                elif method == 'POST':
                    response = client.post(route, json={})
                else:
                    continue

                if response.status_code < 500:  # –ù–µ –≤—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —è–∫ –ø—Ä–æ–±–ª–µ–º–∏ –º–∞—Ä—à—Ä—É—Ç—É
                    test_results['working_routes'] += 1
                else:
                    test_results['failed_routes'].append(f"{method} {route} - {response.status_code}")

            except Exception as e:
                test_results['failed_routes'].append(f"{method} {route} - Exception: {str(e)}")

    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
    if test_results['total_routes'] > 0:
        test_results['success_rate'] = int((test_results['working_routes'] / test_results['total_routes']) * 100)

    logger.info(
        f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {test_results['working_routes']}/{test_results['total_routes']} –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å ({test_results['success_rate']:.1f}%)")

    if test_results['failed_routes']:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏:")
        for failed_route in test_results['failed_routes']:
            logger.warning(f"   ‚ùå {failed_route}")

    return test_results


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É
def setup_verification_system(app):
    """
    –ü–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É

    Returns:
        bool: True —è–∫—â–æ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
    """
    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó WINIX...")

    try:
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
        routes_registered = register_verification_routes(app)

        if not routes_registered:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
            return False

        # –¢–µ—Å—Ç—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
        test_results = test_verification_routes(app)

        if test_results['success_rate'] < 50:  # –Ø–∫—â–æ –º–µ–Ω—à–µ 50% –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î
            logger.warning(f"‚ö†Ô∏è –ù–∏–∑—å–∫–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {test_results['success_rate']:.1f}%")

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó WINIX —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:")
        logger.info("   üîç –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Telegram –ø—ñ–¥–ø–∏—Å–æ–∫")
        logger.info("   ‚è±Ô∏è –¢–∞–π–º–µ—Ä–∏ –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
        logger.info("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π")
        logger.info("   ü§ñ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Telegram –±–æ—Ç–æ–º")
        logger.info("   üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –¥–∞–Ω–∏—Ö")

        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        return False


# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
__all__ = [
    'register_verification_routes',
    'register_verification_blueprint',
    'verification_bp',
    'setup_verification_system',
    'test_verification_routes'
]