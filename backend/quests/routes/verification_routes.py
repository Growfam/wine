"""
–ú–∞—Ä—à—Ä—É—Ç–∏ API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å WINIX
–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö endpoints –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
"""

import logging
from flask import Blueprint, request

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤
verification_functions = {
    'verify_telegram_subscription': None,
    'check_bot_started': None,
    'verify_social_task': None,
    'start_task_verification': None,
    'check_verification_status': None,
    'complete_verification': None,
    'get_verification_statistics': None,
    'cleanup_expired_verifications': None,
    'get_telegram_bot_info': None,
    'get_user_completed_tasks': None,
    'check_task_completion': None
}

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
try:
    from ..controllers.verification_controller import (
        verify_telegram_subscription,
        check_bot_started,
        verify_social_task,
        start_task_verification,
        check_verification_status,
        complete_verification,
        get_verification_statistics,
        cleanup_expired_verifications,
        get_telegram_bot_info,
        get_user_completed_tasks,
        check_task_completion
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
    verification_functions.update({
        'verify_telegram_subscription': verify_telegram_subscription,
        'check_bot_started': check_bot_started,
        'verify_social_task': verify_social_task,
        'start_task_verification': start_task_verification,
        'check_verification_status': check_verification_status,
        'complete_verification': complete_verification,
        'get_verification_statistics': get_verification_statistics,
        'cleanup_expired_verifications': cleanup_expired_verifications,
        'get_telegram_bot_info': get_telegram_bot_info,
        'get_user_completed_tasks': get_user_completed_tasks,
        'check_task_completion': check_task_completion
    })

    logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")

except ImportError as e:
    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤–∏–ø–∞–¥–∫—É –∫–æ–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
    def create_unavailable_handler(function_name):
        def handler(*args, **kwargs):
            logger.warning(f"–í–∏–∫–ª–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞: {function_name}")
            return {
                'success': False,
                'error': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
                'code': 'VERIFICATION_CONTROLLER_UNAVAILABLE',
                'function': function_name
            }, 503
        return handler

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    for func_name in verification_functions.keys():
        verification_functions[func_name] = create_unavailable_handler(func_name)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Blueprint –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
verification_bp = Blueprint('verification', __name__)


def register_verification_routes(app):
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Flask –¥–æ–¥–∞—Ç–∫—É

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É
    """
    logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    try:
        # === –û–°–ù–û–í–ù–Ü –ú–ê–†–®–†–£–¢–ò –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–á ===

        # Telegram –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        app.add_url_rule(
            '/api/verify/telegram/<string:user_id>',
            endpoint='verify_telegram_subscription',
            view_func=verification_functions['verify_telegram_subscription'],
            methods=['POST']
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
        app.add_url_rule(
            '/api/verify/check-bot/<string:user_id>',
            endpoint='verify_check_bot_started',
            view_func=verification_functions['check_bot_started'],
            methods=['GET']
        )

        # –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        app.add_url_rule(
            '/api/verify/social/<string:user_id>/<string:platform>',
            endpoint='verify_social_task',
            view_func=verification_functions['verify_social_task'],
            methods=['POST']
        )

        # === –ú–ê–†–®–†–£–¢–ò –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ñ–Æ ===

        # –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω–Ω—è
        app.add_url_rule(
            '/api/verify/start/<string:user_id>/<string:task_id>',
            endpoint='verify_start_task_verification',
            view_func=verification_functions['start_task_verification'],
            methods=['POST']
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        app.add_url_rule(
            '/api/verify/status/<string:user_id>/<string:task_id>',
            endpoint='verify_check_verification_status',
            view_func=verification_functions['check_verification_status'],
            methods=['GET']
        )

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        app.add_url_rule(
            '/api/verify/complete/<string:user_id>/<string:task_id>',
            endpoint='verify_complete_verification',
            view_func=verification_functions['complete_verification'],
            methods=['POST']
        )

        # === –ú–ê–†–®–†–£–¢–ò –Ü–ù–§–û–†–ú–ê–¶–Ü–á –¢–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        app.add_url_rule(
            '/api/verify/statistics',
            endpoint='verify_get_verification_statistics',
            view_func=verification_functions['get_verification_statistics'],
            methods=['GET']
        )

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ Telegram –±–æ—Ç–∞
        app.add_url_rule(
            '/api/verify/bot-info',
            endpoint='verify_get_telegram_bot_info',
            view_func=verification_functions['get_telegram_bot_info'],
            methods=['GET']
        )

        # === –ú–ê–†–®–†–£–¢–ò –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø–ú–ò ===

        # –°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        app.add_url_rule(
            '/api/verify/completed/<string:user_id>',
            endpoint='verify_get_user_completed_tasks',
            view_func=verification_functions['get_user_completed_tasks'],
            methods=['GET']
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        app.add_url_rule(
            '/api/verify/check/<string:user_id>/<string:task_id>',
            endpoint='verify_check_task_completion',
            view_func=verification_functions['check_task_completion'],
            methods=['GET']
        )

        # === –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–Ü –ú–ê–†–®–†–£–¢–ò ===

        # –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π
        app.add_url_rule(
            '/api/verify/cleanup',
            endpoint='verify_cleanup_expired_verifications',
            view_func=verification_functions['cleanup_expired_verifications'],
            methods=['POST']
        )

        # === –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–Ü –ú–ê–†–®–†–£–¢–ò (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ) ===

        def verify_telegram_alt():
            """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
            data = request.get_json() if request.is_json else {}
            user_id = data.get('user_id')

            if not user_id:
                return {
                    'success': False,
                    'error': 'user_id –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –≤ body –∑–∞–ø–∏—Ç—É',
                    'code': 'MISSING_USER_ID'
                }, 400

            return verification_functions['verify_telegram_subscription'](user_id)

        def verify_social_alt():
            """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂"""
            data = request.get_json() if request.is_json else {}
            user_id = data.get('user_id')
            platform = data.get('platform')

            if not user_id or not platform:
                return {
                    'success': False,
                    'error': 'user_id —Ç–∞ platform –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –≤ body –∑–∞–ø–∏—Ç—É',
                    'code': 'MISSING_PARAMETERS'
                }, 400

            return verification_functions['verify_social_task'](user_id, platform)

        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        app.add_url_rule(
            '/api/verify/telegram',
            endpoint='verify_telegram_subscription_alt',
            view_func=verify_telegram_alt,
            methods=['POST']
        )

        app.add_url_rule(
            '/api/verify/social',
            endpoint='verify_social_task_alt',
            view_func=verify_social_alt,
            methods=['POST']
        )

        logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        registered_routes = [
            'POST /api/verify/telegram/<user_id>',
            'GET  /api/verify/check-bot/<user_id>',
            'POST /api/verify/social/<user_id>/<platform>',
            'POST /api/verify/start/<user_id>/<task_id>',
            'GET  /api/verify/status/<user_id>/<task_id>',
            'POST /api/verify/complete/<user_id>/<task_id>',
            'GET  /api/verify/statistics',
            'GET  /api/verify/bot-info',
            'GET  /api/verify/completed/<user_id>',
            'GET  /api/verify/check/<user_id>/<task_id>',
            'POST /api/verify/cleanup',
            'POST /api/verify/telegram (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π)',
            'POST /api/verify/social (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π)',
        ]

        logger.info("üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:")
        for route in registered_routes:
            logger.info(f"   ‚úì {route}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        logger.error(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
        return False


def register_verification_blueprint(app):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Blueprint

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É
    """
    logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Blueprint –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    try:
        # –î–æ–¥–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–æ Blueprint
        verification_bp.add_url_rule(
            '/telegram/<string:user_id>',
            endpoint='verify_telegram',
            view_func=verification_functions['verify_telegram_subscription'],
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/check-bot/<string:user_id>',
            endpoint='check_bot',
            view_func=verification_functions['check_bot_started'],
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/social/<string:user_id>/<string:platform>',
            endpoint='verify_social',
            view_func=verification_functions['verify_social_task'],
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/start/<string:user_id>/<string:task_id>',
            endpoint='start_verification',
            view_func=verification_functions['start_task_verification'],
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/status/<string:user_id>/<string:task_id>',
            endpoint='check_status',
            view_func=verification_functions['check_verification_status'],
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/complete/<string:user_id>/<string:task_id>',
            endpoint='complete',
            view_func=verification_functions['complete_verification'],
            methods=['POST']
        )

        verification_bp.add_url_rule(
            '/statistics',
            endpoint='statistics',
            view_func=verification_functions['get_verification_statistics'],
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/bot-info',
            endpoint='bot_info',
            view_func=verification_functions['get_telegram_bot_info'],
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/completed/<string:user_id>',
            endpoint='completed_tasks',
            view_func=verification_functions['get_user_completed_tasks'],
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/check/<string:user_id>/<string:task_id>',
            endpoint='check_completion',
            view_func=verification_functions['check_task_completion'],
            methods=['GET']
        )

        verification_bp.add_url_rule(
            '/cleanup',
            endpoint='cleanup',
            view_func=verification_functions['cleanup_expired_verifications'],
            methods=['POST']
        )

        # –†–µ—î—Å—Ç—Ä—É—î–º–æ Blueprint –≤ –¥–æ–¥–∞—Ç–∫—É
        app.register_blueprint(verification_bp, url_prefix='/api/verify')

        logger.info("‚úÖ Blueprint –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Blueprint –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        return False


def test_verification_routes(app):
    """
    –¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    """
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    test_results = {
        'total_routes': 0,
        'working_routes': 0,
        'failed_routes': [],
        'success_rate': 0
    }

    # –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ GET –º–∞—Ä—à—Ä—É—Ç–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤)
    test_routes = [
        ('/api/verify/bot-info', 'GET'),
        ('/api/verify/statistics', 'GET'),
    ]

    try:
        with app.test_client() as client:
            for route, method in test_routes:
                test_results['total_routes'] += 1

                try:
                    if method == 'GET':
                        response = client.get(route)
                    elif method == 'POST':
                        response = client.post(route, json={})
                    else:
                        continue

                    # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —è–∫ —É—Å–ø—ñ—à–Ω—ñ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫—Ä—ñ–º 500+ (—Å–µ—Ä–≤–µ—Ä–Ω—ñ –ø–æ–º–∏–ª–∫–∏)
                    if response.status_code < 500:
                        test_results['working_routes'] += 1
                    else:
                        test_results['failed_routes'].append(f"{method} {route} - HTTP {response.status_code}")

                except Exception as e:
                    test_results['failed_routes'].append(f"{method} {route} - Exception: {str(e)}")

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
        if test_results['total_routes'] > 0:
            test_results['success_rate'] = (test_results['working_routes'] / test_results['total_routes']) * 100

        logger.info(
            f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {test_results['working_routes']}/{test_results['total_routes']} "
            f"–º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å ({test_results['success_rate']:.1f}%)"
        )

        if test_results['failed_routes']:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏:")
            for failed_route in test_results['failed_routes']:
                logger.warning(f"   ‚ùå {failed_route}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
        test_results['failed_routes'].append(f"Testing error: {str(e)}")

    return test_results


def setup_verification_system(app):
    """
    –ü–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É

    Returns:
        bool: True —è–∫—â–æ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
    """
    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó WINIX...")

    try:
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
        routes_registered = register_verification_routes(app)

        if not routes_registered:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
            return False

        # –¢–µ—Å—Ç—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
        test_results = test_verification_routes(app)

        success_threshold = 50  # 50% –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
        if test_results['success_rate'] < success_threshold:
            logger.warning(f"‚ö†Ô∏è –ù–∏–∑—å–∫–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {test_results['success_rate']:.1f}% (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å >{success_threshold}%)")
        else:
            logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å —É—Å–ø—ñ—à–Ω–æ: {test_results['success_rate']:.1f}%")

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó WINIX —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:")
        logger.info("   üîç –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Telegram –ø—ñ–¥–ø–∏—Å–æ–∫")
        logger.info("   ‚è±Ô∏è –¢–∞–π–º–µ—Ä–∏ –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
        logger.info("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π")
        logger.info("   ü§ñ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Telegram –±–æ—Ç–æ–º")
        logger.info("   üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –¥–∞–Ω–∏—Ö")

        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
        return False


# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
__all__ = [
    'register_verification_routes',
    'register_verification_blueprint',
    'verification_bp',
    'setup_verification_system',
    'test_verification_routes'
]