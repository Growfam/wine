"""
–ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è FLEX —Ç–æ–∫–µ–Ω–∞–º–∏ —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞–º–∏
API endpoints –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—ñ–≤, –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä—ñ–≤–Ω—è–º–∏
"""

import logging
from flask import Blueprint

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤
try:
    from quests.controllers.flex_controller import (
        get_flex_balance,
        check_flex_levels,
        claim_flex_reward,
        get_flex_history,
        get_user_flex_status,
        get_flex_statistics,
        get_flex_levels_config,
        get_flex_health
    )
except ImportError:
    try:
        from backend.quests.controllers.flex_controller import (
            get_flex_balance,
            check_flex_levels,
            claim_flex_reward,
            get_flex_history,
            get_user_flex_status,
            get_flex_statistics,
            get_flex_levels_config,
            get_flex_health
        )
    except ImportError:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ FLEX")


        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤
        def get_flex_balance(telegram_id):
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503


        def check_flex_levels(telegram_id):
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503


        def claim_flex_reward(telegram_id):
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503


        def get_flex_history(telegram_id):
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503


        def get_user_flex_status(telegram_id):
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503


        def get_flex_statistics():
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503


        def get_flex_levels_config():
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503


        def get_flex_health():
            return {"status": "error", "message": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}, 503

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Blueprint –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ FLEX
flex_bp = Blueprint('flex', __name__)


@flex_bp.route('/balance/<telegram_id>', methods=['GET'])
def route_get_flex_balance(telegram_id: str):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Query Parameters:
        wallet_address: string - –∞–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        force_refresh: bool - –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    Returns:
        JSON –∑ –±–∞–ª–∞–Ω—Å–æ–º FLEX —Ç–æ–∫–µ–Ω—ñ–≤

    Example:
        GET /api/flex/balance/123456789?force_refresh=true

        Response:
        {
            "status": "success",
            "data": {
                "telegram_id": "123456789",
                "flex_balance": 75000,
                "formatted_balance": "75,000",
                "wallet_address": "UQD...",
                "last_updated": "2025-01-20T12:00:00Z",
                "force_refresh": true
            }
        }
    """
    logger.info(f"API –∑–∞–ø–∏—Ç: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX –¥–ª—è {telegram_id}")
    return get_flex_balance(telegram_id)


@flex_bp.route('/levels/<telegram_id>', methods=['GET'])
def route_check_flex_levels(telegram_id: str):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ FLEX –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Query Parameters:
        flex_balance: int - –±–∞–ª–∞–Ω—Å FLEX (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ - –æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)

    Returns:
        JSON –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ä—ñ–≤–Ω—è–º–∏ —Ç–∞ —ó—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏

    Example:
        GET /api/flex/levels/123456789?flex_balance=75000

        Response:
        {
            "status": "success",
            "data": {
                "telegram_id": "123456789",
                "current_flex_balance": 75000,
                "levels": {
                    "bronze": {
                        "config": {
                            "required_flex": 10000,
                            "winix_reward": 25,
                            "tickets_reward": 1,
                            "name": "Bronze"
                        },
                        "status": {
                            "has_enough_flex": true,
                            "claimed_today": false,
                            "can_claim": true,
                            "progress_percent": 100
                        }
                    }
                },
                "summary": {
                    "total_levels": 5,
                    "available_levels": 3,
                    "claimable_levels": 2,
                    "claimed_today": 1,
                    "potential_rewards": {
                        "winix": 200,
                        "tickets": 6
                    }
                }
            }
        }
    """
    logger.info(f"API –∑–∞–ø–∏—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—ñ–≤ FLEX –¥–ª—è {telegram_id}")
    return check_flex_levels(telegram_id)


@flex_bp.route('/claim/<telegram_id>', methods=['POST'])
def route_claim_flex_reward(telegram_id: str):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä—ñ–≤–µ–Ω—å FLEX

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Request Body:
        {
            "level": "bronze"  // bronze, silver, gold, platinum, diamond
        }

    Returns:
        JSON –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏

    Example:
        POST /api/flex/claim/123456789
        {
            "level": "gold"
        }

        Response:
        {
            "status": "success",
            "message": "–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ Gold —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞!",
            "data": {
                "level": "gold",
                "winix": 150,
                "tickets": 4,
                "name": "Gold",
                "icon": "ü•á",
                "telegram_id": "123456789",
                "claimed_at": "2025-01-20T12:00:00Z"
            }
        }
    """
    logger.info(f"API –∑–∞–ø–∏—Ç: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ FLEX –¥–ª—è {telegram_id}")
    return claim_flex_reward(telegram_id)


@flex_bp.route('/history/<telegram_id>', methods=['GET'])
def route_get_flex_history(telegram_id: str):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Query Parameters:
        limit: int - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ (–º–∞–∫—Å. 100, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50)
        offset: int - –∑—Å—É–≤ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0)

    Returns:
        JSON –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥

    Example:
        GET /api/flex/history/123456789?limit=20&offset=0

        Response:
        {
            "status": "success",
            "data": {
                "telegram_id": "123456789",
                "history": [
                    {
                        "id": 456,
                        "level": "gold",
                        "level_name": "Gold",
                        "level_icon": "ü•á",
                        "flex_balance_at_claim": 150000,
                        "winix_awarded": 150,
                        "tickets_awarded": 4,
                        "claimed_at": "2025-01-20T10:00:00Z",
                        "days_ago": 0
                    }
                ],
                "pagination": {
                    "limit": 20,
                    "offset": 0,
                    "total": 45,
                    "has_more": true
                },
                "statistics": {
                    "total_claims": 45,
                    "total_rewards": {
                        "winix": 3250,
                        "tickets": 87
                    },
                    "level_breakdown": {
                        "bronze": {"count": 20, "total_winix": 500},
                        "silver": {"count": 15, "total_winix": 1125}
                    }
                }
            }
        }
    """
    logger.info(f"API –∑–∞–ø–∏—Ç: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó FLEX –¥–ª—è {telegram_id}")
    return get_flex_history(telegram_id)


@flex_bp.route('/status/<telegram_id>', methods=['GET'])
def route_get_user_flex_status(telegram_id: str):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ FLEX —Å–∏—Å—Ç–µ–º—ñ

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Returns:
        JSON –∑ –ø–æ–≤–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Example:
        GET /api/flex/status/123456789

        Response:
        {
            "status": "success",
            "data": {
                "telegram_id": "123456789",
                "current_flex_balance": 75000,
                "formatted_balance": "75,000",
                "available_levels": ["bronze", "silver"],
                "claimed_today": {
                    "bronze": true,
                    "silver": false,
                    "gold": false
                },
                "last_claim_times": {
                    "bronze": "2025-01-20T08:00:00Z",
                    "silver": null
                },
                "total_claimed": {
                    "winix": 1250,
                    "tickets": 35
                },
                "recommendations": [
                    {
                        "type": "claim_rewards",
                        "message": "–î–æ—Å—Ç—É–ø–Ω–æ 1 –≤–∏–Ω–∞–≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è",
                        "priority": "high"
                    }
                ],
                "last_updated": "2025-01-20T12:00:00Z"
            }
        }
    """
    logger.info(f"API –∑–∞–ø–∏—Ç: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É FLEX –¥–ª—è {telegram_id}")
    return get_user_flex_status(telegram_id)


@flex_bp.route('/statistics', methods=['GET'])
def route_get_flex_statistics():
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ FLEX —Å–∏—Å—Ç–µ–º–∏ (–ø—É–±–ª—ñ—á–Ω–∞)

    Returns:
        JSON –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é

    Example:
        GET /api/flex/statistics

        Response:
        {
            "status": "success",
            "data": {
                "total_claims": 5420,
                "unique_users": 1250,
                "claims_this_week": 890,
                "level_distribution": {
                    "bronze": 2100,
                    "silver": 1850,
                    "gold": 1020,
                    "platinum": 350,
                    "diamond": 100
                },
                "total_rewards": {
                    "winix": 486750,
                    "tickets": 12840
                },
                "average_claims_per_user": 4.34,
                "levels_config": {
                    "bronze": {
                        "required_flex": 10000,
                        "winix_reward": 25,
                        "tickets_reward": 1
                    }
                },
                "metadata": {
                    "generated_at": "2025-01-20T12:00:00Z",
                    "system_version": "1.0.0",
                    "currency": "FLEX/WINIX/TICKETS"
                }
            }
        }
    """
    logger.info("API –∑–∞–ø–∏—Ç: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ FLEX")
    return get_flex_statistics()


@flex_bp.route('/config', methods=['GET'])
def route_get_flex_levels_config():
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä—ñ–≤–Ω—ñ–≤ FLEX (–ø—É–±–ª—ñ—á–Ω–∞)

    Returns:
        JSON –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é —Ä—ñ–≤–Ω—ñ–≤

    Example:
        GET /api/flex/config

        Response:
        {
            "status": "success",
            "data": {
                "levels": {
                    "bronze": {
                        "level": "bronze",
                        "required_flex": 10000,
                        "winix_reward": 25,
                        "tickets_reward": 1,
                        "name": "Bronze",
                        "description": "–ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤",
                        "icon": "ü•â",
                        "color": "#CD7F32",
                        "formatted_requirement": "10,000 FLEX",
                        "formatted_rewards": "25 WINIX + 1 TICKETS"
                    }
                },
                "metadata": {
                    "total_levels": 5,
                    "min_flex_required": 10000,
                    "max_flex_required": 500000,
                    "total_max_daily_winix": 1050,
                    "total_max_daily_tickets": 30,
                    "claim_cooldown_hours": 24,
                    "last_updated": "2025-01-20T12:00:00Z"
                }
            }
        }
    """
    logger.info("API –∑–∞–ø–∏—Ç: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä—ñ–≤–Ω—ñ–≤ FLEX")
    return get_flex_levels_config()


@flex_bp.route('/health', methods=['GET'])
def route_get_flex_health():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è FLEX —Å–µ—Ä–≤—ñ—Å—É

    Returns:
        JSON –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –∑–¥–æ—Ä–æ–≤'—è

    Example:
        GET /api/flex/health

        Response:
        {
            "status": "healthy",
            "timestamp": "2025-01-20T12:00:00Z",
            "services": {
                "flex_model": {
                    "status": "healthy",
                    "total_claims": 5420
                },
                "ton_connect": {
                    "status": "healthy",
                    "network": "mainnet",
                    "api_configured": true
                },
                "database": {
                    "status": "healthy",
                    "connection": "active"
                }
            },
            "version": "1.0.0"
        }
    """
    logger.info("API –∑–∞–ø–∏—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è FLEX —Å–µ—Ä–≤—ñ—Å—É")
    return get_flex_health()


# –î–æ–¥–∞—Ç–∫–æ–≤—ñ utility –º–∞—Ä—à—Ä—É—Ç–∏

@flex_bp.route('/cache/clear/<telegram_id>', methods=['POST'])
def route_clear_flex_cache(telegram_id: str):
    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
        cache_function = None

        try:
            from supabase_client import invalidate_cache_for_entity
            cache_function = invalidate_cache_for_entity
        except ImportError:
            cache_function = None

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ
        if cache_function is not None:
            try:
                cache_function(telegram_id)
                message = f"–ö–µ—à FLEX –æ—á–∏—â–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}"
            except Exception as e:
                message = f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {str(e)}"
        else:
            message = "–§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        logger.info(f"–û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É FLEX –¥–ª—è {telegram_id}")

        from datetime import datetime, timezone

        return {
            "status": "success",
            "message": message,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }, 200

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É FLEX: {str(e)}")
        return {
            "status": "error",
            "message": "–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É",
            "error": str(e)
        }, 500


@flex_bp.route('/simulate/<telegram_id>', methods=['POST'])
def route_simulate_flex_claim(telegram_id: str):
    """
    –°–∏–º—É–ª—è—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ FLEX (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Request Body:
        {
            "level": "bronze",
            "flex_balance": 50000
        }

    Returns:
        JSON –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–∏–º—É–ª—è—Ü—ñ—ó

    Example:
        POST /api/flex/simulate/123456789
        {
            "level": "silver",
            "flex_balance": 75000
        }

        Response:
        {
            "status": "success",
            "data": {
                "can_claim": true,
                "requirements_met": true,
                "potential_rewards": {
                    "winix": 75,
                    "tickets": 2
                },
                "next_claim_available": null,
                "simulation": true
            }
        }
    """
    try:
        from flask import request
        from datetime import datetime, timezone

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É
        try:
            data = request.get_json() or {}
        except Exception:
            return {
                "status": "error",
                "message": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π JSON",
                "error_code": "INVALID_JSON"
            }, 400

        level_str = data.get('level', '').lower()
        flex_balance = data.get('flex_balance')

        if not level_str:
            return {
                "status": "error",
                "message": "–†—ñ–≤–µ–Ω—å –Ω–µ –≤–∫–∞–∑–∞–Ω–æ",
                "error_code": "MISSING_LEVEL"
            }, 400

        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
        flex_rewards_model = None
        FlexLevel = None
        try:
            from quests.models.flex_rewards import flex_rewards_model, FlexLevel
        except ImportError:
            pass

        if not flex_rewards_model or not FlexLevel:
            return {
                "status": "error",
                "message": "FLEX —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                "error_code": "SERVICE_UNAVAILABLE"
            }, 503

        # –¢–µ–ø–µ—Ä –±–µ–∑–ø–µ—á–Ω–æ –≤–∞–ª—ñ–¥—É—î–º–æ —Ä—ñ–≤–µ–Ω—å
        try:
            level = FlexLevel(level_str)
        except ValueError:
            valid_levels = [level.value for level in FlexLevel]
            return {
                "status": "error",
                "message": f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å. –î–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(valid_levels)}",
                "error_code": "INVALID_LEVEL"
            }, 400

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä—ñ–≤–Ω—è
        config = flex_rewards_model.FLEX_LEVELS_CONFIG.get(level)
        if not config:
            return {
                "status": "error",
                "message": "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä—ñ–≤–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
                "error_code": "CONFIG_NOT_FOUND"
            }, 404

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π
        if flex_balance is None:
            flex_balance = flex_rewards_model.get_user_flex_balance(telegram_id)
        else:
            try:
                flex_balance = int(flex_balance)
            except (ValueError, TypeError):
                return {
                    "status": "error",
                    "message": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å FLEX",
                    "error_code": "INVALID_FLEX_BALANCE"
                }, 400

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–º–æ–≥–∏
        requirements_met = flex_balance >= config.required_flex

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ—Ç—Ä–∏–º—É–≤–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ (–¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É)
        today_claims = flex_rewards_model._get_today_claims(telegram_id)
        claimed_today = level in today_claims

        can_claim = requirements_met and not claimed_today

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        next_claim_available = None
        if claimed_today:
            next_claim_time = flex_rewards_model._get_next_claim_time(telegram_id, level)
            if next_claim_time:
                next_claim_available = next_claim_time.isoformat()

        logger.info(f"–°–∏–º—É–ª—è—Ü—ñ—è FLEX –¥–ª—è {telegram_id}: —Ä—ñ–≤–µ–Ω—å={level_str}, "
                    f"–±–∞–ª–∞–Ω—Å={flex_balance:,}, can_claim={can_claim}")

        return {
            "status": "success",
            "data": {
                "level": level_str,
                "flex_balance": flex_balance,
                "required_flex": config.required_flex,
                "requirements_met": requirements_met,
                "claimed_today": claimed_today,
                "can_claim": can_claim,
                "potential_rewards": {
                    "winix": config.winix_reward,
                    "tickets": config.tickets_reward
                },
                "progress_percent": min((flex_balance / config.required_flex) * 100, 100),
                "next_claim_available": next_claim_available,
                "simulation": True,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
        }, 200

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó FLEX: {str(e)}")
        return {
            "status": "error",
            "message": "–ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó",
            "error": str(e)
        }, 500


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤
def register_flex_routes(app):
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ FLEX –≤ Flask –¥–æ–¥–∞—Ç–∫—É

    Args:
        app: Flask –¥–æ–¥–∞—Ç–æ–∫
    """
    try:
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ Blueprint –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
        app.register_blueprint(flex_bp, url_prefix='/api/flex')
        logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ FLEX —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

        # –õ–æ–≥—É—î–º–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
        registered_routes = []
        for rule in app.url_map.iter_rules():
            if rule.endpoint and rule.endpoint.startswith('flex.'):
                registered_routes.append({
                    'endpoint': rule.endpoint,
                    'methods': list(rule.methods - {'HEAD', 'OPTIONS'}),
                    'path': str(rule)
                })

        logger.info(f"üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {len(registered_routes)} –º–∞—Ä—à—Ä—É—Ç—ñ–≤ FLEX:")
        for route in registered_routes:
            logger.info(f"  {' | '.join(route['methods'])} {route['path']}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤ FLEX: {str(e)}")
        return False


# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'flex_bp',
    'register_flex_routes',
    'route_get_flex_balance',
    'route_check_flex_levels',
    'route_claim_flex_reward',
    'route_get_flex_history',
    'route_get_user_flex_status',
    'route_get_flex_statistics',
    'route_get_flex_levels_config',
    'route_get_flex_health'
]
