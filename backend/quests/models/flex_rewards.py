"""
–ú–æ–¥–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é FLEX —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
–©–æ–¥–µ–Ω–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏ FLEX —Ç–æ–∫–µ–Ω—ñ–≤
"""
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from enum import Enum

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç –∫–ª—ñ—î–Ω—Ç–∞ Supabase
try:
    from supabase_client import supabase, cached, retry_supabase, invalidate_cache_for_entity
except ImportError:
    try:
        from backend.supabase_client import supabase, cached, retry_supabase, invalidate_cache_for_entity
    except ImportError:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ supabase_client")
        supabase = None


        # Fallback —Ñ—É–Ω–∫—Ü—ñ—ó
        def cached(timeout=300):
            """Fallback –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è"""

            def decorator(func):
                def wrapper(*args, **kwargs):
                    return func(*args, **kwargs)

                return wrapper

            return decorator


        def retry_supabase(func, max_retries=3):
            """Fallback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è retry"""
            try:
                return func()
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó: {e}")
                return None


        def invalidate_cache_for_entity(entity_id):
            """Fallback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–µ—à—É"""
            logger.debug(f"–ö–µ—à —ñ–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ –¥–ª—è {entity_id} (fallback)")
            pass


class FlexLevel(Enum):
    """–†—ñ–≤–Ω—ñ FLEX —Ç–æ–∫–µ–Ω—ñ–≤"""
    BRONZE = "bronze"
    SILVER = "silver"
    GOLD = "gold"
    PLATINUM = "platinum"
    DIAMOND = "diamond"


class RewardStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥"""
    AVAILABLE = "available"
    CLAIMED = "claimed"
    EXPIRED = "expired"
    LOCKED = "locked"


@dataclass
class FlexRewardConfig:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä—ñ–≤–µ–Ω—å FLEX"""
    level: FlexLevel
    required_flex: int
    winix_reward: int
    tickets_reward: int
    name: str
    description: str
    icon: str
    color: str


@dataclass
class UserFlexStatus:
    """–°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ FLEX —Ç–æ–∫–µ–Ω–∞—Ö"""
    telegram_id: str
    current_flex_balance: int
    available_levels: List[FlexLevel]
    claimed_today: Dict[FlexLevel, bool]
    last_claim_times: Dict[FlexLevel, datetime]
    total_claimed_winix: int
    total_claimed_tickets: int
    last_updated: datetime


class FlexRewardsModel:
    """–ú–æ–¥–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞–º–∏"""

    # –¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    TABLE_FLEX_CLAIMS = "flex_claims"
    TABLE_FLEX_BALANCES = "flex_balances"
    TABLE_FLEX_LEVELS = "flex_levels"

    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤ FLEX
    FLEX_LEVELS_CONFIG = {
        FlexLevel.BRONZE: FlexRewardConfig(
            level=FlexLevel.BRONZE,
            required_flex=10_000,
            winix_reward=25,
            tickets_reward=1,
            name="Bronze",
            description="–ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤",
            icon="ü•â",
            color="#CD7F32"
        ),
        FlexLevel.SILVER: FlexRewardConfig(
            level=FlexLevel.SILVER,
            required_flex=50_000,
            winix_reward=75,
            tickets_reward=2,
            name="Silver",
            description="–°—Ä—ñ–±–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            icon="ü•à",
            color="#C0C0C0"
        ),
        FlexLevel.GOLD: FlexRewardConfig(
            level=FlexLevel.GOLD,
            required_flex=100_000,
            winix_reward=150,
            tickets_reward=4,
            name="Gold",
            description="–ó–æ–ª–æ—Ç–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏—Ö",
            icon="ü•á",
            color="#FFD700"
        ),
        FlexLevel.PLATINUM: FlexRewardConfig(
            level=FlexLevel.PLATINUM,
            required_flex=250_000,
            winix_reward=300,
            tickets_reward=8,
            name="Platinum",
            description="–ü–ª–∞—Ç–∏–Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤",
            icon="üíé",
            color="#E5E4E2"
        ),
        FlexLevel.DIAMOND: FlexRewardConfig(
            level=FlexLevel.DIAMOND,
            required_flex=500_000,
            winix_reward=500,
            tickets_reward=15,
            name="Diamond",
            description="–î—ñ–∞–º–∞–Ω—Ç–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –µ–ª—ñ—Ç–∏",
            icon="üí†",
            color="#B9F2FF"
        )
    }

    # –ß–∞—Å–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
    CLAIM_COOLDOWN_HOURS = 24  # –ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É
    BALANCE_CACHE_MINUTES = 5  # –ö–µ—à –±–∞–ª–∞–Ω—Å—É –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω

    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥"""
        if not supabase:
            logger.error("‚ùå Supabase –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            raise RuntimeError("Supabase not initialized")

        logger.info("‚úÖ FlexRewardsModel —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        logger.info(f"üìä –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤: {len(self.FLEX_LEVELS_CONFIG)} —Ä—ñ–≤–Ω—ñ–≤")

    @cached(timeout=300)  # –ö–µ—à –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
    def get_user_flex_balance(self, telegram_id: str, wallet_address: str = None) -> int:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            wallet_address: –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –ë–∞–ª–∞–Ω—Å FLEX —Ç–æ–∫–µ–Ω—ñ–≤
        """
        try:
            telegram_id = str(telegram_id)
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å
            def fetch_saved_balance():
                response = supabase.table(self.TABLE_FLEX_BALANCES) \
                    .select("flex_balance, last_updated") \
                    .eq("telegram_id", telegram_id) \
                    .order("last_updated", desc=True) \
                    .limit(1) \
                    .execute()

                if response.data:
                    balance_data = response.data[0]
                    last_updated = datetime.fromisoformat(balance_data['last_updated'].replace('Z', '+00:00'))

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–≤
                    age_minutes = (datetime.now(timezone.utc) - last_updated).total_seconds() / 60

                    if age_minutes < self.BALANCE_CACHE_MINUTES:
                        logger.debug(
                            f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å FLEX –¥–ª—è {telegram_id}: {balance_data['flex_balance']}")
                        return balance_data['flex_balance']

                return None

            saved_balance = retry_supabase(fetch_saved_balance)
            if saved_balance is not None:
                return saved_balance

            # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –∞–±–æ –≤—ñ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤, –æ—Ç—Ä–∏–º—É—î–º–æ —á–µ—Ä–µ–∑ TON API
            flex_balance = self._fetch_flex_balance_from_ton(telegram_id, wallet_address)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å
            self._save_flex_balance(telegram_id, flex_balance, wallet_address)

            return flex_balance

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX –¥–ª—è {telegram_id}: {str(e)}")
            return 0

    def _fetch_flex_balance_from_ton(self, telegram_id: str, wallet_address: str = None) -> int:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX —á–µ—Ä–µ–∑ TON API"""
        try:
            # –Ø–∫—â–æ –∞–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –æ—Ç—Ä–∏–º—É—î–º–æ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
            if not wallet_address:
                wallet_address = self._get_user_wallet_address(telegram_id)
                if not wallet_address:
                    logger.warning(f"–ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {telegram_id}")
                    return 0

            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ TON Connect —Å–µ—Ä–≤—ñ—Å
            try:
                from quests.services.ton_connect_service import ton_connect_service
            except ImportError:
                from backend.quests.services.ton_connect_service import ton_connect_service

            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å
            balance_info = ton_connect_service.get_wallet_balance_sync(wallet_address, force_refresh=True)

            if balance_info:
                logger.info(f"FLEX –±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ TON –¥–ª—è {telegram_id}: {balance_info.flex_balance:,}")
                return balance_info.flex_balance
            else:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∑ TON –¥–ª—è {telegram_id}")
                return 0

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è FLEX –∑ TON –¥–ª—è {telegram_id}: {str(e)}")
            return 0

    def _get_user_wallet_address(self, telegram_id: str) -> Optional[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            from quests.models.wallet import wallet_model
            wallet = wallet_model.get_user_wallet(telegram_id)
            return wallet['address'] if wallet else None
        except ImportError:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –≥–∞–º–∞–Ω—Ü—è")
            return None

    def _save_flex_balance(self, telegram_id: str, flex_balance: int, wallet_address: str = None) -> bool:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
        try:
            now = datetime.now(timezone.utc)

            balance_record = {
                'telegram_id': telegram_id,
                'flex_balance': flex_balance,
                'wallet_address': wallet_address,
                'last_updated': now.isoformat(),
                'created_at': now.isoformat()
            }

            def save_balance():
                # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
                supabase.table(self.TABLE_FLEX_BALANCES) \
                    .delete() \
                    .eq("telegram_id", telegram_id) \
                    .execute()

                # –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
                response = supabase.table(self.TABLE_FLEX_BALANCES) \
                    .insert(balance_record) \
                    .execute()

                return bool(response.data)

            success = retry_supabase(save_balance)

            if success:
                # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
                invalidate_cache_for_entity(telegram_id)
                logger.debug(f"–ë–∞–ª–∞–Ω—Å FLEX –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è {telegram_id}: {flex_balance:,}")

            return success

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É FLEX –¥–ª—è {telegram_id}: {str(e)}")
            return False

    def get_available_levels(self, telegram_id: str, flex_balance: int = None) -> Dict[FlexLevel, Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            flex_balance: –ë–∞–ª–∞–Ω—Å FLEX (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ - –æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ä—ñ–≤–Ω—è–º–∏ —Ç–∞ —ó—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
        """
        try:
            telegram_id = str(telegram_id)

            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
            if flex_balance is None:
                flex_balance = self.get_user_flex_balance(telegram_id)

            logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –¥–ª—è {telegram_id} –∑ –±–∞–ª–∞–Ω—Å–æ–º {flex_balance:,} FLEX")

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
            today_claims = self._get_today_claims(telegram_id)

            available_levels = {}

            for level, config in self.FLEX_LEVELS_CONFIG.items():
                has_enough_flex = flex_balance >= config.required_flex
                claimed_today = level in today_claims

                level_info = {
                    'config': {
                        'required_flex': config.required_flex,
                        'winix_reward': config.winix_reward,
                        'tickets_reward': config.tickets_reward,
                        'name': config.name,
                        'description': config.description,
                        'icon': config.icon,
                        'color': config.color
                    },
                    'status': {
                        'has_enough_flex': has_enough_flex,
                        'claimed_today': claimed_today,
                        'can_claim': has_enough_flex and not claimed_today,
                        'progress_percent': min((flex_balance / config.required_flex) * 100, 100),
                        'next_claim_available': self._get_next_claim_time(telegram_id, level) if claimed_today else None
                    }
                }

                available_levels[level] = level_info

                logger.debug(f"–†—ñ–≤–µ–Ω—å {level.value}: –ø–æ—Ç—Ä—ñ–±–Ω–æ={config.required_flex:,}, "
                             f"—î={flex_balance:,}, claimed_today={claimed_today}, can_claim={level_info['status']['can_claim']}")

            return available_levels

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –¥–ª—è {telegram_id}: {str(e)}")
            return {}

    @cached(timeout=300)
    def _get_today_claims(self, telegram_id: str) -> List[FlexLevel]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –æ—Ç—Ä–∏–º–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            today = datetime.now(timezone.utc).date()
            today_start = datetime.combine(today, datetime.min.time()).replace(tzinfo=timezone.utc)
            today_end = today_start + timedelta(days=1)

            def fetch_claims():
                response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("level") \
                    .eq("telegram_id", telegram_id) \
                    .gte("claimed_at", today_start.isoformat()) \
                    .lt("claimed_at", today_end.isoformat()) \
                    .execute()

                return [FlexLevel(claim['level']) for claim in response.data] if response.data else []

            return retry_supabase(fetch_claims)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö claims –¥–ª—è {telegram_id}: {str(e)}")
            return []

    def _get_next_claim_time(self, telegram_id: str, level: FlexLevel) -> Optional[datetime]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º–æ–∂–ª–∏–≤–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è"""
        try:
            def fetch_last_claim():
                response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("claimed_at") \
                    .eq("telegram_id", telegram_id) \
                    .eq("level", level.value) \
                    .order("claimed_at", desc=True) \
                    .limit(1) \
                    .execute()

                if response.data:
                    last_claim = datetime.fromisoformat(response.data[0]['claimed_at'].replace('Z', '+00:00'))
                    next_claim = last_claim + timedelta(hours=self.CLAIM_COOLDOWN_HOURS)
                    return next_claim

                return None

            return retry_supabase(fetch_last_claim)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ claim –¥–ª—è {telegram_id}, {level}: {str(e)}")
            return None

    def claim_level_reward(self, telegram_id: str, level: FlexLevel) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Ä—ñ–≤–µ–Ω—å FLEX

        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            level: –†—ñ–≤–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        """
        try:
            telegram_id = str(telegram_id)
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ {level.value} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä—ñ–≤–Ω—è
            if level not in self.FLEX_LEVELS_CONFIG:
                return {
                    'success': False,
                    'message': f'–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å: {level.value}',
                    'error_code': 'UNKNOWN_LEVEL'
                }

            config = self.FLEX_LEVELS_CONFIG[level]

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å FLEX
            flex_balance = self.get_user_flex_balance(telegram_id)

            if flex_balance < config.required_flex:
                return {
                    'success': False,
                    'message': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ FLEX —Ç–æ–∫–µ–Ω—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ: {config.required_flex:,}, —î: {flex_balance:,}',
                    'error_code': 'INSUFFICIENT_FLEX'
                }

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ
            today_claims = self._get_today_claims(telegram_id)

            if level in today_claims:
                next_claim_time = self._get_next_claim_time(telegram_id, level)
                return {
                    'success': False,
                    'message': '–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ —Ü–µ–π —Ä—ñ–≤–µ–Ω—å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ',
                    'error_code': 'ALREADY_CLAIMED_TODAY',
                    'next_claim_available': next_claim_time.isoformat() if next_claim_time else None
                }

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É
            reward_result = self._award_level_reward(telegram_id, level, config)

            if reward_result['success']:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
                claim_result = self._create_claim_record(telegram_id, level, config, flex_balance)

                if claim_result:
                    # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
                    invalidate_cache_for_entity(telegram_id)

                    logger.info(f"–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ {level.value} —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")

                    return {
                        'success': True,
                        'message': f'–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ {config.name} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞!',
                        'reward': {
                            'level': level.value,
                            'winix': config.winix_reward,
                            'tickets': config.tickets_reward,
                            'name': config.name,
                            'icon': config.icon
                        },
                        'next_claim_available': (
                                    datetime.now(timezone.utc) + timedelta(hours=self.CLAIM_COOLDOWN_HOURS)).isoformat()
                    }
                else:
                    return {
                        'success': False,
                        'message': '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è',
                        'error_code': 'CLAIM_RECORD_FAILED'
                    }
            else:
                return reward_result

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ {level} –¥–ª—è {telegram_id}: {str(e)}")
            return {
                'success': False,
                'message': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                'error_code': 'INTERNAL_ERROR'
            }

    def _award_level_reward(self, telegram_id: str, level: FlexLevel, config: FlexRewardConfig) -> Dict[str, Any]:
        """–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å–æ–º –∑ fallback
            try:
                from supabase_client import update_balance, update_coins
            except ImportError:
                try:
                    from backend.supabase_client import update_balance, update_coins
                except ImportError:
                    logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó balance")

                    # Fallback —Ñ—É–Ω–∫—Ü—ñ—ó
                    def update_balance(user_id: str, amount: int) -> bool:
                        logger.warning(f"Fallback: update_balance({user_id}, {amount})")
                        return True

                    def update_coins(user_id: str, amount: int) -> bool:
                        logger.warning(f"Fallback: update_coins({user_id}, {amount})")
                        return True

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ WINIX
            winix_result = update_balance(telegram_id, config.winix_reward)
            if not winix_result:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ WINIX")

            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ tickets (–ø–æ–∫–∏ —â–æ —á–µ—Ä–µ–∑ coins)
            tickets_result = update_coins(telegram_id, config.tickets_reward)
            if not tickets_result:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ tickets –¥–ª—è {telegram_id}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            self._create_reward_transaction(telegram_id, level, config)

            return {
                'success': True,
                'winix_awarded': config.winix_reward,
                'tickets_awarded': config.tickets_reward
            }

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –¥–ª—è {telegram_id}: {str(e)}")
            return {
                'success': False,
                'message': f'–ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏: {str(e)}',
                'error_code': 'REWARD_FAILED'
            }

    def _create_claim_record(self, telegram_id: str, level: FlexLevel, config: FlexRewardConfig,
                             flex_balance: int) -> bool:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏"""
        try:
            now = datetime.now(timezone.utc)

            claim_record = {
                'telegram_id': telegram_id,
                'level': level.value,
                'flex_balance_at_claim': flex_balance,
                'winix_awarded': config.winix_reward,
                'tickets_awarded': config.tickets_reward,
                'claimed_at': now.isoformat(),
                'created_at': now.isoformat()
            }

            def create_claim():
                response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .insert(claim_record) \
                    .execute()

                return bool(response.data)

            return retry_supabase(create_claim)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É claim –¥–ª—è {telegram_id}: {str(e)}")
            return False

    def _create_reward_transaction(self, telegram_id: str, level: FlexLevel, config: FlexRewardConfig) -> None:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏"""
        try:
            now = datetime.now(timezone.utc)

            transaction_record = {
                'telegram_id': telegram_id,
                'type': 'flex_reward',
                'amount': config.winix_reward,
                'description': f'–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ FLEX {config.name} ({config.winix_reward} WINIX + {config.tickets_reward} tickets)',
                'status': 'completed',
                'metadata': {
                    'flex_level': level.value,
                    'winix_amount': config.winix_reward,
                    'tickets_amount': config.tickets_reward,
                    'level_name': config.name
                },
                'created_at': now.isoformat(),
                'updated_at': now.isoformat()
            }

            def create_transaction():
                supabase.table("transactions") \
                    .insert(transaction_record) \
                    .execute()

            retry_supabase(create_transaction)
            logger.debug(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è {telegram_id}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó FLEX –¥–ª—è {telegram_id}: {str(e)}")

    @cached(timeout=600)  # –ö–µ—à –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
    def get_user_flex_history(self, telegram_id: str, limit: int = 50) -> List[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω—å FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥

        Args:
            telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω—å
        """
        try:
            telegram_id = str(telegram_id)

            def fetch_history():
                response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("*") \
                    .eq("telegram_id", telegram_id) \
                    .order("claimed_at", desc=True) \
                    .limit(min(limit, 100)) \
                    .execute()

                if response.data:
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    history = []
                    for claim in response.data:
                        level = FlexLevel(claim['level'])
                        config = self.FLEX_LEVELS_CONFIG.get(level)

                        history_item = {
                            'id': claim['id'],
                            'level': claim['level'],
                            'level_name': config.name if config else claim['level'],
                            'level_icon': config.icon if config else 'üéÅ',
                            'flex_balance_at_claim': claim['flex_balance_at_claim'],
                            'winix_awarded': claim['winix_awarded'],
                            'tickets_awarded': claim['tickets_awarded'],
                            'claimed_at': claim['claimed_at'],
                            'days_ago': (datetime.now(timezone.utc) -
                                         datetime.fromisoformat(claim['claimed_at'].replace('Z', '+00:00'))).days
                        }
                        history.append(history_item)

                    return history

                return []

            return retry_supabase(fetch_history)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó FLEX –¥–ª—è {telegram_id}: {str(e)}")
            return []

    @cached(timeout=1800)  # –ö–µ—à –Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω
    def get_flex_statistics(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ FLEX —Å–∏—Å—Ç–µ–º–∏

        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FLEX –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
        """
        try:
            logger.info("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ FLEX —Å–∏—Å—Ç–µ–º–∏")

            def fetch_stats():
                # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω—å
                total_claims_response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("id", count="exact") \
                    .execute()

                total_claims = total_claims_response.count if total_claims_response.count else 0

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—ñ–≤–Ω—è—Ö
                levels_response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("level", count="exact") \
                    .execute()

                level_stats = {}
                if levels_response.data:
                    for claim in levels_response.data:
                        level = claim['level']
                        level_stats[level] = level_stats.get(level, 0) + 1

                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
                week_ago = (datetime.now(timezone.utc) - timedelta(days=7)).isoformat()
                week_claims_response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("id", count="exact") \
                    .gte("claimed_at", week_ago) \
                    .execute()

                week_claims = week_claims_response.count if week_claims_response.count else 0

                # –°—É–º–∞ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
                rewards_response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("winix_awarded, tickets_awarded") \
                    .execute()

                total_winix = 0
                total_tickets = 0
                if rewards_response.data:
                    for reward in rewards_response.data:
                        total_winix += reward.get('winix_awarded', 0)
                        total_tickets += reward.get('tickets_awarded', 0)

                # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
                users_response = supabase.table(self.TABLE_FLEX_CLAIMS) \
                    .select("telegram_id") \
                    .execute()

                unique_users = len(
                    set(claim['telegram_id'] for claim in users_response.data)) if users_response.data else 0

                return {
                    'total_claims': total_claims,
                    'unique_users': unique_users,
                    'claims_this_week': week_claims,
                    'level_distribution': level_stats,
                    'total_rewards': {
                        'winix': total_winix,
                        'tickets': total_tickets
                    },
                    'average_claims_per_user': round(total_claims / unique_users, 2) if unique_users > 0 else 0,
                    'levels_config': {
                        level.value: {
                            'required_flex': config.required_flex,
                            'winix_reward': config.winix_reward,
                            'tickets_reward': config.tickets_reward,
                            'name': config.name
                        }
                        for level, config in self.FLEX_LEVELS_CONFIG.items()
                    }
                }

            return retry_supabase(fetch_stats)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ FLEX: {str(e)}")
            return {
                'total_claims': 0,
                'unique_users': 0,
                'claims_this_week': 0,
                'level_distribution': {},
                'total_rewards': {'winix': 0, 'tickets': 0},
                'average_claims_per_user': 0,
                'levels_config': {},
                'error': str(e)
            }

    def get_user_flex_status(self, telegram_id: str) -> UserFlexStatus:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ FLEX"""
        try:
            telegram_id = str(telegram_id)

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å
            flex_balance = self.get_user_flex_balance(telegram_id)

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ
            available_levels_data = self.get_available_levels(telegram_id, flex_balance)

            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–∫–∏
            available_levels = [level for level, data in available_levels_data.items()
                                if data['status']['has_enough_flex']]

            claimed_today = {level: data['status']['claimed_today']
                             for level, data in available_levels_data.items()}

            # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –æ—Ç—Ä–∏–º–∞–Ω—å
            last_claim_times = {}
            for level in FlexLevel:
                last_time = self._get_next_claim_time(telegram_id, level)
                if last_time:
                    last_claim_times[level] = last_time - timedelta(hours=self.CLAIM_COOLDOWN_HOURS)

            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
            history = self.get_user_flex_history(telegram_id, limit=1000)
            total_winix = sum(item['winix_awarded'] for item in history)
            total_tickets = sum(item['tickets_awarded'] for item in history)

            return UserFlexStatus(
                telegram_id=telegram_id,
                current_flex_balance=flex_balance,
                available_levels=available_levels,
                claimed_today=claimed_today,
                last_claim_times=last_claim_times,
                total_claimed_winix=total_winix,
                total_claimed_tickets=total_tickets,
                last_updated=datetime.now(timezone.utc)
            )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É FLEX –¥–ª—è {telegram_id}: {str(e)}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            return UserFlexStatus(
                telegram_id=telegram_id,
                current_flex_balance=0,
                available_levels=[],
                claimed_today={},
                last_claim_times={},
                total_claimed_winix=0,
                total_claimed_tickets=0,
                last_updated=datetime.now(timezone.utc)
            )


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
flex_rewards_model = FlexRewardsModel()

# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'FlexRewardsModel',
    'FlexLevel',
    'RewardStatus',
    'FlexRewardConfig',
    'UserFlexStatus',
    'flex_rewards_model'
]