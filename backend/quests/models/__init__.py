"""
–ú–æ–¥—É–ª—å –∑–∞–≤–¥–∞–Ω—å —Ç–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó WINIX
–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å, –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Telegram
"""

import logging
import os
from typing import Optional, Dict, Any

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –í–µ—Ä—Å—ñ—è –º–æ–¥—É–ª—è
__version__ = "1.0.0"

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥—É–ª—å
__module_info__ = {
    "name": "WINIX Quests & Verification System",
    "version": __version__,
    "description": "–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–¥–∞–Ω—å —Ç–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è WINIX",
    "components": [
        "Telegram Service - —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –±–æ—Ç–æ–º",
        "Verification Service - –ª–æ–≥—ñ–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó",
        "Task Management - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏",
        "Timer System - —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä—ñ–≤",
        "Reward Calculator - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥"
    ]
}

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
_telegram_service = None
_verification_service = None
_services_initialized = False

def initialize_services() -> bool:
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –º–æ–¥—É–ª—è

    Returns:
        bool: True —è–∫—â–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ
    """
    global _telegram_service, _verification_service, _services_initialized

    if _services_initialized:
        logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å–∏ –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ")
        return True

    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –º–æ–¥—É–ª—è quests...")

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram —Å–µ—Ä–≤—ñ—Å—É
        try:
            from .services.telegram_service import telegram_service
            _telegram_service = telegram_service
            logger.info("‚úÖ Telegram —Å–µ—Ä–≤—ñ—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Telegram —Å–µ—Ä–≤—ñ—Å: {str(e)}")
            _telegram_service = None

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        try:
            from .services.verification_service import verification_service
            _verification_service = verification_service
            logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
            _verification_service = None

        _services_initialized = True
        logger.info("‚úÖ –°–µ—Ä–≤—ñ—Å–∏ –º–æ–¥—É–ª—è quests —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ")

        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤: {str(e)}")
        return False

def get_telegram_service():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–∫–∑–µ–º–ø–ª—è—Ä Telegram —Å–µ—Ä–≤—ñ—Å—É"""
    if not _services_initialized:
        initialize_services()
    return _telegram_service

def get_verification_service():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    if not _services_initialized:
        initialize_services()
    return _verification_service

def register_routes(app) -> bool:
    """
    –†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –º–æ–¥—É–ª—è –≤ Flask –¥–æ–¥–∞—Ç–∫—É

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É

    Returns:
        bool: True —è–∫—â–æ –º–∞—Ä—à—Ä—É—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ
    """
    logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –º–æ–¥—É–ª—è quests...")

    routes_registered = 0
    total_routes = 0

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    try:
        from .routes.verification_routes import register_verification_routes
        if register_verification_routes(app):
            routes_registered += 1
            logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
        total_routes += 1
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {str(e)}")

    # –¢—É—Ç –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥–æ–¥–∞–Ω—ñ —ñ–Ω—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –º–æ–¥—É–ª—è
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: auth_routes, tasks_routes, etc.

    success_rate = (routes_registered / total_routes * 100) if total_routes > 0 else 0
    logger.info(f"üìä –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {routes_registered}/{total_routes} –≥—Ä—É–ø –º–∞—Ä—à—Ä—É—Ç—ñ–≤ ({success_rate:.1f}%)")

    return routes_registered > 0

def setup_quests_module(app) -> Dict[str, Any]:
    """
    –ü–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è quests

    Args:
        app: –ï–∫–∑–µ–º–ø–ª—è—Ä Flask –¥–æ–¥–∞—Ç–∫—É

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    """
    logger.info("üéØ === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–£–õ–Ø QUESTS ===")

    result = {
        "success": False,
        "services_initialized": False,
        "routes_registered": False,
        "telegram_available": False,
        "verification_available": False,
        "errors": []
    }

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
        if initialize_services():
            result["services_initialized"] = True
            result["telegram_available"] = _telegram_service is not None
            result["verification_available"] = _verification_service is not None
        else:
            result["errors"].append("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å–∏")

        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
        if register_routes(app):
            result["routes_registered"] = True
        else:
            result["errors"].append("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —É—Å–ø—ñ—Ö
        result["success"] = result["services_initialized"] and result["routes_registered"]

        if result["success"]:
            logger.info("‚úÖ –ú–æ–¥—É–ª—å quests —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            _log_module_status(result)
        else:
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å quests —á–∞—Å—Ç–∫–æ–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {result['errors']}")

        return result

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è quests: {str(e)}")
        result["errors"].append(str(e))
        return result

def _log_module_status(result: Dict[str, Any]):
    """–õ–æ–≥—É—î —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"""
    logger.info("üìã –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è quests:")
    logger.info(f"   üîß –°–µ—Ä–≤—ñ—Å–∏: {'‚úÖ' if result['services_initialized'] else '‚ùå'}")
    logger.info(f"   üì° Telegram: {'‚úÖ' if result['telegram_available'] else '‚ùå'}")
    logger.info(f"   üîç –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è: {'‚úÖ' if result['verification_available'] else '‚ùå'}")
    logger.info(f"   üåê –ú–∞—Ä—à—Ä—É—Ç–∏: {'‚úÖ' if result['routes_registered'] else '‚ùå'}")

def get_module_info() -> Dict[str, Any]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–¥—É–ª—å"""
    return {
        **__module_info__,
        "initialized": _services_initialized,
        "telegram_service_available": _telegram_service is not None,
        "verification_service_available": _verification_service is not None,
        "environment": {
            "telegram_bot_token": bool(os.getenv('TELEGRAM_BOT_TOKEN')),
            "telegram_bot_username": os.getenv('TELEGRAM_BOT_USERNAME', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        }
    }

def get_health_status() -> Dict[str, Any]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤'—è –º–æ–¥—É–ª—è"""
    health = {
        "status": "healthy",
        "services": {},
        "issues": []
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram —Å–µ—Ä–≤—ñ—Å
    if _telegram_service:
        try:
            bot_info = _telegram_service.get_bot_info_sync()
            health["services"]["telegram"] = {
                "status": "healthy" if bot_info else "warning",
                "bot_info": bot_info
            }
            if not bot_info:
                health["issues"].append("Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        except Exception as e:
            health["services"]["telegram"] = {
                "status": "error",
                "error": str(e)
            }
            health["issues"].append(f"–ü–æ–º–∏–ª–∫–∞ Telegram —Å–µ—Ä–≤—ñ—Å—É: {str(e)}")
    else:
        health["services"]["telegram"] = {"status": "unavailable"}
        health["issues"].append("Telegram —Å–µ—Ä–≤—ñ—Å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    if _verification_service:
        try:
            stats = _verification_service.get_verification_statistics()
            health["services"]["verification"] = {
                "status": "healthy",
                "statistics": stats
            }
        except Exception as e:
            health["services"]["verification"] = {
                "status": "error",
                "error": str(e)
            }
            health["issues"].append(f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
    else:
        health["services"]["verification"] = {"status": "unavailable"}
        health["issues"].append("–°–µ—Ä–≤—ñ—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    if health["issues"]:
        health["status"] = "warning" if len(health["issues"]) <= 2 else "error"

    return health

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
def auto_initialize():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –º–æ–¥—É–ª—è"""
    if os.getenv('QUESTS_AUTO_INIT', 'false').lower() == 'true':
        logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è quests...")
        initialize_services()

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∫–ª–∞—Å–∏
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    'setup_quests_module',
    'initialize_services',
    'register_routes',

    # Getter —Ñ—É–Ω–∫—Ü—ñ—ó
    'get_telegram_service',
    'get_verification_service',
    'get_module_info',
    'get_health_status',

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    '__version__',
    '__module_info__'
]

# –í–∏–∫–ª–∏–∫–∞—î–º–æ –∞–≤—Ç–æ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
auto_initialize()

logger.info(f"üì¶ –ú–æ–¥—É–ª—å quests v{__version__} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")