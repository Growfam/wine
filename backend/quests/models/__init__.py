"""
–ú–∞—Ä—à—Ä—É—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX
–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
"""

import logging
from typing import Dict, Any, List
from flask import Flask

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤
_routes_status: Dict[str, Dict[str, Any]] = {}

# === –Ü–ú–ü–û–†–¢ –ú–ê–†–®–†–£–¢–Ü–í –ó –û–ë–†–û–ë–ö–û–Æ –ü–û–ú–ò–õ–û–ö ===

# Auth –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .auth_routes import register_auth_routes
    _routes_status['auth'] = {
        'loaded': True,
        'register_function': register_auth_routes,
        'prefix': '/api/auth',
        'description': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è'
    }
    logger.info("‚úÖ Auth –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Auth –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['auth'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_auth_routes = None

# User –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .user_routes import register_user_routes
    _routes_status['user'] = {
        'loaded': True,
        'register_function': register_user_routes,
        'prefix': '/api/user',
        'description': '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏'
    }
    logger.info("‚úÖ User –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è User –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['user'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_user_routes = None

# Daily –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .daily_routes import register_daily_routes
    _routes_status['daily'] = {
        'loaded': True,
        'register_function': register_daily_routes,
        'prefix': '/api/daily',
        'description': '–©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏'
    }
    logger.info("‚úÖ Daily –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Daily –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['daily'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_daily_routes = None

# FLEX –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .flex_routes import register_flex_routes
    _routes_status['flex'] = {
        'loaded': True,
        'register_function': register_flex_routes,
        'prefix': '/api/flex',
        'description': 'FLEX —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'
    }
    logger.info("‚úÖ FLEX –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è FLEX –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['flex'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_flex_routes = None

# Tasks –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .tasks_routes import register_tasks_routes
    _routes_status['tasks'] = {
        'loaded': True,
        'register_function': register_tasks_routes,
        'prefix': '/api/tasks',
        'description': '–ó–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è'
    }
    logger.info("‚úÖ Tasks –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Tasks –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['tasks'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_tasks_routes = None

# Transaction –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .transaction_routes import register_transaction_routes
    _routes_status['transaction'] = {
        'loaded': True,
        'register_function': register_transaction_routes,
        'prefix': '/api/transactions',
        'description': '–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π'
    }
    logger.info("‚úÖ Transaction –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Transaction –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['transaction'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_transaction_routes = None

# Verification –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .verification_routes import register_verification_routes
    _routes_status['verification'] = {
        'loaded': True,
        'register_function': register_verification_routes,
        'prefix': '/api/verify',
        'description': '–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å'
    }
    logger.info("‚úÖ Verification –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Verification –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['verification'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_verification_routes = None

# Wallet –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .wallet_routes import register_wallet_routes
    _routes_status['wallet'] = {
        'loaded': True,
        'register_function': register_wallet_routes,
        'prefix': '/api/wallet',
        'description': 'TON –≥–∞–º–∞–Ω—Ü—ñ'
    }
    logger.info("‚úÖ Wallet –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Wallet –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['wallet'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_wallet_routes = None

# Analytics –º–∞—Ä—à—Ä—É—Ç–∏
try:
    from .analytics_routes import register_analytics_routes
    _routes_status['analytics'] = {
        'loaded': True,
        'register_function': register_analytics_routes,
        'prefix': '/api/analytics',
        'description': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    }
    logger.info("‚úÖ Analytics –º–∞—Ä—à—Ä—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Analytics –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _routes_status['analytics'] = {
        'loaded': False,
        'error': str(e),
        'register_function': None
    }
    register_analytics_routes = None


def register_quests_routes(app: Flask, routes_to_register: List[str] = None) -> Dict[str, Any]:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å

    Args:
        app: Flask –¥–æ–¥–∞—Ç–æ–∫
        routes_to_register: –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –≤—Å—ñ)

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    """
    logger.info("=== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ú–ê–†–®–†–£–¢–Ü–í –°–ò–°–¢–ï–ú–ò –ó–ê–í–î–ê–ù–¨ ===")

    registration_results = {
        'total_attempted': 0,
        'successfully_registered': 0,
        'failed_registrations': 0,
        'registered_routes': [],
        'failed_routes': [],
        'summary': {}
    }

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏
    if routes_to_register is None:
        routes_to_register = list(_routes_status.keys())

    # –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï:
    # –§—É–Ω–∫—Ü—ñ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —É –≤–∏–∑–Ω–∞—á–µ–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É - –¢–Ü–õ–¨–ö–ò –¢–Ü –©–û –î–û–°–¢–£–ü–ù–Ü
    route_registry = []

    # –ü–æ—Ä—è–¥–æ–∫ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
    priority_routes = [
        ('auth', register_auth_routes),
        ('user', register_user_routes),
        ('daily', register_daily_routes),
        ('tasks', register_tasks_routes),
        ('flex', register_flex_routes),
        ('wallet', register_wallet_routes),
        ('transaction', register_transaction_routes),
        ('verification', register_verification_routes),
        ('analytics', register_analytics_routes)
    ]

    # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —â–æ –Ω–µ None —Ç–∞ callable
    for route_name, register_func in priority_routes:
        if register_func is not None and callable(register_func):
            route_registry.append((route_name, register_func))
        else:
            logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {route_name} - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
    for route_name, register_func in route_registry:
        if route_name not in routes_to_register:
            continue

        registration_results['total_attempted'] += 1
        route_status = _routes_status.get(route_name, {})

        if not route_status.get('loaded', False):
            logger.warning(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {route_name} –º–∞—Ä—à—Ä—É—Ç–∏ (–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ)")
            registration_results['failed_routes'].append({
                'name': route_name,
                'reason': 'not_loaded',
                'error': route_status.get('error', 'Import failed')
            })
            registration_results['failed_registrations'] += 1
            continue

        if register_func is None:
            logger.warning(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {route_name} –º–∞—Ä—à—Ä—É—Ç–∏ (—Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
            registration_results['failed_routes'].append({
                'name': route_name,
                'reason': 'no_register_function',
                'error': 'Register function is None'
            })
            registration_results['failed_registrations'] += 1
            continue

        try:
            logger.info(f"üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è {route_name} –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            result = register_func(app)

            if result is True or result is None:  # –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ–π –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å True –∞–±–æ None –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
                registration_results['successfully_registered'] += 1
                registration_results['registered_routes'].append({
                    'name': route_name,
                    'prefix': route_status.get('prefix', 'unknown'),
                    'description': route_status.get('description', '')
                })
                logger.info(f"‚úÖ {route_name.title()} –º–∞—Ä—à—Ä—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
            else:
                registration_results['failed_registrations'] += 1
                registration_results['failed_routes'].append({
                    'name': route_name,
                    'reason': 'registration_failed',
                    'error': f'Function returned: {result}'
                })
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó {route_name} –º–∞—Ä—à—Ä—É—Ç—ñ–≤")

        except Exception as e:
            registration_results['failed_registrations'] += 1
            registration_results['failed_routes'].append({
                'name': route_name,
                'reason': 'exception',
                'error': str(e)
            })
            logger.error(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó {route_name} –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}", exc_info=True)

    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    total_routes_count = 0
    for rule in app.url_map.iter_rules():
        if '/api/' in rule.rule:
            total_routes_count += 1

    # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    registration_results['summary'] = {
        'success_rate': round(
            (registration_results['successfully_registered'] / registration_results['total_attempted']) * 100, 1
        ) if registration_results['total_attempted'] > 0 else 0,
        'total_api_routes': total_routes_count,
        'system_status': 'healthy' if registration_results['successfully_registered'] >= registration_results['failed_registrations'] else 'degraded'
    }

    # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    _log_registration_summary(registration_results)

    return registration_results


def _log_registration_summary(results: Dict[str, Any]):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""
    summary = results['summary']

    if results['successfully_registered'] == results['total_attempted']:
        logger.info(f"üéâ –í—Å—ñ {results['total_attempted']} –≥—Ä—É–ø –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        logger.warning(
            f"‚ö†Ô∏è –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {results['successfully_registered']}/{results['total_attempted']} "
            f"–≥—Ä—É–ø –º–∞—Ä—à—Ä—É—Ç—ñ–≤ ({summary['success_rate']}%)"
        )

    if results['registered_routes']:
        logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏:")
        for route in results['registered_routes']:
            logger.info(f"  ‚Ä¢ {route['name']}: {route['prefix']} - {route['description']}")

    if results['failed_routes']:
        logger.warning("‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏:")
        for route in results['failed_routes']:
            logger.warning(f"  ‚Ä¢ {route['name']}: {route['reason']} - {route['error']}")

    logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å API –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {summary['total_api_routes']}")
    logger.info(f"üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {summary['system_status']}")


def get_routes_status() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤

    Returns:
        Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    """
    return _routes_status.copy()


def get_loaded_routes() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤

    Returns:
        Dict –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    """
    return {
        name: status for name, status in _routes_status.items()
        if status.get('loaded', False)
    }


def get_failed_routes() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å

    Returns:
        Dict –∑ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ —â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
    """
    return {
        name: status for name, status in _routes_status.items()
        if not status.get('loaded', False)
    }


def register_specific_routes(app: Flask, route_names: List[str]) -> Dict[str, Any]:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –≥—Ä—É–ø –º–∞—Ä—à—Ä—É—Ç—ñ–≤

    Args:
        app: Flask –¥–æ–¥–∞—Ç–æ–∫
        route_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    """
    logger.info(f"üéØ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–±—Ä–∞–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {', '.join(route_names)}")
    return register_quests_routes(app, route_names)


def register_core_routes(app: Flask) -> Dict[str, Any]:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ (auth, user, tasks)

    Args:
        app: Flask –¥–æ–¥–∞—Ç–æ–∫

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    """
    core_routes = ['auth', 'user', 'tasks', 'daily']
    logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏")
    return register_quests_routes(app, core_routes)


def register_extended_routes(app: Flask) -> Dict[str, Any]:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ (flex, wallet, analytics)

    Args:
        app: Flask –¥–æ–¥–∞—Ç–æ–∫

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    """
    extended_routes = ['flex', 'wallet', 'transaction', 'verification', 'analytics']
    logger.info("üöÄ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏")
    return register_quests_routes(app, extended_routes)


def log_routes_summary():
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""
    loaded_count = len(get_loaded_routes())
    failed_count = len(get_failed_routes())
    total_count = len(_routes_status)

    logger.info(f"üìä –°—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {loaded_count}/{total_count} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

    if loaded_count > 0:
        logger.info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏:")
        for name, status in get_loaded_routes().items():
            logger.info(f"  ‚Ä¢ {name}: {status.get('prefix', 'N/A')} - {status.get('description', 'N/A')}")

    if failed_count > 0:
        logger.warning("‚ùå –ú–∞—Ä—à—Ä—É—Ç–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏:")
        for name, status in get_failed_routes().items():
            logger.warning(f"  ‚Ä¢ {name}: {status.get('error', 'Unknown error')}")


# –õ–æ–≥—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
log_routes_summary()

# –ï–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
__all__ = [
    'register_quests_routes',
    'register_specific_routes',
    'register_core_routes',
    'register_extended_routes',
    'get_routes_status',
    'get_loaded_routes',
    'get_failed_routes',
    'log_routes_summary',

    # –§—É–Ω–∫—Ü—ñ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)
    'register_auth_routes',
    'register_user_routes',
    'register_daily_routes',
    'register_tasks_routes',
    'register_flex_routes',
    'register_wallet_routes',
    'register_transaction_routes',
    'register_verification_routes',
    'register_analytics_routes'
]