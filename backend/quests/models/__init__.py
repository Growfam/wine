"""
üìä WINIX Models Package
–ú–æ–¥–µ–ª—ñ –¥–∞–Ω–∏—Ö —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å WINIX

–¶–µ–π –ø–∞–∫–µ—Ç –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏:
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–∞ —ó—Ö –∑–∞–≤–¥–∞–Ω–Ω—è
- –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
- –©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ FLEX —Å–∏—Å—Ç–µ–º–∏
- –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- TON –≥–∞–º–∞–Ω—Ü—ñ —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
"""

import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–æ–¥–µ–ª–µ–π
_models_status: Dict[str, Dict[str, Any]] = {}

# === ANALYTICS MODEL ===
try:
    from .analytics import (
        AnalyticsDB,
        AnalyticsEvent,
        UserSession,
        UserStats,
        EventType,
        EventSeverity,
        analytics_db,
        create_event,
        create_task_event,
        create_wallet_event
    )
    _models_status['analytics'] = {
        'loaded': True,
        'classes': ['AnalyticsDB', 'AnalyticsEvent', 'UserSession', 'UserStats'],
        'enums': ['EventType', 'EventSeverity'],
        'functions': ['create_event', 'create_task_event', 'create_wallet_event'],
        'instances': ['analytics_db'],
        'description': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
    }
    logger.info("‚úÖ Analytics –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Analytics –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _models_status['analytics'] = {'loaded': False, 'error': str(e)}
    # –ó–∞–≥–ª—É—à–∫–∏
    AnalyticsDB = AnalyticsEvent = UserSession = UserStats = None
    EventType = EventSeverity = analytics_db = None
    create_event = create_task_event = create_wallet_event = None

# === DAILY BONUS MODEL ===
try:
    from .daily_bonus import (
        DailyBonusEntry,
        DailyBonusStatus,
        DailyBonusManager,
        daily_bonus_manager,
        create_new_daily_status,
        get_daily_bonus_constants,
        Reward
    )
    _models_status['daily_bonus'] = {
        'loaded': True,
        'classes': ['DailyBonusEntry', 'DailyBonusStatus', 'DailyBonusManager', 'Reward'],
        'functions': ['create_new_daily_status', 'get_daily_bonus_constants'],
        'instances': ['daily_bonus_manager'],
        'description': '–©–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ —Å–µ—Ä—ñ—ó'
    }
    logger.info("‚úÖ Daily Bonus –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Daily Bonus –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _models_status['daily_bonus'] = {'loaded': False, 'error': str(e)}
    # –ó–∞–≥–ª—É—à–∫–∏
    DailyBonusEntry = DailyBonusStatus = DailyBonusManager = None
    daily_bonus_manager = create_new_daily_status = get_daily_bonus_constants = None
    Reward = None

# === FLEX REWARDS MODEL ===
try:
    from .flex_rewards import (
        FlexRewardsModel,
        FlexLevel,
        RewardStatus,
        FlexRewardConfig,
        UserFlexStatus,
        flex_rewards_model
    )
    _models_status['flex_rewards'] = {
        'loaded': True,
        'classes': ['FlexRewardsModel', 'FlexRewardConfig', 'UserFlexStatus'],
        'enums': ['FlexLevel', 'RewardStatus'],
        'instances': ['flex_rewards_model'],
        'description': 'FLEX —Ç–æ–∫–µ–Ω–∏ —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏'
    }
    logger.info("‚úÖ FLEX Rewards –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è FLEX Rewards –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _models_status['flex_rewards'] = {'loaded': False, 'error': str(e)}
    # –ó–∞–≥–ª—É—à–∫–∏
    FlexRewardsModel = FlexLevel = RewardStatus = None
    FlexRewardConfig = UserFlexStatus = flex_rewards_model = None

# === TASK MODEL ===
try:
    from .task import (
        TaskModel,
        TaskType,
        TaskStatus,
        TaskPlatform,
        TaskAction,
        TaskReward,
        TaskRequirements,
        TaskMetadata,
        task_model
    )
    _models_status['task'] = {
        'loaded': True,
        'classes': ['TaskModel', 'TaskReward', 'TaskRequirements', 'TaskMetadata'],
        'enums': ['TaskType', 'TaskStatus', 'TaskPlatform', 'TaskAction'],
        'instances': ['task_model'],
        'description': '–ó–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ —ó—Ö –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'
    }
    logger.info("‚úÖ Task –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Task –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _models_status['task'] = {'loaded': False, 'error': str(e)}
    # –ó–∞–≥–ª—É—à–∫–∏
    TaskModel = TaskType = TaskStatus = TaskPlatform = TaskAction = None
    TaskReward = TaskRequirements = TaskMetadata = task_model = None

# === TRANSACTION MODEL ===
try:
    from .transaction import (
        TransactionModel,
        Transaction,
        TransactionAmount,
        TransactionType,
        TransactionStatus,
        CurrencyType,
        transaction_model
    )
    _models_status['transaction'] = {
        'loaded': True,
        'classes': ['TransactionModel', 'Transaction', 'TransactionAmount'],
        'enums': ['TransactionType', 'TransactionStatus', 'CurrencyType'],
        'instances': ['transaction_model'],
        'description': '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –±–∞–ª–∞–Ω—Å–æ–º'
    }
    logger.info("‚úÖ Transaction –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Transaction –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _models_status['transaction'] = {'loaded': False, 'error': str(e)}
    # –ó–∞–≥–ª—É—à–∫–∏
    TransactionModel = Transaction = TransactionAmount = None
    TransactionType = TransactionStatus = CurrencyType = transaction_model = None

# === USER QUEST MODEL ===
try:
    from .user_quest import (
        UserQuest,
        UserBalance,
        Reward as UserReward,
        TaskStatus as UserTaskStatus,
        create_new_user,
        validate_telegram_id,
        get_current_utc_time
    )
    _models_status['user_quest'] = {
        'loaded': True,
        'classes': ['UserQuest', 'UserBalance'],
        'functions': ['create_new_user', 'validate_telegram_id', 'get_current_utc_time'],
        'description': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–∞ —ó—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ'
    }
    logger.info("‚úÖ User Quest –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è User Quest –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _models_status['user_quest'] = {'loaded': False, 'error': str(e)}
    # –ó–∞–≥–ª—É—à–∫–∏
    UserQuest = UserBalance = UserReward = UserTaskStatus = None
    create_new_user = validate_telegram_id = get_current_utc_time = None

# === WALLET MODEL ===
try:
    from .wallet import (
        WalletModel,
        WalletStatus,
        WalletProvider,
        WalletConnectionBonus,
        wallet_model
    )
    _models_status['wallet'] = {
        'loaded': True,
        'classes': ['WalletModel', 'WalletConnectionBonus'],
        'enums': ['WalletStatus', 'WalletProvider'],
        'instances': ['wallet_model'],
        'description': 'TON –≥–∞–º–∞–Ω—Ü—ñ —Ç–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è'
    }
    logger.info("‚úÖ Wallet –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Wallet –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    _models_status['wallet'] = {'loaded': False, 'error': str(e)}
    # –ó–∞–≥–ª—É—à–∫–∏
    WalletModel = WalletStatus = WalletProvider = None
    WalletConnectionBonus = wallet_model = None

# === –£–¢–ò–õ–Ü–¢–ò –ü–ê–ö–ï–¢–£ ===

def get_models_status() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π

    Returns:
        Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω–æ—ó –º–æ–¥–µ–ª—ñ
    """
    return _models_status.copy()

def get_loaded_models() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π

    Returns:
        Dict –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
    """
    return {
        name: status for name, status in _models_status.items()
        if status.get('loaded', False)
    }

def get_failed_models() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π —â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å

    Returns:
        Dict –∑ –º–æ–¥–µ–ª—è–º–∏ —â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
    """
    return {
        name: status for name, status in _models_status.items()
        if not status.get('loaded', False)
    }

def initialize_models() -> Dict[str, Any]:
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π

    Returns:
        Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    """
    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π WINIX...")

    loaded = get_loaded_models()
    failed = get_failed_models()

    result = {
        'total_models': len(_models_status),
        'loaded_models': len(loaded),
        'failed_models': len(failed),
        'success_rate': (len(loaded) / len(_models_status)) * 100 if _models_status else 0,
        'loaded_list': list(loaded.keys()),
        'failed_list': list(failed.keys()),
        'status': 'healthy' if len(loaded) >= len(failed) else 'degraded'
    }

    if result['success_rate'] == 100:
        logger.info(f"üéâ –í—Å—ñ {result['total_models']} –º–æ–¥–µ–ª–µ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        logger.warning(f"‚ö†Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {result['loaded_models']}/{result['total_models']} –º–æ–¥–µ–ª–µ–π")

    return result

def get_model_by_name(model_name: str):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑–∞ –Ω–∞–∑–≤–æ—é

    Args:
        model_name: –ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ

    Returns:
        –Ü–Ω—Å—Ç–∞–Ω—Ü—ñ—è –º–æ–¥–µ–ª—ñ –∞–±–æ None
    """
    model_instances = {
        'analytics': analytics_db,
        'daily_bonus': daily_bonus_manager,
        'flex_rewards': flex_rewards_model,
        'task': task_model,
        'transaction': transaction_model,
        'wallet': wallet_model
    }

    model_instance = model_instances.get(model_name)
    if model_instance is None:
        logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    return model_instance

def create_user_from_telegram_data(telegram_data: Dict[str, Any]) -> Optional[UserQuest]:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram –¥–∞–Ω–∏—Ö

    Args:
        telegram_data: –î–∞–Ω—ñ –∑ Telegram WebApp

    Returns:
        UserQuest –æ–±'—î–∫—Ç –∞–±–æ None
    """
    try:
        if not UserQuest:
            logger.error("UserQuest –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return None

        telegram_id = telegram_data.get('id')
        if not validate_telegram_id(telegram_id):
            logger.error(f"–ù–µ–≤—ñ—Ä–Ω–∏–π telegram_id: {telegram_id}")
            return None

        return create_new_user(
            telegram_id=telegram_id,
            username=telegram_data.get('username', ''),
            first_name=telegram_data.get('first_name', ''),
            last_name=telegram_data.get('last_name', ''),
            language_code=telegram_data.get('language_code', 'uk')
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram –¥–∞–Ω–∏—Ö: {e}")
        return None

def create_transaction_for_reward(telegram_id: str, reward_data: Dict[str, Any],
                                 transaction_type: str, description: str = "") -> Optional[Transaction]:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        reward_data: –î–∞–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
        transaction_type: –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        description: –û–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó

    Returns:
        Transaction –æ–±'—î–∫—Ç –∞–±–æ None
    """
    try:
        if not Transaction or not TransactionAmount or not TransactionType:
            logger.error("Transaction –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
            return None

        amount = TransactionAmount(
            winix=float(reward_data.get('winix', 0)),
            tickets=int(reward_data.get('tickets', 0)),
            flex=int(reward_data.get('flex', 0))
        )

        return Transaction(
            telegram_id=telegram_id,
            type=TransactionType(transaction_type),
            amount=amount,
            description=description
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {e}")
        return None

def log_models_summary():
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π"""
    loaded = get_loaded_models()
    failed = get_failed_models()

    logger.info(f"üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π: {len(loaded)}/{len(_models_status)} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

    if loaded:
        logger.info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –º–æ–¥–µ–ª—ñ:")
        for name, status in loaded.items():
            classes_count = len(status.get('classes', []))
            enums_count = len(status.get('enums', []))
            functions_count = len(status.get('functions', []))
            logger.info(f"  ‚Ä¢ {name}: {classes_count} –∫–ª–∞—Å—ñ–≤, {enums_count} –µ–Ω—É–º—ñ–≤, {functions_count} —Ñ—É–Ω–∫—Ü—ñ–π - {status.get('description', '')}")

    if failed:
        logger.warning("‚ùå –ú–æ–¥–µ–ª—ñ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏:")
        for name, status in failed.items():
            logger.warning(f"  ‚Ä¢ {name}: {status.get('error', 'Unknown error')}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
log_models_summary()

# === –ï–ö–°–ü–û–†–¢ ===

__all__ = [
    # === ANALYTICS ===
    'AnalyticsDB',
    'AnalyticsEvent',
    'UserSession',
    'UserStats',
    'EventType',
    'EventSeverity',
    'analytics_db',
    'create_event',
    'create_task_event',
    'create_wallet_event',

    # === DAILY BONUS ===
    'DailyBonusEntry',
    'DailyBonusStatus',
    'DailyBonusManager',
    'daily_bonus_manager',
    'create_new_daily_status',
    'get_daily_bonus_constants',
    'Reward',

    # === FLEX REWARDS ===
    'FlexRewardsModel',
    'FlexLevel',
    'RewardStatus',
    'FlexRewardConfig',
    'UserFlexStatus',
    'flex_rewards_model',

    # === TASK ===
    'TaskModel',
    'TaskType',
    'TaskStatus',
    'TaskPlatform',
    'TaskAction',
    'TaskReward',
    'TaskRequirements',
    'TaskMetadata',
    'task_model',

    # === TRANSACTION ===
    'TransactionModel',
    'Transaction',
    'TransactionAmount',
    'TransactionType',
    'TransactionStatus',
    'CurrencyType',
    'transaction_model',

    # === USER QUEST ===
    'UserQuest',
    'UserBalance',
    'UserReward',
    'UserTaskStatus',
    'create_new_user',
    'validate_telegram_id',
    'get_current_utc_time',

    # === WALLET ===
    'WalletModel',
    'WalletStatus',
    'WalletProvider',
    'WalletConnectionBonus',
    'wallet_model',

    # === –£–¢–ò–õ–Ü–¢–ò –ü–ê–ö–ï–¢–£ ===
    'get_models_status',
    'get_loaded_models',
    'get_failed_models',
    'initialize_models',
    'get_model_by_name',
    'create_user_from_telegram_data',
    'create_transaction_for_reward',
    'log_models_summary'
]