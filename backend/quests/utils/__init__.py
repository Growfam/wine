"""
üõ†Ô∏è WINIX Utils Package
–£—Ç–∏–ª—ñ—Ç–∏, —Ö–µ–ª–ø–µ—Ä–∏, –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ —Ç–∞ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å–Ω–æ—Å—Ç—ñ

–¶–µ–π –ø–∞–∫–µ—Ç –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∫–ª–∞—Å–∏ –¥–ª—è WINIX –ø—Ä–æ–µ–∫—Ç—É.
–Ü–º–ø–æ—Ä—Ç—É–π –ø—Ä–æ—Å—Ç–æ: from backend.quests.utils import validate_telegram_id
"""

import logging

logger = logging.getLogger(__name__)

# === –Ü–ú–ü–û–†–¢ –ö–ï–®–£–í–ê–ù–ù–Ø ===

logger.info("üì¶ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Utils package...")

try:
    from .cache import (
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–ª–∞—Å–∏
        CacheManager,
        CacheType,
        CachePolicy,
        CacheConfig,
        CacheStats,
        MemoryCache,
        RedisCache,

        # –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        cache_manager,

        # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
        cache,
        cached,
        cache_invalidate,

        # Utility —Ñ—É–Ω–∫—Ü—ñ—ó
        get_cache_manager,
        start_cache_cleanup,
        cache_key_for_user,
        cache_key_for_data
    )

    logger.info("‚úÖ Cache –º–æ–¥—É–ª—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    CACHE_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Cache: {e}")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è Cache
    class _DummyCacheManager:
        def get(self, *args, **kwargs): return kwargs.get('default')
        def set(self, *args, **kwargs): return False
        def delete(self, *args, **kwargs): return False
        def exists(self, *args, **kwargs): return False
        def clear(self, *args, **kwargs): return False
        def get_stats(self): return {}

    cache_manager = _DummyCacheManager()
    CacheManager = _DummyCacheManager
    CacheType = None
    CachePolicy = None
    CacheConfig = None
    CacheStats = None
    MemoryCache = None
    RedisCache = None

    def cache(*args, **kwargs):
        def decorator(func): return func
        return decorator

    cached = cache
    cache_invalidate = lambda *args, **kwargs: 0
    get_cache_manager = lambda *args, **kwargs: cache_manager
    start_cache_cleanup = lambda: False
    cache_key_for_user = lambda u, o: f"user:{u}:{o}"
    cache_key_for_data = lambda t, i: f"data:{t}:{i}"

    CACHE_AVAILABLE = False

# === –Ü–ú–ü–û–†–¢ –ö–û–ù–°–¢–ê–ù–¢ ===

try:
    from .constants import (
        # –ï–Ω—É–º–∏
        Environment,
        DatabaseType,
        LogLevel,
        TaskType,
        TaskStatus,
        TaskDifficulty,
        FlexLevel,
        DailyBonusType,
        ReferralLevel,
        BadgeType,
        CurrencyType,
        AnalyticsEventType,
        SocialPlatform,

        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
        ENVIRONMENT,
        DEBUG,
        LOG_LEVEL,
        API_BASE_URL,
        API_VERSION,

        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        RATE_LIMIT_ENABLED,
        CACHE_ENABLED,
        JWT_SECRET_KEY,
        TELEGRAM_BOT_TOKEN,
        SUPABASE_URL,

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
        TASK_REWARDS,
        FLEX_LEVELS_CONFIG,
        DAILY_BONUS_CONFIG,
        REFERRAL_REWARDS,
        BADGE_REQUIREMENTS,
        CURRENCIES_CONFIG,
        SOCIAL_PLATFORMS_CONFIG,
        VALIDATION_RULES,

        # –õ—ñ–º—ñ—Ç–∏
        MAX_BALANCE_LIMITS,
        SYNC_INTERVALS,
        OPERATION_TIMEOUTS,
        TASK_VERIFICATION_TIMEOUT,

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        SUCCESS_MESSAGES,
        ERROR_MESSAGES,

        # –§—É–Ω–∫—Ü—ñ—ó
        get_environment,
        is_development,
        is_production,
        get_task_reward,
        get_flex_level_config,
        get_badge_requirements,
        get_currency_config,
        get_social_platform_config,
        validate_amount,
        get_verification_timeout
    )

    logger.info("‚úÖ Constants –º–æ–¥—É–ª—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    CONSTANTS_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Constants: {e}")
    CONSTANTS_AVAILABLE = False

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    from enum import Enum

    class Environment(Enum):
        DEVELOPMENT = "development"
        PRODUCTION = "production"

    DEBUG = True
    ENVIRONMENT = Environment.DEVELOPMENT
    LOG_LEVEL = None
    API_BASE_URL = "/api"
    API_VERSION = "v1"
    RATE_LIMIT_ENABLED = True
    CACHE_ENABLED = True
    JWT_SECRET_KEY = "winix-secret"
    TELEGRAM_BOT_TOKEN = ""
    SUPABASE_URL = ""

    # –ó–∞–≥–ª—É—à–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π
    get_environment = lambda: Environment.DEVELOPMENT
    is_development = lambda: True
    is_production = lambda: False

# === –Ü–ú–ü–û–†–¢ –î–ï–ö–û–†–ê–¢–û–†–Ü–í ===

try:
    from .decorators import (
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
        require_auth,
        optional_auth,
        validate_user_access,

        # Rate limiting
        rate_limit,

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        validate_json,
        validate_telegram_id,

        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        handle_errors,
        log_requests,

        # –ë–µ–∑–ø–µ–∫–∞
        security_headers,
        block_suspicious_requests,
        validate_input_data,

        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏
        secure_endpoint,
        public_endpoint,

        # JWT —Ñ—É–Ω–∫—Ü—ñ—ó
        generate_jwt_token,
        decode_jwt_token,

        # –•–µ–ª–ø–µ—Ä–∏
        get_current_user,
        get_json_data,
        clear_rate_limit_storage,

        # –í–∏–Ω—è—Ç–∫–∏
        AuthError,
        ValidationError,
        SecurityError
    )

    logger.info("‚úÖ Decorators –º–æ–¥—É–ª—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    DECORATORS_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Decorators: {e}")
    DECORATORS_AVAILABLE = False

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
    def require_auth(*args, **kwargs):
        def decorator(func): return func
        return decorator

    optional_auth = require_auth
    validate_user_access = require_auth
    rate_limit = require_auth
    validate_json = require_auth
    validate_telegram_id = require_auth
    handle_errors = require_auth
    log_requests = require_auth
    security_headers = require_auth
    block_suspicious_requests = require_auth
    validate_input_data = require_auth
    secure_endpoint = require_auth
    public_endpoint = require_auth

    # –ó–∞–≥–ª—É—à–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π
    generate_jwt_token = lambda *args, **kwargs: "dummy_token"
    decode_jwt_token = lambda *args, **kwargs: {"user_id": 123456789}
    get_current_user = lambda: None
    get_json_data = lambda: {}
    clear_rate_limit_storage = lambda: None

    # –ó–∞–≥–ª—É—à–∫–∏ –≤–∏–Ω—è—Ç–∫—ñ–≤
    class AuthError(Exception): pass
    class ValidationError(Exception): pass
    class SecurityError(Exception): pass

# === –Ü–ú–ü–û–†–¢ –í–ê–õ–Ü–î–ê–¢–û–†–Ü–í ===

try:
    from .validators import (
        # –û—Å–Ω–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        validate_telegram_webapp_data,
        validate_telegram_id as validate_telegram_id_validator,
        validate_username,
        validate_reward_amount,
        validate_task_type,
        validate_task_status,
        validate_url,
        validate_social_platform,
        validate_wallet_address,
        validate_timestamp,

        # –•–µ–ª–ø–µ—Ä–∏
        sanitize_string,
        create_validation_report,

        # –ö–ª–∞—Å–∏
        ValidationResult,
        TelegramValidationError,

        # –ü—Ä–∞–≤–∏–ª–∞
        STANDARD_VALIDATION_RULES
    )

    logger.info("‚úÖ Validators –º–æ–¥—É–ª—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    VALIDATORS_AVAILABLE = True

    # –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    try:
        test_result = validate_telegram_webapp_data("test")
        logger.debug(f"üß™ –¢–µ—Å—Ç validate_telegram_webapp_data: OK ({type(test_result)})")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è validate_telegram_webapp_data —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è: {e}")

except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Validators: {e}")
    VALIDATORS_AVAILABLE = False

    # –ö—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è validate_telegram_webapp_data
    def validate_telegram_webapp_data(init_data: str, bot_token=None):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è validate_telegram_webapp_data"""
        logger.warning("validate_telegram_webapp_data –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞")
        return {
            "valid": False,
            "error": "Validator service unavailable",
            "data": {}
        }

    # –Ü–Ω—à—ñ –∑–∞–≥–ª—É—à–∫–∏
    validate_telegram_id_validator = lambda x: None
    validate_username = lambda x: False
    validate_reward_amount = lambda x: None
    validate_task_type = lambda x: False
    validate_task_status = lambda x: False
    validate_url = lambda x: False
    validate_social_platform = lambda x: False
    validate_wallet_address = lambda x: False
    validate_timestamp = lambda x: None
    sanitize_string = lambda x, *args, **kwargs: str(x) if x else ""
    create_validation_report = lambda *args, **kwargs: {"valid": False}

    class ValidationResult:
        def __init__(self, valid, data=None, error=None):
            self.valid = valid
            self.data = data or {}
            self.error = error

    class TelegramValidationError(Exception): pass

    STANDARD_VALIDATION_RULES = {}


# === –£–¢–ò–õ–Ü–¢–ò –ü–ê–ö–ï–¢–£ ===

def get_utils_info():
    """
    –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏

    Returns:
        Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –º–æ–¥—É–ª—ñ
    """
    modules_info = {
        'cache': {
            'available': CACHE_AVAILABLE,
            'description': '–°–∏—Å—Ç–µ–º–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è Redis + Memory'
        },
        'constants': {
            'available': CONSTANTS_AVAILABLE,
            'description': '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É'
        },
        'decorators': {
            'available': DECORATORS_AVAILABLE,
            'description': '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –±–µ–∑–ø–µ–∫–∏'
        },
        'validators': {
            'available': VALIDATORS_AVAILABLE,
            'description': '–í–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤'
        }
    }

    available_count = sum(1 for info in modules_info.values() if info['available'])

    return {
        'modules': modules_info,
        'available_modules': available_count,
        'total_modules': len(modules_info),
        'success_rate': (available_count / len(modules_info)) * 100
    }


def validate_user_input(data: dict, rules: dict = None):
    """
    –®–≤–∏–¥–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∞–Ω–∏—Ö

    Args:
        data: –î–∞–Ω—ñ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        rules: –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º STANDARD_VALIDATION_RULES)

    Returns:
        ValidationResult –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    """
    if not VALIDATORS_AVAILABLE:
        return {
            'valid': False,
            'error': 'Validation service unavailable'
        }

    if rules is None:
        rules = STANDARD_VALIDATION_RULES

    try:
        return create_validation_report(data, rules)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
        return {
            'valid': False,
            'error': f'Validation error: {str(e)}'
        }


def create_secure_endpoint_decorator(**kwargs):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ –∑–∞—Ö–∏—â–µ–Ω–∏—Ö endpoints

    Args:
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è secure_endpoint

    Returns:
        –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    if not DECORATORS_AVAILABLE:
        logger.error("secure_endpoint decorator –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

        def dummy_decorator(func):
            return func

        return dummy_decorator

    try:
        return secure_endpoint(**kwargs)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è secure_endpoint: {e}")

        def dummy_decorator(func):
            return func

        return dummy_decorator


def setup_logging_with_constants():
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    """
    try:
        import logging

        if CONSTANTS_AVAILABLE and 'LOG_LEVEL' in globals() and LOG_LEVEL:
            level = LOG_LEVEL.value
        else:
            level = 'INFO'

        logging.basicConfig(
            level=getattr(logging, level),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

        logger.info(f"‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ —Ä—ñ–≤–µ–Ω—å {level}")

        if CONSTANTS_AVAILABLE and DEBUG:
            logger.info("üêû DEBUG —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")


def check_utils_health():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—Ö —É—Ç–∏–ª—ñ—Ç

    Returns:
        Dict –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    """
    health = {
        'overall_status': 'healthy',
        'components': {},
        'available_count': 0,
        'total_count': 4
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    components = {
        'cache': CACHE_AVAILABLE,
        'constants': CONSTANTS_AVAILABLE,
        'decorators': DECORATORS_AVAILABLE,
        'validators': VALIDATORS_AVAILABLE
    }

    for component, available in components.items():
        health['components'][component] = {
            'available': available,
            'status': 'healthy' if available else 'unavailable'
        }

        if available:
            health['available_count'] += 1

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    success_rate = (health['available_count'] / health['total_count']) * 100

    if success_rate >= 100:
        health['overall_status'] = 'healthy'
    elif success_rate >= 75:
        health['overall_status'] = 'degraded'
    elif success_rate >= 50:
        health['overall_status'] = 'critical'
    else:
        health['overall_status'] = 'failed'

    health['success_rate'] = success_rate

    return health


# === –ï–ö–°–ü–û–†–¢ –í–°–¨–û–ì–û ===

__all__ = [
    # === CACHE ===
    'CacheManager',
    'CacheType',
    'CachePolicy',
    'CacheConfig',
    'CacheStats',
    'MemoryCache',
    'RedisCache',
    'cache_manager',
    'cache',
    'cached',
    'cache_invalidate',
    'get_cache_manager',
    'start_cache_cleanup',
    'cache_key_for_user',
    'cache_key_for_data',

    # === CONSTANTS ===
    # –ï–Ω—É–º–∏
    'Environment',
    'DatabaseType',
    'LogLevel',
    'TaskType',
    'TaskStatus',
    'TaskDifficulty',
    'FlexLevel',
    'DailyBonusType',
    'ReferralLevel',
    'BadgeType',
    'CurrencyType',
    'AnalyticsEventType',
    'SocialPlatform',

    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    'ENVIRONMENT',
    'DEBUG',
    'LOG_LEVEL',
    'API_BASE_URL',
    'API_VERSION',
    'RATE_LIMIT_ENABLED',
    'CACHE_ENABLED',
    'JWT_SECRET_KEY',
    'TELEGRAM_BOT_TOKEN',
    'SUPABASE_URL',

    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –¥–∞–Ω—ñ
    'TASK_REWARDS',
    'FLEX_LEVELS_CONFIG',
    'DAILY_BONUS_CONFIG',
    'REFERRAL_REWARDS',
    'BADGE_REQUIREMENTS',
    'CURRENCIES_CONFIG',
    'SOCIAL_PLATFORMS_CONFIG',
    'VALIDATION_RULES',
    'MAX_BALANCE_LIMITS',
    'SYNC_INTERVALS',
    'OPERATION_TIMEOUTS',
    'TASK_VERIFICATION_TIMEOUT',
    'SUCCESS_MESSAGES',
    'ERROR_MESSAGES',

    # –§—É–Ω–∫—Ü—ñ—ó –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    'get_environment',
    'is_development',
    'is_production',
    'get_task_reward',
    'get_flex_level_config',
    'get_badge_requirements',
    'get_currency_config',
    'get_social_platform_config',
    'validate_amount',
    'get_verification_timeout',

    # === DECORATORS ===
    'require_auth',
    'optional_auth',
    'validate_user_access',
    'rate_limit',
    'validate_json',
    'validate_telegram_id',
    'handle_errors',
    'log_requests',
    'security_headers',
    'block_suspicious_requests',
    'validate_input_data',
    'secure_endpoint',
    'public_endpoint',
    'generate_jwt_token',
    'decode_jwt_token',
    'get_current_user',
    'get_json_data',
    'clear_rate_limit_storage',
    'AuthError',
    'ValidationError',
    'SecurityError',

    # === VALIDATORS ===
    'validate_telegram_webapp_data',
    'validate_telegram_id_validator',
    'validate_username',
    'validate_reward_amount',
    'validate_task_type',
    'validate_task_status',
    'validate_url',
    'validate_social_platform',
    'validate_wallet_address',
    'validate_timestamp',
    'sanitize_string',
    'create_validation_report',
    'ValidationResult',
    'TelegramValidationError',
    'STANDARD_VALIDATION_RULES',

    # === –£–¢–ò–õ–Ü–¢–ò –ü–ê–ö–ï–¢–£ ===
    'get_utils_info',
    'validate_user_input',
    'create_secure_endpoint_decorator',
    'setup_logging_with_constants',
    'check_utils_health'
]

# === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging_with_constants()

logger.info("üéØ Utils package —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

# –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
utils_info = get_utils_info()
available = utils_info['available_modules']
total = utils_info['total_modules']
success_rate = utils_info['success_rate']

logger.info(f"üìä –£—Ç–∏–ª—ñ—Ç–∏: {available}/{total} –º–æ–¥—É–ª—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω—ñ ({success_rate:.1f}%)")

if available < total:
    unavailable = [name for name, info in utils_info['modules'].items() if not info['available']]
    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥—É–ª—ñ: {', '.join(unavailable)}")

# –°—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
if success_rate >= 100:
    logger.info("‚úÖ –í—Å—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞ –≥–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
elif success_rate >= 75:
    logger.info("üü° –ë—ñ–ª—å—à—ñ—Å—Ç—å —É—Ç–∏–ª—ñ—Ç—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω—ñ")
elif success_rate >= 50:
    logger.warning("üü† –ß–∞—Å—Ç–∏–Ω–∞ —É—Ç–∏–ª—ñ—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
else:
    logger.error("üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Ç–∏–ª—ñ—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
if CACHE_AVAILABLE and cache_manager:
    logger.info("üóÑÔ∏è Cache manager –∞–∫—Ç–∏–≤–Ω–∏–π")

if CONSTANTS_AVAILABLE and ENVIRONMENT:
    logger.info(f"üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: {ENVIRONMENT.value}")

logger.info("üöÄ WINIX Utils –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–±–æ—Ç–∏!")

# –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
logger.debug("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...")
try:
    test_validation = validate_telegram_webapp_data("test_init_data")
    logger.debug(f"‚úÖ validate_telegram_webapp_data: –ø—Ä–∞—Ü—é—î")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è validate_telegram_webapp_data: {e}")