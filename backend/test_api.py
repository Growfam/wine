#!/usr/bin/env python3
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
API_BASE_URL = "http://localhost:8080"
TEST_USER_ID = f"test_user_{int(time.time())}"
TEST_USERNAME = "Test User"


def test_api_endpoint(method, endpoint, data=None):
    """–¢–µ—Å—Ç—É—î API –µ–Ω–¥–ø–æ—ñ–Ω—Ç"""
    url = f"{API_BASE_URL}{endpoint}"

    try:
        if method == "GET":
            response = requests.get(url, timeout=10)
        elif method == "POST":
            response = requests.post(url, json=data, timeout=10,
                                     headers={'Content-Type': 'application/json'})
        else:
            return {"success": False, "error": f"Unsupported method: {method}"}

        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        try:
            response_data = response.json() if response.content else None
        except:
            response_data = response.text if response.content else None

        return {
            "success": response.status_code in [200, 201],
            "status_code": response.status_code,
            "data": response_data,
            "error": response_data if response.status_code not in [200, 201] else None
        }
    except requests.exceptions.RequestException as e:
        return {"success": False, "error": str(e), "status_code": None, "data": None}
    except Exception as e:
        return {"success": False, "error": f"Unexpected error: {str(e)}", "status_code": None, "data": None}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ API –¥–ª—è WINIX...")
    print(f"üì° URL: {API_BASE_URL}")
    print(f"üë§ –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {TEST_USER_ID}")
    print("=" * 50)

    tests = [
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤–µ—Ä–∞
        {
            "name": "Server Health Check",
            "method": "GET",
            "endpoint": "/api/health"
        },

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞
        {
            "name": "Bot Status Check",
            "method": "GET",
            "endpoint": "/api/bot/status"
        },

        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        {
            "name": "Database Connection Test",
            "method": "GET",
            "endpoint": "/debug"
        },

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        {
            "name": "User Creation",
            "method": "POST",
            "endpoint": "/api/user/create",
            "data": {
                "telegram_id": TEST_USER_ID,
                "username": TEST_USERNAME,
                "referrer_id": None
            }
        },

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        {
            "name": "Get User Profile",
            "method": "GET",
            "endpoint": f"/api/user/{TEST_USER_ID}"
        },

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        {
            "name": "Check User Exists",
            "method": "GET",
            "endpoint": f"/api/user/{TEST_USER_ID}/exists"
        },

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
        {
            "name": "Update User Balance",
            "method": "POST",
            "endpoint": f"/api/user/{TEST_USER_ID}/balance",
            "data": {"balance": 100.0}
        },

        # –¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞)
        {
            "name": "Referral System Test",
            "method": "GET",
            "endpoint": f"/api/referrals/link/{TEST_USER_ID}"
        }
    ]

    passed = 0
    failed = 0

    for i, test in enumerate(tests, 1):
        print(f"\nüîç {i}/{len(tests)} –¢–µ—Å—Ç—É—î–º–æ: {test['name']}")
        print(f"   {test['method']} {test['endpoint']}")

        result = test_api_endpoint(
            test['method'],
            test['endpoint'],
            test.get('data')
        )

        if result['success']:
            print(f"   ‚úÖ –ü–†–û–ô–î–ï–ù–û (–°—Ç–∞—Ç—É—Å: {result['status_code']})")
            passed += 1

            # –í–∏–≤–æ–¥–∏–º–æ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö —Ç–µ—Å—Ç—ñ–≤
            if test['name'] in ['User Creation', 'Get User Profile', 'Database Connection Test']:
                if result['data']:
                    try:
                        if isinstance(result['data'], str):
                            print(f"      –í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['data'][:200]}...")
                        else:
                            formatted_data = json.dumps(result['data'], indent=6, ensure_ascii=False)
                            if len(formatted_data) > 500:
                                formatted_data = formatted_data[:500] + "..."
                            print(f"      –î–∞–Ω—ñ: {formatted_data}")
                    except:
                        print(f"      –î–∞–Ω—ñ: {result['data']}")
        else:
            print(f"   ‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û")
            if 'status_code' in result and result['status_code']:
                print(f"      –°—Ç–∞—Ç—É—Å: {result['status_code']}")
            if 'error' in result and result['error']:
                try:
                    if isinstance(result['error'], dict):
                        error_text = json.dumps(result['error'], indent=6, ensure_ascii=False)
                    else:
                        error_text = str(result['error'])
                    print(f"      –ü–æ–º–∏–ª–∫–∞: {error_text}")
                except:
                    print(f"      –ü–æ–º–∏–ª–∫–∞: {result.get('error', 'Unknown error')}")

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            if result.get('data'):
                try:
                    if isinstance(result['data'], dict):
                        print(f"      –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(result['data'], ensure_ascii=False)}")
                    else:
                        print(f"      –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {result['data']}")
                except:
                    print(f"      –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {result['data']}")

            failed += 1

    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   ‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
    print(f"   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {passed / (passed + failed) * 100:.1f}%")

    if failed == 0:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! API –≥–æ—Ç–æ–≤–∏–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é API.")

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
        print("   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞—Ü—é—î Flask —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:8080")
        print("   2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫")
        print("   3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Supabase –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞")
        print("   4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö")

        return False


def diagnose_connection():
    """–î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    print("\nüîß –î–û–î–ê–¢–ö–û–í–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{API_BASE_URL}/api/ping", timeout=5)
        print(f"   ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π (ping: {response.status_code})")
    except:
        print(f"   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ {API_BASE_URL}")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É debug
    try:
        response = requests.get(f"{API_BASE_URL}/debug", timeout=10)
        if response.status_code == 200:
            debug_data = response.json()
            print(f"   ‚úÖ Debug –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø—Ä–∞—Ü—é—î")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å Supabase
            supabase_test = debug_data.get('environment', {}).get('supabase_test', {})
            if supabase_test.get('success'):
                print(f"   ‚úÖ Supabase –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
            else:
                print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ Supabase: {supabase_test.get('message', 'Unknown')}")
        else:
            print(f"   ‚ö†Ô∏è Debug –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ debug –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É: {str(e)}")


if __name__ == "__main__":
    success = main()
    if not success:
        diagnose_connection()
    exit(0 if success else 1)