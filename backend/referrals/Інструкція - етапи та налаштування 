Інструкція для розробки бекенду реферальної системи Winix
Загальний опис проекту
Реферальна система Winix - це платформа, що дозволяє користувачам запрошувати нових учасників та отримувати за це винагороду. Система включає дворівневу структуру рефералів, різні типи винагород (прямі бонуси, відсоткові нарахування, бейджі, завдання).
Технічні вимоги

Мова програмування: Python
Фреймворк: Flask
База даних: SQL (з використанням SQLAlchemy ORM)
Формат API: REST JSON
Аутентифікація: Токен-базована
Структура коду: Модульна, файли не більше 200-500 рядків

Структура проекту
Проект повинен відповідати наявній структурі папок і файлів. Основні папки для розробки:

models - моделі бази даних
referrals - контролери та маршрути для реферальної системи
badges - логіка роботи з бейджами
utils - утилітарні функції

Етапи розробки
Етап 1: Основа системи - Реферальні посилання
Вимоги:

Створити API для генерації унікальних реферальних посилань формату Winix/referral/{ID}
Реалізувати реєстрацію нових рефералів, включаючи визначення рівня (1-й або 2-й рівень)
Забезпечити зберігання реферальних зв'язків у БД

Файли для розробки:

Розширити models/referral.py
Створити/оновити referrals/controllers.py
Створити/оновити referrals/routes.py

Етап 2: Прямі бонуси за запрошення
Вимоги:

Реалізувати нарахування фіксованого бонусу (50 winix) за кожного запрошеного користувача
Зберігати історію нарахувань бонусів
Створити API для отримання історії бонусів

Файли для розробки:

Створити models/direct_bonus.py (або розширити існуючу модель)
Оновити referrals/controllers.py
Оновити referrals/routes.py

Етап 3: Реферальна структура та рівні рефералів
Вимоги:

Реалізувати отримання повної структури рефералів користувача
Окремо отримувати списки рефералів 1-го та 2-го рівнів
Надавати статистичну інформацію (загальна кількість, активні/неактивні)

Файли для розробки:

Оновити referrals/controllers.py
Оновити referrals/routes.py

Етап 4: Відсоткові винагороди за рівнями
Вимоги:

Реалізувати розрахунок винагород: 10% від прибутку рефералів 1-го рівня, 5% від 2-го рівня
Зберігати історію нарахувань відсоткових винагород
Створити API для отримання відсоткових винагород

Файли для розробки:

Створити models/percentage_reward.py
Оновити referrals/controllers.py
Оновити referrals/routes.py

Етап 5: Перевірка активності рефералів
Вимоги:

Реалізувати перевірку активності рефералів за критеріями:

Мінімум 3 участі в розіграшах АБО
Запрошений 1 реферал


Зберігати статус активності та його причину
Створити API для отримання даних про активність рефералів

Файли для розробки:

Створити models/activity.py
Оновити referrals/controllers.py
Оновити referrals/routes.py

Етап 6: Бейджі та завдання
Вимоги:

Реалізувати систему бейджів:

25 рефералів — бронзова медаль (2500 winix)
50 рефералів — срібна медаль (5000 winix)
100 рефералів — золота медаль (10000 winix)
500 рефералів — платинова медаль (20000 winix)


Реалізувати завдання (100 рефералів = 12000 winix)
Створити API для перевірки доступних бейджів і завдань та отримання винагород

Файли для розробки:

Оновити models/badge.py
Створити/оновити models/task.py
Оновити badges/controllers.py
Оновити badges/routes.py

Етап 7: Аналітика та рейтинг рефералів
Вимоги:

Реалізувати рейтинг рефералів за різними критеріями (заробіток, активність)
Реалізувати відстеження участі рефералів у розіграшах
Створити API для отримання аналітичних даних

Файли для розробки:

Створити models/draw.py
Оновити referrals/controllers.py
Створити referrals/analytics.py
Оновити referrals/routes.py

Етап 8: Інтеграція та оптимізація
Вимоги:

Реалізувати комплексний розрахунок загального заробітку
Оптимізувати запити до бази даних
Реалізувати кешування часто запитуваних даних


Файли для розробки:

Створити utils/caching.py
Оновити referrals/controllers.py
Оновити інші файли для оптимізації

API ендпоінти, які використовує фронтенд реферальної системи
На основі аналізу файлів фронтенду, особливо з директорії frontend/js/referrals/api/, ось повний список API ендпоінтів, які потрібно реалізувати на бекенді:
1. Реферальні посилання

GET /api/referrals/link/{user_id} - отримання реферального посилання для користувача
POST /api/referrals/register - реєстрація нового реферала (приймає referrer_id та referee_id)

2. Прямі бонуси

POST /api/referrals/bonus/direct - нарахування прямого бонусу
GET /api/referrals/bonus/history/{user_id} - отримання історії прямих бонусів користувача

3. Статистика рефералів

GET /api/referrals/stats/{user_id} - отримання загальної статистики рефералів
GET /api/referrals/details/{referral_id} - отримання детальної інформації про конкретного реферала

4. Заробітки рефералів

GET /api/referrals/earnings/{user_id} - отримання даних про заробітки рефералів користувача
GET /api/referrals/earnings/detailed/{referral_id} - отримання детальних даних про заробітки конкретного реферала
GET /api/referrals/earnings/summary/{user_id} - отримання зведеної інформації про заробітки

5. Активність рефералів

GET /api/referrals/activity/{user_id} - отримання даних про активність рефералів користувача
GET /api/referrals/activity/detailed/{referral_id} - отримання детальних даних про активність конкретного реферала
GET /api/referrals/activity/summary/{user_id} - отримання зведеної інформації про активність

6. Розіграші

GET /api/referrals/draws/{referral_id} - отримання даних про участь реферала у розіграшах
GET /api/referrals/draws/details/{referral_id}/{draw_id} - отримання деталей про участь реферала у конкретному розіграші
GET /api/referrals/draws/stats/{owner_id} - отримання статистики участі рефералів у розіграшах
GET /api/referrals/draws/count/{owner_id} - отримання загальної кількості розіграшів
GET /api/referrals/draws/active/{owner_id} - отримання найбільш активних рефералів у розіграшах

7. Історія активності

GET /api/referrals/history/{user_id} - отримання історії реферальної активності
GET /api/referrals/history/event/{user_id}/{event_type} - отримання історії конкретного типу подій
GET /api/referrals/history/summary/{user_id} - отримання зведеної статистики активності
GET /api/referrals/history/trend/{user_id}/{period} - отримання тренду активності за період

8. Бейджі

GET /api/badges/{user_id} - отримання інформації про бейджі користувача
POST /api/badges/claim - отримання винагороди за бейдж (приймає user_id та badge_type)

9. Завдання

GET /api/tasks/{user_id} - отримання інформації про завдання користувача
POST /api/tasks/claim - отримання винагороди за виконане завдання (приймає user_id та task_type)

10. Аналітика

GET /api/analytics/ranking/{user_id} - отримання рейтингу рефералів
GET /api/analytics/top/{user_id}/{limit} - отримання топ-N рефералів
GET /api/analytics/earnings/total/{user_id} - отримання загального заробітку від рефералів
GET /api/analytics/earnings/predict/{user_id} - отримання прогнозу майбутніх заробітків
GET /api/analytics/earnings/roi/{user_id} - отримання рентабельності реферальної програми
GET /api/analytics/earnings/distribution/{user_id} - отримання розподілу заробітку за категоріями

Загальні параметри для більшості ендпоінтів
Багато з перерахованих ендпоінтів підтримують додаткові опціональні параметри, такі як:

startDate - початкова дата для фільтрації даних
endDate - кінцева дата для фільтрації даних
level - рівень рефералів (1 або 2)
activeOnly - показувати тільки активних рефералів (true/false)
limit - обмеження кількості результатів
sortBy - критерій сортування ('earnings', 'invites', 'draws', 'activity')

При розробці бекенду врахуйте, що фронтенд очікує отримати дані саме від цих ендпоінтів і в структурованому форматі JSON, який відповідає моделям даних, що використовуються у фронтенді.

Файли фронтенду для прикріплення до завдання
Для повного розуміння структури та логіки фронтенду необхідно надати розробнику наступні файли:

Базові API файли:

frontend/js/referrals/api/fetchReferralLink.js
frontend/js/referrals/api/registerReferral.js
frontend/js/referrals/api/fetchReferralStats.js
frontend/js/referrals/api/fetchReferralEarnings.js
frontend/js/referrals/api/fetchReferralActivity.js
frontend/js/referrals/api/fetchReferralDraws.js
frontend/js/referrals/api/fetchReferralHistory.js
frontend/js/referrals/api/index.js


Константи та утиліти:

frontend/js/referrals/constants/directBonuses.js
frontend/js/referrals/constants/rewardRates.js
frontend/js/referrals/constants/activityThresholds.js
frontend/js/referrals/constants/badgeThresholds.js
frontend/js/referrals/constants/badgeRewards.js
frontend/js/referrals/constants/taskThresholds.js
frontend/js/referrals/utils/isActiveReferral.js


Основний HTML інтерфейс:

frontend/referrals.html



Структура бази даних SQL
База даних повинна містити наступні таблиці:
1. Таблиця referrals
sqlCREATE TABLE referrals (
    id SERIAL PRIMARY KEY,
    referrer_id INTEGER NOT NULL,
    referee_id INTEGER NOT NULL,
    level INTEGER DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (referrer_id) REFERENCES users(id),
    FOREIGN KEY (referee_id) REFERENCES users(id),
    UNIQUE (referee_id)
);
2. Таблиця direct_bonuses
sqlCREATE TABLE direct_bonuses (
    id SERIAL PRIMARY KEY,
    referrer_id INTEGER NOT NULL,
    referee_id INTEGER NOT NULL,
    amount INTEGER DEFAULT 50,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (referrer_id) REFERENCES users(id),
    FOREIGN KEY (referee_id) REFERENCES users(id),
    UNIQUE (referee_id)
);
3. Таблиця percentage_rewards
sqlCREATE TABLE percentage_rewards (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    referral_id INTEGER NOT NULL,
    level INTEGER NOT NULL,
    rate FLOAT NOT NULL,
    base_amount INTEGER NOT NULL,
    reward_amount INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (referral_id) REFERENCES users(id)
);
4. Таблиця referral_activities
sqlCREATE TABLE referral_activities (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    draws_participation INTEGER DEFAULT 0,
    invited_referrals INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT FALSE,
    reason_for_activity VARCHAR(50),
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE (user_id)
);
5. Таблиця user_badges
sqlCREATE TABLE user_badges (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    badge_type VARCHAR(20) NOT NULL,
    earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    claimed BOOLEAN DEFAULT FALSE,
    reward_amount INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE (user_id, badge_type)
);
6. Таблиця user_tasks
sqlCREATE TABLE user_tasks (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    task_type VARCHAR(30) NOT NULL,
    progress INTEGER DEFAULT 0,
    threshold INTEGER NOT NULL,
    completed BOOLEAN DEFAULT FALSE,
    claimed BOOLEAN DEFAULT FALSE,
    reward_amount INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE (user_id, task_type)
);
7. Таблиця draws
sqlCREATE TABLE draws (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    date TIMESTAMP NOT NULL
);
8. Таблиця draw_participants
sqlCREATE TABLE draw_participants (
    id SERIAL PRIMARY KEY,
    draw_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    is_winner BOOLEAN DEFAULT FALSE,
    prize_amount INTEGER DEFAULT 0,
    FOREIGN KEY (draw_id) REFERENCES draws(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE (draw_id, user_id)
);
Ці таблиці складають основу для реалізації всіх функцій реферальної системи Winix. При потребі можна додавати індекси для оптимізації запитів.