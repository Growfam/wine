"""
–Ñ–¥–∏–Ω—ñ —Ä–æ—É—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è WINIX
–û–±'—î–¥–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –æ—Å–Ω–æ–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å
–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è Telegram Mini App
"""

from flask import Blueprint, request, jsonify, g
import os
import logging
from datetime import datetime
from .controllers import TelegramAuthController, require_auth
from middleware import JWT_SECRET, JWT_ALGORITHM, jwt
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ Blueprint
auth_bp = Blueprint('main_auth', __name__, url_prefix='/api/auth')


@auth_bp.route('/telegram', methods=['POST', 'OPTIONS'])
def authenticate_telegram():
    """–û—Å–Ω–æ–≤–Ω–∏–π endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Telegram"""

    # –û–±—Ä–æ–±–∫–∞ OPTIONS –¥–ª—è CORS
    if request.method == 'OPTIONS':
        return '', 200

    # –ö–†–ò–¢–ò–ß–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø
    logger.error("üö®üö®üö® TELEGRAM AUTH REQUEST RECEIVED üö®üö®üö®")
    logger.error(f"Origin: {request.headers.get('Origin')}")
    logger.error(f"Headers: {dict(request.headers)}")

    try:
        data = request.get_json() or {}
        logger.error(f"Body keys: {list(data.keys())}")
        logger.error(f"Has initData: {bool(data.get('initData'))}")

        # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id
        telegram_id = data.get('telegram_id') or data.get('id')

        if not telegram_id:
            logger.error("‚ùå NO TELEGRAM ID")
            return jsonify({
                'status': 'error',
                'message': 'No telegram ID'
            }), 400

        # –¢–ò–ú–ß–ê–°–û–í–û - –ü–†–û–°–¢–û –ü–û–í–ï–†–¢–ê–Ñ–ú–û –£–°–ü–Ü–•
        logger.error(f"‚úÖ RETURNING SUCCESS FOR ID: {telegram_id}")

        return jsonify({
            'status': 'success',
            'token': 'test_token_' + str(telegram_id),
            'user': {
                'telegram_id': telegram_id,
                'username': data.get('username', 'Test User'),
                'balance': 100,
                'coins': 50
            }
        }), 200

    except Exception as e:
        logger.error(f"üí• CRITICAL ERROR: {str(e)}", exc_info=True)
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500


@auth_bp.route('/refresh', methods=['POST', 'GET'])
def refresh_token():
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞
    """
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É
    if request.method == 'GET' and request.args.get('t'):
        # –¶–µ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ POST –∑–∞–ø–∏—Ç –∑ timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        request.method = 'POST'
    try:

        logger.info("=== REFRESH TOKEN REQUEST ===")
        logger.info(f"Method: {request.method}")
        logger.info(f"Path: {request.path}")
        logger.info(f"Headers: {dict(request.headers)}")
        logger.info(f"Body: {request.get_json()}")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ middleware –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è telegram_id
        from middleware import extract_telegram_id

        telegram_id = extract_telegram_id()

        if not telegram_id:
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
            auth_header = request.headers.get('Authorization')
            if auth_header and auth_header.startswith('Bearer '):
                token = auth_header[7:]
            else:
                data = request.get_json() or {}
                token = data.get('token')

            if token:
                # –î–µ–∫–æ–¥—É—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó
                try:
                    payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM], options={"verify_exp": False})
                    telegram_id = payload.get('user_id') or payload.get('telegram_id')
                except:
                    pass

        if not telegram_id:
            logger.error("refresh_token: telegram_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return jsonify({
                'status': 'error',
                'message': 'User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                'code': 'missing_user_id'
            }), 400

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"refresh_token: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –¥–ª—è {telegram_id}")

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º telegram_id
        result = TelegramAuthController.refresh_token(telegram_id)

        if result.get('success'):
            return jsonify({
                'status': 'success',
                'token': result['token'],
                'expires_in': result['expires_in'],
                'user': result.get('user', {})
            }), 200
        else:
            return jsonify({
                'status': 'error',
                'message': result.get('error', '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞'),
                'code': result.get('code', 'refresh_failed')
            }), 401

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞: {str(e)}", exc_info=True)
        return jsonify({
            'status': 'error',
            'message': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'code': 'internal_error'
        }), 500


@auth_bp.route('/refresh-token', methods=['POST'])
def refresh_token_alt():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π endpoint –¥–ª—è refresh token (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ frontend)

    POST /api/auth/refresh-token
    """
    return refresh_token()


@auth_bp.route('/validate', methods=['POST'])
def validate_token():
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è JWT —Ç–æ–∫–µ–Ω–∞

    POST /api/auth/validate
    Headers: Authorization: Bearer <token>
    Body: { "token": "..." } // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω
        auth_header = request.headers.get('Authorization')
        if auth_header and auth_header.startswith('Bearer '):
            token = auth_header[7:]
        else:
            data = request.get_json() or {}
            token = data.get('token')

        if not token:
            return jsonify({
                'status': 'error',
                'valid': False,
                'message': '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
                'code': 'missing_token'
            }), 400

        result = TelegramAuthController.validate_token(token)

        return jsonify({
            'status': 'success' if result.get('valid') else 'error',
            'valid': result.get('valid', False),
            'user': result.get('user'),
            'error': result.get('error'),
            'code': result.get('code')
        }), 200 if result.get('valid') else 401

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞: {str(e)}", exc_info=True)
        return jsonify({
            'status': 'error',
            'valid': False,
            'message': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'code': 'internal_error'
        }), 500


@auth_bp.route('/validate-telegram', methods=['POST'])
def validate_telegram():
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram –¥–∞–Ω–∏—Ö (–∫—Ä–∏—Ç–∏—á–Ω–∏–π endpoint –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å)

    POST /api/auth/validate-telegram
    """
    try:
        data = request.get_json() or {}

        # –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç
        logger.info(f"Validate-telegram –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
        if not data:
            return jsonify({
                'valid': False,
                'error': 'No data provided',
                'code': 'missing_data'
            }), 400

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
        result = TelegramAuthController.authenticate_telegram_user(data)

        if result.get('success'):
            return jsonify({
                'valid': True,
                'user': result.get('user'),
                'token': result.get('token')
            }), 200
        else:
            return jsonify({
                'valid': False,
                'error': result.get('error', 'Validation failed'),
                'code': result.get('code', 'validation_failed')
            }), 401

    except Exception as e:
        logger.error(f"Validate-telegram –ø–æ–º–∏–ª–∫–∞: {str(e)}", exc_info=True)
        return jsonify({
            'valid': False,
            'error': 'Internal server error',
            'code': 'internal_error'
        }), 500

@auth_bp.route('/status', methods=['GET'])
@require_auth
def auth_status():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∑–∞—Ö–∏—â–µ–Ω–∏–π endpoint)

    GET /api/auth/status
    Headers: Authorization: Bearer <token>
    """
    try:
        # –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –≤ request.current_user
        user = request.current_user

        return jsonify({
            'status': 'success',
            'authenticated': True,
            'user': user
        }), 200

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: {str(e)}")
        return jsonify({
            'status': 'error',
            'authenticated': False,
            'message': '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É'
        }), 500


@auth_bp.route('/logout', methods=['POST'])
@require_auth
def logout():
    """
    –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    POST /api/auth/logout
    Headers: Authorization: Bearer <token>
    """
    try:
        # –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö

        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {request.current_user.get('telegram_id')} –≤–∏–π—à–æ–≤")

        return jsonify({
            'status': 'success',
            'message': '–£—Å–ø—ñ—à–Ω–∏–π –≤–∏—Ö—ñ–¥'
        }), 200

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': '–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É'
        }), 500


# –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π endpoint –¥–ª—è Telegram WebApp –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
def validate_telegram_webapp():
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram WebApp –¥–∞–Ω–∏—Ö (legacy endpoint)
    –ü—ñ–¥—Ç—Ä–∏–º—É—î GET —Ç–∞ POST –º–µ—Ç–æ–¥–∏
    """
    if request.method == 'GET':
        # –î–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoint
        return jsonify({
            'status': 'info',
            'message': 'Use POST method to validate Telegram data',
            'endpoint': '/api/auth/validate-telegram'
        }), 200

    # –î–ª—è POST –∑–∞–ø–∏—Ç—ñ–≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏–π endpoint
    return authenticate_telegram()


# –¢–µ—Å—Ç–æ–≤—ñ endpoints
@auth_bp.route('/ping', methods=['GET'])
def ping():
    """–ü—Ä–æ—Å—Ç–∏–π ping –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏"""
    return jsonify({
        'status': 'pong',
        'timestamp': datetime.now().isoformat()
    }), 200


@auth_bp.route('/test', methods=['GET'])
def test_auth():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è debug"""
    return jsonify({
        'status': 'success',
        'message': 'Auth service is running',
        'endpoints': [
            'POST /api/auth/telegram',
            'POST /api/auth/refresh',
            'POST /api/auth/refresh-token',
            'POST /api/auth/validate',
            'GET /api/auth/status',
            'POST /api/auth/logout',
            'POST|GET /api/auth/validate-telegram'
        ]
    }), 200


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
@auth_bp.errorhandler(400)
def bad_request(error):
    return jsonify({
        'status': 'error',
        'message': '–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç',
        'code': 'bad_request'
    }), 400


@auth_bp.errorhandler(401)
def unauthorized(error):
    return jsonify({
        'status': 'error',
        'message': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ',
        'code': 'unauthorized'
    }), 401


@auth_bp.errorhandler(500)
def internal_error(error):
    return jsonify({
        'status': 'error',
        'message': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        'code': 'internal_error'
    }), 500


@auth_bp.route('/debug/token', methods=['POST'])
def debug_token():
    """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤"""
    try:
        from middleware import get_current_user, extract_telegram_id

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö
        auth_header = request.headers.get('Authorization')
        body = request.get_json() or {}

        # –î–µ–∫–æ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω —è–∫—â–æ —î
        token_data = None
        if auth_header and auth_header.startswith('Bearer '):
            token = auth_header[7:]
            try:
                # –î–µ–∫–æ–¥—É—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                token_data = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM], options={"verify_exp": False})
            except Exception as e:
                token_data = {"error": str(e)}

        return jsonify({
            'headers': {
                'Authorization': auth_header,
                'X-Telegram-User-Id': request.headers.get('X-Telegram-User-Id')
            },
            'body': body,
            'decoded_token': token_data,
            'current_user': get_current_user(),
            'extracted_telegram_id': extract_telegram_id(),
            'g.current_user': getattr(g, 'current_user', None),
            'g.telegram_id': getattr(g, 'telegram_id', None)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500


def register_auth_routes(app):
    """–†–µ—î—Å—Ç—Ä—É—î auth blueprint –∑ –¥–æ–¥–∞—Ç–∫–æ–º"""
    app.register_blueprint(auth_bp)
    logger.info("‚úÖ Auth routes registered successfully")
    return True

