"""
–Ñ–¥–∏–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è WINIX
–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è Telegram Mini App –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º
"""

import logging
import os
import jwt
import hmac
import hashlib
import urllib.parse
import json
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, Optional
from flask import request, jsonify

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# JWT –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –°–ò–ù–•–†–û–ù–Ü–ó–û–í–ê–ù–ê
JWT_SECRET = os.getenv('JWT_SECRET', 'winix-secure-jwt-secret-key-2025')
JWT_ALGORITHM = os.getenv('JWT_ALGORITHM', 'HS256')
JWT_EXPIRATION = int(os.getenv('JWT_EXPIRATION', '86400'))  # 24 –≥–æ–¥–∏–Ω–∏

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
if JWT_SECRET == 'your-secret-key':
    logger.warning("‚ö†Ô∏è JWT_SECRET –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å JWT_SECRET –≤ .env")

logger.info(f"JWT Config loaded: Algorithm={JWT_ALGORITHM}, Expiration={JWT_EXPIRATION}s")

# –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –ë–î
try:
    from backend.supabase_client import get_user, create_user, update_user
except ImportError:
    from supabase_client import get_user, create_user, update_user


class TelegramAuthController:
    """–Ñ–¥–∏–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è Telegram Mini App"""

    @staticmethod
    def verify_telegram_webapp_data(init_data: str, bot_token: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram WebApp"""
        try:
            logger.info(f"verify_telegram_webapp_data: –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")

            # –ù–û–í–ï: –õ–æ–≥—É—î–º–æ —Ç–æ—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
            logger.info(f"init_data –ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤: {init_data[:100]}")
            logger.info(f"–ú–∞—î %20: {'%20' in init_data}")
            logger.info(f"–ú–∞—î +: {'+' in init_data}")

            parsed_data = urllib.parse.parse_qs(init_data)
            logger.info(f"Parsed data keys: {list(parsed_data.keys())}")

            # –ù–û–í–ï: –õ–æ–≥—É—î–º–æ —Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            for key in ['query_id', 'auth_date', 'hash']:
                if key in parsed_data:
                    value = parsed_data[key][0]
                    if key == 'hash':
                        logger.info(f"{key}: {value[:10]}...{value[-10:]}")
                    else:
                        logger.info(f"{key}: {value}")

            received_hash = parsed_data.get('hash', [None])[0]
            if not received_hash:
                logger.error("Hash –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                return False

            # –°—Ç–≤–æ—Ä—é—î–º–æ data-check-string
            data_check_items = []
            for key, values in sorted(parsed_data.items()):
                if key != 'hash':
                    value = values[0] if values else ''
                    data_check_items.append(f"{key}={value}")

            data_check_string = '\n'.join(data_check_items)

            # –ù–û–í–ï: –õ–æ–≥—É—î–º–æ —Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É data_check_string
            logger.info(f"Data check string –º–∞—î {len(data_check_items)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
            logger.info(f"–ö–ª—é—á—ñ –≤ –ø–æ—Ä—è–¥–∫—É: {[item.split('=')[0] for item in data_check_items]}")

            # –û–±—á–∏—Å–ª—é—î–º–æ hash
            secret_key = hmac.new(
                "WebAppData".encode('utf-8'),
                bot_token.encode('utf-8'),
                hashlib.sha256
            ).digest()

            calculated_hash = hmac.new(
                secret_key,
                data_check_string.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()

            # –ù–û–í–ï: –î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            logger.info(f"Received hash: {received_hash}")
            logger.info(f"Calculated hash: {calculated_hash}")

            is_valid = hmac.compare_digest(received_hash, calculated_hash)

            if not is_valid:
                # –ù–û–í–ï: –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±
                logger.info("–°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É...")

                # –ú–æ–∂–ª–∏–≤–æ signature –∑–∞–º—ñ—Å—Ç—å hash?
                if 'signature' in parsed_data:
                    logger.info("–ó–Ω–∞–π–¥–µ–Ω–æ signature, –∞–ª–µ –æ—á—ñ–∫—É–≤–∞–≤—Å—è hash")

            return is_valid

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {str(e)}", exc_info=True)
            return False

    @staticmethod
    def extract_user_from_webapp_data(init_data: str) -> Optional[Dict[str, Any]]:
        """–í–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ init_data"""
        try:
            parsed_data = urllib.parse.parse_qs(init_data)
            user_data = parsed_data.get('user', [None])[0]

            if user_data:
                user_info = json.loads(user_data)
                return {
                    'id': user_info.get('id'),
                    'username': user_info.get('username'),
                    'first_name': user_info.get('first_name'),
                    'last_name': user_info.get('last_name'),
                    'language_code': user_info.get('language_code', 'uk')
                }

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")

        return None

    @staticmethod
    def generate_jwt_token(user_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id
            telegram_id = str(user_data.get('telegram_id', user_data.get('id')))

            payload = {
                'telegram_id': telegram_id,  # –í–ê–ñ–õ–ò–í–û: –¥–æ–¥–∞—î–º–æ —Ü–µ –ø–æ–ª–µ
                'user_id': telegram_id,      # –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                'username': user_data.get('username', ''),
                'first_name': user_data.get('first_name', ''),
                'last_name': user_data.get('last_name', ''),
                'exp': datetime.now(timezone.utc) + timedelta(seconds=JWT_EXPIRATION),
                'iat': datetime.now(timezone.utc),
                'type': 'access'
            }

            token = jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)
            logger.info(f"Generated JWT token for user {telegram_id}")
            return token

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            return None

    @staticmethod
    def decode_jwt_token(token: str) -> Dict[str, Any]:
        """–î–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
            return payload
        except jwt.ExpiredSignatureError:
            raise AuthError("–¢–æ–∫–µ–Ω –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ", "token_expired")
        except jwt.InvalidTokenError:
            raise AuthError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", "invalid_token")

    @staticmethod
    def authenticate_telegram_user(telegram_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Telegram"""
        try:
            logger.info("üîç === –ü–û–ß–ê–¢–û–ö –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á ===")
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ: {list(telegram_data.keys())}")
            logger.info(f"ENV –∑–º—ñ–Ω–Ω—ñ:")
            logger.info(
                f"  SKIP_TELEGRAM_SIGNATURE_CHECK = {os.getenv('SKIP_TELEGRAM_SIGNATURE_CHECK', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
            logger.info(f"  ALLOW_INVALID_SIGNATURE = {os.getenv('ALLOW_INVALID_SIGNATURE', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
            logger.info(f"  ALLOW_AUTH_WITHOUT_INITDATA = {os.getenv('ALLOW_AUTH_WITHOUT_INITDATA', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ initData —è–∫—â–æ —î
            init_data = telegram_data.get('initData')
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')

            logger.info(f"=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á ===")
            logger.info(f"init_data –ø—Ä–∏—Å—É—Ç–Ω—ñ–π: {'–¢–∞–∫' if init_data else '–ù—ñ'}")
            logger.info(f"bot_token –ø—Ä–∏—Å—É—Ç–Ω—ñ–π: {'–¢–∞–∫' if bot_token else '–ù—ñ'}")
            if init_data:
                logger.info(f"–î–æ–≤–∂–∏–Ω–∞ init_data: {len(init_data)}")
                logger.info(f"init_data (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤): {init_data[:100]}...")

            # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å initData –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
            if not init_data:
                # –Ø–∫—â–æ —î telegram_id –±–µ–∑ initData - –¥–æ–∑–≤–æ–ª—è—î–º–æ –¥–ª—è development
                if os.getenv('ENVIRONMENT', 'development') == 'development' and telegram_data.get('id'):
                    logger.warning(f"‚ö†Ô∏è Development mode: –¥–æ–∑–≤–æ–ª—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –±–µ–∑ initData")
                else:
                    logger.error(f"‚ùå initData –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_data.get('id')}")
                    return {
                        'success': False,
                        'error': '–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Telegram',
                        'code': 'missing_init_data'
                    }

            if not bot_token:
                logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
                return {
                    'success': False,
                    'error': '–°–µ—Ä–≤–µ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π',
                    'code': 'missing_bot_token'
                }

            # –ú–û–ñ–õ–ò–í–Ü–°–¢–¨ –ü–†–û–ü–£–°–¢–ò–¢–ò –ü–ï–†–ï–í–Ü–†–ö–£ –ü–Ü–î–ü–ò–°–£
            SKIP_SIGNATURE_CHECK = os.getenv('SKIP_TELEGRAM_SIGNATURE_CHECK', 'false').lower() == 'true'

            if init_data and bot_token and not SKIP_SIGNATURE_CHECK:
                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å—É
                if not TelegramAuthController.verify_telegram_webapp_data(init_data, bot_token):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

                    # –ú–û–ñ–õ–ò–í–Ü–°–¢–¨ –ü–†–û–î–û–í–ñ–ò–¢–ò –ó –ù–ï–í–ê–õ–Ü–î–ù–ò–ú –ü–Ü–î–ü–ò–°–û–ú
                    if not os.getenv('ALLOW_INVALID_SIGNATURE', 'false').lower() == 'true':
                        return {
                            'success': False,
                            'error': '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å Telegram',
                            'code': 'invalid_signature'
                        }
                    else:
                        logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º –ø—ñ–¥–ø–∏—Å–æ–º (ALLOW_INVALID_SIGNATURE=true)")

                # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                webapp_user = TelegramAuthController.extract_user_from_webapp_data(init_data)
                if webapp_user:
                    telegram_data.update(webapp_user)

            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            telegram_id = str(telegram_data.get('id', telegram_data.get('telegram_id', '')))
            if not telegram_id or not telegram_id.isdigit():
                return {
                    'success': False,
                    'error': '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π Telegram ID',
                    'code': 'invalid_telegram_id'
                }

            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = get_user(telegram_id)
            is_new_user = False

            if not user:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                username = telegram_data.get('username', '')
                first_name = telegram_data.get('first_name', '')
                display_name = username or first_name or f"User_{telegram_id[-4:]}"
                referrer_id = telegram_data.get('referrer_id')

                user = create_user(telegram_id, display_name, referrer_id)
                is_new_user = True

                if not user:
                    return {
                        'success': False,
                        'error': '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
                        'code': 'user_creation_failed'
                    }

            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            updates = {
                'last_login': datetime.now(timezone.utc).isoformat(),
                'last_activity': datetime.now(timezone.utc).isoformat()
            }

            # –û–Ω–æ–≤–ª—é—î–º–æ username —è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è
            if telegram_data.get('username') and telegram_data.get('username') != user.get('username'):
                updates['username'] = telegram_data.get('username')

            # –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É
            if telegram_data.get('language_code'):
                updates['language_preference'] = telegram_data.get('language_code')

            update_user(telegram_id, updates)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
            token = TelegramAuthController.generate_jwt_token({
                'telegram_id': telegram_id,
                'username': user.get('username', ''),
                'first_name': user.get('first_name', ''),
                'last_name': user.get('last_name', '')
            })

            if not token:
                return {
                    'success': False,
                    'error': '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞',
                    'code': 'token_generation_failed'
                }

            return {
                'success': True,
                'token': token,
                'expires_in': JWT_EXPIRATION,
                'user': {
                    'telegram_id': telegram_id,
                    'username': user.get('username', ''),
                    'balance': float(user.get('balance', 0)),
                    'coins': int(user.get('coins', 0)),
                    'level': int(user.get('level', 1)),
                    'is_new_user': is_new_user
                }
            }

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}", exc_info=True)
            return {
                'success': False,
                'error': '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                'code': 'internal_error'
            }

    @staticmethod
    def refresh_token(telegram_id: str = None) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–¥–∞—á—ñ telegram_id"""
        try:
            # –Ø–∫—â–æ telegram_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ request
            if not telegram_id:
                from flask import request
                from middleware import extract_telegram_id

                telegram_id = extract_telegram_id()

            if not telegram_id:
                logger.error("refresh_token: telegram_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                return {
                    'success': False,
                    'error': 'User ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π',
                    'code': 'missing_user_id'
                }

            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ telegram_id
            telegram_id = str(telegram_id).strip()

            logger.info(f"refresh_token: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = get_user(telegram_id)
            if not user:
                logger.error(f"refresh_token: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                return {
                    'success': False,
                    'error': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π',
                    'code': 'user_not_found'
                }

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω
            new_token = TelegramAuthController.generate_jwt_token({
                'telegram_id': telegram_id,
                'username': user.get('username', ''),
                'first_name': user.get('first_name', ''),
                'last_name': user.get('last_name', '')
            })

            if not new_token:
                return {
                    'success': False,
                    'error': '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞',
                    'code': 'token_generation_failed'
                }

            # –û–Ω–æ–≤–ª—é—î–º–æ last_activity
            update_user(telegram_id, {
                'last_activity': datetime.now(timezone.utc).isoformat()
            })

            return {
                'success': True,
                'status': 'success',
                'token': new_token,
                'expires_in': JWT_EXPIRATION,
                'user': {
                    'telegram_id': telegram_id,
                    'username': user.get('username', ''),
                    'balance': float(user.get('balance', 0)),
                    'coins': int(user.get('coins', 0))
                }
            }

        except Exception as e:
            logger.error(f"refresh_token: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}", exc_info=True)
            return {
                'success': False,
                'status': 'error',
                'error': '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞',
                'code': 'refresh_failed'
            }

    @staticmethod
    def validate_token(token: str) -> Dict[str, Any]:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            payload = TelegramAuthController.decode_jwt_token(token)
            user_id = payload.get('user_id') or payload.get('telegram_id')

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = get_user(user_id)
            if not user:
                return {
                    'valid': False,
                    'error': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π',
                    'code': 'user_not_found'
                }

            return {
                'valid': True,
                'user': {
                    'telegram_id': user_id,
                    'username': payload.get('username'),
                    'exp': payload.get('exp'),
                    'iat': payload.get('iat')
                }
            }

        except AuthError as e:
            return {
                'valid': False,
                'error': e.message,
                'code': e.code
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            return {
                'valid': False,
                'error': '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
                'code': 'validation_error'
            }


class AuthError(Exception):
    """–ö–ª–∞—Å –¥–ª—è –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""

    def __init__(self, message: str, code: str):
        self.message = message
        self.code = code
        super().__init__(self.message)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
def require_auth(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É endpoints"""

    def decorated_function(*args, **kwargs):
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω
        auth_header = request.headers.get('Authorization')
        if auth_header and auth_header.startswith('Bearer '):
            token = auth_header[7:]
        else:
            return jsonify({
                'status': 'error',
                'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞',
                'code': 'auth_required'
            }), 401

        # –í–∞–ª—ñ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω
        result = TelegramAuthController.validate_token(token)
        if not result.get('valid'):
            return jsonify({
                'status': 'error',
                'message': result.get('error', '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω'),
                'code': result.get('code', 'invalid_token')
            }), 401

        # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ request
        request.current_user = result.get('user')

        return f(*args, **kwargs)

    decorated_function.__name__ = f.__name__
    return decorated_function

# Alias –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Å–∏—Å—Ç–µ–º–æ—é –∑–∞–≤–¥–∞–Ω—å
AuthController = TelegramAuthController


def validate_telegram_route(telegram_data):
    """
    –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Å–∏—Å—Ç–µ–º–æ—é –∑–∞–≤–¥–∞–Ω—å
    """
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É
        result = TelegramAuthController.authenticate_telegram_user(telegram_data)

        if result.get('success'):
            return {
                'valid': True,
                'user': result.get('user'),
                'token': result.get('token')
            }
        else:
            return {
                'valid': False,
                'error': result.get('error', 'Validation failed'),
                'code': result.get('code', 'validation_failed')
            }
    except Exception as e:
        logger.error(f"Validation error: {str(e)}")
        return {
            'valid': False,
            'error': str(e),
            'code': 'validation_error'
        }


def refresh_token_route(telegram_id=None):
    """
    –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Å–∏—Å—Ç–µ–º–æ—é –∑–∞–≤–¥–∞–Ω—å
    """
    try:
        result = TelegramAuthController.refresh_token(telegram_id)
        return result
    except Exception as e:
        logger.error(f"Refresh token error: {str(e)}")
        return {
            'success': False,
            'error': str(e),
            'code': 'refresh_failed'
        }


def validate_token_route(token: str = None):
    """
    –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—É –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Å–∏—Å—Ç–µ–º–æ—é –∑–∞–≤–¥–∞–Ω—å
    """
    try:
        # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ request
        if not token:
            from flask import request

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            auth_header = request.headers.get('Authorization')
            if auth_header and auth_header.startswith('Bearer '):
                token = auth_header[7:]
            else:
                # –ê–±–æ –∑ body
                data = request.get_json() or {}
                token = data.get('token')

        if not token:
            return {
                'valid': False,
                'error': 'Token not provided',
                'code': 'missing_token'
            }

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –º–µ—Ç–æ–¥ validate_token
        result = TelegramAuthController.validate_token(token)
        return result

    except Exception as e:
        logger.error(f"Validate token route error: {str(e)}")
        return {
            'valid': False,
            'error': str(e),
            'code': 'validation_error'
        }
# –û–Ω–æ–≤–∏—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'TelegramAuthController',
    'AuthController',
    'AuthError',
    'require_auth',
    'validate_telegram_route',
    'refresh_token_route',
    'validate_token_route'
]