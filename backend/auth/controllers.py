"""
–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ WINIX
–í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é –∑ frontend
"""

import logging
import os
import sys
import hmac
import hashlib
import urllib.parse
import json
import re
from datetime import datetime, timezone
from typing import Dict, Any, Optional
from flask import request

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_dir = os.path.dirname(current_dir)
if backend_dir not in sys.path:
    sys.path.append(backend_dir)

# –Ü–º–ø–æ—Ä—Ç–∏ Supabase
try:
    from supabase_client import get_user, update_user, supabase
    SUPABASE_AVAILABLE = True
    logger.info("‚úÖ Supabase client –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: Supabase client –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    raise ImportError("Supabase client —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏")

# –Ü–º–ø–æ—Ä—Ç–∏ users –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤
try:
    from users.controllers import get_user_info, create_new_user
    USERS_CONTROLLERS_AVAILABLE = True
    logger.info("‚úÖ Users controllers –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Users controllers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    USERS_CONTROLLERS_AVAILABLE = False

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
USER_ID_PATTERN = re.compile(r'^\d{1,12}$')  # Telegram ID: 1-12 —Ü–∏—Ñ—Ä
USERNAME_PATTERN = re.compile(r'^[a-zA-Z0-9_]{1,32}$')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not BOT_TOKEN:
    logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –±—É–¥–µ –æ–±–º–µ–∂–µ–Ω–∞")


def validate_telegram_id(telegram_id: Any) -> str:
    """
    –°–¢–†–û–ì–ê –≤–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram ID –±–µ–∑ fallback –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤

    Args:
        telegram_id: ID –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó

    Returns:
        str: –í–∞–ª—ñ–¥–Ω–∏–π Telegram ID

    Raises:
        ValueError: –Ø–∫—â–æ ID –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
    """
    if telegram_id is None:
        raise ValueError("Telegram ID –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ None")

    if telegram_id == '':
        raise ValueError("Telegram ID –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å—Ç—Ä–æ–∫—É
    telegram_id_str = str(telegram_id).strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    forbidden_values = {'undefined', 'null', 'none', '0', ''}
    if telegram_id_str.lower() in forbidden_values:
        raise ValueError(f"–ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è Telegram ID: {telegram_id_str}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç
    if not USER_ID_PATTERN.match(telegram_id_str):
        raise ValueError(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç Telegram ID: {telegram_id_str}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
    try:
        telegram_id_int = int(telegram_id_str)
        if telegram_id_int <= 0:
            raise ValueError("Telegram ID –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º")
        if telegram_id_int > 999999999999:  # 12 —Ü–∏—Ñ—Ä –º–∞–∫—Å–∏–º—É–º
            raise ValueError("Telegram ID –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π")
    except ValueError as e:
        if "invalid literal" in str(e):
            raise ValueError(f"Telegram ID –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏: {telegram_id_str}")
        raise

    return telegram_id_str


def validate_telegram_data(data: Dict[str, Any]) -> bool:
    """
    –°–¢–†–û–ì–ê –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram

    Args:
        data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ Telegram

    Returns:
        bool: True —è–∫—â–æ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ

    Raises:
        ValueError: –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ
    """
    if not isinstance(data, dict):
        raise ValueError("–î–∞–Ω—ñ –º–∞—é—Ç—å –±—É—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–º")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID
    user_id = data.get('id') or data.get('telegram_id')
    if not user_id:
        raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ–π user ID –≤ –¥–∞–Ω–∏—Ö")

    # –í–∞–ª—ñ–¥—É—î–º–æ ID
    try:
        validate_telegram_id(user_id)
    except ValueError as e:
        raise ValueError(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π user ID: {e}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ username —è–∫—â–æ —î
    username = data.get('username')
    if username and not USERNAME_PATTERN.match(str(username)):
        logger.warning(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç username: {username}")
        # –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è username, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–µ—Ä–µ–¥–∂–∞—î–º–æ

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ first_name —è–∫—â–æ —î
    first_name = data.get('first_name', '')
    if first_name and len(str(first_name).strip()) > 100:
        raise ValueError("First name –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π")

    return True


def verify_telegram_webapp_data(init_data: str, bot_token: str) -> bool:
    """
    –í–ò–ü–†–ê–í–õ–ï–ù–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram WebApp

    Args:
        init_data: –î–∞–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—ñ–¥ Telegram
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞

    Returns:
        bool: True —è–∫—â–æ –¥–∞–Ω—ñ –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω—ñ
    """
    if not init_data or not bot_token:
        logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ init_data –∞–±–æ bot_token")
        return False

    try:
        # –†–æ–∑–±–∏—Ä–∞—î–º–æ init_data
        parsed_data = urllib.parse.parse_qs(init_data)

        # –û—Ç—Ä–∏–º—É—î–º–æ hash —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö
        received_hash = parsed_data.get('hash', [None])[0]
        if not received_hash:
            logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ–π hash –≤ init_data")
            return False

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (—Å–æ—Ä—Ç—É—î–º–æ –∫–ª—é—á—ñ)
        auth_items = []
        for key, value in parsed_data.items():
            if key != 'hash' and value and value[0]:  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                auth_items.append(f"{key}={value[0]}")

        if not auth_items:
            logger.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
            return False

        auth_string = '\n'.join(sorted(auth_items))
        logger.debug(f"Auth string for verification: {auth_string}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á
        secret_key = hmac.new(
            "WebAppData".encode(),
            bot_token.encode(),
            hashlib.sha256
        ).digest()

        # –û–±—á–∏—Å–ª—é—î–º–æ hash
        calculated_hash = hmac.new(
            secret_key,
            auth_string.encode(),
            hashlib.sha256
        ).hexdigest()

        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ hash'—ñ
        is_valid = hmac.compare_digest(received_hash, calculated_hash)

        if not is_valid:
            logger.warning(f"Hash mismatch. Received: {received_hash}, Calculated: {calculated_hash}")
        else:
            logger.info("Telegram WebApp data verification successful")

        return is_valid

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Telegram WebApp data: {str(e)}")
        return False


def extract_user_from_webapp_data(init_data: str) -> Optional[Dict[str, Any]]:
    """
    –í–ò–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ init_data

    Args:
        init_data: –î–∞–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—ñ–¥ Telegram

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None
    """
    if not init_data:
        return None

    try:
        parsed_data = urllib.parse.parse_qs(init_data)
        user_data = parsed_data.get('user', [None])[0]

        if user_data:
            user_info = json.loads(user_data)

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏—Ö –¥–∞–Ω–∏—Ö
            if not user_info.get('id'):
                logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –≤ user data")
                return None

            return {
                'id': user_info.get('id'),
                'username': user_info.get('username'),
                'first_name': user_info.get('first_name'),
                'last_name': user_info.get('last_name'),
                'language_code': user_info.get('language_code')
            }
    except json.JSONDecodeError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON user data: {str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")

    return None


def get_user_data(telegram_id: str) -> Optional[Dict[str, Any]]:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id –ë–ï–ó fallback –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–º—É ID
        ConnectionError: –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑ –ë–î
    """
    # –°—Ç—Ä–æ–≥–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è ID
    telegram_id = validate_telegram_id(telegram_id)

    logger.info(f"üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ users.controllers
    if USERS_CONTROLLERS_AVAILABLE and get_user_info:
        try:
            user_data = get_user_info(telegram_id)
            if user_data:
                logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ users.controllers")
                return user_data
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ get_user_info: {str(e)}")
            raise ConnectionError(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")

    # Fallback —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ Supabase
    try:
        response = supabase.table("winix").select("*").eq("telegram_id", telegram_id).execute()
        if response.data and len(response.data) > 0:
            user_data = response.data[0]
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç")
            return user_data
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ Supabase –∑–∞–ø–∏—Ç—É: {str(e)}")
        raise ConnectionError(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
    logger.info(f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
    return None


def create_user_safe(telegram_id: str, display_name: str, referrer_id: Optional[str] = None) -> Dict[str, Any]:
    """
    –ë–µ–∑–ø–µ—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ë–ï–ó fallback –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        display_name: –í—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–µ —ñ–º'—è
        referrer_id: ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        ConnectionError: –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑ –ë–î
    """
    # –°—Ç—Ä–æ–≥–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    telegram_id = validate_telegram_id(telegram_id)

    if not display_name or len(str(display_name).strip()) == 0:
        display_name = f"User_{telegram_id[-4:]}"

    if referrer_id:
        referrer_id = validate_telegram_id(referrer_id)
        if referrer_id == telegram_id:
            raise ValueError("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±–µ")

    logger.info(f"üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ users.controllers
    if USERS_CONTROLLERS_AVAILABLE and create_new_user:
        try:
            user_data = create_new_user(telegram_id, display_name, referrer_id)
            if user_data:
                logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ users.controllers")
                return user_data
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ create_new_user: {str(e)}")
            raise ConnectionError(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")

    # Fallback - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç
    try:
        # –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        new_user_data = {
            "telegram_id": telegram_id,
            "username": display_name,
            "balance": int(os.getenv('DEFAULT_TOKENS_NEW_USER', '0')),
            "coins": int(os.getenv('DEFAULT_WINIX_NEW_USER', '0')),
            "created_at": datetime.now(timezone.utc).isoformat(),
            "last_login": datetime.now(timezone.utc).isoformat(),
            "is_active": True
        }

        # –î–æ–¥–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —è–∫—â–æ —î
        if referrer_id:
            new_user_data["referrer_id"] = referrer_id

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        response = supabase.table("winix").insert(new_user_data).execute()

        if response.data and len(response.data) > 0:
            created_user = response.data[0]
            created_user['is_new_user'] = True
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç")
            return created_user
        else:
            raise ConnectionError("–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
        raise ConnectionError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")


def update_user_data(telegram_id: str, updates: Dict[str, Any]) -> bool:
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        updates: –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    Returns:
        bool: True —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ

    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        ConnectionError: –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑ –ë–î
    """
    # –°—Ç—Ä–æ–≥–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    telegram_id = validate_telegram_id(telegram_id)

    if not isinstance(updates, dict) or len(updates) == 0:
        raise ValueError("Updates –º–∞—é—Ç—å –±—É—Ç–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–º —Å–ª–æ–≤–Ω–∏–∫–æ–º")

    logger.info(f"üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

    try:
        response = supabase.table("winix").update(updates).eq("telegram_id", telegram_id).execute()
        if response.data:
            logger.info(f"‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            raise ConnectionError("–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        raise ConnectionError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")


def verify_user(telegram_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ì–û–õ–û–í–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ë–ï–ó fallback –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤
    –í–ò–ü–†–ê–í–õ–ï–ù–ê –¥–ª—è –∫—Ä–∞—â–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ frontend

    Args:
        telegram_data: –î–∞–Ω—ñ –≤—ñ–¥ Telegram

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        ConnectionError: –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑ –ë–î
        PermissionError: –ü—Ä–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    """
    logger.info("üîê verify_user: –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

    # –°—Ç—Ä–æ–≥–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if not isinstance(telegram_data, dict):
        raise ValueError("telegram_data –º–∞—î –±—É—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–º")

    validate_telegram_data(telegram_data)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ initData –∑ Telegram WebApp
    init_data = telegram_data.get('initData')
    is_valid_telegram_request = False

    if init_data:
        logger.info("üì± verify_user: –û—Ç—Ä–∏–º–∞–Ω–æ initData –∑ Telegram WebApp")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å —è–∫—â–æ —î —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        if BOT_TOKEN:
            is_valid_telegram_request = verify_telegram_webapp_data(init_data, BOT_TOKEN)
            if not is_valid_telegram_request:
                logger.warning("‚ö†Ô∏è verify_user: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å initData")
                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, –∞ –ª–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                logger.warning("InitData verification failed, but continuing...")
            else:
                logger.info("‚úÖ verify_user: –ü—ñ–¥–ø–∏—Å initData –≤–∞–ª—ñ–¥–Ω–∏–π")
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞, –¥–æ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ initData
            is_valid_telegram_request = True
            logger.warning("‚ö†Ô∏è verify_user: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

        # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ initData
        if init_data:  # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ initData –∑–∞–º—ñ—Å—Ç—å is_valid_telegram_request
            webapp_user = extract_user_from_webapp_data(init_data)
            if webapp_user:
                telegram_data.update(webapp_user)
                logger.info("üìù verify_user: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–æ –∑ initData")
                is_valid_telegram_request = True  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ true —è–∫—â–æ –≤–∏—Ç—è–≥–ª–∏ –¥–∞–Ω—ñ

    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_id = telegram_data.get('id') or telegram_data.get('telegram_id')

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
    if not telegram_id and request:
        header_id = request.headers.get('X-Telegram-User-Id')
        if header_id:
            telegram_id = header_id
            is_valid_telegram_request = True
            logger.info("üì° verify_user: ID –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-User-Id")

    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è Telegram Mini App
    if telegram_data.get('from_telegram'):
        is_valid_telegram_request = True
        logger.info("üîµ verify_user: –ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram")

    if not telegram_id:
        raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ telegram_id")

    # –§–∏–Ω–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è ID
    telegram_id = validate_telegram_id(telegram_id)
    logger.info(f"üë§ verify_user: –û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = get_user_data(telegram_id)

    if not user:
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞
        # –∞–ª–µ –ª–æ–≥—É—î–º–æ —Ü–µ —è–∫ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        if not is_valid_telegram_request:
            logger.warning(f"‚ö†Ô∏è verify_user: –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –±–µ–∑ –ø–æ–≤–Ω–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Telegram")

        logger.info(f"üÜï verify_user: –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        username = telegram_data.get('username', '')
        first_name = telegram_data.get('first_name', '')
        display_name = username or first_name or f"User_{telegram_id[-4:]}"
        referrer_id = telegram_data.get('referrer_id')

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = create_user_safe(telegram_id, display_name, referrer_id)
        logger.info(f"‚úÖ verify_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
    else:
        logger.info(f"üëã verify_user: –Ü—Å–Ω—É—é—á–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id}")
        user['is_new_user'] = False

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        updates = {
            "last_login": datetime.now(timezone.utc).isoformat()
        }

        # –û–Ω–æ–≤–ª—é—î–º–æ username —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω–∏–≤—Å—è
        username = telegram_data.get('username')
        if username and username != user.get('username'):
            updates["username"] = username

        # –î–æ–¥–∞—î–º–æ –º–æ–≤—É —è–∫—â–æ —î
        language_code = telegram_data.get('language_code')
        if language_code:
            updates["language"] = language_code

        # –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if updates:
            update_user_data(telegram_id, updates)
            logger.info(f"üìù verify_user: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è verify_user: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
        # –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    logger.info(f"üéâ verify_user: –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    return user


def verify_telegram_mini_app_user(telegram_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–ª—è Telegram Mini App

    Args:
        telegram_data: –î–∞–Ω—ñ –≤—ñ–¥ Telegram Mini App

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —â–æ —Ü–µ –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram Mini App
    telegram_data['from_telegram'] = True

    logger.info("üì± verify_telegram_mini_app_user: –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Telegram Mini App –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    return verify_user(telegram_data)


# –ï–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
__all__ = [
    'verify_user',
    'verify_telegram_mini_app_user',
    'get_user_data',
    'validate_telegram_data',
    'validate_telegram_id',
    'verify_telegram_webapp_data',
    'extract_user_from_webapp_data',
    'create_user_safe',
    'update_user_data'
]