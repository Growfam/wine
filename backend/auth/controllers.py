"""
–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ WINIX
–í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é —Ç–∞ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∞–º–∏
"""

import logging
import os
import sys
import hmac
import hashlib
import urllib.parse
import json
import re
from datetime import datetime, timezone
from typing import Dict, Any, Optional
from flask import request

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_dir = os.path.dirname(current_dir)
if backend_dir not in sys.path:
    sys.path.append(backend_dir)

# –ë–µ–∑–ø–µ—á–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ Supabase –∑ fallback
SUPABASE_AVAILABLE = False
get_user = None
update_user = None
supabase = None

try:
    from supabase_client import get_user, update_user, supabase
    SUPABASE_AVAILABLE = True
    logger.info("‚úÖ Supabase client –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Supabase client –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    SUPABASE_AVAILABLE = False

# –ë–µ–∑–ø–µ—á–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ users –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤ –∑ fallback
USERS_CONTROLLERS_AVAILABLE = False
get_user_info = None
create_new_user = None

try:
    from users.controllers import get_user_info, create_new_user
    USERS_CONTROLLERS_AVAILABLE = True
    logger.info("‚úÖ Users controllers –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Users controllers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    USERS_CONTROLLERS_AVAILABLE = False

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ regex –ø–∞—Ç—Ç–µ—Ä–Ω–∏
USER_ID_PATTERN = re.compile(r'^\d+$')
USERNAME_PATTERN = re.compile(r'^[a-zA-Z0-9_]{3,32}$')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# Fallback –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
FALLBACK_USER_DATA = {
    'telegram_id': '000000',
    'username': 'Fallback User',
    'balance': 0,
    'coins': 0,
    'is_new_user': False,
    'fallback': True,
    'created_at': datetime.now(timezone.utc).isoformat(),
    'last_login': datetime.now(timezone.utc).isoformat(),
    'is_active': True
}


def validate_telegram_data(data: Dict[str, Any]) -> bool:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫

    Args:
        data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ Telegram

    Returns:
        bool: True —è–∫—â–æ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        user_id = data.get('id') or data.get('telegram_id')
        if not user_id:
            logger.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ–π user ID –≤ –¥–∞–Ω–∏—Ö")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç ID
        if not USER_ID_PATTERN.match(str(user_id)):
            logger.warning(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç user ID: {user_id}")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑—É–º–Ω—ñ –º–µ–∂—ñ ID
        try:
            id_int = int(user_id)
            if id_int <= 0 or id_int > 999999999999:  # Telegram ID –º–µ–∂—ñ
                logger.warning(f"User ID –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º–∏ –º–µ–∂–∞–º–∏: {id_int}")
                return False
        except (ValueError, OverflowError):
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ username —è–∫—â–æ —î
        username = data.get('username')
        if username and not USERNAME_PATTERN.match(username):
            logger.warning(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç username: {username}")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ first_name —è–∫—â–æ —î
        first_name = data.get('first_name', '')
        if first_name and len(first_name.strip()) > 100:
            logger.warning("First name –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π")
            return False

        return True

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó Telegram –¥–∞–Ω–∏—Ö: {str(e)}")
        return False


def verify_telegram_webapp_data(init_data: str, bot_token: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –≤—ñ–¥ Telegram WebApp –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫

    Args:
        init_data: –î–∞–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—ñ–¥ Telegram
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞

    Returns:
        bool: True —è–∫—â–æ –¥–∞–Ω—ñ –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω—ñ
    """
    try:
        if not init_data or not bot_token:
            return False

        # –†–æ–∑–±–∏—Ä–∞—î–º–æ init_data
        parsed_data = urllib.parse.parse_qs(init_data)

        # –û—Ç—Ä–∏–º—É—î–º–æ hash —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –∑ –¥–∞–Ω–∏—Ö
        received_hash = parsed_data.get('hash', [None])[0]
        if not received_hash:
            return False

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        auth_items = []
        for key, value in parsed_data.items():
            if key != 'hash':
                auth_items.append(f"{key}={value[0]}")

        auth_string = '\n'.join(sorted(auth_items))

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á
        secret_key = hmac.new(
            "WebAppData".encode(),
            bot_token.encode(),
            hashlib.sha256
        ).digest()

        # –û–±—á–∏—Å–ª—é—î–º–æ hash
        calculated_hash = hmac.new(
            secret_key,
            auth_string.encode(),
            hashlib.sha256
        ).hexdigest()

        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ hash'—ñ
        return hmac.compare_digest(received_hash, calculated_hash)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Telegram WebApp data: {str(e)}")
        return False


def extract_user_from_webapp_data(init_data: str) -> Optional[Dict[str, Any]]:
    """
    –í–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ init_data –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫

    Args:
        init_data: –î–∞–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—ñ–¥ Telegram

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None
    """
    try:
        if not init_data:
            return None

        parsed_data = urllib.parse.parse_qs(init_data)
        user_data = parsed_data.get('user', [None])[0]

        if user_data:
            user_info = json.loads(user_data)
            return {
                'id': user_info.get('id'),
                'username': user_info.get('username'),
                'first_name': user_info.get('first_name'),
                'last_name': user_info.get('last_name'),
                'language_code': user_info.get('language_code')
            }
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")

    return None


def create_fallback_user_data(telegram_id: str, display_name: str = None) -> Dict[str, Any]:
    """
    –°—Ç–≤–æ—Ä—é—î fallback –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫–æ–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        display_name: –í—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–µ —ñ–º'—è

    Returns:
        Dict –∑ fallback –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    if not display_name:
        display_name = f"User_{telegram_id[-4:]}" if len(telegram_id) >= 4 else f"User_{telegram_id}"

    return {
        'telegram_id': telegram_id,
        'username': display_name,
        'balance': int(os.getenv('DEFAULT_TOKENS_NEW_USER', '0')),
        'coins': int(os.getenv('DEFAULT_WINIX_NEW_USER', '0')),
        'created_at': datetime.now(timezone.utc).isoformat(),
        'last_login': datetime.now(timezone.utc).isoformat(),
        'is_active': True,
        'is_new_user': True,
        'fallback': True,
        'offline_mode': True
    }


def get_user_data(telegram_id: str) -> Optional[Dict[str, Any]]:
    """
    –ü–û–ö–†–ê–©–ï–ù–ï –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∞–º–∏

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ fallback –¥–∞–Ω—ñ
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ users.controllers
        if USERS_CONTROLLERS_AVAILABLE and get_user_info:
            try:
                user_data = get_user_info(telegram_id)
                if user_data:
                    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ users.controllers")
                    user_data['fallback'] = False
                    return user_data
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ get_user_info: {str(e)}")

        # Fallback —á–µ—Ä–µ–∑ supabase_client
        if SUPABASE_AVAILABLE and get_user:
            try:
                user_data = get_user(telegram_id)
                if user_data:
                    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ supabase_client")
                    user_data['fallback'] = False
                    return user_data
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ get_user: {str(e)}")

        # –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - –ø—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ Supabase
        if SUPABASE_AVAILABLE and supabase:
            try:
                response = supabase.table("winix").select("*").eq("telegram_id", telegram_id).execute()
                if response.data and len(response.data) > 0:
                    user_data = response.data[0]
                    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç")
                    user_data['fallback'] = False
                    return user_data
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ Supabase –∑–∞–ø–∏—Ç—É: {str(e)}")

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –ë–î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
        logger.info(f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
        return None

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –¥–∞–Ω—ñ
        logger.info(f"üîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –¥–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
        return create_fallback_user_data(telegram_id)


def create_user_safe(telegram_id: str, display_name: str, referrer_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
    """
    –ü–û–ö–†–ê–©–ï–ù–ï –±–µ–∑–ø–µ—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∞–º–∏

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        display_name: –í—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–µ —ñ–º'—è
        referrer_id: ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ fallback –¥–∞–Ω—ñ
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ users.controllers
        if USERS_CONTROLLERS_AVAILABLE and create_new_user:
            try:
                user_data = create_new_user(telegram_id, display_name, referrer_id)
                if user_data:
                    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ users.controllers")
                    user_data['is_new_user'] = True
                    user_data['fallback'] = False
                    return user_data
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ create_new_user: {str(e)}")

        # Fallback - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç
        if SUPABASE_AVAILABLE and supabase:
            try:
                # –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                new_user_data = {
                    "telegram_id": telegram_id,
                    "username": display_name,
                    "balance": int(os.getenv('DEFAULT_TOKENS_NEW_USER', '0')),
                    "coins": int(os.getenv('DEFAULT_WINIX_NEW_USER', '0')),
                    "created_at": datetime.now(timezone.utc).isoformat(),
                    "last_login": datetime.now(timezone.utc).isoformat(),
                    "is_active": True
                }

                # –î–æ–¥–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —è–∫—â–æ —î
                if referrer_id and referrer_id != telegram_id:
                    new_user_data["referrer_id"] = referrer_id

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                response = supabase.table("winix").insert(new_user_data).execute()

                if response.data and len(response.data) > 0:
                    created_user = response.data[0]
                    created_user['is_new_user'] = True
                    created_user['fallback'] = False
                    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç")
                    return created_user
                else:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} - –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å")

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")

        # –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback –¥–∞–Ω–∏—Ö
        logger.warning(f"‚ö†Ô∏è –í—Å—ñ –º–µ—Ç–æ–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback")
        fallback_data = create_fallback_user_data(telegram_id, display_name)

        # –î–æ–¥–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–æ fallback –¥–∞–Ω–∏—Ö
        if referrer_id and referrer_id != telegram_id:
            fallback_data["referrer_id"] = referrer_id

        return fallback_data

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –¥–∞–Ω—ñ
        return create_fallback_user_data(telegram_id, display_name)


def update_user_data(telegram_id: str, updates: Dict[str, Any]) -> bool:
    """
    –ü–û–ö–†–ê–©–ï–ù–ï –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º'—è–∫–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        updates: –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    Returns:
        bool: True —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ –∞–±–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–µ
    """
    try:
        telegram_id = str(telegram_id)
        logger.info(f"üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ update_user
        if SUPABASE_AVAILABLE and update_user:
            try:
                result = update_user(telegram_id, updates)
                if result:
                    logger.info(f"‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ update_user")
                    return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ update_user: {str(e)}")

        # Fallback —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç
        if SUPABASE_AVAILABLE and supabase:
            try:
                response = supabase.table("winix").update(updates).eq("telegram_id", telegram_id).execute()
                if response.data:
                    logger.info(f"‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π Supabase –∑–∞–ø–∏—Ç")
                    return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")

        # –ú'—è–∫–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ - –Ω–µ –±–ª–æ–∫—É—î–º–æ —Ä–æ–±–æ—Ç—É
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É")
        return True  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {str(e)}")
        return True  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ


def verify_user(telegram_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    –ü–û–ö–†–ê–©–ï–ù–ê –ì–û–õ–û–í–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∞–º–∏

    Args:
        telegram_data: –î–∞–Ω—ñ –≤—ñ–¥ Telegram

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ, –Ω–∞–≤—ñ—Ç—å fallback)
    """
    try:
        logger.info("üîê verify_user: –ü–æ—á–∞—Ç–æ–∫ –ü–û–ö–†–ê–©–ï–ù–û–á –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ initData –∑ Telegram WebApp
        init_data = telegram_data.get('initData')
        is_valid_telegram_request = False

        if init_data:
            logger.info("üì± verify_user: –û—Ç—Ä–∏–º–∞–Ω–æ initData –∑ Telegram WebApp")

            # –Ø–∫—â–æ —î —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å
            if BOT_TOKEN:
                is_valid_telegram_request = verify_telegram_webapp_data(init_data, BOT_TOKEN)
                if not is_valid_telegram_request:
                    logger.warning("‚ö†Ô∏è verify_user: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å initData")
                else:
                    logger.info("‚úÖ verify_user: –ü—ñ–¥–ø–∏—Å initData –≤–∞–ª—ñ–¥–Ω–∏–π")
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞, –¥–æ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ initData
                is_valid_telegram_request = True
                logger.warning("‚ö†Ô∏è verify_user: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ initData
            if is_valid_telegram_request:
                webapp_user = extract_user_from_webapp_data(init_data)
                if webapp_user:
                    telegram_data.update(webapp_user)
                    logger.info("üìù verify_user: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–æ –∑ initData")

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        telegram_id = telegram_data.get('id') or telegram_data.get('telegram_id')

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        header_id = request.headers.get('X-Telegram-User-Id') if request else None
        if header_id:
            telegram_id = header_id
            is_valid_telegram_request = True
            logger.info("üì° verify_user: ID –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-User-Id")

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è Telegram Mini App
        if telegram_data.get('from_telegram'):
            is_valid_telegram_request = True
            logger.info("üîµ verify_user: –ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram")

        if not telegram_id:
            logger.error("‚ùå verify_user: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ telegram_id")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –¥–∞–Ω—ñ –∑–∞–º—ñ—Å—Ç—å None
            return create_fallback_user_data('000000', 'Unknown User')

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        if not validate_telegram_data(telegram_data):
            logger.warning("‚ö†Ô∏è verify_user: –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ")
            # –ù–ï –±–ª–æ–∫—É—î–º–æ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—è–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏

        telegram_id = str(telegram_id)
        logger.info(f"üë§ verify_user: –û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = get_user_data(telegram_id)

        if not user:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¢–Ü–õ–¨–ö–ò —è–∫—â–æ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram
            if not is_valid_telegram_request:
                logger.warning(f"‚ö†Ô∏è verify_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –Ω–µ —ñ—Å–Ω—É—î —ñ –∑–∞–ø–∏—Ç –Ω–µ –≤—ñ–¥ Telegram, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback")
                return create_fallback_user_data(telegram_id, 'Offline User')

            logger.info(f"üÜï verify_user: –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            username = telegram_data.get('username', '')
            first_name = telegram_data.get('first_name', '')
            display_name = username or first_name or f"User_{telegram_id[-4:]}"
            referrer_id = telegram_data.get('referrer_id')

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ, –Ω–∞–≤—ñ—Ç—å fallback)
            user = create_user_safe(telegram_id, display_name, referrer_id)

            logger.info(f"‚úÖ verify_user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
        else:
            logger.info(f"üëã verify_user: –Ü—Å–Ω—É—é—á–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id}")
            user['is_new_user'] = False

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑ –º'—è–∫–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫)
        try:
            updates = {
                "last_login": datetime.now(timezone.utc).isoformat()
            }

            # –û–Ω–æ–≤–ª—é—î–º–æ username —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω–∏–≤—Å—è
            username = telegram_data.get('username')
            if username and username != user.get('username'):
                updates["username"] = username

            # –î–æ–¥–∞—î–º–æ –º–æ–≤—É —è–∫—â–æ —î
            language_code = telegram_data.get('language_code')
            if language_code:
                updates["language"] = language_code

            # –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–Ω–µ –±–ª–æ–∫—É—î–º–æ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ)
            if updates and not user.get('fallback', False):
                update_user_data(telegram_id, updates)
                logger.info(f"üìù verify_user: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è verify_user: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ: {str(e)}")

        logger.info(f"üéâ verify_user: –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return user

    except Exception as e:
        logger.error(f"‚ùå verify_user: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}", exc_info=True)

        # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –¥–∞–Ω—ñ
        telegram_id = telegram_data.get('id') or telegram_data.get('telegram_id') or '000000'
        fallback_data = create_fallback_user_data(str(telegram_id), 'Error User')
        logger.info(f"üîÑ verify_user: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É")
        return fallback_data


def verify_telegram_mini_app_user(telegram_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    –ü–û–ö–†–ê–©–ï–ù–ê —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–ª—è Telegram Mini App

    Args:
        telegram_data: –î–∞–Ω—ñ –≤—ñ–¥ Telegram Mini App

    Returns:
        Dict –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ)
    """
    try:
        # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —â–æ —Ü–µ –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram Mini App
        telegram_data['from_telegram'] = True

        logger.info("üì± verify_telegram_mini_app_user: –ü–æ—á–∞—Ç–æ–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Telegram Mini App –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        result = verify_user(telegram_data)

        if result:
            logger.info("‚úÖ verify_telegram_mini_app_user: –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è Mini App —É—Å–ø—ñ—à–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è verify_telegram_mini_app_user: –ü—Ä–æ–±–ª–µ–º–∞ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é Mini App, –∞–ª–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback")
            # –Ø–∫—â–æ –∑ —è–∫–æ—ó—Å—å –ø—Ä–∏—á–∏–Ω–∏ verify_user –ø–æ–≤–µ—Ä–Ω—É–≤ None, —Å—Ç–≤–æ—Ä—é—î–º–æ fallback
            telegram_id = telegram_data.get('id') or telegram_data.get('telegram_id') or '000000'
            result = create_fallback_user_data(str(telegram_id), 'Mini App User')

        return result

    except Exception as e:
        logger.error(f"‚ùå verify_telegram_mini_app_user: –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –¥–∞–Ω—ñ
        telegram_id = telegram_data.get('id') or telegram_data.get('telegram_id') or '000000'
        return create_fallback_user_data(str(telegram_id), 'Mini App Error User')


def create_mock_user(telegram_id: str, data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –°—Ç–≤–æ—Ä—é—î –º–æ–∫-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)

    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        Dict –∑ –º–æ–∫-–¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    return {
        'telegram_id': telegram_id,
        'username': data.get('username', f'user_{telegram_id}'),
        'first_name': data.get('first_name', 'Test User'),
        'balance': 0,
        'coins': 0,
        'is_new_user': True,
        'created_at': datetime.now(timezone.utc).isoformat(),
        'mock_user': True,
        'fallback': True,
        'offline_mode': True
    }


# –ï–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
__all__ = [
    'verify_user',
    'verify_telegram_mini_app_user',
    'get_user_data',
    'validate_telegram_data',
    'verify_telegram_webapp_data',
    'extract_user_from_webapp_data',
    'create_fallback_user_data',
    'create_user_safe',
    'update_user_data'
]