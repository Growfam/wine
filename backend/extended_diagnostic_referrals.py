#!/usr/bin/env python3
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ WINIX
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Flask –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
"""

import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
from flask import Flask

app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –¥–æ–¥–∞—Ç–∫—É
with app.app_context():
    from supabase_client import supabase
    from referrals.controllers.referral_controller import ReferralController
    from referrals.controllers.bonus_controller import BonusController
    from referrals.controllers.earnings_controller import EarningsController
    from referrals.controllers.activity_controller import ActivityController
    from referrals.controllers.analytics_controller import AnalyticsController
    from referrals.controllers.draw_controller import DrawController
    from referrals.controllers.history_controller import HistoryController
    from badges.controllers.badge_controller import BadgeController
    from badges.controllers.task_controller import TaskController
    import json
    from datetime import datetime


    def print_section(title):
        print(f"\n{'=' * 60}")
        print(f"=== {title} ===")
        print('=' * 60)


    def print_json(data):
        print(json.dumps(data, indent=2, ensure_ascii=False))


    def test_all_controllers(user_id):
        """–¢–µ—Å—Ç—É—î –≤—Å—ñ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""

        print(f"\nüîç –†–û–ó–®–ò–†–ï–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê {user_id}")

        # 1. BONUS CONTROLLER
        print_section("BONUS CONTROLLER")
        try:
            bonus_history = BonusController.get_bonus_history(user_id)
            print(f"‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤: {bonus_history['total_bonuses']} –±–æ–Ω—É—Å—ñ–≤, —Å—É–º–∞: {bonus_history['total_amount']}")
            if bonus_history['bonuses']:
                print("–û—Å—Ç–∞–Ω–Ω—ñ–π –±–æ–Ω—É—Å:")
                print_json(bonus_history['bonuses'][0])
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ BonusController: {str(e)}")

        # 2. EARNINGS CONTROLLER
        print_section("EARNINGS CONTROLLER")
        try:
            # –ó–∞—Ä–æ–±—ñ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            earnings = EarningsController.get_referral_earnings(user_id)
            print(f"‚úÖ –ó–∞—Ä–æ–±—ñ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:")
            print(
                f"   - Level 1: {earnings['summary']['level1Count']} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤, –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {earnings['summary']['level1TotalEarnings']}")
            print(
                f"   - Level 2: {earnings['summary']['level2Count']} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤, –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {earnings['summary']['level2TotalEarnings']}")

            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤
            earnings_summary = EarningsController.get_earnings_summary(user_id)
            print(f"‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏:")
            print_json(earnings_summary['total_earnings'])
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ EarningsController: {str(e)}")

        # 3. ACTIVITY CONTROLLER
        print_section("ACTIVITY CONTROLLER")
        try:
            # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            activity = ActivityController.get_referral_activity(user_id)
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:")
            print(f"   - Level 1: {len(activity['level1Activity'])} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤")
            print(f"   - Level 2: {len(activity['level2Activity'])} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤")

            # –ó–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            summary = ActivityController.get_activity_summary(user_id)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:")
            print(f"   - –í—Å—å–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {summary['totalReferrals']}")
            print(f"   - –ê–∫—Ç–∏–≤–Ω–∏—Ö: {summary['activeReferrals']}")
            print(f"   - –ö–æ–Ω–≤–µ—Ä—Å—ñ—è: {summary['conversionRate']:.2f}%")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ActivityController: {str(e)}")

        # 4. ANALYTICS CONTROLLER
        print_section("ANALYTICS CONTROLLER")
        try:
            # –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞—Ä–æ–±—ñ—Ç–∫–∏
            total_earnings = AnalyticsController.get_total_earnings(user_id)
            print(f"‚úÖ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞—Ä–æ–±—ñ—Ç–∫—ñ–≤:")
            print_json(total_earnings)

            # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            top_referrals = AnalyticsController.get_top_referrals(user_id, limit=3)
            print(f"‚úÖ –¢–æ–ø-3 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:")
            for ref in top_referrals.get('top_referrals', []):
                print(f"   - {ref['id']}: –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ {ref.get('earnings', 0)}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ AnalyticsController: {str(e)}")

        # 5. DRAW CONTROLLER
        print_section("DRAW CONTROLLER")
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—á–∞—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö
            draws_stats = DrawController.get_draws_participation_stats(user_id)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:")
            print(f"   - –í—Å—å–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {draws_stats['totalDrawsCount']}")
            print(f"   - –£—á–∞—Å—Ç–µ–π: {draws_stats['totalParticipationCount']}")
            print(f"   - –í–∏–≥—Ä–∞—à—ñ–≤: {draws_stats['totalWinCount']}")
            print(f"   - –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–∑: {draws_stats['totalPrize']}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ DrawController: {str(e)}")

        # 6. HISTORY CONTROLLER
        print_section("HISTORY CONTROLLER")
        try:
            # –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π
            history = HistoryController.get_referral_history(user_id, {'limit': 5})
            print(f"‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π (–æ—Å—Ç–∞–Ω–Ω—ñ 5):")
            print(f"   - –í—Å—å–æ–≥–æ –ø–æ–¥—ñ–π: {history['meta']['total_events']}")
            for event in history.get('history', [])[:3]:
                print(f"   - {event['type']}: {event.get('description', 'No description')}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HistoryController: {str(e)}")

        # 7. BADGE CONTROLLER
        print_section("BADGE CONTROLLER")
        try:
            # –ë–µ–π–¥–∂—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            badges = BadgeController.get_user_badges(user_id)
            print(f"‚úÖ –ë–µ–π–¥–∂—ñ:")
            print(f"   - –í—Å—å–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {badges['total_referrals']}")
            print(f"   - –û—Ç—Ä–∏–º–∞–Ω–æ –±–µ–π–¥–∂—ñ–≤: {len(badges['badges'])}")
            print(f"   - –î–æ—Å—Ç—É–ø–Ω–æ –±–µ–π–¥–∂—ñ–≤: {len(badges['available_badges'])}")

            for badge in badges['badges']:
                print(f"   - {badge['badge_type']}: {'‚úÖ Claimed' if badge['claimed'] else '‚ùå Not claimed'}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ BadgeController: {str(e)}")

        # 8. TASK CONTROLLER
        print_section("TASK CONTROLLER")
        try:
            # –ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            tasks = TaskController.get_user_tasks(user_id)
            print(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è:")
            for task in tasks.get('tasks', []):
                progress = task.get('completion_percentage', 0)
                status = '‚úÖ' if task['completed'] else f"{progress}%"
                print(f"   - {task.get('title', task['task_type'])}: {status}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ TaskController: {str(e)}")


    def check_table_data():
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—è—Ö"""
        print_section("–ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–ù–ò–• –í –¢–ê–ë–õ–ò–¶–Ø–•")

        tables = [
            'referrals',
            'direct_bonuses',
            'percentage_rewards',
            'referral_activities',
            'user_badges',
            'user_tasks',
            'draws',
            'draw_participants'
        ]

        for table in tables:
            try:
                result = supabase.table(table).select("*", count='exact').limit(1).execute()
                count = result.count if hasattr(result, 'count') else len(result.data)
                print(f"‚úÖ {table}: {count} –∑–∞–ø–∏—Å—ñ–≤")
            except Exception as e:
                print(f"‚ùå {table}: –ü–æ–º–∏–ª–∫–∞ - {str(e)}")


    def main():
        print("–†–û–ó–®–ò–†–ï–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–á –°–ò–°–¢–ï–ú–ò WINIX")
        print("=" * 60)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—è—Ö
        check_table_data()

        # –ó–∞–ø–∏—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = input("\n–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ").strip()

        if user_id:
            test_all_controllers(user_id)

        print("\n–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


    if __name__ == "__main__":
        main()