"""
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª Flask –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ WINIX
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é async/await —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
üî• WINIX Quests System Integration (–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è) üî•
"""

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import os
import sys
import logging
import json
import time
import uuid
import asyncio
from datetime import datetime, timezone

import traceback

# –°—Ç–æ—Ä–æ–Ω–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
from flask import Flask, render_template, request, jsonify, send_from_directory, g
from flask_cors import CORS
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ–¥–∞—Ç–∫—É –¥–æ —à–ª—è—Ö—É Python
app_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(app_dir)
sys.path.insert(0, root_dir)
sys.path.insert(0, app_dir)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∑–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É
BACKEND_DIR = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(BACKEND_DIR)

# –î–æ–¥–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é backend –¥–æ —à–ª—è—Ö—É Python –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
if BACKEND_DIR not in sys.path:
    sys.path.append(BACKEND_DIR)

# üéØ WINIX Quests System Integration –∑ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
WINIX_QUESTS_AVAILABLE = False
QUESTS_DIAGNOSTICS_AVAILABLE = False
winix = None
initialization_result = {"success_rate": 0, "message": "Not initialized"}
_winix_initialization_attempted = False

# –Ü–º–ø–æ—Ä—Ç –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
try:
    from quests.routes import register_quests_routes, diagnose_quests_routes
    QUESTS_DIAGNOSTICS_AVAILABLE = True
    logger.info("‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó quests –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    register_quests_routes = None
    diagnose_quests_routes = None
    QUESTS_DIAGNOSTICS_AVAILABLE = False

def safe_diagnose_winix_import():
    """–ë–µ–∑–ø–µ—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WINIX —ñ–º–ø–æ—Ä—Ç—É –±–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"""
    global WINIX_QUESTS_AVAILABLE, winix, initialization_result

    logger.info("üîç === –ë–ï–ó–ü–ï–ß–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê WINIX QUESTS ===")

    try:
        # –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—è
        import importlib.util
        quests_spec = importlib.util.find_spec("quests")

        if quests_spec is None:
            logger.warning("‚ùå –ú–æ–¥—É–ª—å 'quests' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ sys.path")
            logger.info(f"üìÅ –ü–æ—Ç–æ—á–Ω—ñ —à–ª—è—Ö–∏: {sys.path[:3]}...")
            return False

        logger.info("‚úÖ –ú–æ–¥—É–ª—å 'quests' –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –ö—Ä–æ–∫ 2: –ë–∞–∑–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç –±–µ–∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤–∏–π –º–æ–¥—É–ª—å, –±–µ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è async –æ–ø–µ—Ä–∞—Ü—ñ–π
            import quests
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç quests –º–æ–¥—É–ª—è —É—Å–ø—ñ—à–Ω–∏–π")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            if hasattr(quests, '__version__'):
                logger.info(f"üì¶ –í–µ—Ä—Å—ñ—è quests: {quests.__version__}")

            WINIX_QUESTS_AVAILABLE = True
            initialization_result = {"success_rate": 50, "message": "Basic import successful, full init pending"}
            return True

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É quests: {e}")
            logger.error(traceback.format_exc())
            return False

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ WINIX: {e}")
        logger.error(traceback.format_exc())
        return False

def lazy_initialize_winix():
    """–í—ñ–¥–∫–ª–∞–¥–µ–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WINIX –∑ –æ–±—Ä–æ–±–∫–æ—é event loop"""
    global winix, initialization_result, _winix_initialization_attempted

    if _winix_initialization_attempted:
        return WINIX_QUESTS_AVAILABLE

    _winix_initialization_attempted = True

    if not WINIX_QUESTS_AVAILABLE:
        logger.warning("‚ö†Ô∏è WINIX –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        return False

    try:
        logger.info("üöÄ === –í–Ü–î–ö–õ–ê–î–ï–ù–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø WINIX QUESTS SYSTEM ===")

        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        try:
            from quests import winix as winix_module
            winix = winix_module
            logger.info("‚úÖ winix –æ–±'—î–∫—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ winix –æ–±'—î–∫—Ç: {e}")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏
        available_methods = []
        for method in ['register_routes', 'health_check', 'version']:
            if hasattr(winix, method):
                available_methods.append(method)
                logger.info(f"‚úÖ winix.{method} –¥–æ—Å—Ç—É–ø–Ω–∏–π")

        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        success_rate = min(100, len(available_methods) * 30 + 10)  # –ë–∞–∑–æ–≤–æ 10% + –ø–æ 30% –∑–∞ –º–µ—Ç–æ–¥
        initialization_result = {
            "success_rate": success_rate,
            "message": f"Lazy initialization completed with {len(available_methods)} methods",
            "available_methods": available_methods,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }

        logger.info(f"üéâ WINIX System —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –û—Ü—ñ–Ω–∫–∞: {success_rate}%")
        return True

    except Exception as e:
        logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WINIX: {e}")
        logger.error(traceback.format_exc())
        initialization_result = {
            "success_rate": 0,
            "message": f"Lazy initialization error: {e}",
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        return False

def safe_register_quests_routes(app):
    """–ë–µ–∑–ø–µ—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è quests –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é"""
    logger.info("üéØ === –ë–ï–ó–ü–ï–ß–ù–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø QUESTS –ú–ê–†–®–†–£–¢–Ü–í ===")

    if not WINIX_QUESTS_AVAILABLE:
        logger.warning("‚ö†Ô∏è WINIX –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é quests –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
        return False

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WINIX —è–∫—â–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏
    lazy_initialize_winix()

    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ winix.register_routes
    if winix and hasattr(winix, 'register_routes'):
        try:
            logger.info("üîÑ –°–ø—Ä–æ–±–∞ winix.register_routes...")
            result = winix.register_routes(app)
            if result:
                logger.info("‚úÖ winix.register_routes —É—Å–ø—ñ—à–Ω–æ!")

                # –î–æ–¥–∞—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                if QUESTS_DIAGNOSTICS_AVAILABLE and diagnose_quests_routes:
                    try:
                        diagnosis = diagnose_quests_routes(app)
                        logger.info(f"üìä –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {diagnosis['quests_routes']} –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å")

                        if diagnosis.get('recommendations'):
                            logger.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
                            for rec in diagnosis['recommendations']:
                                logger.warning(f"   ‚Ä¢ {rec}")
                    except Exception as diag_e:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_e}")

                return True
            else:
                logger.warning("‚ö†Ô∏è winix.register_routes –ø–æ–≤–µ—Ä–Ω—É–≤ False")
        except Exception as e:
            logger.error(f"‚ùå winix.register_routes –ø–æ–º–∏–ª–∫–∞: {e}")

            # –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–∫–∏
            error_msg = str(e).lower()
            if "already registered" in error_msg:
                logger.error("üî¥ –í–ò–Ø–í–õ–ï–ù–û –ö–û–ù–§–õ–Ü–ö–¢ BLUEPRINT!")
                if "auth" in error_msg:
                    logger.error("üí° –†—ñ—à–µ–Ω–Ω—è: –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞–∑–≤—É Blueprint –≤ auth_routes.py –Ω–∞ 'quests_auth'")
                logger.error(f"üìã –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏: {e}")

    # Fallback —á–µ—Ä–µ–∑ –ø—Ä—è–º—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    if register_quests_routes:
        try:
            logger.info("üîÑ –°–ø—Ä–æ–±–∞ register_quests_routes...")
            result = register_quests_routes(app)

            if result:
                logger.info("‚úÖ register_quests_routes —É—Å–ø—ñ—à–Ω–æ!")

                # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è fallback —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                if QUESTS_DIAGNOSTICS_AVAILABLE and diagnose_quests_routes:
                    try:
                        diagnosis = diagnose_quests_routes(app)
                        logger.info(f"üìä Fallback –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {diagnosis['quests_routes']} –º–∞—Ä—à—Ä—É—Ç—ñ–≤")

                        if diagnosis.get('duplicate_endpoints'):
                            logger.warning(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(diagnosis['duplicate_endpoints'])} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ endpoint'—ñ–≤")

                        if diagnosis.get('blueprint_conflicts'):
                            logger.error(f"üî¥ –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ Blueprint'—ñ–≤: {diagnosis['blueprint_conflicts']}")
                    except Exception as diag_e:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ fallback –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_e}")

                return True
            else:
                logger.error("‚ùå register_quests_routes –ø–æ–≤–µ—Ä–Ω—É–≤ False")
        except Exception as e:
            logger.error(f"‚ùå register_quests_routes –ø–æ–º–∏–ª–∫–∞: {e}")
            logger.error(f"üìã –¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")

    # –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - —Ä—É—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    logger.info("üîÑ –°–ø—Ä–æ–±–∞ —Ä—É—á–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Blueprint'—ñ–≤...")
    return register_quests_blueprints_manually(app)

def register_quests_routes_fallback(app):
    """Fallback —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ quests.routes"""
    try:
        if register_quests_routes:
            return register_quests_routes(app)
        else:
            logger.warning("‚ö†Ô∏è register_quests_routes —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
    except Exception as e:
        logger.error(f"Fallback register_quests_routes –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def register_quests_blueprints_manually(app):
    """–†—É—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö Blueprint'—ñ–≤ –∑ quests —Å–∏—Å—Ç–µ–º–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    logger.info("üîß === –†–£–ß–ù–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø QUESTS BLUEPRINT'–Ü–í ===")

    registered_count = 0

    # –°–ø–∏—Å–æ–∫ Blueprint'—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    blueprints_to_register = [
        ('quests.routes.user_routes', 'user_bp', '/api/user'),
        ('quests.routes.daily_routes', 'daily_bp', '/api/daily'),
        ('quests.routes.analytics_routes', 'analytics_bp', '/api/analytics'),
        ('quests.routes.flex_routes', 'flex_bp', '/api/flex'),
        ('quests.routes.tasks_routes', 'tasks_bp', '/api/tasks'),
        ('quests.routes.transaction_routes', 'transaction_bp', '/api/transactions'),
        ('quests.routes.verification_routes', 'verification_bp', '/api/verify'),
        ('quests.routes.wallet_routes', 'wallet_bp', '/api/wallet')
    ]

    for module_name, blueprint_name, url_prefix in blueprints_to_register:
        try:
            logger.info(f"üîÑ –†–µ—î—Å—Ç—Ä—É—î–º–æ {module_name}.{blueprint_name}...")

            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å
            module = __import__(module_name, fromlist=[blueprint_name])

            # –û—Ç—Ä–∏–º—É—î–º–æ Blueprint
            blueprint = getattr(module, blueprint_name)

            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
            app.register_blueprint(blueprint, url_prefix=url_prefix)

            logger.info(f"‚úÖ {blueprint_name} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º {url_prefix}")
            registered_count += 1

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó {module_name}.{blueprint_name}: {e}")
            if "already registered" in str(e).lower():
                logger.error(f"üî¥ Blueprint –∫–æ–Ω—Ñ–ª—ñ–∫—Ç: {blueprint_name}")

    logger.info(f"üìä –†—É—á–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {registered_count} Blueprint'—ñ–≤")
    return registered_count > 0

# –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–µ–∑–ø–µ—á–Ω—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
safe_diagnose_winix_import()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ UUID
def is_valid_uuid(uuid_string):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ä—è–¥–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏–º UUID"""
    try:
        uuid_obj = uuid.UUID(str(uuid_string).strip())
        return True
    except (ValueError, AttributeError, TypeError):
        return False

def setup_winix_routes(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WINIX –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é"""

    logger.info("üõ†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WINIX –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")

    @app.route('/api/winix/health', methods=['GET'])
    def winix_health_check():
        """Health check –¥–ª—è WINIX Quests System –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é"""
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WINIX –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ —è–∫—â–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏
            if WINIX_QUESTS_AVAILABLE:
                lazy_initialize_winix()

            health_data = {
                "winix_available": WINIX_QUESTS_AVAILABLE,
                "initialization_result": initialization_result,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }

            if WINIX_QUESTS_AVAILABLE and winix:
                try:
                    if hasattr(winix, 'health_check'):
                        logger.info("üîç –í–∏–∫–ª–∏–∫–∞—î–º–æ winix.health_check()")
                        health = winix.health_check()
                        health_data["winix_health"] = health
                        logger.info(f"‚úÖ Health check —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {health}")
                    else:
                        logger.warning("‚ö†Ô∏è winix.health_check() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                        health_data["winix_health"] = {"status": "method_unavailable"}

                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ health_check: {e}")
                    health_data["winix_health"] = {"status": "error", "error": str(e)}
            else:
                health_data["winix_health"] = {"status": "unavailable"}

            return jsonify({
                "status": "ok",
                **health_data
            })

        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ health check: {e}")
            return jsonify({
                "status": "error",
                "error": str(e),
                "winix_available": WINIX_QUESTS_AVAILABLE
            }), 500

    @app.route('/api/winix/info', methods=['GET'])
    def winix_info():
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ WINIX Quests System"""
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WINIX –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ —è–∫—â–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏
            if WINIX_QUESTS_AVAILABLE:
                lazy_initialize_winix()

            info_data = {
                "winix_available": WINIX_QUESTS_AVAILABLE,
                "initialization_result": initialization_result
            }

            if WINIX_QUESTS_AVAILABLE:
                try:
                    import quests
                    if hasattr(quests, 'get_package_info'):
                        info = quests.get_package_info()
                        info_data.update(info)
                        logger.info(f"üì¶ Package info: {info}")
                    else:
                        info_data.update({
                            "name": "WINIX Quests",
                            "version": getattr(quests, '__version__', 'unknown'),
                            "status": "info_basic"
                        })
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è get_package_info –ø–æ–º–∏–ª–∫–∞: {e}")
                    info_data.update({
                        "name": "WINIX Quests",
                        "version": "unknown",
                        "status": "info_unavailable"
                    })
            else:
                info_data.update({
                    "name": "WINIX Quests (Unavailable)",
                    "version": "0.0.0",
                    "status": "unavailable"
                })

            return jsonify(info_data)

        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ winix info: {e}")
            return jsonify({
                "status": "error",
                "error": str(e)
            }), 500

    @app.route('/api/winix/test', methods=['GET'])
    def winix_quick_test():
        """–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç WINIX —Å–∏—Å—Ç–µ–º–∏"""
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WINIX –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ —è–∫—â–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏
            if WINIX_QUESTS_AVAILABLE:
                lazy_initialize_winix()

            test_data = {
                "winix_available": WINIX_QUESTS_AVAILABLE,
                "initialization_result": initialization_result,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }

            if WINIX_QUESTS_AVAILABLE:
                try:
                    import quests
                    if hasattr(quests, 'quick_test'):
                        logger.info("üß™ –ó–∞–ø—É—Å–∫–∞—î–º–æ quick_test()")
                        test_result = quests.quick_test()
                        test_data["test_results"] = test_result
                        logger.info(f"‚úÖ Test —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_result}")
                    else:
                        test_data["test_results"] = {
                            "status": "test_method_unavailable",
                            "message": "quick_test method not found"
                        }
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è quick_test –ø–æ–º–∏–ª–∫–∞: {e}")
                    test_data["test_results"] = {
                        "status": "test_error",
                        "message": str(e)
                    }
            else:
                test_data["test_results"] = {
                    "status": "winix_unavailable"
                }

            return jsonify({
                "status": "success",
                **test_data
            })

        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ winix test: {e}")
            return jsonify({
                "status": "error",
                "error": str(e)
            }), 500

    @app.route('/api/winix/diagnosis', methods=['GET'])
    def winix_diagnosis():
        """–ü–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WINIX —Å–∏—Å—Ç–µ–º–∏"""
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ WINIX –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ —è–∫—â–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏
        if WINIX_QUESTS_AVAILABLE:
            lazy_initialize_winix()

        diagnosis = {
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "winix_available": WINIX_QUESTS_AVAILABLE,
            "initialization_result": initialization_result,
            "winix_object": None,
            "available_methods": [],
            "services_status": {},
            "models_status": {}
        }

        if WINIX_QUESTS_AVAILABLE and winix:
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ winix –æ–±'—î–∫—Ç
            diagnosis["winix_object"] = {
                "type": str(type(winix)),
                "attributes": [attr for attr in dir(winix) if not attr.startswith('_')]
            }

            # –î–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏
            for method in ['health_check', 'register_routes', 'version']:
                diagnosis["available_methods"].append({
                    "method": method,
                    "available": hasattr(winix, method)
                })

            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤
            if hasattr(winix, 'services'):
                try:
                    for service_name, service in winix.services.items():
                        diagnosis["services_status"][service_name] = {
                            "available": service is not None,
                            "type": str(type(service)) if service else None
                        }
                except Exception as e:
                    diagnosis["services_status"] = {"error": str(e)}

            # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
            if hasattr(winix, 'models'):
                diagnosis["models_status"] = "Available"
            else:
                diagnosis["models_status"] = "Not available"

        return jsonify(diagnosis)

    @app.route('/api/winix/routes-diagnosis', methods=['GET'])
    def winix_routes_diagnosis():
        """–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å"""
        try:
            if not QUESTS_DIAGNOSTICS_AVAILABLE:
                return jsonify({
                    "status": "error",
                    "message": "–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "quests_available": WINIX_QUESTS_AVAILABLE,
                    "diagnostics_available": QUESTS_DIAGNOSTICS_AVAILABLE
                }), 503

            # –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            diagnosis = diagnose_quests_routes(app)

            # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            diagnosis.update({
                "winix_available": WINIX_QUESTS_AVAILABLE,
                "diagnostics_available": QUESTS_DIAGNOSTICS_AVAILABLE,
                "initialization_result": initialization_result,
                "timestamp": datetime.now(timezone.utc).isoformat()
            })

            return jsonify({
                "status": "success",
                "diagnosis": diagnosis
            }), 200

        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {e}")
            return jsonify({
                "status": "error",
                "message": str(e),
                "error_type": type(e).__name__,
                "diagnostics_available": QUESTS_DIAGNOSTICS_AVAILABLE
            }), 500

    logger.info("‚úÖ WINIX –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

def create_app(config_name=None):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Flask –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é"""

    logger.info("üè≠ === –°–¢–í–û–†–ï–ù–ù–Ø FLASK –ó–ê–°–¢–û–°–£–ù–ö–£ ===")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
    try:
        from settings.config import get_config
        config = get_config()
        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {type(config)}")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ config: {e}")
        config = None

    if config is None:
        logger.warning("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask –∑ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —à–ª—è—Ö–∞–º–∏ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤ —Ç–∞ —Å—Ç–∞—Ç–∏–∫–∏
    app = Flask(
        __name__,
        template_folder=os.path.join(BASE_DIR, 'frontend'),
        static_folder=os.path.join(BASE_DIR, 'frontend'),
        static_url_path=''  # –ü–æ—Ä–æ–∂–Ω—ñ–π —à–ª—è—Ö –¥–æ–∑–≤–æ–ª—è—î –¥–æ—Å—Ç—É–ø –¥–æ —Ñ–∞–π–ª—ñ–≤ –Ω–∞–ø—Ä—è–º—É
    )
    logger.info("‚úÖ Flask –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    try:
        if config:
            app.config.from_object(config)
            app.secret_key = config.SECRET_KEY
            logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        else:
            raise Exception("Config is None")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")
        # –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        app.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
        app.config['DEBUG'] = os.environ.get('FLASK_ENV') == 'development'

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///winix.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ CORS
    setup_cors(app)

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤
    setup_request_handlers(app)

    # –î–æ–¥–∞—î–º–æ health check endpoint
    add_health_check(app)

    # üî• –ó–ê–í–ñ–î–ò –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ WINIX –º–∞—Ä—à—Ä—É—Ç–∏ (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ)
    setup_winix_routes(app)

    # üéØ –†–ï–Ñ–°–¢–†–£–Ñ–ú–û –ú–ê–†–®–†–£–¢–ò API (–í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê)
    register_api_routes(app)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    register_utility_routes(app)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    register_static_routes(app)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    register_page_routes(app)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    setup_staking_routes(app)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
    register_tutorial_routes(app)

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
    register_error_handlers(app)

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ OPTIONS –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è CORS preflight
    @app.route('/', defaults={'path': ''}, methods=['OPTIONS'])
    @app.route('/<path:path>', methods=['OPTIONS'])
    def handle_options(path):
        return '', 200


    # –î–æ–¥–∞—î–º–æ after_request –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è JS —Ñ–∞–π–ª—ñ–≤ —ñ CORS –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    @app.after_request
    def add_headers(response):


        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ origins
        origin = request.headers.get('Origin')

        # –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
        allowed_origins = [
            'https://winixbot.com',
            'https://web.telegram.org',
            'http://localhost:8080',
            'http://localhost:3000',
            'http://127.0.0.1:8080'
        ]

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ origin
        if origin in allowed_origins:
            response.headers['Access-Control-Allow-Origin'] = origin
        else:
            # –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Å—ñ origins, –∞–ª–µ –ë–ï–ó credentials
            response.headers['Access-Control-Allow-Origin'] = '*'
            # –í–∏–¥–∞–ª—è—î–º–æ credentials –¥–ª—è wildcard origin
            response.headers.pop('Access-Control-Allow-Credentials', None)

        # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
        response.headers[
            'Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Telegram-User-Id'

        # Credentials —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö origins
        if origin in allowed_origins:
            response.headers['Access-Control-Allow-Credentials'] = 'true'

        response.headers['Access-Control-Max-Age'] = '86400'

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MIME —Ç–∏–ø—É –¥–ª—è JS —Ñ–∞–π–ª—ñ–≤
        if request.path.endswith('.js'):
            response.headers['Content-Type'] = 'application/javascript'

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –±–µ–∑–ø–µ–∫–∏
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-XSS-Protection'] = '1; mode=block'

        # Content-Security-Policy –¥–ª—è Telegram
        response.headers[
            'Content-Security-Policy'] = "frame-ancestors 'self' https://web.telegram.org https://telegram.org *"

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
        if request.path.startswith('/api/'):
            response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
            response.headers['Pragma'] = 'no-cache'
            response.headers['Expires'] = '0'
        else:
            response.headers['Cache-Control'] = 'public, max-age=3600'

        return response

    logger.info("üèÅ Flask app —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –≥–æ—Ç–æ–≤–æ –¥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è")
    return app

def setup_cors(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS –¥–ª—è API"""
    # –û–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è CORS –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é
    CORS(app,
         resources={r"/*": {"origins": "*"}},
         supports_credentials=True,
         expose_headers=["Content-Type", "X-CSRFToken", "Authorization"],
         allow_headers=["Content-Type", "X-Requested-With", "Authorization",
                        "X-Telegram-User-Id", "Accept", "Origin", "Cache-Control"])
    logger.info("‚úÖ CORS –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")


def setup_request_handlers(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó"""

    @app.before_request
    def log_request_info():
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É
        g.start_time = time.time()
        logger.info(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {request.method} {request.path}")

        # üéØ WINIX Analytics Middleware (–±–µ–∑–ø–µ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        if WINIX_QUESTS_AVAILABLE and request.path.startswith('/api/'):
            try:
                # –Ø–∫—â–æ —Ü–µ API –∑–∞–ø–∏—Ç –¥–æ WINIX –º–∞—Ä—à—Ä—É—Ç—ñ–≤
                if any(part in request.path for part in [
                    'daily', 'flex', 'tasks', 'transactions', 'verify', 'wallet', 'winix'
                ]):
                    try:
                        from supabase_client import create_analytics_event

                        # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∞–±–æ —à–ª—è—Ö—É
                        user_id = request.headers.get('X-Telegram-User-Id')
                        if not user_id and '/user/' in request.path:
                            # –í–∏—Ç—è–≥—É—î–º–æ –∑ URL
                            parts = request.path.split('/')
                            try:
                                user_idx = parts.index('user') + 1
                                if user_idx < len(parts):
                                    user_id = parts[user_idx]
                            except (ValueError, IndexError):
                                pass

                        if user_id:
                            create_analytics_event(
                                telegram_id=user_id,
                                event_type="api_request",
                                event_data={
                                    "path": request.path,
                                    "method": request.method,
                                    "ip": request.remote_addr,
                                    "user_agent": request.headers.get('User-Agent', '')[:100]
                                }
                            )
                    except ImportError:
                        pass  # supabase_client –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
            except Exception as e:
                # –ù–µ –±–ª–æ–∫—É—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
                logger.debug(f"WINIX analytics error: {e}")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            import i18n
            g.language = i18n.get_user_language()
        except ImportError:
            g.language = 'uk'  # –ú–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏: {str(e)}")
            g.language = 'uk'

    @app.after_request
    def log_response_info(response):
        # –õ–æ–≥—É—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        if hasattr(g, 'start_time'):
            execution_time = time.time() - g.start_time
            logger.info(f"üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status_code} (—á–∞—Å: {execution_time:.4f}s)")
        return response


def add_health_check(app):
    """–î–æ–¥–∞—î endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É API"""

    @app.route('/api/health', methods=['GET'])
    def health_check():
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É API"""
        health_data = {
            "status": "ok",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "service": "WINIX API",
            "winix_available": WINIX_QUESTS_AVAILABLE,
            "initialization_result": initialization_result
        }

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ WINIX —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if WINIX_QUESTS_AVAILABLE:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
            lazy_initialize_winix()

            if winix:
                try:
                    if hasattr(winix, 'health_check'):
                        winix_health = winix.health_check()
                        health_data["winix"] = {
                            "available": True,
                            "components": {
                                name: status.get('loaded', False) if isinstance(status, dict) else status
                                for name, status in winix_health.get('components', {}).items()
                            }
                        }
                    else:
                        health_data["winix"] = {"available": True, "status": "basic"}
                except Exception as e:
                    health_data["winix"] = {
                        "available": False,
                        "error": str(e)
                    }
            else:
                health_data["winix"] = {"available": False, "status": "not_initialized"}
        else:
            health_data["winix"] = {"available": False}

        return jsonify(health_data)

    # –ü—Ä–æ—Å—Ç–∏–π health check –æ–∫—Ä–µ–º–æ
    @app.route('/health', methods=['GET'])
    def simple_health():
        return 'OK', 200


def register_api_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö API –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é"""

    logger.info("üõ£Ô∏è === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø API –ú–ê–†–®–†–£–¢–Ü–í (–ë–ï–ó–ü–ï–ß–ù–ê –í–ï–†–°–Ü–Ø) ===")

    def log_registration_result(name, success, error=None):
        if success:
            logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ {name} —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤ {name}: {error}")

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —É—Å–ø—ñ—à–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    registered_successfully = []
    registration_errors = []

    # üî• 1. –ü–†–Ü–û–†–ò–¢–ï–¢: WINIX/QUESTS –ú–ê–†–®–†–£–¢–ò (–±–µ–∑–ø–µ—á–Ω–æ)
    try:
        logger.info("üéØ === –ü–û–ß–ê–¢–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á WINIX/QUESTS –ú–ê–†–®–†–£–¢–Ü–í ===")

        if safe_register_quests_routes(app):
            registered_successfully.append("WINIX/Quests System")
        else:
            registration_errors.append("WINIX/Quests: Safe registration failed")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó WINIX: {e}")
        registration_errors.append(f"WINIX/Quests: Critical error: {e}")

    # üî• 2. –û–°–ù–û–í–ù–Ü –°–ò–°–¢–ï–ú–ù–Ü –ú–ê–†–®–†–£–¢–ò (–∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    try:
        from raffles.routes import register_raffles_routes
        if register_raffles_routes(app):
            registered_successfully.append("Raffles")
        else:
            registration_errors.append("Raffles: returned False")
    except Exception as e:
        registration_errors.append(f"Raffles: {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö)
    try:
        from auth.routes import register_auth_routes
        register_auth_routes(app)
        registered_successfully.append("Auth (original)")
    except Exception as e:
        registration_errors.append(f"Auth (original): {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö)
    try:
        from users.routes import register_user_routes
        register_user_routes(app)
        registered_successfully.append("Users (original)")
    except Exception as e:
        registration_errors.append(f"Users (original): {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≥–∞–º–∞–Ω—Ü—è (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö)
    try:
        from wallet.routes import register_wallet_routes
        register_wallet_routes(app)
        registered_successfully.append("Wallet (original)")
    except Exception as e:
        registration_errors.append(f"Wallet (original): {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    try:
        from transactions.routes import register_transactions_routes
        register_transactions_routes(app)
        registered_successfully.append("Transactions")
    except Exception as e:
        registration_errors.append(f"Transactions: {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
    try:
        from referrals.routes import referrals_bp
        app.register_blueprint(referrals_bp, url_prefix='/api/referrals')
        registered_successfully.append("Referrals")
    except Exception as e:
        registration_errors.append(f"Referrals: {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –±–µ–π–¥–∂—ñ–≤ —Ç–∞ –∑–∞–≤–¥–∞–Ω—å
    try:
        from badges.routes import badges_bp
        app.register_blueprint(badges_bp, url_prefix='/api')
        registered_successfully.append("Badges")
    except Exception as e:
        registration_errors.append(f"Badges: {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from admin.routes import register_admin_routes
        register_admin_routes(app)
        registered_successfully.append("Admin")
    except Exception as e:
        registration_errors.append(f"Admin: {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    try:
        from stats.routes import register_stats_routes
        register_stats_routes(app)
        registered_successfully.append("Stats")
    except Exception as e:
        registration_errors.append(f"Stats: {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ Telegram webhook
    try:
        from telegram_webhook import register_telegram_routes
        register_telegram_routes(app)
        registered_successfully.append("Telegram Webhook")
    except Exception as e:
        registration_errors.append(f"Telegram Webhook: {e}")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ Telegram API
    try:
        from telegram_api import register_telegram_api_routes
        register_telegram_api_routes(app)
        registered_successfully.append("Telegram API")
    except Exception as e:
        registration_errors.append(f"Telegram API: {e}")

    # üìä –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
    logger.info("üìä === –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –ú–ê–†–®–†–£–¢–Ü–í ===")
    logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ({len(registered_successfully)}):")
    for system in registered_successfully:
        logger.info(f"   üü¢ {system}")

    if registration_errors:
        logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ({len(registration_errors)}):")
        for error in registration_errors:
            logger.warning(f"   üî¥ {error}")

    # –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    total_routes = len(list(app.url_map.iter_rules()))
    api_routes = len([r for r in app.url_map.iter_rules() if r.rule.startswith('/api/')])

    logger.info(f"üìã –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç—ñ–≤:")
    logger.info(f"   üìç –í—Å—å–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {total_routes}")
    logger.info(f"   üîó API –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {api_routes}")
    logger.info(f"   üéØ –°–∏—Å—Ç–µ–º–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(registered_successfully)}/{len(registered_successfully) + len(registration_errors)}")

    # –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if api_routes == 0:
        logger.error("üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–Ü –û–î–ù–û–ì–û API –ú–ê–†–®–†–£–¢–£ –ù–ï –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û!")
        return False

    if len(registered_successfully) == 0:
        logger.error("üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–Ü –û–î–ù–û–á –°–ò–°–¢–ï–ú–ò –ù–ï –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û!")
        return False

    logger.info("üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è API –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    return True


def register_utility_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏—Ö —Ç–∞ —É—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""
    # –Ü–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    try:
        from supabase_client import test_supabase_connection, supabase, test_winix_integration
    except ImportError:
        test_supabase_connection = lambda: {"status": "error", "message": "–§—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        test_winix_integration = lambda: {"status": "error", "message": "–§—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        supabase = None

    @app.route('/api/ping')
    def ping():
        """–ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –¥–æ–¥–∞—Ç–∫–∞"""
        return "pong"

    @app.route('/api/raffles-test')
    def api_raffles_test():
        """–¢–µ—Å—Ç–æ–≤–∏–π —à–ª—è—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤"""
        return jsonify({
            "status": "success",
            "message": "–¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø—Ä–∞—Ü—é—î"
        })

    @app.route('/debug')
    def debug():
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase
        supabase_test = test_supabase_connection()

        # üéØ –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É WINIX
        winix_test = {}
        if WINIX_QUESTS_AVAILABLE:
            try:
                winix_test = test_winix_integration()
            except:
                winix_test = {"status": "error", "message": "WINIX —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"}
        else:
            winix_test = {"status": "unavailable", "message": "WINIX –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"}

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–ª—è—Ö–∏ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        assets_dir = os.path.join(BASE_DIR, 'frontend/assets')
        assets_exists = os.path.exists(assets_dir)

        chenel_dir = os.path.join(BASE_DIR, 'frontend/ChenelPNG')
        chenel_exists = os.path.exists(chenel_dir)

        static_dir = app.static_folder
        static_exists = os.path.exists(static_dir)

        template_dir = app.template_folder
        template_exists = os.path.exists(template_dir)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        index_html_exists = os.path.exists(os.path.join(template_dir, 'index.html'))
        original_index_html_exists = os.path.exists(os.path.join(template_dir, 'original-index.html'))
        raffles_html_exists = os.path.exists(os.path.join(template_dir, 'raffles.html'))

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append({
                "endpoint": rule.endpoint,
                "methods": list(rule.methods),
                "path": str(rule)
            })

        return jsonify({
            "status": "running",
            "winix_available": WINIX_QUESTS_AVAILABLE,
            "diagnostics_available": QUESTS_DIAGNOSTICS_AVAILABLE,
            "initialization_result": initialization_result,
            "environment": {
                "base_dir": BASE_DIR,
                "current_dir": os.getcwd(),
                "template_folder": template_dir,
                "template_folder_exists": template_exists,
                "static_folder": static_dir,
                "static_folder_exists": static_exists,
                "assets_folder": assets_dir,
                "assets_exists": assets_exists,
                "chenel_exists": chenel_exists,
                "index_html_exists": index_html_exists,
                "original_index_html_exists": original_index_html_exists,
                "raffles_html_exists": raffles_html_exists,
                "supabase_test": supabase_test,
                "winix_test": winix_test
            },
            "routes": routes[:20]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 20 –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        })

    @app.route('/api/debug', methods=['POST'])
    def debug_data():
        """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–ª—ñ—î–Ω—Ç–∞."""
        data = request.json
        logger.info(f"DEBUG DATA: {json.dumps(data)}")
        return jsonify({"status": "ok"})

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è JS —Ñ–∞–π–ª—ñ–≤
    @app.route('/debug/js-files')
    def debug_js_files():
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JS —Ñ–∞–π–ª—ñ–≤"""
        js_dir = os.path.join(BASE_DIR, 'frontend/js')
        referrals_dir = os.path.join(js_dir, 'referrals')
        api_dir = os.path.join(referrals_dir, 'api') if os.path.exists(referrals_dir) else None

        result = {
            'js_dir_exists': os.path.exists(js_dir),
            'js_files': [],
            'referrals_dir_exists': os.path.exists(referrals_dir),
            'referrals_files': [],
            'api_dir_exists': os.path.exists(api_dir) if api_dir else False,
            'api_files': []
        }

        if os.path.exists(js_dir):
            result['js_files'] = os.listdir(js_dir)

        if os.path.exists(referrals_dir):
            result['referrals_files'] = os.listdir(referrals_dir)

        if api_dir and os.path.exists(api_dir):
            result['api_files'] = os.listdir(api_dir)

        return jsonify(result)

    # –ù–æ–≤–∏–π –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è CORS
    @app.route('/api/cors-test', methods=['GET', 'POST', 'OPTIONS'])
    def cors_test():
        """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å CORS"""
        if request.method == 'OPTIONS':
            return '', 200

        method = request.method
        headers = dict(request.headers)
        data = request.json if request.is_json else None

        return jsonify({
            "status": "success",
            "method": method,
            "headers": headers,
            "data": data,
            "timestamp": datetime.now(timezone.utc).isoformat()
        })

    # üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô ENDPOINT –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ú–ê–†–®–†–£–¢–Ü–í
    @app.route('/debug/routes', methods=['GET'])
    def debug_routes():
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append({
                'endpoint': rule.endpoint,
                'methods': list(rule.methods - {'HEAD', 'OPTIONS'}),
                'rule': str(rule)
            })

        api_routes = [r for r in routes if r['rule'].startswith('/api/')]
        critical_routes = [r for r in api_routes if any(keyword in r['rule'] for keyword in [
            'auth/validate-telegram', 'user/profile', 'daily/status', 'flex/', 'tasks/'
        ])]

        return jsonify({
            "total_routes": len(routes),
            "api_routes_count": len(api_routes),
            "critical_routes_count": len(critical_routes),
            "critical_routes": critical_routes[:10],  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
            "all_api_routes": api_routes,
            "sample_routes": routes[:20]  # –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞
        })

    @app.route('/debug/quests-routes')
    def debug_quests_routes():
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ quests –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""
        try:
            routes_analysis = {
                "winix_available": WINIX_QUESTS_AVAILABLE,
                "diagnostics_available": QUESTS_DIAGNOSTICS_AVAILABLE,
                "total_routes": len(list(app.url_map.iter_rules())),
                "quests_routes": 0,
                "routes_by_prefix": {},
                "blueprint_conflicts": [],
                "critical_endpoints": {}
            }

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
            quests_prefixes = ['/api/auth/', '/api/user/', '/api/daily/', '/api/analytics/',
                              '/api/flex/', '/api/tasks/', '/api/transactions/', '/api/verify/', '/api/wallet/']

            for rule in app.url_map.iter_rules():
                rule_str = str(rule.rule)

                for prefix in quests_prefixes:
                    if prefix in rule_str:
                        routes_analysis["quests_routes"] += 1
                        prefix_name = prefix.replace('/api/', '').replace('/', '')

                        if prefix_name not in routes_analysis["routes_by_prefix"]:
                            routes_analysis["routes_by_prefix"][prefix_name] = 0
                        routes_analysis["routes_by_prefix"][prefix_name] += 1
                        break

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ endpoint'–∏
            critical_checks = {
                "auth_validate": any('/api/auth/validate-telegram' in str(rule.rule) for rule in app.url_map.iter_rules()),
                "user_profile": any('/api/user/profile/' in str(rule.rule) for rule in app.url_map.iter_rules()),
                "daily_status": any('/api/daily/status/' in str(rule.rule) for rule in app.url_map.iter_rules()),
                "winix_health": any('/api/winix/health' in str(rule.rule) for rule in app.url_map.iter_rules())
            }
            routes_analysis["critical_endpoints"] = critical_checks

            # –Ø–∫—â–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –¥–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            if QUESTS_DIAGNOSTICS_AVAILABLE and diagnose_quests_routes:
                detailed_diagnosis = diagnose_quests_routes(app)
                routes_analysis["detailed_diagnosis"] = detailed_diagnosis

            return jsonify(routes_analysis)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ debug quests routes: {str(e)}")
            return jsonify({
                "error": str(e),
                "winix_available": WINIX_QUESTS_AVAILABLE,
                "diagnostics_available": QUESTS_DIAGNOSTICS_AVAILABLE
            }), 500


# –†–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
def register_static_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    static_dirs = {
        'assets': os.path.join(BASE_DIR, 'frontend/assets'),
        'ChenelPNG': os.path.join(BASE_DIR, 'frontend/ChenelPNG'),
        'js': os.path.join(BASE_DIR, 'frontend/js'),
        'css': os.path.join(BASE_DIR, 'frontend/css')
    }

    # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    def serve_static_file(directory, filename):
        try:
            # –ü–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
            full_path = os.path.join(directory, filename)
            logger.info(f"–ó–∞–ø–∏—Ç –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {full_path}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
            if os.path.exists(full_path):
                logger.info(f"–§–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: {full_path}")

                # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è MIME —Ç–∏–ø—É –¥–ª—è JS —Ñ–∞–π–ª—ñ–≤
                mimetype = None
                if filename.endswith('.js'):
                    mimetype = 'application/javascript'

                return send_from_directory(directory, filename, mimetype=mimetype)
            else:
                logger.warning(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {directory}/{filename}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–∞–π–ª –∑ .js —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
                if not filename.endswith('.js') and os.path.exists(f"{full_path}.js"):
                    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª –∑ .js —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º: {full_path}.js")
                    return send_from_directory(directory, f"{filename}.js", mimetype='application/javascript')

                return jsonify({"error": f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {filename}"}), 404
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É {filename}: {str(e)}")
            return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞—á—ñ —Ñ–∞–π–ª—É: {filename}"}), 500

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    @app.route('/assets/<path:filename>')
    def serve_asset(filename):
        return serve_static_file(static_dirs['assets'], filename)

    @app.route('/ChenelPNG/<path:filename>')
    def serve_chenel_png(filename):
        return serve_static_file(static_dirs['ChenelPNG'], filename)

    # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è JS —Ñ–∞–π–ª—ñ–≤
    @app.route('/js/<path:filename>')
    def serve_js(filename):
        # –ù–∞–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–ø–∏—Ç –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        logger.info(f"JS —Ñ–∞–π–ª –∑–∞–ø–∏—Ç–∞–Ω–æ: {filename}")
        return serve_static_file(static_dirs['js'], filename)

    # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
    @app.route('/js/referrals/api/<path:filename>')
    def serve_referrals_api_js(filename):
        referrals_api_dir = os.path.join(static_dirs['js'], 'referrals/api')
        logger.info(f"–ó–∞–ø–∏—Ç JS API —Ñ–∞–π–ª—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏: {filename}")
        return serve_static_file(referrals_api_dir, filename)

    @app.route('/js/referrals/constants/<path:filename>')
    def serve_referrals_constants_js(filename):
        referrals_constants_dir = os.path.join(static_dirs['js'], 'referrals/constants')
        logger.info(f"–ó–∞–ø–∏—Ç JS –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏: {filename}")
        return serve_static_file(referrals_constants_dir, filename)

    @app.route('/js/referrals/utils/<path:filename>')
    def serve_referrals_utils_js(filename):
        referrals_utils_dir = os.path.join(static_dirs['js'], 'referrals/utils')
        logger.info(f"–ó–∞–ø–∏—Ç JS —É—Ç–∏–ª—ñ—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏: {filename}")
        return serve_static_file(referrals_utils_dir, filename)

    @app.route('/css/<path:filename>')
    def serve_css(filename):
        return serve_static_file(static_dirs['css'], filename)

    logger.info("–ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    @app.route('/api/auth/refresh-token', methods=['POST', 'OPTIONS'])
    def refresh_token_fallback():
        """–§–æ–ª–±–µ–∫ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è refresh token"""
        if request.method == 'OPTIONS':
            return '', 200

        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ quests auth —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            from quests.routes.auth_routes import refresh_token as quests_refresh
            return quests_refresh()
        except ImportError:
            # –Ø–∫—â–æ quests –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É –ª–æ–≥—ñ–∫—É
            try:
                from auth.controllers import refresh_user_token
                return refresh_user_token()
            except ImportError:
                logger.error("‚ùå –ñ–æ–¥–µ–Ω –æ–±—Ä–æ–±–Ω–∏–∫ refresh token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return jsonify({
                    'status': 'error',
                    'message': 'Refresh token endpoint not configured'
                }), 501

    @app.route('/telegram/webhook', methods=['POST', 'GET'])
    def telegram_webhook_fallback():
        """–§–æ–ª–±–µ–∫ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram webhook"""
        if request.method == 'POST':
            try:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
                from telegram_webhook import telegram_webhook as webhook_handler
                return webhook_handler()
            except ImportError:
                logger.warning("‚ö†Ô∏è Telegram webhook handler –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return jsonify({'ok': False, 'error': 'Webhook handler not found'}), 404
        else:
            # GET –∑–∞–ø–∏—Ç - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook
            return jsonify({
                'status': 'webhook endpoint',
                'method': 'POST required',
                'info': 'Send Telegram updates here'
            })

    @app.route('/api/auth/refresh-token', methods=['POST', 'OPTIONS'])
    def refresh_token_fallback():
        """–§–æ–ª–±–µ–∫ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è refresh token"""
        if request.method == 'OPTIONS':
            return '', 200

        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ quests auth —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            from quests.routes.auth_routes import refresh_token as quests_refresh
            return quests_refresh()
        except ImportError:
            # –Ø–∫—â–æ quests –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É –ª–æ–≥—ñ–∫—É
            try:
                from auth.controllers import refresh_user_token
                return refresh_user_token()
            except ImportError:
                logger.error("‚ùå –ñ–æ–¥–µ–Ω –æ–±—Ä–æ–±–Ω–∏–∫ refresh token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return jsonify({
                    'status': 'error',
                    'message': 'Refresh token endpoint not configured'
                }), 501

    @app.route('/telegram/webhook', methods=['POST', 'GET'])
    def telegram_webhook_fallback():
        """–§–æ–ª–±–µ–∫ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram webhook"""
        if request.method == 'POST':
            try:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
                from telegram_webhook import telegram_webhook as webhook_handler
                return webhook_handler()
            except ImportError:
                logger.warning("‚ö†Ô∏è Telegram webhook handler –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return jsonify({'ok': False, 'error': 'Webhook handler not found'}), 404
        else:
            # GET –∑–∞–ø–∏—Ç - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook
            return jsonify({
                'status': 'webhook endpoint',
                'method': 'POST required',
                'info': 'Send Telegram updates here'
            })


def register_page_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫"""

    # –û—Å–Ω–æ–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    @app.route('/')
    def index():
        return render_template('index.html')

    @app.route('/original-index')
    def original_index():
        try:
            return render_template('original-index.html')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É original-index.html: {str(e)}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
            return render_template('index.html')

    @app.route('/original-index.html')
    def original_index_html():
        try:
            return render_template('original-index.html')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É original-index.html: {str(e)}")
            return render_template('index.html')

    # –Ø–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    @app.route('/earn')
    def earn():
        return render_template('earn.html')

    @app.route('/wallet')
    def wallet():
        return render_template('wallet.html')

    @app.route('/referrals')
    def referrals():
        return render_template('referrals.html')

    @app.route('/profile')
    def profile():
        return render_template('profile.html')

    @app.route('/general')
    def general():
        return render_template('general.html')

    @app.route('/folder')
    def folder():
        return render_template('folder.html')

    @app.route('/staking')
    def staking():
        return render_template('staking.html')

    @app.route('/staking-details')
    def staking_details():
        return render_template('staking-details.html')

    @app.route('/transactions')
    def transactions():
        return render_template('transactions.html')

    @app.route('/send')
    def send():
        return render_template('send.html')

    @app.route('/receive')
    def receive():
        return render_template('receive.html')

    @app.route('/raffles')
    def raffles():
        try:
            return render_template('raffles.html')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É raffles.html: {str(e)}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            return """
            <!DOCTYPE html>
            <html>
            <head>
                <title>WINIX –†–æ–∑—ñ–≥—Ä–∞—à—ñ</title>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <link rel="stylesheet" href="/css/style.css">
            </head>
            <body>
                <h1>WINIX –†–æ–∑—ñ–≥—Ä–∞—à—ñ</h1>
                <p>–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...</p>
                <script src="/js/tasks-api.js"></script>
                <script src="/js/core.js"></script>
                <script src="/js/raffles/init.js"></script>
                <script src="/js/raffles/index.js"></script>
            </body>
            </html>
            """

    # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö HTML —Ñ–∞–π–ª—ñ–≤
    @app.route('/<path:filename>.html')
    def serve_html(filename):
        try:
            return render_template(f'{filename}.html')
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É {filename}.html: {str(e)}")
            return jsonify({"error": str(e), "type": "template_error", "filename": filename}), 500

    logger.info("–ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")


def setup_staking_routes(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
    try:
        # –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É
        from staking.controllers import (
            get_user_staking, create_user_staking, update_user_staking,
            cancel_user_staking, finalize_user_staking, get_user_staking_history,
            calculate_staking_reward_api, reset_and_repair_staking,
            repair_user_staking, deep_repair_user_staking
        )

        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä—è–º–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
        @app.route('/api/user/<telegram_id>/staking', methods=['GET'])
        def api_get_user_staking(telegram_id):
            """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
            return get_user_staking(telegram_id)

        @app.route('/api/user/<telegram_id>/staking', methods=['POST'])
        def api_create_user_staking(telegram_id):
            """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
            return create_user_staking(telegram_id)

        @app.route('/api/user/<telegram_id>/staking/<staking_id>', methods=['PUT'])
        def api_update_user_staking(telegram_id, staking_id):
            """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
            return update_user_staking(telegram_id, staking_id)

        @app.route('/api/user/<telegram_id>/staking/<staking_id>/cancel', methods=['POST'])
        def api_cancel_user_staking(telegram_id, staking_id):
            """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
            return cancel_user_staking(telegram_id, staking_id)

        @app.route('/api/user/<telegram_id>/staking/<staking_id>/finalize', methods=['POST'])
        def api_finalize_user_staking(telegram_id, staking_id):
            """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É —ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏"""
            return finalize_user_staking(telegram_id, staking_id)

        @app.route('/api/user/<telegram_id>/staking/history', methods=['GET'])
        def api_get_user_staking_history(telegram_id):
            """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å—Ç–µ–π–∫—ñ–Ω–≥—É"""
            return get_user_staking_history(telegram_id)

        @app.route('/api/user/<telegram_id>/staking/calculate-reward', methods=['GET'])
        def api_calculate_staking_reward(telegram_id):
            """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ —Å—Ç–µ–π–∫—ñ–Ω–≥"""
            return calculate_staking_reward_api()

        @app.route('/api/user/<telegram_id>/staking/repair', methods=['POST'])
        def api_repair_user_staking(telegram_id):
            """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–æ–∫"""
            return repair_user_staking(telegram_id)

        @app.route('/api/user/<telegram_id>/staking/reset-repair', methods=['POST'])
        def api_reset_and_repair_staking(telegram_id):
            """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É —á–µ—Ä–µ–∑ reset_and_repair_staking"""
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
                data = request.json or {}
                force = data.get('force', False)

                # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
                return reset_and_repair_staking(telegram_id, force)
            except Exception as e:
                logger.error(f"api_reset_and_repair_staking: –ü–æ–º–∏–ª–∫–∞: {str(e)}")
                return jsonify({"status": "error", "message": "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É"}), 500

        @app.route('/api/user/<telegram_id>/staking/deep-repair', methods=['POST'])
        def api_deep_repair_user_staking(telegram_id):
            """–ì–ª–∏–±–æ–∫–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö"""
            return deep_repair_user_staking(telegram_id)

        logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        logger.warning(f"–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - {str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å—Ç–µ–π–∫—ñ–Ω–≥—É: {str(e)}")


def register_tutorial_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Ç—É—Ç–æ—Ä—ñ–∞–ª—É"""
    try:
        # –Ü–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        from users.controllers import get_user_profile, update_user_balance

        try:
            from supabase_client import supabase
        except ImportError:
            supabase = None

        @app.route('/confirm', methods=['POST'])
        def confirm():
            """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—É—Ç–æ—Ä—ñ–∞–ª—É —ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∂–µ—Ç–æ–Ω—ñ–≤"""
            try:
                data = request.get_json()

                if not data or 'user_id' not in data:
                    return jsonify({"status": "error", "message": "Missing user_id"}), 400

                user_id = str(data['user_id'])
                logger.info(f"Processing confirm for user_id: {user_id}")

                # API –∑–∞–ø–∏—Ç –¥–æ /api/user/<telegram_id> –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                response, status_code = get_user_profile(user_id)

                if status_code != 200:
                    return response, status_code

                user_data = response.json.get('data', {})

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É 1
                if not user_data.get("page1_completed", False):
                    # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ 1 —Ç–æ–∫–µ–Ω
                    update_data = {"balance": user_data.get("balance", 0) + 1, "page1_completed": True}
                    update_response, update_status = update_user_balance(user_id, {"balance": update_data["balance"]})

                    if update_status != 200:
                        return update_response, update_status

                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                    if supabase:
                        supabase.table("winix").update({"page1_completed": True}).eq("telegram_id", user_id).execute()

                    return jsonify({"status": "success", "tokens": update_data["balance"]})
                else:
                    return jsonify({"status": "already_completed", "message": "–ñ–µ—Ç–æ–Ω —É–∂–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ"})
            except Exception as e:
                logger.error(f"Error in confirm endpoint: {str(e)}")
                return jsonify({"status": "error", "message": str(e)}), 500

        logger.info("–ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ç—É—Ç–æ—Ä—ñ–∞–ª—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        logger.warning(f"–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ —Ç—É—Ç–æ—Ä—ñ–∞–ª—É: –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - {str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ç—É—Ç–æ—Ä—ñ–∞–ª—É: {str(e)}")


def register_error_handlers(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫"""

    @app.errorhandler(404)
    def page_not_found(e):
        logger.error(f"404 error: {request.path}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ API –∑–∞–ø–∏—Ç
        is_api_request = request.path.startswith('/api/')

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        if is_api_request and ('/raffles' in request.path or '/raffle' in request.path):
            logger.error(f"API 404 –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {request.path}")

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            if request.path == '/api/raffles' or request.path.endswith('/raffles'):
                return jsonify({
                    "status": "success",
                    "data": [],
                    "message": "–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404 –ø–æ–º–∏–ª–∫–∞)"
                })

            # –î–ª—è —ñ–Ω—à–∏—Ö API —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
            return jsonify({
                "status": "error",
                "message": f"–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {request.path}",
                "code": "not_found"
            }), 404

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —à–ª—è—Ö—ñ–≤ API –∑ –º–æ–∂–ª–∏–≤–æ—é –ø–æ–º–∏–ª–∫–æ—é UUID
        if '/api/raffles/' in request.path:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —à–ª—è—Ö –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π UUID
            parts = request.path.split('/')
            for part in parts:
                if part and len(part) < 36 and not part.startswith('api'):
                    logger.error(f"–í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π UUID: {part}")
                    return jsonify({
                        "error": "invalid_raffle_id",
                        "message": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ä–æ–∑—ñ–≥—Ä–∞—à—É",
                        "details": "ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ UUID"
                    }), 400

        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö API –∑–∞–ø–∏—Ç—ñ–≤
        if is_api_request:
            return jsonify({
                "status": "error",
                "message": f"–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {request.path}"
            }), 404

        # –î–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        return jsonify({
            "error": "not_found",
            "message": f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {request.path}",
            "available_routes": [
                "/", "/index.html", "/original-index.html", "/earn.html", "/wallet.html",
                "/referrals.html", "/staking.html", "/transactions.html", "/raffles.html"
            ]
        }), 404

    @app.errorhandler(500)
    def server_error(e):
        error_details = str(e)
        logger.error(f"500 error: {error_details}")

        # –í —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ –≤–∫–ª—é—á–∞—î–º–æ —Ç—Ä–µ–π—Å –ø–æ–º–∏–ª–∫–∏
        if app.config.get('DEBUG', False):
            error_trace = traceback.format_exc()
            logger.error(f"Error trace: {error_trace}")

        return jsonify({
            "error": "server_error",
            "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": error_details if app.config.get('DEBUG', False) else None
        }), 500

    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")


def init_raffle_service():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ –≤—ñ–Ω –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
        auto_start = os.getenv("AUTO_START_RAFFLE_SERVICE", "false").lower() == "true"

        if auto_start:
            try:
                from raffles.raffle_service import start_raffle_service

                if start_raffle_service():
                    logger.info("–°–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                else:
                    logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤")
            except ImportError:
                logger.info("–ú–æ–¥—É–ª—å —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤: {str(e)}")


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
logger.info("üöÄ === –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –ó–ê–°–¢–û–°–£–ù–ö–£ ===")
app = create_app()

# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
init_raffle_service()

# –ó–∞–ø—É—Å–∫ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
if __name__ == '__main__':
    # –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None
    if app is None:
        logger.critical("‚ùå –î–æ–¥–∞—Ç–æ–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        exit(1)

    # –û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ WINIX –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if WINIX_QUESTS_AVAILABLE:
        logger.info("üöÄ WINIX Quests System –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó!")
        logger.info(f"üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {initialization_result}")
    else:
        logger.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –±–µ–∑ WINIX Quests System - –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –±–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å")

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—Ç—É
    port = int(os.environ.get('PORT', 8080))

    # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DEBUG
    debug = False


    logger.info(f"üåü –ó–∞–ø—É—Å–∫ WINIX –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –Ω–∞ –ø–æ—Ä—Ç—É {port}, —Ä–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è: {debug}")
    logger.info("üéØ === –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–Ü ENDPOINT'–ò ===")
    logger.info("üìã /api/winix/diagnosis - –ø–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WINIX")
    logger.info("üîç /api/winix/health - —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤'—è WINIX")
    logger.info("üìä /api/winix/info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ WINIX")
    logger.info("üß™ /api/winix/test - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç WINIX")
    logger.info("üß™ /api/winix/routes-diagnosis - –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ quests –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
    logger.info("üîç /debug/routes - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
    logger.info("üîç /debug/quests-routes - –∞–Ω–∞–ª—ñ–∑ quests –º–∞—Ä—à—Ä—É—Ç—ñ–≤")

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=port, debug=debug)