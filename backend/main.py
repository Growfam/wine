"""
–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª Flask –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ WINIX
–í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è –ë–ï–ó fallback –ø–ª—É—Ç–∞–Ω–∏–Ω–∏ —Ç–∞ –∑ –ø—Ä–æ—Å—Ç–æ—é —Å—Ç–∞–±—ñ–ª—å–Ω–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
"""

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import os
import sys
import logging
import time
from datetime import datetime, timezone

# –°—Ç–æ—Ä–æ–Ω–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
from flask import Flask, render_template, request, jsonify, g
from flask_cors import CORS
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ —à–ª—è—Ö—É Python
app_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(app_dir)
sys.path.insert(0, root_dir)
sys.path.insert(0, app_dir)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∑–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É
BACKEND_DIR = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(BACKEND_DIR)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –∑–∞–ø—É—Å–∫—É –¥–ª—è uptime
start_time = time.time()


def setup_cors(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Telegram WebApp"""

    # –î–æ–∑–≤–æ–ª–µ–Ω—ñ origins –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
    allowed_origins = [
        "https://web.telegram.org",  # Telegram WebApp
        "https://winixbot.com",
        "https://www.winixbot.com",
        "https://localhost:*",
        "http://localhost:*"
    ]

    # –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –¥–æ–¥–∞—î–º–æ wildcard
    if os.environ.get('FLASK_ENV') == 'development':
        allowed_origins.append("*")

    CORS(app,
         resources={r"/api/*": {"origins": allowed_origins}},
         supports_credentials=True,
         expose_headers=["Content-Type", "X-CSRFToken", "Authorization"],
         allow_headers=[
             "Content-Type",
             "X-Requested-With",
             "Authorization",
             "X-Telegram-User-Id",
             "Accept",
             "Origin",
             "Cache-Control",
             "X-Telegram-Bot-Api-Secret-Token",
             "X-Telegram-Init-Data"
         ])

    logger.info("‚úÖ CORS –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Telegram WebApp")


def setup_request_handlers(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""

    @app.before_request
    def log_request_info():
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É
        g.start_time = time.time()

        # –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ –∑–∞–ø–∏—Ç–∏
        if request.path.startswith('/api/'):
            logger.info(f"üì® API –∑–∞–ø–∏—Ç: {request.method} {request.path}")

    @app.after_request
    def log_response_info(response):
        # –õ–æ–≥—É—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è API
        if hasattr(g, 'start_time') and request.path.startswith('/api/'):
            execution_time = time.time() - g.start_time
            if execution_time > 1.0:  # –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏
                logger.warning(f"üì§ –ü–æ–≤—ñ–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç: {response.status_code} {request.path} (—á–∞—Å: {execution_time:.4f}s)")
        return response


def add_health_check(app):
    """–î–æ–¥–∞—î endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É API —Ç–∞ Railway health check"""

    @app.route('/health', methods=['GET', 'HEAD'])
    def railway_health_check():
        """Health check –¥–ª—è Railway (–∫–æ—Ä–Ω–µ–≤–∏–π /health)"""
        return "OK", 200

    @app.route('/healthz', methods=['GET', 'HEAD'])
    def kubernetes_health_check():
        """Health check –¥–ª—è Kubernetes"""
        return "OK", 200

    @app.route('/', methods=['GET'])
    def root_health_check():
        """Health check –¥–ª—è –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ —à–ª—è—Ö—É"""
        try:
            return jsonify({
                "status": "ok",
                "service": "WINIX API",
                "version": "2.0.0",
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "uptime": int(time.time() - start_time)
            }), 200
        except Exception:
            return "OK", 200

    @app.route('/api/health', methods=['GET'])
    def api_health_check():
        """Health check –¥–ª—è API"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase
            try:
                from supabase_client import supabase
                # –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
                response = supabase.table("winix").select("telegram_id").limit(1).execute()
                db_status = "ok" if response else "error"
            except Exception as e:
                logger.warning(f"DB health check failed: {e}")
                db_status = "error"

            health_data = {
                "status": "ok",
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "service": "WINIX API",
                "version": "2.0.0",
                "uptime": int(time.time() - start_time),
                "components": {
                    "database": db_status,
                    "api": "ok"
                }
            }
            return jsonify(health_data), 200
        except Exception as e:
            logger.error(f"Health check error: {e}")
            return jsonify({
                "status": "error",
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "service": "WINIX API",
                "error": str(e)
            }), 500

    @app.route('/api/ping', methods=['GET'])
    def api_ping():
        """–ü—Ä–æ—Å—Ç–∏–π ping endpoint"""
        return jsonify({
            "status": "pong",
            "timestamp": int(time.time()),
            "server_time": datetime.now(timezone.utc).isoformat()
        }), 200

    @app.route('/ping', methods=['GET'])
    def ultra_simple_ping():
        """–£–ª—å—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–∏–π ping –±–µ–∑ JSON"""
        return "pong", 200

    @app.route('/status', methods=['GET'])
    def status_check():
        """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        return "RUNNING", 200


def register_core_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"""

    logger.info("üõ£Ô∏è === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–°–ù–û–í–ù–ò–• –ú–ê–†–®–†–£–¢–Ü–í ===")

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —É—Å–ø—ñ—à–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    registered_successfully = []
    registration_errors = []

    # 1. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–û–ë–û–í'–Ø–ó–ö–û–í–û)
    try:
        from auth.routes import register_auth_routes
        register_auth_routes(app)
        registered_successfully.append("Auth")
        logger.info("‚úÖ Auth routes –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        registration_errors.append(f"Auth: {e}")
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ auth routes: {e}")
        # –¶–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - –±–µ–∑ auth —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–∞—Ü—é—î
        raise

    # 2. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–û–ë–û–í'–Ø–ó–ö–û–í–û)
    try:
        from users.routes import register_user_routes
        register_user_routes(app)
        registered_successfully.append("Users")
        logger.info("‚úÖ Users routes –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        registration_errors.append(f"Users: {e}")
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ users routes: {e}")
        # –¶–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - –±–µ–∑ users —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–∞—Ü—é—î
        raise

    # 3. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –≥–∞–º–∞–Ω—Ü—è
    try:
        from wallet.routes import register_wallet_routes
        register_wallet_routes(app)
        registered_successfully.append("Wallet")
    except Exception as e:
        registration_errors.append(f"Wallet: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ wallet routes: {e}")

    # 4. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    try:
        from transactions.routes import register_transactions_routes
        register_transactions_routes(app)
        registered_successfully.append("Transactions")
    except Exception as e:
        registration_errors.append(f"Transactions: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ transactions routes: {e}")

    # 5. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
    try:
        from referrals.routes import referrals_bp
        app.register_blueprint(referrals_bp, url_prefix='/api/referrals')
        registered_successfully.append("Referrals")
    except Exception as e:
        registration_errors.append(f"Referrals: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ referrals routes: {e}")

    # 6. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –±–µ–π–¥–∂—ñ–≤ —Ç–∞ –∑–∞–≤–¥–∞–Ω—å
    try:
        from badges.routes import badges_bp
        app.register_blueprint(badges_bp, url_prefix='/api')
        registered_successfully.append("Badges")
    except Exception as e:
        registration_errors.append(f"Badges: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ badges routes: {e}")

    # 7. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
    try:
        from raffles.routes import register_raffles_routes
        if register_raffles_routes(app):
            registered_successfully.append("Raffles")
        else:
            registration_errors.append("Raffles: returned False")
    except Exception as e:
        registration_errors.append(f"Raffles: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ raffles routes: {e}")

    # 8. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        from admin.routes import register_admin_routes
        register_admin_routes(app)
        registered_successfully.append("Admin")
    except Exception as e:
        registration_errors.append(f"Admin: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ admin routes: {e}")

    # 9. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    try:
        from stats.routes import register_stats_routes
        register_stats_routes(app)
        registered_successfully.append("Stats")
    except Exception as e:
        registration_errors.append(f"Stats: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ stats routes: {e}")

    # 10. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Telegram webhook
    try:
        from telegram_webhook import register_telegram_routes
        register_telegram_routes(app)
        registered_successfully.append("Telegram Webhook")
    except Exception as e:
        registration_errors.append(f"Telegram Webhook: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ telegram webhook routes: {e}")

    # 11. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Telegram API
    try:
        from telegram_api import register_telegram_api_routes
        register_telegram_api_routes(app)
        registered_successfully.append("Telegram API")
    except Exception as e:
        registration_errors.append(f"Telegram API: {e}")
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ telegram api routes: {e}")

    # üìä –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
    logger.info("üìä === –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –ú–ê–†–®–†–£–¢–Ü–í ===")
    logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ ({len(registered_successfully)}):")
    for system in registered_successfully:
        logger.info(f"   üü¢ {system}")

    if registration_errors:
        logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ({len(registration_errors)}):")
        for error in registration_errors:
            logger.warning(f"   üî¥ {error}")

    # –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    total_routes = len(list(app.url_map.iter_rules()))
    api_routes = len([r for r in app.url_map.iter_rules() if r.rule.startswith('/api/')])

    logger.info(f"üìã –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç—ñ–≤:")
    logger.info(f"   üìç –í—Å—å–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {total_routes}")
    logger.info(f"   üîó API –º–∞—Ä—à—Ä—É—Ç—ñ–≤: {api_routes}")
    logger.info(f"   üéØ –°–∏—Å—Ç–µ–º–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {len(registered_successfully)}")

    # –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if api_routes == 0:
        logger.error("üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–Ü –û–î–ù–û–ì–û API –ú–ê–†–®–†–£–¢–£ –ù–ï –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û!")
        raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ API –º–∞—Ä—à—Ä—É—Ç–∏")

    if len(registered_successfully) < 2:  # –ü—Ä–∏–Ω–∞–π–º–Ω—ñ Auth + Users
        logger.error("üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–ï –ó–ê–†–ï–Ñ–°–¢–†–û–í–ê–ù–û –ö–†–ò–¢–ò–ß–ù–Ü –°–ò–°–¢–ï–ú–ò!")
        raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–∏—Å—Ç–µ–º–∏")

    logger.info("üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    return True


def register_utility_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏—Ö —Ç–∞ —É—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤"""

    @app.route('/debug')
    def debug():
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase
        try:
            from supabase_client import test_supabase_connection
            supabase_test = test_supabase_connection()
        except ImportError:
            supabase_test = {"status": "error", "message": "–§—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append({
                "endpoint": rule.endpoint,
                "methods": list(rule.methods),
                "path": str(rule)
            })

        return jsonify({
            "status": "running",
            "environment": {
                "base_dir": BASE_DIR,
                "current_dir": os.getcwd(),
                "template_folder": app.template_folder,
                "static_folder": app.static_folder,
                "supabase_test": supabase_test
            },
            "routes": routes[:20]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 20 –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        })


def register_error_handlers(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫"""

    @app.errorhandler(404)
    def page_not_found(e):
        logger.error(f"404 error: {request.path}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ API –∑–∞–ø–∏—Ç
        is_api_request = request.path.startswith('/api/')

        if is_api_request:
            # –î–ª—è API –∑–∞–ø–∏—Ç—ñ–≤ - JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return jsonify({
                "status": "error",
                "message": f"–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {request.path}",
                "code": "not_found"
            }), 404

        # –î–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        return jsonify({
            "error": "not_found",
            "message": f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {request.path}",
            "available_routes": [
                "/", "/index.html", "/api/health", "/api/ping"
            ]
        }), 404

    @app.errorhandler(500)
    def server_error(e):
        error_details = str(e)
        logger.error(f"500 error: {error_details}")

        return jsonify({
            "error": "server_error",
            "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "timestamp": datetime.now(timezone.utc).isoformat()
        }), 500

    @app.errorhandler(400)
    def bad_request(e):
        return jsonify({
            "status": "error",
            "message": "–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç",
            "code": "bad_request"
        }), 400

    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")


def register_static_routes(app):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""

    # –ö–æ—Ä–µ–Ω–µ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –≤–∂–µ –¥–æ–¥–∞–Ω–æ –≤ add_health_check
    # –¢—É—Ç –¥–æ–¥–∞—î–º–æ —ñ–Ω—à—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏

    @app.route('/favicon.ico')
    def favicon():
        """Favicon"""
        try:
            return app.send_static_file('favicon.ico')
        except Exception:
            return '', 204

    @app.route('/robots.txt')
    def robots_txt():
        """Robots.txt"""
        return '''User-agent: *
Disallow: /api/
Allow: /''', 200, {'Content-Type': 'text/plain'}

    # –°—Ç–∞—Ç–∏—á–Ω—ñ HTML —Ñ–∞–π–ª–∏
    static_pages = ['index.html', 'earn.html', 'wallet.html', 'referrals.html',
                   'staking.html', 'transactions.html', 'raffles.html']

    for page in static_pages:
        @app.route(f'/{page}')
        def serve_static_page(page=page):
            try:
                return render_template(page)
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {page}: {e}")
                return jsonify({
                    "message": f"WINIX - {page} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    "service": "WINIX Backend API",
                    "version": "2.0.0"
                }), 404


def create_app():
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Flask"""

    logger.info("üè≠ === –°–¢–í–û–†–ï–ù–ù–Ø FLASK –ó–ê–°–¢–û–°–£–ù–ö–£ ===")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    try:
        from settings.config import get_config
        config = get_config()
        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {type(config)}")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ config: {e}")
        config = None

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask –∑ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —à–ª—è—Ö–∞–º–∏
    app = Flask(
        __name__,
        template_folder=os.path.join(BASE_DIR, 'frontend'),
        static_folder=os.path.join(BASE_DIR, 'frontend'),
        static_url_path=''
    )
    logger.info("‚úÖ Flask –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    try:
        if config:
            app.config.from_object(config)
            app.secret_key = config.SECRET_KEY
            logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        else:
            raise Exception("Config is None")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")
        # –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        app.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
        app.config['DEBUG'] = os.environ.get('FLASK_ENV') == 'development'

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///winix.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ CORS
    setup_cors(app)

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤
    setup_request_handlers(app)

    # –î–æ–¥–∞—î–º–æ health check endpoint
    add_health_check(app)

    # üéØ –†–ï–Ñ–°–¢–†–£–Ñ–ú–û –û–°–ù–û–í–ù–Ü –ú–ê–†–®–†–£–¢–ò
    register_core_routes(app)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    register_utility_routes(app)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    register_static_routes(app)

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
    register_error_handlers(app)

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ OPTIONS –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è CORS preflight
    @app.route('/', defaults={'path': ''}, methods=['OPTIONS'])
    @app.route('/<path:path>', methods=['OPTIONS'])
    def handle_options(path):
        response = app.make_default_options_response()
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Telegram-User-Id, Origin, Accept'
        response.headers['Access-Control-Max-Age'] = '86400'
        return response

    # –î–æ–¥–∞—î–º–æ after_request –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è JS —Ñ–∞–π–ª—ñ–≤ —ñ CORS –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    @app.after_request
    def add_headers(response):
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MIME —Ç–∏–ø—É –¥–ª—è JS —Ñ–∞–π–ª—ñ–≤
        if request.path.endswith('.js'):
            response.headers['Content-Type'] = 'application/javascript'

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ CORS –¥–ª—è –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        origin = request.headers.get('Origin')
        if origin:
            # –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ –∑ Telegram WebApp —Ç–∞ —ñ–Ω—à–∏—Ö –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            allowed_origins = [
                'https://web.telegram.org',
                'https://winixbot.com',
                'https://www.winixbot.com'
            ]

            if any(origin.startswith(allowed) for allowed in allowed_origins) or 'localhost' in origin:
                response.headers['Access-Control-Allow-Origin'] = origin
            else:
                response.headers['Access-Control-Allow-Origin'] = '*'
        else:
            response.headers['Access-Control-Allow-Origin'] = '*'

        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Telegram-User-Id, X-Telegram-Init-Data'
        response.headers['Access-Control-Allow-Credentials'] = 'true'
        response.headers['Access-Control-Max-Age'] = '86400'

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –±–µ–∑–ø–µ–∫–∏
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-XSS-Protection'] = '1; mode=block'

        # CSP –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è HTML —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        if not request.path.startswith('/api/'):
            response.headers['Content-Security-Policy'] = (
                "default-src 'self' 'unsafe-inline' 'unsafe-eval' *; "
                "img-src 'self' data: https: http: *; "
                "style-src 'self' 'unsafe-inline' *; "
                "script-src 'self' 'unsafe-inline' 'unsafe-eval' *; "
                "frame-ancestors 'self' https://web.telegram.org https://telegram.org *; "
                "connect-src 'self' https: wss: *"
            )

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
        if request.path.startswith('/api/'):
            # –î–ª—è API –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–µ—à—É–≤–∞–Ω–Ω—è
            response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
            response.headers['Pragma'] = 'no-cache'
            response.headers['Expires'] = '0'
        else:
            # –î–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∫–µ—à—É–≤–∞–Ω–Ω—è
            response.headers['Cache-Control'] = 'public, max-age=3600'

        return response

    logger.info("üèÅ Flask –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏–π")
    return app


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
logger.info("üöÄ === –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á –ó–ê–°–¢–û–°–£–ù–ö–£ ===")
app = create_app()

# –ó–∞–ø—É—Å–∫ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
if __name__ == '__main__':
    # –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None
    if app is None:
        logger.critical("‚ùå –î–æ–¥–∞—Ç–æ–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        exit(1)

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—Ç—É –¥–ª—è Railway
    port = int(os.environ.get('PORT', 8080))
    host = os.environ.get('HOST', '0.0.0.0')

    # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DEBUG
    debug = getattr(app.config, 'DEBUG', False) if hasattr(app, 'config') else False

    # –î–ª—è Railway –≤–∏–º–∫–Ω–µ–º–æ debug –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
    if os.environ.get('RAILWAY_ENVIRONMENT'):
        debug = False
        logger.info("üöÇ Railway environment detected, debug mode disabled")

    logger.info(f"üåü –ó–∞–ø—É—Å–∫ WINIX –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –Ω–∞ {host}:{port}, —Ä–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è: {debug}")
    logger.info("üéØ === –û–°–ù–û–í–ù–Ü ENDPOINT'–ò ===")
    logger.info("üìã /health - Railway health check")
    logger.info("üìã /api/health - –¥–µ—Ç–∞–ª—å–Ω–∏–π health check")
    logger.info("üîç /api/ping - –ø—Ä–æ—Å—Ç–∏–π ping")
    logger.info("üîê /api/auth - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    logger.info("üë§ /api/user/<id> - –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    logger.info("üîç /debug - –∑–∞–≥–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏")

    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
        app.run(host=host, port=port, debug=debug, threaded=True)
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        exit(1)